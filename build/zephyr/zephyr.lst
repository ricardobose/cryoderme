
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 27 00 20 01 55 00 08 17 c0 00 08 d5 54 00 08     .'. .U.......T..
 8000010:	d5 54 00 08 d5 54 00 08 d5 54 00 08 00 00 00 00     .T...T...T......
	...
 800002c:	6d 4d 00 08 d5 54 00 08 00 00 00 00 19 4d 00 08     mM...T.......M..
 800003c:	65 71 00 08                                         eq..

08000040 <_irq_vector_table>:
 8000040:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000050:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000060:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000070:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000080:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000090:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 80000a0:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 80000b0:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 80000c0:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 80000d0:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 80000e0:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 80000f0:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000100:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000110:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000120:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000130:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000140:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000150:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000160:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000170:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000180:	1d 4e 00 08 1d 4e 00 08 1d 4e 00 08 1d 4e 00 08     .N...N...N...N..
 8000190:	1d 4e 00 08                                         .N..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__gesf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpsf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__lesf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpsf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpsf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa6:	d011      	beq.n	8000acc <__cmpsf2+0x40>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000aae:	bf18      	it	ne
 8000ab0:	ea90 0f01 	teqne	r0, r1
 8000ab4:	bf58      	it	pl
 8000ab6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000aba:	bf88      	it	hi
 8000abc:	17c8      	asrhi	r0, r1, #31
 8000abe:	bf38      	it	cc
 8000ac0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ac4:	bf18      	it	ne
 8000ac6:	f040 0001 	orrne.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ad0:	d102      	bne.n	8000ad8 <__cmpsf2+0x4c>
 8000ad2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ad6:	d105      	bne.n	8000ae4 <__cmpsf2+0x58>
 8000ad8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000adc:	d1e4      	bne.n	8000aa8 <__cmpsf2+0x1c>
 8000ade:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ae2:	d0e1      	beq.n	8000aa8 <__cmpsf2+0x1c>
 8000ae4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_cfrcmple>:
 8000aec:	4684      	mov	ip, r0
 8000aee:	4608      	mov	r0, r1
 8000af0:	4661      	mov	r1, ip
 8000af2:	e7ff      	b.n	8000af4 <__aeabi_cfcmpeq>

08000af4 <__aeabi_cfcmpeq>:
 8000af4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000af6:	f7ff ffc9 	bl	8000a8c <__cmpsf2>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	bf48      	it	mi
 8000afe:	f110 0f00 	cmnmi.w	r0, #0
 8000b02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b04 <__aeabi_fcmpeq>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff fff4 	bl	8000af4 <__aeabi_cfcmpeq>
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2001      	moveq	r0, #1
 8000b10:	2000      	movne	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_fcmplt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffea 	bl	8000af4 <__aeabi_cfcmpeq>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fcmple>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffe0 	bl	8000af4 <__aeabi_cfcmpeq>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_fcmpge>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffd2 	bl	8000aec <__aeabi_cfrcmple>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_fcmpgt>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffc8 	bl	8000aec <__aeabi_cfrcmple>
 8000b5c:	bf34      	ite	cc
 8000b5e:	2001      	movcc	r0, #1
 8000b60:	2000      	movcs	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b80c 	b.w	8000b98 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f8ce 	bl	8000d28 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_idiv0>:
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__gedf2>:
 8000b9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000ba0:	e006      	b.n	8000bb0 <__cmpdf2+0x4>
 8000ba2:	bf00      	nop

08000ba4 <__ledf2>:
 8000ba4:	f04f 0c01 	mov.w	ip, #1
 8000ba8:	e002      	b.n	8000bb0 <__cmpdf2+0x4>
 8000baa:	bf00      	nop

08000bac <__cmpdf2>:
 8000bac:	f04f 0c01 	mov.w	ip, #1
 8000bb0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc0:	bf18      	it	ne
 8000bc2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000bc6:	d01b      	beq.n	8000c00 <__cmpdf2+0x54>
 8000bc8:	b001      	add	sp, #4
 8000bca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000bce:	bf0c      	ite	eq
 8000bd0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000bd4:	ea91 0f03 	teqne	r1, r3
 8000bd8:	bf02      	ittt	eq
 8000bda:	ea90 0f02 	teqeq	r0, r2
 8000bde:	2000      	moveq	r0, #0
 8000be0:	4770      	bxeq	lr
 8000be2:	f110 0f00 	cmn.w	r0, #0
 8000be6:	ea91 0f03 	teq	r1, r3
 8000bea:	bf58      	it	pl
 8000bec:	4299      	cmppl	r1, r3
 8000bee:	bf08      	it	eq
 8000bf0:	4290      	cmpeq	r0, r2
 8000bf2:	bf2c      	ite	cs
 8000bf4:	17d8      	asrcs	r0, r3, #31
 8000bf6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bfa:	f040 0001 	orr.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c08:	d102      	bne.n	8000c10 <__cmpdf2+0x64>
 8000c0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c0e:	d107      	bne.n	8000c20 <__cmpdf2+0x74>
 8000c10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c18:	d1d6      	bne.n	8000bc8 <__cmpdf2+0x1c>
 8000c1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c1e:	d0d3      	beq.n	8000bc8 <__cmpdf2+0x1c>
 8000c20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_cdrcmple>:
 8000c28:	4684      	mov	ip, r0
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	4662      	mov	r2, ip
 8000c2e:	468c      	mov	ip, r1
 8000c30:	4619      	mov	r1, r3
 8000c32:	4663      	mov	r3, ip
 8000c34:	e000      	b.n	8000c38 <__aeabi_cdcmpeq>
 8000c36:	bf00      	nop

08000c38 <__aeabi_cdcmpeq>:
 8000c38:	b501      	push	{r0, lr}
 8000c3a:	f7ff ffb7 	bl	8000bac <__cmpdf2>
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	bf48      	it	mi
 8000c42:	f110 0f00 	cmnmi.w	r0, #0
 8000c46:	bd01      	pop	{r0, pc}

08000c48 <__aeabi_dcmpeq>:
 8000c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c4c:	f7ff fff4 	bl	8000c38 <__aeabi_cdcmpeq>
 8000c50:	bf0c      	ite	eq
 8000c52:	2001      	moveq	r0, #1
 8000c54:	2000      	movne	r0, #0
 8000c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5a:	bf00      	nop

08000c5c <__aeabi_dcmplt>:
 8000c5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c60:	f7ff ffea 	bl	8000c38 <__aeabi_cdcmpeq>
 8000c64:	bf34      	ite	cc
 8000c66:	2001      	movcc	r0, #1
 8000c68:	2000      	movcs	r0, #0
 8000c6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c6e:	bf00      	nop

08000c70 <__aeabi_dcmple>:
 8000c70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c74:	f7ff ffe0 	bl	8000c38 <__aeabi_cdcmpeq>
 8000c78:	bf94      	ite	ls
 8000c7a:	2001      	movls	r0, #1
 8000c7c:	2000      	movhi	r0, #0
 8000c7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c82:	bf00      	nop

08000c84 <__aeabi_dcmpge>:
 8000c84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c88:	f7ff ffce 	bl	8000c28 <__aeabi_cdrcmple>
 8000c8c:	bf94      	ite	ls
 8000c8e:	2001      	movls	r0, #1
 8000c90:	2000      	movhi	r0, #0
 8000c92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c96:	bf00      	nop

08000c98 <__aeabi_dcmpgt>:
 8000c98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c9c:	f7ff ffc4 	bl	8000c28 <__aeabi_cdrcmple>
 8000ca0:	bf34      	ite	cc
 8000ca2:	2001      	movcc	r0, #1
 8000ca4:	2000      	movcs	r0, #0
 8000ca6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000caa:	bf00      	nop

08000cac <__aeabi_dcmpun>:
 8000cac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cb4:	d102      	bne.n	8000cbc <__aeabi_dcmpun+0x10>
 8000cb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cba:	d10a      	bne.n	8000cd2 <__aeabi_dcmpun+0x26>
 8000cbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cc4:	d102      	bne.n	8000ccc <__aeabi_dcmpun+0x20>
 8000cc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cca:	d102      	bne.n	8000cd2 <__aeabi_dcmpun+0x26>
 8000ccc:	f04f 0000 	mov.w	r0, #0
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0001 	mov.w	r0, #1
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2iz>:
 8000cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ce0:	d215      	bcs.n	8000d0e <__aeabi_d2iz+0x36>
 8000ce2:	d511      	bpl.n	8000d08 <__aeabi_d2iz+0x30>
 8000ce4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ce8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cec:	d912      	bls.n	8000d14 <__aeabi_d2iz+0x3c>
 8000cee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	4770      	bx	lr
 8000d08:	f04f 0000 	mov.w	r0, #0
 8000d0c:	4770      	bx	lr
 8000d0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d12:	d105      	bne.n	8000d20 <__aeabi_d2iz+0x48>
 8000d14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000d18:	bf08      	it	eq
 8000d1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d1e:	4770      	bx	lr
 8000d20:	f04f 0000 	mov.w	r0, #0
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	4686      	mov	lr, r0
 8000d2e:	468c      	mov	ip, r1
 8000d30:	4608      	mov	r0, r1
 8000d32:	9e08      	ldr	r6, [sp, #32]
 8000d34:	4615      	mov	r5, r2
 8000d36:	4674      	mov	r4, lr
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 80c2 	bne.w	8000ec4 <__udivmoddi4+0x19c>
 8000d40:	4285      	cmp	r5, r0
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	d945      	bls.n	8000dd4 <__udivmoddi4+0xac>
 8000d48:	b14a      	cbz	r2, 8000d5e <__udivmoddi4+0x36>
 8000d4a:	f1c2 0320 	rsb	r3, r2, #32
 8000d4e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d52:	fa2e f303 	lsr.w	r3, lr, r3
 8000d56:	4095      	lsls	r5, r2
 8000d58:	ea43 0c0c 	orr.w	ip, r3, ip
 8000d5c:	4094      	lsls	r4, r2
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	b2a8      	uxth	r0, r5
 8000d64:	fbbc f8fe 	udiv	r8, ip, lr
 8000d68:	0c23      	lsrs	r3, r4, #16
 8000d6a:	fb0e cc18 	mls	ip, lr, r8, ip
 8000d6e:	fb08 f900 	mul.w	r9, r8, r0
 8000d72:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8000d76:	4599      	cmp	r9, r3
 8000d78:	d928      	bls.n	8000dcc <__udivmoddi4+0xa4>
 8000d7a:	18eb      	adds	r3, r5, r3
 8000d7c:	f108 37ff 	add.w	r7, r8, #4294967295
 8000d80:	d204      	bcs.n	8000d8c <__udivmoddi4+0x64>
 8000d82:	4599      	cmp	r9, r3
 8000d84:	d902      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d86:	f1a8 0702 	sub.w	r7, r8, #2
 8000d8a:	442b      	add	r3, r5
 8000d8c:	eba3 0309 	sub.w	r3, r3, r9
 8000d90:	b2a4      	uxth	r4, r4
 8000d92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d96:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d9a:	fb0c f000 	mul.w	r0, ip, r0
 8000d9e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da2:	42a0      	cmp	r0, r4
 8000da4:	d914      	bls.n	8000dd0 <__udivmoddi4+0xa8>
 8000da6:	192c      	adds	r4, r5, r4
 8000da8:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000dac:	d204      	bcs.n	8000db8 <__udivmoddi4+0x90>
 8000dae:	42a0      	cmp	r0, r4
 8000db0:	d902      	bls.n	8000db8 <__udivmoddi4+0x90>
 8000db2:	f1ac 0302 	sub.w	r3, ip, #2
 8000db6:	442c      	add	r4, r5
 8000db8:	1a24      	subs	r4, r4, r0
 8000dba:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8000dbe:	b11e      	cbz	r6, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	6034      	str	r4, [r6, #0]
 8000dc6:	6073      	str	r3, [r6, #4]
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	4647      	mov	r7, r8
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0x64>
 8000dd0:	4663      	mov	r3, ip
 8000dd2:	e7f1      	b.n	8000db8 <__udivmoddi4+0x90>
 8000dd4:	bb92      	cbnz	r2, 8000e3c <__udivmoddi4+0x114>
 8000dd6:	1b43      	subs	r3, r0, r5
 8000dd8:	2101      	movs	r1, #1
 8000dda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dde:	b2af      	uxth	r7, r5
 8000de0:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de4:	0c20      	lsrs	r0, r4, #16
 8000de6:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dea:	fb0c f807 	mul.w	r8, ip, r7
 8000dee:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df2:	4598      	cmp	r8, r3
 8000df4:	d962      	bls.n	8000ebc <__udivmoddi4+0x194>
 8000df6:	18eb      	adds	r3, r5, r3
 8000df8:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfc:	d204      	bcs.n	8000e08 <__udivmoddi4+0xe0>
 8000dfe:	4598      	cmp	r8, r3
 8000e00:	d902      	bls.n	8000e08 <__udivmoddi4+0xe0>
 8000e02:	f1ac 0002 	sub.w	r0, ip, #2
 8000e06:	442b      	add	r3, r5
 8000e08:	eba3 0308 	sub.w	r3, r3, r8
 8000e0c:	b2a4      	uxth	r4, r4
 8000e0e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e12:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e16:	fb0c f707 	mul.w	r7, ip, r7
 8000e1a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1e:	42a7      	cmp	r7, r4
 8000e20:	d94e      	bls.n	8000ec0 <__udivmoddi4+0x198>
 8000e22:	192c      	adds	r4, r5, r4
 8000e24:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000e28:	d204      	bcs.n	8000e34 <__udivmoddi4+0x10c>
 8000e2a:	42a7      	cmp	r7, r4
 8000e2c:	d902      	bls.n	8000e34 <__udivmoddi4+0x10c>
 8000e2e:	f1ac 0302 	sub.w	r3, ip, #2
 8000e32:	442c      	add	r4, r5
 8000e34:	1be4      	subs	r4, r4, r7
 8000e36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e3a:	e7c0      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	4095      	lsls	r5, r2
 8000e46:	4090      	lsls	r0, r2
 8000e48:	fa2e f303 	lsr.w	r3, lr, r3
 8000e4c:	4303      	orrs	r3, r0
 8000e4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e52:	b2af      	uxth	r7, r5
 8000e54:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e58:	fb0e 101c 	mls	r0, lr, ip, r1
 8000e5c:	0c19      	lsrs	r1, r3, #16
 8000e5e:	fb0c f807 	mul.w	r8, ip, r7
 8000e62:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e66:	4588      	cmp	r8, r1
 8000e68:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6c:	d922      	bls.n	8000eb4 <__udivmoddi4+0x18c>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e74:	d204      	bcs.n	8000e80 <__udivmoddi4+0x158>
 8000e76:	4588      	cmp	r8, r1
 8000e78:	d902      	bls.n	8000e80 <__udivmoddi4+0x158>
 8000e7a:	f1ac 0002 	sub.w	r0, ip, #2
 8000e7e:	4429      	add	r1, r5
 8000e80:	eba1 0108 	sub.w	r1, r1, r8
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e8a:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e8e:	fb0c f707 	mul.w	r7, ip, r7
 8000e92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d90e      	bls.n	8000eb8 <__udivmoddi4+0x190>
 8000e9a:	18eb      	adds	r3, r5, r3
 8000e9c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000ea0:	d204      	bcs.n	8000eac <__udivmoddi4+0x184>
 8000ea2:	429f      	cmp	r7, r3
 8000ea4:	d902      	bls.n	8000eac <__udivmoddi4+0x184>
 8000ea6:	f1ac 0102 	sub.w	r1, ip, #2
 8000eaa:	442b      	add	r3, r5
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb2:	e792      	b.n	8000dda <__udivmoddi4+0xb2>
 8000eb4:	4660      	mov	r0, ip
 8000eb6:	e7e3      	b.n	8000e80 <__udivmoddi4+0x158>
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7f7      	b.n	8000eac <__udivmoddi4+0x184>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0xe0>
 8000ec0:	4663      	mov	r3, ip
 8000ec2:	e7b7      	b.n	8000e34 <__udivmoddi4+0x10c>
 8000ec4:	4283      	cmp	r3, r0
 8000ec6:	d906      	bls.n	8000ed6 <__udivmoddi4+0x1ae>
 8000ec8:	b916      	cbnz	r6, 8000ed0 <__udivmoddi4+0x1a8>
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000ed0:	e9c6 e000 	strd	lr, r0, [r6]
 8000ed4:	e7f9      	b.n	8000eca <__udivmoddi4+0x1a2>
 8000ed6:	fab3 f783 	clz	r7, r3
 8000eda:	b98f      	cbnz	r7, 8000f00 <__udivmoddi4+0x1d8>
 8000edc:	4283      	cmp	r3, r0
 8000ede:	d301      	bcc.n	8000ee4 <__udivmoddi4+0x1bc>
 8000ee0:	4572      	cmp	r2, lr
 8000ee2:	d808      	bhi.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ee4:	ebbe 0402 	subs.w	r4, lr, r2
 8000ee8:	eb60 0303 	sbc.w	r3, r0, r3
 8000eec:	2001      	movs	r0, #1
 8000eee:	469c      	mov	ip, r3
 8000ef0:	b91e      	cbnz	r6, 8000efa <__udivmoddi4+0x1d2>
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e768      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000ef6:	4638      	mov	r0, r7
 8000ef8:	e7fa      	b.n	8000ef0 <__udivmoddi4+0x1c8>
 8000efa:	e9c6 4c00 	strd	r4, ip, [r6]
 8000efe:	e7f8      	b.n	8000ef2 <__udivmoddi4+0x1ca>
 8000f00:	f1c7 0c20 	rsb	ip, r7, #32
 8000f04:	40bb      	lsls	r3, r7
 8000f06:	fa22 f40c 	lsr.w	r4, r2, ip
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	fa2e f10c 	lsr.w	r1, lr, ip
 8000f10:	fa20 f30c 	lsr.w	r3, r0, ip
 8000f14:	40b8      	lsls	r0, r7
 8000f16:	4301      	orrs	r1, r0
 8000f18:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000f1c:	fa0e f507 	lsl.w	r5, lr, r7
 8000f20:	fbb3 f8f9 	udiv	r8, r3, r9
 8000f24:	fa1f fe84 	uxth.w	lr, r4
 8000f28:	fb09 3018 	mls	r0, r9, r8, r3
 8000f2c:	0c0b      	lsrs	r3, r1, #16
 8000f2e:	fb08 fa0e 	mul.w	sl, r8, lr
 8000f32:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000f36:	459a      	cmp	sl, r3
 8000f38:	fa02 f207 	lsl.w	r2, r2, r7
 8000f3c:	d940      	bls.n	8000fc0 <__udivmoddi4+0x298>
 8000f3e:	18e3      	adds	r3, r4, r3
 8000f40:	f108 30ff 	add.w	r0, r8, #4294967295
 8000f44:	d204      	bcs.n	8000f50 <__udivmoddi4+0x228>
 8000f46:	459a      	cmp	sl, r3
 8000f48:	d902      	bls.n	8000f50 <__udivmoddi4+0x228>
 8000f4a:	f1a8 0002 	sub.w	r0, r8, #2
 8000f4e:	4423      	add	r3, r4
 8000f50:	eba3 030a 	sub.w	r3, r3, sl
 8000f54:	b289      	uxth	r1, r1
 8000f56:	fbb3 f8f9 	udiv	r8, r3, r9
 8000f5a:	fb09 3318 	mls	r3, r9, r8, r3
 8000f5e:	fb08 fe0e 	mul.w	lr, r8, lr
 8000f62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f66:	458e      	cmp	lr, r1
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x29c>
 8000f6a:	1861      	adds	r1, r4, r1
 8000f6c:	f108 33ff 	add.w	r3, r8, #4294967295
 8000f70:	d204      	bcs.n	8000f7c <__udivmoddi4+0x254>
 8000f72:	458e      	cmp	lr, r1
 8000f74:	d902      	bls.n	8000f7c <__udivmoddi4+0x254>
 8000f76:	f1a8 0302 	sub.w	r3, r8, #2
 8000f7a:	4421      	add	r1, r4
 8000f7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f80:	fba0 9802 	umull	r9, r8, r0, r2
 8000f84:	eba1 010e 	sub.w	r1, r1, lr
 8000f88:	4541      	cmp	r1, r8
 8000f8a:	46ce      	mov	lr, r9
 8000f8c:	4643      	mov	r3, r8
 8000f8e:	d302      	bcc.n	8000f96 <__udivmoddi4+0x26e>
 8000f90:	d106      	bne.n	8000fa0 <__udivmoddi4+0x278>
 8000f92:	454d      	cmp	r5, r9
 8000f94:	d204      	bcs.n	8000fa0 <__udivmoddi4+0x278>
 8000f96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f9a:	eb68 0304 	sbc.w	r3, r8, r4
 8000f9e:	3801      	subs	r0, #1
 8000fa0:	2e00      	cmp	r6, #0
 8000fa2:	d0a6      	beq.n	8000ef2 <__udivmoddi4+0x1ca>
 8000fa4:	ebb5 020e 	subs.w	r2, r5, lr
 8000fa8:	eb61 0103 	sbc.w	r1, r1, r3
 8000fac:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000fb0:	fa22 f307 	lsr.w	r3, r2, r7
 8000fb4:	ea4c 0303 	orr.w	r3, ip, r3
 8000fb8:	40f9      	lsrs	r1, r7
 8000fba:	e9c6 3100 	strd	r3, r1, [r6]
 8000fbe:	e798      	b.n	8000ef2 <__udivmoddi4+0x1ca>
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	e7c5      	b.n	8000f50 <__udivmoddi4+0x228>
 8000fc4:	4643      	mov	r3, r8
 8000fc6:	e7d9      	b.n	8000f7c <__udivmoddi4+0x254>

08000fc8 <strlen>:
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d1fb      	bne.n	8000fca <strlen+0x2>
 8000fd2:	1a18      	subs	r0, r3, r0
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	4770      	bx	lr

08000fd8 <temp_sensors>:
	};



void temp_sensors(void)		//funçção executada como thread
{
 8000fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t buf;
	double aux;
	double aux_A=25.0/310.0;			// aux_A e aux_B calculam as constantes para gera uma equção de reta 
	double aux_B=25.0-(931.0*aux_A);	// Y = aux_A.X + aux_B oude y é temperatura e x valor do adc em bits 
										// equação de reta para o sensor TMP36 para conversão de BITs em Temperatura
	k_msleep(2000);
 8000fdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
 8000fe0:	b087      	sub	sp, #28
	k_msleep(2000);
 8000fe2:	f00a fd4c 	bl	800ba7e <k_msleep.isra.0>
	printk(" -----    Thread sensores ----    \n"); 
 8000fe6:	484e      	ldr	r0, [pc, #312]	; (8001120 <temp_sensors+0x148>)
 8000fe8:	4c4e      	ldr	r4, [pc, #312]	; (8001124 <temp_sensors+0x14c>)
 8000fea:	f00a fd92 	bl	800bb12 <printk>

	struct adc_sequence sequence = {
 8000fee:	2214      	movs	r2, #20
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	a801      	add	r0, sp, #4
 8000ff4:	f00b fe6a 	bl	800cccc <memset>
 8000ff8:	f10d 0302 	add.w	r3, sp, #2
 8000ffc:	9303      	str	r3, [sp, #12]
 8000ffe:	2302      	movs	r3, #2
 8001000:	9304      	str	r3, [sp, #16]
		// buffer size in bytes, not number of samples 
		.buffer_size = sizeof(buf),
	};

// Configure channels individually prior to sampling. 
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
 8001002:	2500      	movs	r5, #0
		if (!device_is_ready(adc_channels[i].dev)) {
 8001004:	f854 0c06 	ldr.w	r0, [r4, #-6]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8001008:	f00b fd6c 	bl	800cae4 <z_device_is_ready>
 800100c:	b928      	cbnz	r0, 800101a <temp_sensors+0x42>
			printk("ADC controller device not ready\n");
 800100e:	4846      	ldr	r0, [pc, #280]	; (8001128 <temp_sensors+0x150>)
 8001010:	f00a fd7f 	bl	800bb12 <printk>
			}
		}	
		printf("\n \n");
		k_msleep(SLEEP_TEMPERATURA_MS);
	}
}
 8001014:	b007      	add	sp, #28
 8001016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * Devicetree is not valid.
 * @see adc_channel_setup()
 */
static inline int adc_channel_setup_dt(const struct adc_dt_spec *spec)
{
	if (!spec->channel_cfg_dt_node_exists) {
 800101a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800101e:	b163      	cbz	r3, 800103a <temp_sensors+0x62>
		return -ENOTSUP;
	}

	return adc_channel_setup(spec->dev, &spec->channel_cfg);
 8001020:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
 8001024:	6883      	ldr	r3, [r0, #8]
 8001026:	4621      	mov	r1, r4
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4798      	blx	r3
		if (err < 0) {
 800102c:	1e02      	subs	r2, r0, #0
 800102e:	da07      	bge.n	8001040 <temp_sensors+0x68>
			printk("Could not setup channel #%d (%d)\n", i, err);
 8001030:	483e      	ldr	r0, [pc, #248]	; (800112c <temp_sensors+0x154>)
 8001032:	4629      	mov	r1, r5
 8001034:	f00a fd6d 	bl	800bb12 <printk>
			return;
 8001038:	e7ec      	b.n	8001014 <temp_sensors+0x3c>
		return -ENOTSUP;
 800103a:	f06f 0285 	mvn.w	r2, #133	; 0x85
 800103e:	e7f7      	b.n	8001030 <temp_sensors+0x58>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
 8001040:	3501      	adds	r5, #1
 8001042:	2d04      	cmp	r5, #4
 8001044:	f104 0410 	add.w	r4, r4, #16
 8001048:	d1dc      	bne.n	8001004 <temp_sensors+0x2c>
						aux = (aux_A*buf) + aux_B;			// equação de reta do sensor TMP36 para conversão de BITs em Temperatura 
 800104a:	f20f 09c4 	addw	r9, pc, #196	; 0xc4
 800104e:	e9d9 8900 	ldrd	r8, r9, [r9]
		if (sistem_ON)	{// se equipamento estiver ligado 
 8001052:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8001130 <temp_sensors+0x158>
 8001056:	f89a 3000 	ldrb.w	r3, [sl]
 800105a:	b30b      	cbz	r3, 80010a0 <temp_sensors+0xc8>
 800105c:	4c35      	ldr	r4, [pc, #212]	; (8001134 <temp_sensors+0x15c>)
						printf("Temp: %2.1foC  ", aux);		// printk para controle
 800105e:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8001138 <temp_sensors+0x160>
		if (sistem_ON)	{// se equipamento estiver ligado 
 8001062:	2504      	movs	r5, #4
 * @retval -ENOTSUP If @p spec does not have valid channel configuration
 */
static inline int adc_sequence_init_dt(const struct adc_dt_spec *spec,
				       struct adc_sequence *seq)
{
	if (!spec->channel_cfg_dt_node_exists) {
 8001064:	7963      	ldrb	r3, [r4, #5]
 8001066:	b14b      	cbz	r3, 800107c <temp_sensors+0xa4>
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
 8001068:	7922      	ldrb	r2, [r4, #4]
 800106a:	2301      	movs	r3, #1
 800106c:	4093      	lsls	r3, r2
 800106e:	9302      	str	r3, [sp, #8]
	seq->resolution = spec->resolution;
 8001070:	7ba3      	ldrb	r3, [r4, #14]
 8001072:	f88d 3014 	strb.w	r3, [sp, #20]
	seq->oversampling = spec->oversampling;
 8001076:	7be3      	ldrb	r3, [r4, #15]
 8001078:	f88d 3015 	strb.w	r3, [sp, #21]
				err = adc_read(adc_channels[i].dev, &sequence);				// faz leitura de ADC
 800107c:	6820      	ldr	r0, [r4, #0]
	return api->read(dev, sequence);
 800107e:	6883      	ldr	r3, [r0, #8]
 8001080:	a901      	add	r1, sp, #4
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	4798      	blx	r3
				if (err < 0) {
 8001086:	1e01      	subs	r1, r0, #0
 8001088:	da12      	bge.n	80010b0 <temp_sensors+0xd8>
					printk("Could not read (%d)\n", err);					// print em caso de erro
 800108a:	482c      	ldr	r0, [pc, #176]	; (800113c <temp_sensors+0x164>)
 800108c:	f00a fd41 	bl	800bb12 <printk>
					smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Alarms]);	// seleciona SMT state para apresentação de falha	
 8001090:	492b      	ldr	r1, [pc, #172]	; (8001140 <temp_sensors+0x168>)
						smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Temp]);		
 8001092:	482c      	ldr	r0, [pc, #176]	; (8001144 <temp_sensors+0x16c>)
 8001094:	f004 fc90 	bl	80059b8 <smf_set_state>
			for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {	// for faz leitura de todos os ADC identificados para o projeto
 8001098:	3d01      	subs	r5, #1
 800109a:	f104 0410 	add.w	r4, r4, #16
 800109e:	d1e1      	bne.n	8001064 <temp_sensors+0x8c>
		printf("\n \n");
 80010a0:	4829      	ldr	r0, [pc, #164]	; (8001148 <temp_sensors+0x170>)
 80010a2:	f009 fdd3 	bl	800ac4c <iprintf>
		k_msleep(SLEEP_TEMPERATURA_MS);
 80010a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80010aa:	f00a fce8 	bl	800ba7e <k_msleep.isra.0>
		if (sistem_ON)	{// se equipamento estiver ligado 
 80010ae:	e7d2      	b.n	8001056 <temp_sensors+0x7e>
						aux = (aux_A*buf) + aux_B;			// equação de reta do sensor TMP36 para conversão de BITs em Temperatura 
 80010b0:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 80010b4:	f7ff fa16 	bl	80004e4 <__aeabi_i2d>
 80010b8:	a317      	add	r3, pc, #92	; (adr r3, 8001118 <temp_sensors+0x140>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	f7ff fa7b 	bl	80005b8 <__aeabi_dmul>
 80010c2:	4642      	mov	r2, r8
 80010c4:	464b      	mov	r3, r9
 80010c6:	f7ff f8bf 	bl	8000248 <__aeabi_dsub>
						printf("Temp: %2.1foC  ", aux);		// printk para controle
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
						aux = (aux_A*buf) + aux_B;			// equação de reta do sensor TMP36 para conversão de BITs em Temperatura 
 80010ce:	4606      	mov	r6, r0
						printf("Temp: %2.1foC  ", aux);		// printk para controle
 80010d0:	4658      	mov	r0, fp
						aux = (aux_A*buf) + aux_B;			// equação de reta do sensor TMP36 para conversão de BITs em Temperatura 
 80010d2:	460f      	mov	r7, r1
						printf("Temp: %2.1foC  ", aux);		// printk para controle
 80010d4:	f009 fdba 	bl	800ac4c <iprintf>
						if (adc_channels[i].channel_id==2) TempSensor_quente=aux;		// transfere valor para variavel sensor do bloco quente
 80010d8:	7923      	ldrb	r3, [r4, #4]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d107      	bne.n	80010ee <temp_sensors+0x116>
 80010de:	4630      	mov	r0, r6
 80010e0:	4639      	mov	r1, r7
 80010e2:	f7ff fc7b 	bl	80009dc <__aeabi_d2f>
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <temp_sensors+0x174>)
						if (adc_channels[i].channel_id==7) TempSensor_frio2=aux;		// transfere valor para variavel sensor do bloco frio 2
 80010e8:	6018      	str	r0, [r3, #0]
						smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Temp]);		
 80010ea:	4919      	ldr	r1, [pc, #100]	; (8001150 <temp_sensors+0x178>)
 80010ec:	e7d1      	b.n	8001092 <temp_sensors+0xba>
						if (adc_channels[i].channel_id==6) TempSensor_frio1=aux;		// transfere valor para variavel sensor do bloco frio 1
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d105      	bne.n	80010fe <temp_sensors+0x126>
 80010f2:	4630      	mov	r0, r6
 80010f4:	4639      	mov	r1, r7
 80010f6:	f7ff fc71 	bl	80009dc <__aeabi_d2f>
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <temp_sensors+0x17c>)
 80010fc:	e7f4      	b.n	80010e8 <temp_sensors+0x110>
						if (adc_channels[i].channel_id==7) TempSensor_frio2=aux;		// transfere valor para variavel sensor do bloco frio 2
 80010fe:	2b07      	cmp	r3, #7
 8001100:	d1f3      	bne.n	80010ea <temp_sensors+0x112>
 8001102:	4630      	mov	r0, r6
 8001104:	4639      	mov	r1, r7
 8001106:	f7ff fc69 	bl	80009dc <__aeabi_d2f>
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <temp_sensors+0x180>)
 800110c:	e7ec      	b.n	80010e8 <temp_sensors+0x110>
 800110e:	bf00      	nop
 8001110:	94a5294a 	.word	0x94a5294a
 8001114:	40490a52 	.word	0x40490a52
 8001118:	4a5294a5 	.word	0x4a5294a5
 800111c:	3fb4a529 	.word	0x3fb4a529
 8001120:	0800e453 	.word	0x0800e453
 8001124:	0800dcce 	.word	0x0800dcce
 8001128:	0800e477 	.word	0x0800e477
 800112c:	0800e498 	.word	0x0800e498
 8001130:	20000cfc 	.word	0x20000cfc
 8001134:	0800dcc8 	.word	0x0800dcc8
 8001138:	0800e4cf 	.word	0x0800e4cf
 800113c:	0800e4ba 	.word	0x0800e4ba
 8001140:	0800dd28 	.word	0x0800dd28
 8001144:	20000ab8 	.word	0x20000ab8
 8001148:	0800e4df 	.word	0x0800e4df
 800114c:	20000aac 	.word	0x20000aac
 8001150:	0800dd58 	.word	0x0800dd58
 8001154:	20000ab4 	.word	0x20000ab4
 8001158:	20000ab0 	.word	0x20000ab0
 800115c:	00000000 	.word	0x00000000

08001160 <_dtoa_r>:
 8001160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001164:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8001166:	b097      	sub	sp, #92	; 0x5c
 8001168:	4614      	mov	r4, r2
 800116a:	461d      	mov	r5, r3
 800116c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001170:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8001172:	4683      	mov	fp, r0
 8001174:	b97f      	cbnz	r7, 8001196 <_dtoa_r+0x36>
 8001176:	2010      	movs	r0, #16
 8001178:	f009 f82c 	bl	800a1d4 <malloc>
 800117c:	4602      	mov	r2, r0
 800117e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
 8001182:	b920      	cbnz	r0, 800118e <_dtoa_r+0x2e>
 8001184:	4ba2      	ldr	r3, [pc, #648]	; (8001410 <_dtoa_r+0x2b0>)
 8001186:	21ea      	movs	r1, #234	; 0xea
 8001188:	48a2      	ldr	r0, [pc, #648]	; (8001414 <_dtoa_r+0x2b4>)
 800118a:	f00a fbe5 	bl	800b958 <__assert_func>
 800118e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8001192:	6007      	str	r7, [r0, #0]
 8001194:	60c7      	str	r7, [r0, #12]
 8001196:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	b159      	cbz	r1, 80011b6 <_dtoa_r+0x56>
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	604a      	str	r2, [r1, #4]
 80011a2:	2301      	movs	r3, #1
 80011a4:	4093      	lsls	r3, r2
 80011a6:	608b      	str	r3, [r1, #8]
 80011a8:	4658      	mov	r0, fp
 80011aa:	f009 ffef 	bl	800b18c <_Bfree>
 80011ae:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	1e2b      	subs	r3, r5, #0
 80011b8:	bfb9      	ittee	lt
 80011ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80011be:	9305      	strlt	r3, [sp, #20]
 80011c0:	2300      	movge	r3, #0
 80011c2:	6033      	strge	r3, [r6, #0]
 80011c4:	9f05      	ldr	r7, [sp, #20]
 80011c6:	4b94      	ldr	r3, [pc, #592]	; (8001418 <_dtoa_r+0x2b8>)
 80011c8:	bfbc      	itt	lt
 80011ca:	2201      	movlt	r2, #1
 80011cc:	6032      	strlt	r2, [r6, #0]
 80011ce:	43bb      	bics	r3, r7
 80011d0:	d119      	bne.n	8001206 <_dtoa_r+0xa6>
 80011d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80011d4:	f242 730f 	movw	r3, #9999	; 0x270f
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80011de:	4323      	orrs	r3, r4
 80011e0:	f000 85e2 	beq.w	8001da8 <_dtoa_r+0xc48>
 80011e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80011e6:	b953      	cbnz	r3, 80011fe <_dtoa_r+0x9e>
 80011e8:	4b8c      	ldr	r3, [pc, #560]	; (800141c <_dtoa_r+0x2bc>)
 80011ea:	e021      	b.n	8001230 <_dtoa_r+0xd0>
 80011ec:	4b8c      	ldr	r3, [pc, #560]	; (8001420 <_dtoa_r+0x2c0>)
 80011ee:	9308      	str	r3, [sp, #32]
 80011f0:	3308      	adds	r3, #8
 80011f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	9808      	ldr	r0, [sp, #32]
 80011f8:	b017      	add	sp, #92	; 0x5c
 80011fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011fe:	4b87      	ldr	r3, [pc, #540]	; (800141c <_dtoa_r+0x2bc>)
 8001200:	9308      	str	r3, [sp, #32]
 8001202:	3303      	adds	r3, #3
 8001204:	e7f5      	b.n	80011f2 <_dtoa_r+0x92>
 8001206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800120a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800120e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001212:	2200      	movs	r2, #0
 8001214:	2300      	movs	r3, #0
 8001216:	f7ff fd17 	bl	8000c48 <__aeabi_dcmpeq>
 800121a:	4680      	mov	r8, r0
 800121c:	b150      	cbz	r0, 8001234 <_dtoa_r+0xd4>
 800121e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001220:	2301      	movs	r3, #1
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001226:	b113      	cbz	r3, 800122e <_dtoa_r+0xce>
 8001228:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800122a:	4b7e      	ldr	r3, [pc, #504]	; (8001424 <_dtoa_r+0x2c4>)
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b7e      	ldr	r3, [pc, #504]	; (8001428 <_dtoa_r+0x2c8>)
 8001230:	9308      	str	r3, [sp, #32]
 8001232:	e7e0      	b.n	80011f6 <_dtoa_r+0x96>
 8001234:	ab14      	add	r3, sp, #80	; 0x50
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	ab15      	add	r3, sp, #84	; 0x54
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4658      	mov	r0, fp
 800123e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001242:	f00a fa23 	bl	800b68c <__d2b>
 8001246:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800124a:	9003      	str	r0, [sp, #12]
 800124c:	2e00      	cmp	r6, #0
 800124e:	d07a      	beq.n	8001346 <_dtoa_r+0x1e6>
 8001250:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001252:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8001256:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800125a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800125e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8001262:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001266:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800126a:	4619      	mov	r1, r3
 800126c:	2200      	movs	r2, #0
 800126e:	4b6f      	ldr	r3, [pc, #444]	; (800142c <_dtoa_r+0x2cc>)
 8001270:	f7fe ffea 	bl	8000248 <__aeabi_dsub>
 8001274:	a360      	add	r3, pc, #384	; (adr r3, 80013f8 <_dtoa_r+0x298>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f7ff f99d 	bl	80005b8 <__aeabi_dmul>
 800127e:	a360      	add	r3, pc, #384	; (adr r3, 8001400 <_dtoa_r+0x2a0>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7fe ffe2 	bl	800024c <__adddf3>
 8001288:	4604      	mov	r4, r0
 800128a:	4630      	mov	r0, r6
 800128c:	460d      	mov	r5, r1
 800128e:	f7ff f929 	bl	80004e4 <__aeabi_i2d>
 8001292:	a35d      	add	r3, pc, #372	; (adr r3, 8001408 <_dtoa_r+0x2a8>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f98e 	bl	80005b8 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4620      	mov	r0, r4
 80012a2:	4629      	mov	r1, r5
 80012a4:	f7fe ffd2 	bl	800024c <__adddf3>
 80012a8:	4604      	mov	r4, r0
 80012aa:	460d      	mov	r5, r1
 80012ac:	f7ff fd14 	bl	8000cd8 <__aeabi_d2iz>
 80012b0:	2200      	movs	r2, #0
 80012b2:	4607      	mov	r7, r0
 80012b4:	2300      	movs	r3, #0
 80012b6:	4620      	mov	r0, r4
 80012b8:	4629      	mov	r1, r5
 80012ba:	f7ff fccf 	bl	8000c5c <__aeabi_dcmplt>
 80012be:	b140      	cbz	r0, 80012d2 <_dtoa_r+0x172>
 80012c0:	4638      	mov	r0, r7
 80012c2:	f7ff f90f 	bl	80004e4 <__aeabi_i2d>
 80012c6:	4622      	mov	r2, r4
 80012c8:	462b      	mov	r3, r5
 80012ca:	f7ff fcbd 	bl	8000c48 <__aeabi_dcmpeq>
 80012ce:	b900      	cbnz	r0, 80012d2 <_dtoa_r+0x172>
 80012d0:	3f01      	subs	r7, #1
 80012d2:	2f16      	cmp	r7, #22
 80012d4:	d854      	bhi.n	8001380 <_dtoa_r+0x220>
 80012d6:	4b56      	ldr	r3, [pc, #344]	; (8001430 <_dtoa_r+0x2d0>)
 80012d8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80012e4:	f7ff fcba 	bl	8000c5c <__aeabi_dcmplt>
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d04b      	beq.n	8001384 <_dtoa_r+0x224>
 80012ec:	3f01      	subs	r7, #1
 80012ee:	2300      	movs	r3, #0
 80012f0:	9312      	str	r3, [sp, #72]	; 0x48
 80012f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80012f4:	1b9b      	subs	r3, r3, r6
 80012f6:	1e5a      	subs	r2, r3, #1
 80012f8:	bf45      	ittet	mi
 80012fa:	f1c3 0301 	rsbmi	r3, r3, #1
 80012fe:	9306      	strmi	r3, [sp, #24]
 8001300:	2300      	movpl	r3, #0
 8001302:	2300      	movmi	r3, #0
 8001304:	920a      	str	r2, [sp, #40]	; 0x28
 8001306:	bf54      	ite	pl
 8001308:	9306      	strpl	r3, [sp, #24]
 800130a:	930a      	strmi	r3, [sp, #40]	; 0x28
 800130c:	2f00      	cmp	r7, #0
 800130e:	db3b      	blt.n	8001388 <_dtoa_r+0x228>
 8001310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001312:	970f      	str	r7, [sp, #60]	; 0x3c
 8001314:	443b      	add	r3, r7
 8001316:	930a      	str	r3, [sp, #40]	; 0x28
 8001318:	2300      	movs	r3, #0
 800131a:	930b      	str	r3, [sp, #44]	; 0x2c
 800131c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800131e:	2b09      	cmp	r3, #9
 8001320:	f200 808a 	bhi.w	8001438 <_dtoa_r+0x2d8>
 8001324:	2b05      	cmp	r3, #5
 8001326:	bfc4      	itt	gt
 8001328:	3b04      	subgt	r3, #4
 800132a:	9320      	strgt	r3, [sp, #128]	; 0x80
 800132c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800132e:	f1a3 0302 	sub.w	r3, r3, #2
 8001332:	bfcc      	ite	gt
 8001334:	2400      	movgt	r4, #0
 8001336:	2401      	movle	r4, #1
 8001338:	2b03      	cmp	r3, #3
 800133a:	f200 8088 	bhi.w	800144e <_dtoa_r+0x2ee>
 800133e:	e8df f003 	tbb	[pc, r3]
 8001342:	382b      	.short	0x382b
 8001344:	5736      	.short	0x5736
 8001346:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 800134a:	441e      	add	r6, r3
 800134c:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8001350:	2b20      	cmp	r3, #32
 8001352:	bfc1      	itttt	gt
 8001354:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8001358:	409f      	lslgt	r7, r3
 800135a:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
 800135e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8001362:	bfd6      	itet	le
 8001364:	f1c3 0320 	rsble	r3, r3, #32
 8001368:	ea47 0003 	orrgt.w	r0, r7, r3
 800136c:	fa04 f003 	lslle.w	r0, r4, r3
 8001370:	f7ff f8a8 	bl	80004c4 <__aeabi_ui2d>
 8001374:	2201      	movs	r2, #1
 8001376:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800137a:	3e01      	subs	r6, #1
 800137c:	9213      	str	r2, [sp, #76]	; 0x4c
 800137e:	e774      	b.n	800126a <_dtoa_r+0x10a>
 8001380:	2301      	movs	r3, #1
 8001382:	e7b5      	b.n	80012f0 <_dtoa_r+0x190>
 8001384:	9012      	str	r0, [sp, #72]	; 0x48
 8001386:	e7b4      	b.n	80012f2 <_dtoa_r+0x192>
 8001388:	9b06      	ldr	r3, [sp, #24]
 800138a:	1bdb      	subs	r3, r3, r7
 800138c:	9306      	str	r3, [sp, #24]
 800138e:	427b      	negs	r3, r7
 8001390:	930b      	str	r3, [sp, #44]	; 0x2c
 8001392:	2300      	movs	r3, #0
 8001394:	930f      	str	r3, [sp, #60]	; 0x3c
 8001396:	e7c1      	b.n	800131c <_dtoa_r+0x1bc>
 8001398:	2300      	movs	r3, #0
 800139a:	930e      	str	r3, [sp, #56]	; 0x38
 800139c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dc58      	bgt.n	8001454 <_dtoa_r+0x2f4>
 80013a2:	2301      	movs	r3, #1
 80013a4:	9309      	str	r3, [sp, #36]	; 0x24
 80013a6:	4699      	mov	r9, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	9221      	str	r2, [sp, #132]	; 0x84
 80013ac:	e00c      	b.n	80013c8 <_dtoa_r+0x268>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e7f3      	b.n	800139a <_dtoa_r+0x23a>
 80013b2:	2300      	movs	r3, #0
 80013b4:	930e      	str	r3, [sp, #56]	; 0x38
 80013b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	f103 0901 	add.w	r9, r3, #1
 80013be:	9309      	str	r3, [sp, #36]	; 0x24
 80013c0:	464b      	mov	r3, r9
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	bfb8      	it	lt
 80013c6:	2301      	movlt	r3, #1
 80013c8:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 80013cc:	2100      	movs	r1, #0
 80013ce:	2204      	movs	r2, #4
 80013d0:	f102 0514 	add.w	r5, r2, #20
 80013d4:	429d      	cmp	r5, r3
 80013d6:	d941      	bls.n	800145c <_dtoa_r+0x2fc>
 80013d8:	6041      	str	r1, [r0, #4]
 80013da:	4658      	mov	r0, fp
 80013dc:	f009 fe96 	bl	800b10c <_Balloc>
 80013e0:	9008      	str	r0, [sp, #32]
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d13d      	bne.n	8001462 <_dtoa_r+0x302>
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <_dtoa_r+0x2d4>)
 80013e8:	4602      	mov	r2, r0
 80013ea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013ee:	e6cb      	b.n	8001188 <_dtoa_r+0x28>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e7df      	b.n	80013b4 <_dtoa_r+0x254>
 80013f4:	f3af 8000 	nop.w
 80013f8:	636f4361 	.word	0x636f4361
 80013fc:	3fd287a7 	.word	0x3fd287a7
 8001400:	8b60c8b3 	.word	0x8b60c8b3
 8001404:	3fc68a28 	.word	0x3fc68a28
 8001408:	509f79fb 	.word	0x509f79fb
 800140c:	3fd34413 	.word	0x3fd34413
 8001410:	080143d1 	.word	0x080143d1
 8001414:	080143e8 	.word	0x080143e8
 8001418:	7ff00000 	.word	0x7ff00000
 800141c:	080143cd 	.word	0x080143cd
 8001420:	080143c4 	.word	0x080143c4
 8001424:	0800e34e 	.word	0x0800e34e
 8001428:	0800e34d 	.word	0x0800e34d
 800142c:	3ff80000 	.word	0x3ff80000
 8001430:	0800dc00 	.word	0x0800dc00
 8001434:	0801445c 	.word	0x0801445c
 8001438:	2401      	movs	r4, #1
 800143a:	2300      	movs	r3, #0
 800143c:	9320      	str	r3, [sp, #128]	; 0x80
 800143e:	940e      	str	r4, [sp, #56]	; 0x38
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	9309      	str	r3, [sp, #36]	; 0x24
 8001446:	4699      	mov	r9, r3
 8001448:	2200      	movs	r2, #0
 800144a:	2312      	movs	r3, #18
 800144c:	e7ad      	b.n	80013aa <_dtoa_r+0x24a>
 800144e:	2301      	movs	r3, #1
 8001450:	930e      	str	r3, [sp, #56]	; 0x38
 8001452:	e7f5      	b.n	8001440 <_dtoa_r+0x2e0>
 8001454:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001456:	9309      	str	r3, [sp, #36]	; 0x24
 8001458:	4699      	mov	r9, r3
 800145a:	e7b5      	b.n	80013c8 <_dtoa_r+0x268>
 800145c:	3101      	adds	r1, #1
 800145e:	0052      	lsls	r2, r2, #1
 8001460:	e7b6      	b.n	80013d0 <_dtoa_r+0x270>
 8001462:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8001466:	9a08      	ldr	r2, [sp, #32]
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	f1b9 0f0e 	cmp.w	r9, #14
 800146e:	d86f      	bhi.n	8001550 <_dtoa_r+0x3f0>
 8001470:	2c00      	cmp	r4, #0
 8001472:	d06d      	beq.n	8001550 <_dtoa_r+0x3f0>
 8001474:	2f00      	cmp	r7, #0
 8001476:	dd36      	ble.n	80014e6 <_dtoa_r+0x386>
 8001478:	4ba1      	ldr	r3, [pc, #644]	; (8001700 <_dtoa_r+0x5a0>)
 800147a:	f007 020f 	and.w	r2, r7, #15
 800147e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001482:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001486:	05f8      	lsls	r0, r7, #23
 8001488:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800148c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8001490:	d517      	bpl.n	80014c2 <_dtoa_r+0x362>
 8001492:	4b9c      	ldr	r3, [pc, #624]	; (8001704 <_dtoa_r+0x5a4>)
 8001494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001498:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800149c:	f7ff f9b6 	bl	800080c <__aeabi_ddiv>
 80014a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014a4:	f004 040f 	and.w	r4, r4, #15
 80014a8:	f04f 0803 	mov.w	r8, #3
 80014ac:	4d95      	ldr	r5, [pc, #596]	; (8001704 <_dtoa_r+0x5a4>)
 80014ae:	b95c      	cbnz	r4, 80014c8 <_dtoa_r+0x368>
 80014b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80014b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80014b8:	f7ff f9a8 	bl	800080c <__aeabi_ddiv>
 80014bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014c0:	e02b      	b.n	800151a <_dtoa_r+0x3ba>
 80014c2:	f04f 0802 	mov.w	r8, #2
 80014c6:	e7f1      	b.n	80014ac <_dtoa_r+0x34c>
 80014c8:	07e1      	lsls	r1, r4, #31
 80014ca:	d509      	bpl.n	80014e0 <_dtoa_r+0x380>
 80014cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80014d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80014d4:	f7ff f870 	bl	80005b8 <__aeabi_dmul>
 80014d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80014dc:	f108 0801 	add.w	r8, r8, #1
 80014e0:	1064      	asrs	r4, r4, #1
 80014e2:	3508      	adds	r5, #8
 80014e4:	e7e3      	b.n	80014ae <_dtoa_r+0x34e>
 80014e6:	f000 8107 	beq.w	80016f8 <_dtoa_r+0x598>
 80014ea:	427c      	negs	r4, r7
 80014ec:	4b84      	ldr	r3, [pc, #528]	; (8001700 <_dtoa_r+0x5a0>)
 80014ee:	4d85      	ldr	r5, [pc, #532]	; (8001704 <_dtoa_r+0x5a4>)
 80014f0:	f004 020f 	and.w	r2, r4, #15
 80014f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001500:	f7ff f85a 	bl	80005b8 <__aeabi_dmul>
 8001504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001508:	1124      	asrs	r4, r4, #4
 800150a:	2300      	movs	r3, #0
 800150c:	f04f 0802 	mov.w	r8, #2
 8001510:	2c00      	cmp	r4, #0
 8001512:	f040 80e5 	bne.w	80016e0 <_dtoa_r+0x580>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1d0      	bne.n	80014bc <_dtoa_r+0x35c>
 800151a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800151c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 814c 	beq.w	80017be <_dtoa_r+0x65e>
 8001526:	4b78      	ldr	r3, [pc, #480]	; (8001708 <_dtoa_r+0x5a8>)
 8001528:	2200      	movs	r2, #0
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff fb95 	bl	8000c5c <__aeabi_dcmplt>
 8001532:	2800      	cmp	r0, #0
 8001534:	f000 8143 	beq.w	80017be <_dtoa_r+0x65e>
 8001538:	f1b9 0f00 	cmp.w	r9, #0
 800153c:	f000 813f 	beq.w	80017be <_dtoa_r+0x65e>
 8001540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001542:	2b00      	cmp	r3, #0
 8001544:	f300 80e4 	bgt.w	8001710 <_dtoa_r+0x5b0>
 8001548:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800154c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001550:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001552:	2b00      	cmp	r3, #0
 8001554:	db02      	blt.n	800155c <_dtoa_r+0x3fc>
 8001556:	2f0e      	cmp	r7, #14
 8001558:	f340 8242 	ble.w	80019e0 <_dtoa_r+0x880>
 800155c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800155e:	2a00      	cmp	r2, #0
 8001560:	f040 8267 	bne.w	8001a32 <_dtoa_r+0x8d2>
 8001564:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8001566:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800156a:	2500      	movs	r5, #0
 800156c:	f1b8 0f00 	cmp.w	r8, #0
 8001570:	d00d      	beq.n	800158e <_dtoa_r+0x42e>
 8001572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	dd0a      	ble.n	800158e <_dtoa_r+0x42e>
 8001578:	4543      	cmp	r3, r8
 800157a:	9a06      	ldr	r2, [sp, #24]
 800157c:	bfa8      	it	ge
 800157e:	4643      	movge	r3, r8
 8001580:	1ad2      	subs	r2, r2, r3
 8001582:	9206      	str	r2, [sp, #24]
 8001584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001586:	eba8 0803 	sub.w	r8, r8, r3
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	930a      	str	r3, [sp, #40]	; 0x28
 800158e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001590:	b30b      	cbz	r3, 80015d6 <_dtoa_r+0x476>
 8001592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 82a6 	beq.w	8001ae6 <_dtoa_r+0x986>
 800159a:	2c00      	cmp	r4, #0
 800159c:	f000 82a1 	beq.w	8001ae2 <_dtoa_r+0x982>
 80015a0:	4629      	mov	r1, r5
 80015a2:	4622      	mov	r2, r4
 80015a4:	4658      	mov	r0, fp
 80015a6:	f009 ff19 	bl	800b3dc <__pow5mult>
 80015aa:	9a03      	ldr	r2, [sp, #12]
 80015ac:	4601      	mov	r1, r0
 80015ae:	4605      	mov	r5, r0
 80015b0:	4658      	mov	r0, fp
 80015b2:	f009 fe69 	bl	800b288 <__multiply>
 80015b6:	9903      	ldr	r1, [sp, #12]
 80015b8:	4606      	mov	r6, r0
 80015ba:	4658      	mov	r0, fp
 80015bc:	f009 fde6 	bl	800b18c <_Bfree>
 80015c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015c2:	1b1b      	subs	r3, r3, r4
 80015c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80015c6:	f000 8291 	beq.w	8001aec <_dtoa_r+0x98c>
 80015ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80015cc:	4631      	mov	r1, r6
 80015ce:	4658      	mov	r0, fp
 80015d0:	f009 ff04 	bl	800b3dc <__pow5mult>
 80015d4:	9003      	str	r0, [sp, #12]
 80015d6:	2101      	movs	r1, #1
 80015d8:	4658      	mov	r0, fp
 80015da:	f009 fe3f 	bl	800b25c <__i2b>
 80015de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80015e0:	4604      	mov	r4, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8284 	beq.w	8001af0 <_dtoa_r+0x990>
 80015e8:	461a      	mov	r2, r3
 80015ea:	4601      	mov	r1, r0
 80015ec:	4658      	mov	r0, fp
 80015ee:	f009 fef5 	bl	800b3dc <__pow5mult>
 80015f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	4604      	mov	r4, r0
 80015f8:	dc03      	bgt.n	8001602 <_dtoa_r+0x4a2>
 80015fa:	9b04      	ldr	r3, [sp, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 827c 	beq.w	8001afa <_dtoa_r+0x99a>
 8001602:	2600      	movs	r6, #0
 8001604:	6923      	ldr	r3, [r4, #16]
 8001606:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800160a:	6918      	ldr	r0, [r3, #16]
 800160c:	f00b fe7c 	bl	800d308 <__hi0bits>
 8001610:	960f      	str	r6, [sp, #60]	; 0x3c
 8001612:	f1c0 0020 	rsb	r0, r0, #32
 8001616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001618:	4418      	add	r0, r3
 800161a:	f010 001f 	ands.w	r0, r0, #31
 800161e:	f000 8291 	beq.w	8001b44 <_dtoa_r+0x9e4>
 8001622:	f1c0 0320 	rsb	r3, r0, #32
 8001626:	2b04      	cmp	r3, #4
 8001628:	f340 8281 	ble.w	8001b2e <_dtoa_r+0x9ce>
 800162c:	9b06      	ldr	r3, [sp, #24]
 800162e:	f1c0 001c 	rsb	r0, r0, #28
 8001632:	4403      	add	r3, r0
 8001634:	9306      	str	r3, [sp, #24]
 8001636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001638:	4403      	add	r3, r0
 800163a:	4480      	add	r8, r0
 800163c:	930a      	str	r3, [sp, #40]	; 0x28
 800163e:	9b06      	ldr	r3, [sp, #24]
 8001640:	2b00      	cmp	r3, #0
 8001642:	dd05      	ble.n	8001650 <_dtoa_r+0x4f0>
 8001644:	9903      	ldr	r1, [sp, #12]
 8001646:	461a      	mov	r2, r3
 8001648:	4658      	mov	r0, fp
 800164a:	f009 ff21 	bl	800b490 <__lshift>
 800164e:	9003      	str	r0, [sp, #12]
 8001650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001652:	2b00      	cmp	r3, #0
 8001654:	dd05      	ble.n	8001662 <_dtoa_r+0x502>
 8001656:	4621      	mov	r1, r4
 8001658:	461a      	mov	r2, r3
 800165a:	4658      	mov	r0, fp
 800165c:	f009 ff18 	bl	800b490 <__lshift>
 8001660:	4604      	mov	r4, r0
 8001662:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 8276 	beq.w	8001b56 <_dtoa_r+0x9f6>
 800166a:	9803      	ldr	r0, [sp, #12]
 800166c:	4621      	mov	r1, r4
 800166e:	f00b fe9a 	bl	800d3a6 <__mcmp>
 8001672:	2800      	cmp	r0, #0
 8001674:	f280 826f 	bge.w	8001b56 <_dtoa_r+0x9f6>
 8001678:	2300      	movs	r3, #0
 800167a:	9903      	ldr	r1, [sp, #12]
 800167c:	220a      	movs	r2, #10
 800167e:	4658      	mov	r0, fp
 8001680:	f009 fda6 	bl	800b1d0 <__multadd>
 8001684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001686:	9003      	str	r0, [sp, #12]
 8001688:	1e7e      	subs	r6, r7, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 825c 	beq.w	8001b48 <_dtoa_r+0x9e8>
 8001690:	2300      	movs	r3, #0
 8001692:	4629      	mov	r1, r5
 8001694:	220a      	movs	r2, #10
 8001696:	4658      	mov	r0, fp
 8001698:	f009 fd9a 	bl	800b1d0 <__multadd>
 800169c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800169e:	2b00      	cmp	r3, #0
 80016a0:	4605      	mov	r5, r0
 80016a2:	dc03      	bgt.n	80016ac <_dtoa_r+0x54c>
 80016a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	f300 825e 	bgt.w	8001b68 <_dtoa_r+0xa08>
 80016ac:	f1b8 0f00 	cmp.w	r8, #0
 80016b0:	dd05      	ble.n	80016be <_dtoa_r+0x55e>
 80016b2:	4629      	mov	r1, r5
 80016b4:	4642      	mov	r2, r8
 80016b6:	4658      	mov	r0, fp
 80016b8:	f009 feea 	bl	800b490 <__lshift>
 80016bc:	4605      	mov	r5, r0
 80016be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 82d0 	beq.w	8001c66 <_dtoa_r+0xb06>
 80016c6:	6869      	ldr	r1, [r5, #4]
 80016c8:	4658      	mov	r0, fp
 80016ca:	f009 fd1f 	bl	800b10c <_Balloc>
 80016ce:	4607      	mov	r7, r0
 80016d0:	2800      	cmp	r0, #0
 80016d2:	f040 827f 	bne.w	8001bd4 <_dtoa_r+0xa74>
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <_dtoa_r+0x5ac>)
 80016d8:	4602      	mov	r2, r0
 80016da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80016de:	e553      	b.n	8001188 <_dtoa_r+0x28>
 80016e0:	07e2      	lsls	r2, r4, #31
 80016e2:	d506      	bpl.n	80016f2 <_dtoa_r+0x592>
 80016e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80016e8:	f7fe ff66 	bl	80005b8 <__aeabi_dmul>
 80016ec:	f108 0801 	add.w	r8, r8, #1
 80016f0:	2301      	movs	r3, #1
 80016f2:	1064      	asrs	r4, r4, #1
 80016f4:	3508      	adds	r5, #8
 80016f6:	e70b      	b.n	8001510 <_dtoa_r+0x3b0>
 80016f8:	f04f 0802 	mov.w	r8, #2
 80016fc:	e70d      	b.n	800151a <_dtoa_r+0x3ba>
 80016fe:	bf00      	nop
 8001700:	0800dc00 	.word	0x0800dc00
 8001704:	0800dbd8 	.word	0x0800dbd8
 8001708:	3ff00000 	.word	0x3ff00000
 800170c:	0801445c 	.word	0x0801445c
 8001710:	4620      	mov	r0, r4
 8001712:	4bad      	ldr	r3, [pc, #692]	; (80019c8 <_dtoa_r+0x868>)
 8001714:	2200      	movs	r2, #0
 8001716:	4629      	mov	r1, r5
 8001718:	f7fe ff4e 	bl	80005b8 <__aeabi_dmul>
 800171c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001720:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001722:	1e7e      	subs	r6, r7, #1
 8001724:	f108 0801 	add.w	r8, r8, #1
 8001728:	4640      	mov	r0, r8
 800172a:	f7fe fedb 	bl	80004e4 <__aeabi_i2d>
 800172e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001732:	f7fe ff41 	bl	80005b8 <__aeabi_dmul>
 8001736:	4ba5      	ldr	r3, [pc, #660]	; (80019cc <_dtoa_r+0x86c>)
 8001738:	2200      	movs	r2, #0
 800173a:	f7fe fd87 	bl	800024c <__adddf3>
 800173e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8001742:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001746:	9311      	str	r3, [sp, #68]	; 0x44
 8001748:	2c00      	cmp	r4, #0
 800174a:	d13b      	bne.n	80017c4 <_dtoa_r+0x664>
 800174c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001750:	4b9f      	ldr	r3, [pc, #636]	; (80019d0 <_dtoa_r+0x870>)
 8001752:	2200      	movs	r2, #0
 8001754:	f7fe fd78 	bl	8000248 <__aeabi_dsub>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001760:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001764:	f7ff fa98 	bl	8000c98 <__aeabi_dcmpgt>
 8001768:	2800      	cmp	r0, #0
 800176a:	f040 8157 	bne.w	8001a1c <_dtoa_r+0x8bc>
 800176e:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 8001772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001776:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800177a:	f7ff fa6f 	bl	8000c5c <__aeabi_dcmplt>
 800177e:	2800      	cmp	r0, #0
 8001780:	f43f aee2 	beq.w	8001548 <_dtoa_r+0x3e8>
 8001784:	2400      	movs	r4, #0
 8001786:	4625      	mov	r5, r4
 8001788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800178a:	f8dd a020 	ldr.w	sl, [sp, #32]
 800178e:	43de      	mvns	r6, r3
 8001790:	f04f 0800 	mov.w	r8, #0
 8001794:	4621      	mov	r1, r4
 8001796:	4658      	mov	r0, fp
 8001798:	f009 fcf8 	bl	800b18c <_Bfree>
 800179c:	2d00      	cmp	r5, #0
 800179e:	f000 80a9 	beq.w	80018f4 <_dtoa_r+0x794>
 80017a2:	f1b8 0f00 	cmp.w	r8, #0
 80017a6:	d005      	beq.n	80017b4 <_dtoa_r+0x654>
 80017a8:	45a8      	cmp	r8, r5
 80017aa:	d003      	beq.n	80017b4 <_dtoa_r+0x654>
 80017ac:	4641      	mov	r1, r8
 80017ae:	4658      	mov	r0, fp
 80017b0:	f009 fcec 	bl	800b18c <_Bfree>
 80017b4:	4629      	mov	r1, r5
 80017b6:	4658      	mov	r0, fp
 80017b8:	f009 fce8 	bl	800b18c <_Bfree>
 80017bc:	e09a      	b.n	80018f4 <_dtoa_r+0x794>
 80017be:	463e      	mov	r6, r7
 80017c0:	464c      	mov	r4, r9
 80017c2:	e7b1      	b.n	8001728 <_dtoa_r+0x5c8>
 80017c4:	4b83      	ldr	r3, [pc, #524]	; (80019d4 <_dtoa_r+0x874>)
 80017c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80017ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80017ce:	9b08      	ldr	r3, [sp, #32]
 80017d0:	441c      	add	r4, r3
 80017d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d04a      	beq.n	800186e <_dtoa_r+0x70e>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	2000      	movs	r0, #0
 80017de:	497e      	ldr	r1, [pc, #504]	; (80019d8 <_dtoa_r+0x878>)
 80017e0:	f7ff f814 	bl	800080c <__aeabi_ddiv>
 80017e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80017e8:	f7fe fd2e 	bl	8000248 <__aeabi_dsub>
 80017ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80017f0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80017f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80017f8:	f7ff fa6e 	bl	8000cd8 <__aeabi_d2iz>
 80017fc:	4605      	mov	r5, r0
 80017fe:	f7fe fe71 	bl	80004e4 <__aeabi_i2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800180a:	f7fe fd1d 	bl	8000248 <__aeabi_dsub>
 800180e:	3530      	adds	r5, #48	; 0x30
 8001810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	f80a 5b01 	strb.w	r5, [sl], #1
 800181c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001820:	f7ff fa3a 	bl	8000c98 <__aeabi_dcmpgt>
 8001824:	2800      	cmp	r0, #0
 8001826:	d165      	bne.n	80018f4 <_dtoa_r+0x794>
 8001828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800182c:	496b      	ldr	r1, [pc, #428]	; (80019dc <_dtoa_r+0x87c>)
 800182e:	2000      	movs	r0, #0
 8001830:	f7fe fd0a 	bl	8000248 <__aeabi_dsub>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800183c:	f7ff fa2c 	bl	8000c98 <__aeabi_dcmpgt>
 8001840:	2800      	cmp	r0, #0
 8001842:	f040 810d 	bne.w	8001a60 <_dtoa_r+0x900>
 8001846:	45a2      	cmp	sl, r4
 8001848:	f000 80ea 	beq.w	8001a20 <_dtoa_r+0x8c0>
 800184c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001850:	4b5d      	ldr	r3, [pc, #372]	; (80019c8 <_dtoa_r+0x868>)
 8001852:	2200      	movs	r2, #0
 8001854:	f7fe feb0 	bl	80005b8 <__aeabi_dmul>
 8001858:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <_dtoa_r+0x868>)
 800185a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800185e:	2200      	movs	r2, #0
 8001860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001864:	f7fe fea8 	bl	80005b8 <__aeabi_dmul>
 8001868:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800186c:	e7c2      	b.n	80017f4 <_dtoa_r+0x694>
 800186e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001872:	f7fe fea1 	bl	80005b8 <__aeabi_dmul>
 8001876:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800187a:	f8dd a020 	ldr.w	sl, [sp, #32]
 800187e:	46a0      	mov	r8, r4
 8001880:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001884:	f7ff fa28 	bl	8000cd8 <__aeabi_d2iz>
 8001888:	4605      	mov	r5, r0
 800188a:	f7fe fe2b 	bl	80004e4 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001896:	f7fe fcd7 	bl	8000248 <__aeabi_dsub>
 800189a:	3530      	adds	r5, #48	; 0x30
 800189c:	f80a 5b01 	strb.w	r5, [sl], #1
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	45a2      	cmp	sl, r4
 80018a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	d123      	bne.n	80018f8 <_dtoa_r+0x798>
 80018b0:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <_dtoa_r+0x878>)
 80018b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80018b6:	f7fe fcc9 	bl	800024c <__adddf3>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80018c2:	f7ff f9e9 	bl	8000c98 <__aeabi_dcmpgt>
 80018c6:	2800      	cmp	r0, #0
 80018c8:	f040 80ca 	bne.w	8001a60 <_dtoa_r+0x900>
 80018cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80018d0:	4941      	ldr	r1, [pc, #260]	; (80019d8 <_dtoa_r+0x878>)
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7fe fcb8 	bl	8000248 <__aeabi_dsub>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80018e0:	f7ff f9bc 	bl	8000c5c <__aeabi_dcmplt>
 80018e4:	b170      	cbz	r0, 8001904 <_dtoa_r+0x7a4>
 80018e6:	46c2      	mov	sl, r8
 80018e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80018ec:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 80018f0:	2b30      	cmp	r3, #48	; 0x30
 80018f2:	d0f8      	beq.n	80018e6 <_dtoa_r+0x786>
 80018f4:	4637      	mov	r7, r6
 80018f6:	e055      	b.n	80019a4 <_dtoa_r+0x844>
 80018f8:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <_dtoa_r+0x868>)
 80018fa:	f7fe fe5d 	bl	80005b8 <__aeabi_dmul>
 80018fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001902:	e7bd      	b.n	8001880 <_dtoa_r+0x720>
 8001904:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8001908:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800190c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800190e:	2b00      	cmp	r3, #0
 8001910:	f6ff ae28 	blt.w	8001564 <_dtoa_r+0x404>
 8001914:	2f0e      	cmp	r7, #14
 8001916:	f73f ae25 	bgt.w	8001564 <_dtoa_r+0x404>
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <_dtoa_r+0x874>)
 800191c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8001920:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001924:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8001928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800192a:	2b00      	cmp	r3, #0
 800192c:	da02      	bge.n	8001934 <_dtoa_r+0x7d4>
 800192e:	f1b9 0f00 	cmp.w	r9, #0
 8001932:	d064      	beq.n	80019fe <_dtoa_r+0x89e>
 8001934:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8001938:	f8dd a020 	ldr.w	sl, [sp, #32]
 800193c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe ff62 	bl	800080c <__aeabi_ddiv>
 8001948:	f7ff f9c6 	bl	8000cd8 <__aeabi_d2iz>
 800194c:	4606      	mov	r6, r0
 800194e:	f7fe fdc9 	bl	80004e4 <__aeabi_i2d>
 8001952:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001956:	f7fe fe2f 	bl	80005b8 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8001966:	f7fe fc6f 	bl	8000248 <__aeabi_dsub>
 800196a:	f80a 4b01 	strb.w	r4, [sl], #1
 800196e:	9c08      	ldr	r4, [sp, #32]
 8001970:	ebaa 0404 	sub.w	r4, sl, r4
 8001974:	45a1      	cmp	r9, r4
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	f040 8082 	bne.w	8001a82 <_dtoa_r+0x922>
 800197e:	f7fe fc65 	bl	800024c <__adddf3>
 8001982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
 800198a:	f7ff f985 	bl	8000c98 <__aeabi_dcmpgt>
 800198e:	2800      	cmp	r0, #0
 8001990:	d165      	bne.n	8001a5e <_dtoa_r+0x8fe>
 8001992:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f7ff f955 	bl	8000c48 <__aeabi_dcmpeq>
 800199e:	b108      	cbz	r0, 80019a4 <_dtoa_r+0x844>
 80019a0:	07f3      	lsls	r3, r6, #31
 80019a2:	d45c      	bmi.n	8001a5e <_dtoa_r+0x8fe>
 80019a4:	9903      	ldr	r1, [sp, #12]
 80019a6:	4658      	mov	r0, fp
 80019a8:	f009 fbf0 	bl	800b18c <_Bfree>
 80019ac:	2300      	movs	r3, #0
 80019ae:	f88a 3000 	strb.w	r3, [sl]
 80019b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80019b4:	3701      	adds	r7, #1
 80019b6:	601f      	str	r7, [r3, #0]
 80019b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f43f ac1b 	beq.w	80011f6 <_dtoa_r+0x96>
 80019c0:	f8c3 a000 	str.w	sl, [r3]
 80019c4:	e417      	b.n	80011f6 <_dtoa_r+0x96>
 80019c6:	bf00      	nop
 80019c8:	40240000 	.word	0x40240000
 80019cc:	401c0000 	.word	0x401c0000
 80019d0:	40140000 	.word	0x40140000
 80019d4:	0800dc00 	.word	0x0800dc00
 80019d8:	3fe00000 	.word	0x3fe00000
 80019dc:	3ff00000 	.word	0x3ff00000
 80019e0:	4ba2      	ldr	r3, [pc, #648]	; (8001c6c <_dtoa_r+0xb0c>)
 80019e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80019e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019ea:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80019ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	da9f      	bge.n	8001934 <_dtoa_r+0x7d4>
 80019f4:	f1b9 0f00 	cmp.w	r9, #0
 80019f8:	dc9c      	bgt.n	8001934 <_dtoa_r+0x7d4>
 80019fa:	f47f aec3 	bne.w	8001784 <_dtoa_r+0x624>
 80019fe:	4b9c      	ldr	r3, [pc, #624]	; (8001c70 <_dtoa_r+0xb10>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001a06:	f7fe fdd7 	bl	80005b8 <__aeabi_dmul>
 8001a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001a0e:	f7ff f939 	bl	8000c84 <__aeabi_dcmpge>
 8001a12:	4604      	mov	r4, r0
 8001a14:	2800      	cmp	r0, #0
 8001a16:	f47f aeb5 	bne.w	8001784 <_dtoa_r+0x624>
 8001a1a:	463e      	mov	r6, r7
 8001a1c:	4625      	mov	r5, r4
 8001a1e:	e0b4      	b.n	8001b8a <_dtoa_r+0xa2a>
 8001a20:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8001a24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db01      	blt.n	8001a32 <_dtoa_r+0x8d2>
 8001a2e:	2f0e      	cmp	r7, #14
 8001a30:	ddd6      	ble.n	80019e0 <_dtoa_r+0x880>
 8001a32:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001a34:	2a01      	cmp	r2, #1
 8001a36:	dc36      	bgt.n	8001aa6 <_dtoa_r+0x946>
 8001a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001a3a:	b382      	cbz	r2, 8001a9e <_dtoa_r+0x93e>
 8001a3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8001a40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8001a42:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001a46:	9a06      	ldr	r2, [sp, #24]
 8001a48:	441a      	add	r2, r3
 8001a4a:	9206      	str	r2, [sp, #24]
 8001a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a4e:	2101      	movs	r1, #1
 8001a50:	441a      	add	r2, r3
 8001a52:	4658      	mov	r0, fp
 8001a54:	920a      	str	r2, [sp, #40]	; 0x28
 8001a56:	f009 fc01 	bl	800b25c <__i2b>
 8001a5a:	4605      	mov	r5, r0
 8001a5c:	e586      	b.n	800156c <_dtoa_r+0x40c>
 8001a5e:	463e      	mov	r6, r7
 8001a60:	4653      	mov	r3, sl
 8001a62:	469a      	mov	sl, r3
 8001a64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001a68:	2a39      	cmp	r2, #57	; 0x39
 8001a6a:	d106      	bne.n	8001a7a <_dtoa_r+0x91a>
 8001a6c:	9a08      	ldr	r2, [sp, #32]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d1f7      	bne.n	8001a62 <_dtoa_r+0x902>
 8001a72:	9908      	ldr	r1, [sp, #32]
 8001a74:	2230      	movs	r2, #48	; 0x30
 8001a76:	3601      	adds	r6, #1
 8001a78:	700a      	strb	r2, [r1, #0]
 8001a7a:	781a      	ldrb	r2, [r3, #0]
 8001a7c:	3201      	adds	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	e738      	b.n	80018f4 <_dtoa_r+0x794>
 8001a82:	4b7c      	ldr	r3, [pc, #496]	; (8001c74 <_dtoa_r+0xb14>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	f7fe fd97 	bl	80005b8 <__aeabi_dmul>
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4604      	mov	r4, r0
 8001a90:	460d      	mov	r5, r1
 8001a92:	f7ff f8d9 	bl	8000c48 <__aeabi_dcmpeq>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	f43f af50 	beq.w	800193c <_dtoa_r+0x7dc>
 8001a9c:	e782      	b.n	80019a4 <_dtoa_r+0x844>
 8001a9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001aa0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8001aa4:	e7cc      	b.n	8001a40 <_dtoa_r+0x8e0>
 8001aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001aa8:	f109 34ff 	add.w	r4, r9, #4294967295
 8001aac:	42a3      	cmp	r3, r4
 8001aae:	db08      	blt.n	8001ac2 <_dtoa_r+0x962>
 8001ab0:	f1b9 0f00 	cmp.w	r9, #0
 8001ab4:	eba3 0404 	sub.w	r4, r3, r4
 8001ab8:	db0e      	blt.n	8001ad8 <_dtoa_r+0x978>
 8001aba:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001abe:	464b      	mov	r3, r9
 8001ac0:	e7c1      	b.n	8001a46 <_dtoa_r+0x8e6>
 8001ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ac4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001ac6:	940b      	str	r4, [sp, #44]	; 0x2c
 8001ac8:	1ae3      	subs	r3, r4, r3
 8001aca:	441a      	add	r2, r3
 8001acc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001ad0:	920f      	str	r2, [sp, #60]	; 0x3c
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	2400      	movs	r4, #0
 8001ad6:	e7b6      	b.n	8001a46 <_dtoa_r+0x8e6>
 8001ad8:	9b06      	ldr	r3, [sp, #24]
 8001ada:	eba3 0809 	sub.w	r8, r3, r9
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e7b1      	b.n	8001a46 <_dtoa_r+0x8e6>
 8001ae2:	9e03      	ldr	r6, [sp, #12]
 8001ae4:	e571      	b.n	80015ca <_dtoa_r+0x46a>
 8001ae6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001ae8:	9903      	ldr	r1, [sp, #12]
 8001aea:	e570      	b.n	80015ce <_dtoa_r+0x46e>
 8001aec:	9603      	str	r6, [sp, #12]
 8001aee:	e572      	b.n	80015d6 <_dtoa_r+0x476>
 8001af0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	dc17      	bgt.n	8001b26 <_dtoa_r+0x9c6>
 8001af6:	9b04      	ldr	r3, [sp, #16]
 8001af8:	b9ab      	cbnz	r3, 8001b26 <_dtoa_r+0x9c6>
 8001afa:	9b05      	ldr	r3, [sp, #20]
 8001afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b00:	b99b      	cbnz	r3, 8001b2a <_dtoa_r+0x9ca>
 8001b02:	9b05      	ldr	r3, [sp, #20]
 8001b04:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8001b08:	0d36      	lsrs	r6, r6, #20
 8001b0a:	0536      	lsls	r6, r6, #20
 8001b0c:	b136      	cbz	r6, 8001b1c <_dtoa_r+0x9bc>
 8001b0e:	9b06      	ldr	r3, [sp, #24]
 8001b10:	3301      	adds	r3, #1
 8001b12:	9306      	str	r3, [sp, #24]
 8001b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b16:	3301      	adds	r3, #1
 8001b18:	930a      	str	r3, [sp, #40]	; 0x28
 8001b1a:	2601      	movs	r6, #1
 8001b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f47f ad70 	bne.w	8001604 <_dtoa_r+0x4a4>
 8001b24:	960f      	str	r6, [sp, #60]	; 0x3c
 8001b26:	2001      	movs	r0, #1
 8001b28:	e575      	b.n	8001616 <_dtoa_r+0x4b6>
 8001b2a:	2600      	movs	r6, #0
 8001b2c:	e7f6      	b.n	8001b1c <_dtoa_r+0x9bc>
 8001b2e:	f43f ad86 	beq.w	800163e <_dtoa_r+0x4de>
 8001b32:	9a06      	ldr	r2, [sp, #24]
 8001b34:	331c      	adds	r3, #28
 8001b36:	441a      	add	r2, r3
 8001b38:	9206      	str	r2, [sp, #24]
 8001b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b3c:	441a      	add	r2, r3
 8001b3e:	4498      	add	r8, r3
 8001b40:	920a      	str	r2, [sp, #40]	; 0x28
 8001b42:	e57c      	b.n	800163e <_dtoa_r+0x4de>
 8001b44:	4603      	mov	r3, r0
 8001b46:	e7f4      	b.n	8001b32 <_dtoa_r+0x9d2>
 8001b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dc2b      	bgt.n	8001ba6 <_dtoa_r+0xa46>
 8001b4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	dc09      	bgt.n	8001b68 <_dtoa_r+0xa08>
 8001b54:	e027      	b.n	8001ba6 <_dtoa_r+0xa46>
 8001b56:	f1b9 0f00 	cmp.w	r9, #0
 8001b5a:	dc1d      	bgt.n	8001b98 <_dtoa_r+0xa38>
 8001b5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	dd1a      	ble.n	8001b98 <_dtoa_r+0xa38>
 8001b62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001b66:	463e      	mov	r6, r7
 8001b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f47f ae0c 	bne.w	8001788 <_dtoa_r+0x628>
 8001b70:	4621      	mov	r1, r4
 8001b72:	2205      	movs	r2, #5
 8001b74:	4658      	mov	r0, fp
 8001b76:	f009 fb2b 	bl	800b1d0 <__multadd>
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	4604      	mov	r4, r0
 8001b7e:	9803      	ldr	r0, [sp, #12]
 8001b80:	f00b fc11 	bl	800d3a6 <__mcmp>
 8001b84:	2800      	cmp	r0, #0
 8001b86:	f77f adff 	ble.w	8001788 <_dtoa_r+0x628>
 8001b8a:	f8dd a020 	ldr.w	sl, [sp, #32]
 8001b8e:	2331      	movs	r3, #49	; 0x31
 8001b90:	f80a 3b01 	strb.w	r3, [sl], #1
 8001b94:	3601      	adds	r6, #1
 8001b96:	e5fb      	b.n	8001790 <_dtoa_r+0x630>
 8001b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001b9e:	463e      	mov	r6, r7
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f47f ad83 	bne.w	80016ac <_dtoa_r+0x54c>
 8001ba6:	9f08      	ldr	r7, [sp, #32]
 8001ba8:	9803      	ldr	r0, [sp, #12]
 8001baa:	4621      	mov	r1, r4
 8001bac:	f00b fa2f 	bl	800d00e <quorem>
 8001bb0:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8001bb4:	f807 9b01 	strb.w	r9, [r7], #1
 8001bb8:	9b08      	ldr	r3, [sp, #32]
 8001bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bbc:	1afb      	subs	r3, r7, r3
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	f340 80cb 	ble.w	8001d5a <_dtoa_r+0xbfa>
 8001bc4:	9903      	ldr	r1, [sp, #12]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	220a      	movs	r2, #10
 8001bca:	4658      	mov	r0, fp
 8001bcc:	f009 fb00 	bl	800b1d0 <__multadd>
 8001bd0:	9003      	str	r0, [sp, #12]
 8001bd2:	e7e9      	b.n	8001ba8 <_dtoa_r+0xa48>
 8001bd4:	692a      	ldr	r2, [r5, #16]
 8001bd6:	3202      	adds	r2, #2
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	f105 010c 	add.w	r1, r5, #12
 8001bde:	300c      	adds	r0, #12
 8001be0:	f00b f866 	bl	800ccb0 <memcpy>
 8001be4:	2201      	movs	r2, #1
 8001be6:	4639      	mov	r1, r7
 8001be8:	4658      	mov	r0, fp
 8001bea:	f009 fc51 	bl	800b490 <__lshift>
 8001bee:	9b08      	ldr	r3, [sp, #32]
 8001bf0:	f103 0a01 	add.w	sl, r3, #1
 8001bf4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8001bfc:	9b04      	ldr	r3, [sp, #16]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	46a8      	mov	r8, r5
 8001c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c06:	4605      	mov	r5, r0
 8001c08:	f10a 33ff 	add.w	r3, sl, #4294967295
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	9803      	ldr	r0, [sp, #12]
 8001c10:	9306      	str	r3, [sp, #24]
 8001c12:	f00b f9fc 	bl	800d00e <quorem>
 8001c16:	4641      	mov	r1, r8
 8001c18:	9009      	str	r0, [sp, #36]	; 0x24
 8001c1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8001c1e:	9803      	ldr	r0, [sp, #12]
 8001c20:	f00b fbc1 	bl	800d3a6 <__mcmp>
 8001c24:	462a      	mov	r2, r5
 8001c26:	4621      	mov	r1, r4
 8001c28:	4607      	mov	r7, r0
 8001c2a:	4658      	mov	r0, fp
 8001c2c:	f009 fc9c 	bl	800b568 <__mdiff>
 8001c30:	68c2      	ldr	r2, [r0, #12]
 8001c32:	4601      	mov	r1, r0
 8001c34:	b302      	cbz	r2, 8001c78 <_dtoa_r+0xb18>
 8001c36:	4658      	mov	r0, fp
 8001c38:	f009 faa8 	bl	800b18c <_Bfree>
 8001c3c:	2f00      	cmp	r7, #0
 8001c3e:	da3a      	bge.n	8001cb6 <_dtoa_r+0xb56>
 8001c40:	9903      	ldr	r1, [sp, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	4658      	mov	r0, fp
 8001c46:	f009 fc23 	bl	800b490 <__lshift>
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	9003      	str	r0, [sp, #12]
 8001c4e:	f00b fbaa 	bl	800d3a6 <__mcmp>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	dc03      	bgt.n	8001c5e <_dtoa_r+0xafe>
 8001c56:	d129      	bne.n	8001cac <_dtoa_r+0xb4c>
 8001c58:	f019 0f01 	tst.w	r9, #1
 8001c5c:	d026      	beq.n	8001cac <_dtoa_r+0xb4c>
 8001c5e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8001c62:	d11d      	bne.n	8001ca0 <_dtoa_r+0xb40>
 8001c64:	e032      	b.n	8001ccc <_dtoa_r+0xb6c>
 8001c66:	4628      	mov	r0, r5
 8001c68:	e7c1      	b.n	8001bee <_dtoa_r+0xa8e>
 8001c6a:	bf00      	nop
 8001c6c:	0800dc00 	.word	0x0800dc00
 8001c70:	40140000 	.word	0x40140000
 8001c74:	40240000 	.word	0x40240000
 8001c78:	900e      	str	r0, [sp, #56]	; 0x38
 8001c7a:	9803      	ldr	r0, [sp, #12]
 8001c7c:	f00b fb93 	bl	800d3a6 <__mcmp>
 8001c80:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001c82:	900c      	str	r0, [sp, #48]	; 0x30
 8001c84:	4658      	mov	r0, fp
 8001c86:	f009 fa81 	bl	800b18c <_Bfree>
 8001c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c8c:	bb5a      	cbnz	r2, 8001ce6 <_dtoa_r+0xb86>
 8001c8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001c90:	b953      	cbnz	r3, 8001ca8 <_dtoa_r+0xb48>
 8001c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001c94:	b943      	cbnz	r3, 8001ca8 <_dtoa_r+0xb48>
 8001c96:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8001c9a:	d017      	beq.n	8001ccc <_dtoa_r+0xb6c>
 8001c9c:	2f00      	cmp	r7, #0
 8001c9e:	dd05      	ble.n	8001cac <_dtoa_r+0xb4c>
 8001ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ca2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8001ca6:	e001      	b.n	8001cac <_dtoa_r+0xb4c>
 8001ca8:	2f00      	cmp	r7, #0
 8001caa:	da2a      	bge.n	8001d02 <_dtoa_r+0xba2>
 8001cac:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001cb0:	f80a 9b01 	strb.w	r9, [sl], #1
 8001cb4:	e56e      	b.n	8001794 <_dtoa_r+0x634>
 8001cb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001cb8:	433b      	orrs	r3, r7
 8001cba:	d104      	bne.n	8001cc6 <_dtoa_r+0xb66>
 8001cbc:	9b04      	ldr	r3, [sp, #16]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0bc      	beq.n	8001c40 <_dtoa_r+0xae0>
 8001cc6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8001cca:	d136      	bne.n	8001d3a <_dtoa_r+0xbda>
 8001ccc:	9f06      	ldr	r7, [sp, #24]
 8001cce:	2339      	movs	r3, #57	; 0x39
 8001cd0:	f807 3b01 	strb.w	r3, [r7], #1
 8001cd4:	46ba      	mov	sl, r7
 8001cd6:	3f01      	subs	r7, #1
 8001cd8:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8001cdc:	2b39      	cmp	r3, #57	; 0x39
 8001cde:	d05b      	beq.n	8001d98 <_dtoa_r+0xc38>
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	703b      	strb	r3, [r7, #0]
 8001ce4:	e556      	b.n	8001794 <_dtoa_r+0x634>
 8001ce6:	2f00      	cmp	r7, #0
 8001ce8:	db06      	blt.n	8001cf8 <_dtoa_r+0xb98>
 8001cea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001cec:	433b      	orrs	r3, r7
 8001cee:	d106      	bne.n	8001cfe <_dtoa_r+0xb9e>
 8001cf0:	9b04      	ldr	r3, [sp, #16]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	b913      	cbnz	r3, 8001cfe <_dtoa_r+0xb9e>
 8001cf8:	2a00      	cmp	r2, #0
 8001cfa:	dca1      	bgt.n	8001c40 <_dtoa_r+0xae0>
 8001cfc:	e7d6      	b.n	8001cac <_dtoa_r+0xb4c>
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	dce1      	bgt.n	8001cc6 <_dtoa_r+0xb66>
 8001d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d04:	f80a 9c01 	strb.w	r9, [sl, #-1]
 8001d08:	4553      	cmp	r3, sl
 8001d0a:	4657      	mov	r7, sl
 8001d0c:	d02f      	beq.n	8001d6e <_dtoa_r+0xc0e>
 8001d0e:	9903      	ldr	r1, [sp, #12]
 8001d10:	2300      	movs	r3, #0
 8001d12:	220a      	movs	r2, #10
 8001d14:	4658      	mov	r0, fp
 8001d16:	f009 fa5b 	bl	800b1d0 <__multadd>
 8001d1a:	45a8      	cmp	r8, r5
 8001d1c:	9003      	str	r0, [sp, #12]
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	f04f 020a 	mov.w	r2, #10
 8001d26:	4641      	mov	r1, r8
 8001d28:	4658      	mov	r0, fp
 8001d2a:	d10b      	bne.n	8001d44 <_dtoa_r+0xbe4>
 8001d2c:	f009 fa50 	bl	800b1d0 <__multadd>
 8001d30:	4680      	mov	r8, r0
 8001d32:	4605      	mov	r5, r0
 8001d34:	f10a 0a01 	add.w	sl, sl, #1
 8001d38:	e766      	b.n	8001c08 <_dtoa_r+0xaa8>
 8001d3a:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001d3e:	f109 0901 	add.w	r9, r9, #1
 8001d42:	e7b5      	b.n	8001cb0 <_dtoa_r+0xb50>
 8001d44:	f009 fa44 	bl	800b1d0 <__multadd>
 8001d48:	4629      	mov	r1, r5
 8001d4a:	4680      	mov	r8, r0
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	220a      	movs	r2, #10
 8001d50:	4658      	mov	r0, fp
 8001d52:	f009 fa3d 	bl	800b1d0 <__multadd>
 8001d56:	4605      	mov	r5, r0
 8001d58:	e7ec      	b.n	8001d34 <_dtoa_r+0xbd4>
 8001d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bfc8      	it	gt
 8001d60:	461f      	movgt	r7, r3
 8001d62:	9b08      	ldr	r3, [sp, #32]
 8001d64:	bfd8      	it	le
 8001d66:	2701      	movle	r7, #1
 8001d68:	441f      	add	r7, r3
 8001d6a:	f04f 0800 	mov.w	r8, #0
 8001d6e:	9903      	ldr	r1, [sp, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4658      	mov	r0, fp
 8001d74:	f009 fb8c 	bl	800b490 <__lshift>
 8001d78:	4621      	mov	r1, r4
 8001d7a:	9003      	str	r0, [sp, #12]
 8001d7c:	f00b fb13 	bl	800d3a6 <__mcmp>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	dca7      	bgt.n	8001cd4 <_dtoa_r+0xb74>
 8001d84:	d102      	bne.n	8001d8c <_dtoa_r+0xc2c>
 8001d86:	f019 0f01 	tst.w	r9, #1
 8001d8a:	d1a3      	bne.n	8001cd4 <_dtoa_r+0xb74>
 8001d8c:	46ba      	mov	sl, r7
 8001d8e:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
 8001d92:	2b30      	cmp	r3, #48	; 0x30
 8001d94:	d0fa      	beq.n	8001d8c <_dtoa_r+0xc2c>
 8001d96:	e4fd      	b.n	8001794 <_dtoa_r+0x634>
 8001d98:	9b08      	ldr	r3, [sp, #32]
 8001d9a:	42bb      	cmp	r3, r7
 8001d9c:	d19a      	bne.n	8001cd4 <_dtoa_r+0xb74>
 8001d9e:	9a08      	ldr	r2, [sp, #32]
 8001da0:	2331      	movs	r3, #49	; 0x31
 8001da2:	3601      	adds	r6, #1
 8001da4:	7013      	strb	r3, [r2, #0]
 8001da6:	e4f5      	b.n	8001794 <_dtoa_r+0x634>
 8001da8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f47f aa1e 	bne.w	80011ec <_dtoa_r+0x8c>
 8001db0:	4b01      	ldr	r3, [pc, #4]	; (8001db8 <_dtoa_r+0xc58>)
 8001db2:	f7ff ba3d 	b.w	8001230 <_dtoa_r+0xd0>
 8001db6:	bf00      	nop
 8001db8:	080143c4 	.word	0x080143c4

08001dbc <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
 8001dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
 8001dc0:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
	__unused const struct gpio_driver_config *const cfg =
 8001dc4:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
 8001dc8:	6906      	ldr	r6, [r0, #16]
{
 8001dca:	4613      	mov	r3, r2
	__ASSERT((flags & GPIO_INT_MASK) == 0,
 8001dcc:	d00e      	beq.n	8001dec <z_impl_gpio_pin_configure+0x30>
 8001dce:	4942      	ldr	r1, [pc, #264]	; (8001ed8 <z_impl_gpio_pin_configure+0x11c>)
 8001dd0:	4a42      	ldr	r2, [pc, #264]	; (8001edc <z_impl_gpio_pin_configure+0x120>)
 8001dd2:	4843      	ldr	r0, [pc, #268]	; (8001ee0 <z_impl_gpio_pin_configure+0x124>)
 8001dd4:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001dd8:	f009 ffcf 	bl	800bd7a <assert_print>
 8001ddc:	4841      	ldr	r0, [pc, #260]	; (8001ee4 <z_impl_gpio_pin_configure+0x128>)
 8001dde:	f009 ffcc 	bl	800bd7a <assert_print>
 8001de2:	f44f 712f 	mov.w	r1, #700	; 0x2bc
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
 8001de6:	483d      	ldr	r0, [pc, #244]	; (8001edc <z_impl_gpio_pin_configure+0x120>)
 8001de8:	f009 ffc0 	bl	800bd6c <assert_post_action>
 8001dec:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001df0:	2a30      	cmp	r2, #48	; 0x30
 8001df2:	d10c      	bne.n	8001e0e <z_impl_gpio_pin_configure+0x52>
 8001df4:	493c      	ldr	r1, [pc, #240]	; (8001ee8 <z_impl_gpio_pin_configure+0x12c>)
 8001df6:	4a39      	ldr	r2, [pc, #228]	; (8001edc <z_impl_gpio_pin_configure+0x120>)
 8001df8:	4839      	ldr	r0, [pc, #228]	; (8001ee0 <z_impl_gpio_pin_configure+0x124>)
 8001dfa:	f240 23bf 	movw	r3, #703	; 0x2bf
 8001dfe:	f009 ffbc 	bl	800bd7a <assert_print>
 8001e02:	483a      	ldr	r0, [pc, #232]	; (8001eec <z_impl_gpio_pin_configure+0x130>)
 8001e04:	f009 ffb9 	bl	800bd7a <assert_print>
 8001e08:	f240 21bf 	movw	r1, #703	; 0x2bf
 8001e0c:	e7eb      	b.n	8001de6 <z_impl_gpio_pin_configure+0x2a>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
 8001e0e:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
 8001e12:	2a02      	cmp	r2, #2
 8001e14:	d10c      	bne.n	8001e30 <z_impl_gpio_pin_configure+0x74>
 8001e16:	4936      	ldr	r1, [pc, #216]	; (8001ef0 <z_impl_gpio_pin_configure+0x134>)
 8001e18:	4a30      	ldr	r2, [pc, #192]	; (8001edc <z_impl_gpio_pin_configure+0x120>)
 8001e1a:	4831      	ldr	r0, [pc, #196]	; (8001ee0 <z_impl_gpio_pin_configure+0x124>)
 8001e1c:	f240 23c3 	movw	r3, #707	; 0x2c3
 8001e20:	f009 ffab 	bl	800bd7a <assert_print>
 8001e24:	4833      	ldr	r0, [pc, #204]	; (8001ef4 <z_impl_gpio_pin_configure+0x138>)
 8001e26:	f009 ffa8 	bl	800bd7a <assert_print>
 8001e2a:	f240 21c3 	movw	r1, #707	; 0x2c3
 8001e2e:	e7da      	b.n	8001de6 <z_impl_gpio_pin_configure+0x2a>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
 8001e30:	f003 0206 	and.w	r2, r3, #6
 8001e34:	2a04      	cmp	r2, #4
 8001e36:	d109      	bne.n	8001e4c <z_impl_gpio_pin_configure+0x90>
 8001e38:	492f      	ldr	r1, [pc, #188]	; (8001ef8 <z_impl_gpio_pin_configure+0x13c>)
 8001e3a:	4a28      	ldr	r2, [pc, #160]	; (8001edc <z_impl_gpio_pin_configure+0x120>)
 8001e3c:	4828      	ldr	r0, [pc, #160]	; (8001ee0 <z_impl_gpio_pin_configure+0x124>)
 8001e3e:	f240 23c7 	movw	r3, #711	; 0x2c7
 8001e42:	f009 ff9a 	bl	800bd7a <assert_print>
 8001e46:	f240 21c7 	movw	r1, #711	; 0x2c7
 8001e4a:	e7cc      	b.n	8001de6 <z_impl_gpio_pin_configure+0x2a>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
 8001e4c:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
 8001e50:	d016      	beq.n	8001e80 <z_impl_gpio_pin_configure+0xc4>
 8001e52:	039d      	lsls	r5, r3, #14
 8001e54:	d40c      	bmi.n	8001e70 <z_impl_gpio_pin_configure+0xb4>
 8001e56:	4929      	ldr	r1, [pc, #164]	; (8001efc <z_impl_gpio_pin_configure+0x140>)
 8001e58:	4a20      	ldr	r2, [pc, #128]	; (8001edc <z_impl_gpio_pin_configure+0x120>)
 8001e5a:	4821      	ldr	r0, [pc, #132]	; (8001ee0 <z_impl_gpio_pin_configure+0x124>)
 8001e5c:	f240 23ca 	movw	r3, #714	; 0x2ca
 8001e60:	f009 ff8b 	bl	800bd7a <assert_print>
 8001e64:	4826      	ldr	r0, [pc, #152]	; (8001f00 <z_impl_gpio_pin_configure+0x144>)
 8001e66:	f009 ff88 	bl	800bd7a <assert_print>
 8001e6a:	f240 21ca 	movw	r1, #714	; 0x2ca
 8001e6e:	e7ba      	b.n	8001de6 <z_impl_gpio_pin_configure+0x2a>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
 8001e70:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8001e74:	d018      	beq.n	8001ea8 <z_impl_gpio_pin_configure+0xec>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8001e76:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <z_impl_gpio_pin_configure+0x148>)
 8001e78:	439a      	bics	r2, r3
 8001e7a:	d101      	bne.n	8001e80 <z_impl_gpio_pin_configure+0xc4>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8001e7c:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8001e80:	6824      	ldr	r4, [r4, #0]
 8001e82:	2501      	movs	r5, #1
 8001e84:	408d      	lsls	r5, r1
 8001e86:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8001e88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8001e8c:	d119      	bne.n	8001ec2 <z_impl_gpio_pin_configure+0x106>
 8001e8e:	491e      	ldr	r1, [pc, #120]	; (8001f08 <z_impl_gpio_pin_configure+0x14c>)
 8001e90:	4a12      	ldr	r2, [pc, #72]	; (8001edc <z_impl_gpio_pin_configure+0x120>)
 8001e92:	4813      	ldr	r0, [pc, #76]	; (8001ee0 <z_impl_gpio_pin_configure+0x124>)
 8001e94:	f240 23da 	movw	r3, #730	; 0x2da
 8001e98:	f009 ff6f 	bl	800bd7a <assert_print>
 8001e9c:	481b      	ldr	r0, [pc, #108]	; (8001f0c <z_impl_gpio_pin_configure+0x150>)
 8001e9e:	f009 ff6c 	bl	800bd7a <assert_print>
 8001ea2:	f240 21da 	movw	r1, #730	; 0x2da
 8001ea6:	e79e      	b.n	8001de6 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
 8001ea8:	4919      	ldr	r1, [pc, #100]	; (8001f10 <z_impl_gpio_pin_configure+0x154>)
 8001eaa:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <z_impl_gpio_pin_configure+0x120>)
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <z_impl_gpio_pin_configure+0x124>)
 8001eae:	f240 23ce 	movw	r3, #718	; 0x2ce
 8001eb2:	f009 ff62 	bl	800bd7a <assert_print>
 8001eb6:	4817      	ldr	r0, [pc, #92]	; (8001f14 <z_impl_gpio_pin_configure+0x158>)
 8001eb8:	f009 ff5f 	bl	800bd7a <assert_print>
 8001ebc:	f240 21ce 	movw	r1, #718	; 0x2ce
 8001ec0:	e791      	b.n	8001de6 <z_impl_gpio_pin_configure+0x2a>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8001ec2:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8001ec4:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8001ec6:	bf4c      	ite	mi
 8001ec8:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8001eca:	43ac      	bicpl	r4, r5
 8001ecc:	6034      	str	r4, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
 8001ece:	683b      	ldr	r3, [r7, #0]
}
 8001ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
 8001ed4:	4718      	bx	r3
 8001ed6:	bf00      	nop
 8001ed8:	0800e13b 	.word	0x0800e13b
 8001edc:	0800e10a 	.word	0x0800e10a
 8001ee0:	0800e198 	.word	0x0800e198
 8001ee4:	0800e1b5 	.word	0x0800e1b5
 8001ee8:	0800e1d9 	.word	0x0800e1d9
 8001eec:	0800e212 	.word	0x0800e212
 8001ef0:	0800e24f 	.word	0x0800e24f
 8001ef4:	0800e284 	.word	0x0800e284
 8001ef8:	0800e2d6 	.word	0x0800e2d6
 8001efc:	0800e309 	.word	0x0800e309
 8001f00:	0800e34f 	.word	0x0800e34f
 8001f04:	00100001 	.word	0x00100001
 8001f08:	0800e3f7 	.word	0x0800e3f7
 8001f0c:	0800e435 	.word	0x0800e435
 8001f10:	0800e38a 	.word	0x0800e38a
 8001f14:	0800e3cb 	.word	0x0800e3cb

08001f18 <button_pressed>:
	}
}
K_WORK_DEFINE(my_work, work_handler);

void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
	k_work_submit(&my_work);
 8001f18:	4801      	ldr	r0, [pc, #4]	; (8001f20 <button_pressed+0x8>)
 8001f1a:	f006 ba3d 	b.w	8008398 <k_work_submit>
 8001f1e:	bf00      	nop
 8001f20:	200000a0 	.word	0x200000a0

08001f24 <st_temp_run>:
static void st_temp_run(void *o){
 8001f24:	b530      	push	{r4, r5, lr}
	char aux_buffer[5] = "-----";									// string é inicializada
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <st_temp_run+0x74>)
		display_blanking_off(dev);									// turn display buffer off, in order to change text
 8001f28:	4c1c      	ldr	r4, [pc, #112]	; (8001f9c <st_temp_run+0x78>)
	char aux_buffer[5] = "-----";									// string é inicializada
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	791b      	ldrb	r3, [r3, #4]
		sprintf(aux_buffer,"%2.1f", TempSensor_frio2);				// print to array the text with temperatura valor
 8001f2e:	4d1c      	ldr	r5, [pc, #112]	; (8001fa0 <st_temp_run+0x7c>)
static void st_temp_run(void *o){
 8001f30:	b085      	sub	sp, #20
	char aux_buffer[5] = "-----";									// string é inicializada
 8001f32:	9002      	str	r0, [sp, #8]
		display_blanking_off(dev);									// turn display buffer off, in order to change text
 8001f34:	6820      	ldr	r0, [r4, #0]
	char aux_buffer[5] = "-----";									// string é inicializada
 8001f36:	f88d 300c 	strb.w	r3, [sp, #12]
		display_blanking_off(dev);									// turn display buffer off, in order to change text
 8001f3a:	f009 fd9d 	bl	800ba78 <display_blanking_off.isra.0>
		cfb_framebuffer_clear(dev, false);							// clear display text buffer
 8001f3e:	2100      	movs	r1, #0
 8001f40:	6820      	ldr	r0, [r4, #0]
 8001f42:	f002 fd47 	bl	80049d4 <cfb_framebuffer_clear>
		cfb_framebuffer_set_font(dev, 0);							// set font size of display text
 8001f46:	2100      	movs	r1, #0
 8001f48:	6820      	ldr	r0, [r4, #0]
 8001f4a:	f002 fd85 	bl	8004a58 <cfb_framebuffer_set_font>
		sprintf(aux_buffer,"%2.1f", TempSensor_frio2);				// print to array the text with temperatura valor
 8001f4e:	6828      	ldr	r0, [r5, #0]
 8001f50:	f7fe fada 	bl	8000508 <__aeabi_f2d>
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <st_temp_run+0x80>)
 8001f56:	e9cd 0100 	strd	r0, r1, [sp]
 8001f5a:	2205      	movs	r2, #5
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	a802      	add	r0, sp, #8
 8001f60:	f00a fff1 	bl	800cf46 <__sprintf_chk>
		if (TempSensor_frio2 <0) cfb_print(dev,aux_buffer, 16, 0);	// write to the display buffer in this position if negative temperatura 
 8001f64:	6828      	ldr	r0, [r5, #0]
 8001f66:	2100      	movs	r1, #0
 8001f68:	f7fe fdd6 	bl	8000b18 <__aeabi_fcmplt>
 8001f6c:	b170      	cbz	r0, 8001f8c <st_temp_run+0x68>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	2210      	movs	r2, #16
 8001f72:	a902      	add	r1, sp, #8
		else cfb_print(dev,aux_buffer, 16, 8);						// write to the display buffer in this position if positive temperatura
 8001f74:	6820      	ldr	r0, [r4, #0]
 8001f76:	f002 fc53 	bl	8004820 <cfb_print>
		cfb_framebuffer_finalize(dev);								// play the buffer in display
 8001f7a:	6820      	ldr	r0, [r4, #0]
 8001f7c:	f002 fd3a 	bl	80049f4 <cfb_framebuffer_finalize>
	smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Idle]);			// set next SMT state	
 8001f80:	4909      	ldr	r1, [pc, #36]	; (8001fa8 <st_temp_run+0x84>)
 8001f82:	480a      	ldr	r0, [pc, #40]	; (8001fac <st_temp_run+0x88>)
 8001f84:	f003 fd18 	bl	80059b8 <smf_set_state>
	}
 8001f88:	b005      	add	sp, #20
 8001f8a:	bd30      	pop	{r4, r5, pc}
		else cfb_print(dev,aux_buffer, 16, 8);						// write to the display buffer in this position if positive temperatura
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	2210      	movs	r2, #16
 8001f90:	eb0d 0103 	add.w	r1, sp, r3
 8001f94:	e7ee      	b.n	8001f74 <st_temp_run+0x50>
 8001f96:	bf00      	nop
 8001f98:	0800e44d 	.word	0x0800e44d
 8001f9c:	20000acc 	.word	0x20000acc
 8001fa0:	20000ab0 	.word	0x20000ab0
 8001fa4:	0800e447 	.word	0x0800e447
 8001fa8:	0800dd68 	.word	0x0800dd68
 8001fac:	20000ab8 	.word	0x20000ab8

08001fb0 <gpio_pin_toggle_dt.constprop.0.isra.0>:
 *     gpio_pin_toggle(spec->port, spec->pin);
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
 8001fb0:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
 8001fb2:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <gpio_pin_toggle_dt.constprop.0.isra.0+0x38>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8001fb4:	6843      	ldr	r3, [r0, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	069b      	lsls	r3, r3, #26
 8001fba:	d40e      	bmi.n	8001fda <gpio_pin_toggle_dt.constprop.0.isra.0+0x2a>
 8001fbc:	490b      	ldr	r1, [pc, #44]	; (8001fec <gpio_pin_toggle_dt.constprop.0.isra.0+0x3c>)
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <gpio_pin_toggle_dt.constprop.0.isra.0+0x40>)
 8001fc0:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <gpio_pin_toggle_dt.constprop.0.isra.0+0x44>)
 8001fc2:	f240 534e 	movw	r3, #1358	; 0x54e
 8001fc6:	f009 fed8 	bl	800bd7a <assert_print>
 8001fca:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <gpio_pin_toggle_dt.constprop.0.isra.0+0x48>)
 8001fcc:	f009 fed5 	bl	800bd7a <assert_print>
 8001fd0:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <gpio_pin_toggle_dt.constprop.0.isra.0+0x40>)
 8001fd2:	f240 514e 	movw	r1, #1358	; 0x54e
 8001fd6:	f009 fec9 	bl	800bd6c <assert_post_action>
	return api->port_toggle_bits(port, pins);
 8001fda:	6883      	ldr	r3, [r0, #8]
{
	return gpio_pin_toggle(spec->port, spec->pin);
}
 8001fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_toggle_bits(port, pins);
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	2120      	movs	r1, #32
 8001fe4:	4718      	bx	r3
 8001fe6:	bf00      	nop
 8001fe8:	0800d788 	.word	0x0800d788
 8001fec:	0800e3f7 	.word	0x0800e3f7
 8001ff0:	0800e10a 	.word	0x0800e10a
 8001ff4:	0800e198 	.word	0x0800e198
 8001ff8:	0800e435 	.word	0x0800e435

08001ffc <gpio_pin_set.constprop.0.isra.0>:
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
 8001ffc:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8001ffe:	2301      	movs	r3, #1
 8002000:	fa03 f101 	lsl.w	r1, r3, r1
 8002004:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
 8002006:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4219      	tst	r1, r3
 800200c:	d10e      	bne.n	800202c <gpio_pin_set.constprop.0.isra.0+0x30>
 800200e:	490c      	ldr	r1, [pc, #48]	; (8002040 <gpio_pin_set.constprop.0.isra.0+0x44>)
 8002010:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <gpio_pin_set.constprop.0.isra.0+0x48>)
 8002012:	480d      	ldr	r0, [pc, #52]	; (8002048 <gpio_pin_set.constprop.0.isra.0+0x4c>)
 8002014:	f240 5325 	movw	r3, #1317	; 0x525
 8002018:	f009 feaf 	bl	800bd7a <assert_print>
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <gpio_pin_set.constprop.0.isra.0+0x50>)
 800201e:	f009 feac 	bl	800bd7a <assert_print>
 8002022:	4808      	ldr	r0, [pc, #32]	; (8002044 <gpio_pin_set.constprop.0.isra.0+0x48>)
 8002024:	f240 5125 	movw	r1, #1317	; 0x525
 8002028:	f009 fea0 	bl	800bd6c <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 8002030:	6883      	ldr	r3, [r0, #8]
}
 8002032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
 8002036:	bf0c      	ite	eq
 8002038:	691b      	ldreq	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 800203a:	68db      	ldrne	r3, [r3, #12]
 800203c:	4718      	bx	r3
 800203e:	bf00      	nop
 8002040:	0800e3f7 	.word	0x0800e3f7
 8002044:	0800e10a 	.word	0x0800e10a
 8002048:	0800e198 	.word	0x0800e198
 800204c:	0800e435 	.word	0x0800e435

08002050 <work_handler>:
void work_handler(struct k_work *work){
 8002050:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (sistem_ON){		// se equipamento está ligado então vai desliGar ao acionamento do BT_LIGA_DESL 
 8002054:	4e37      	ldr	r6, [pc, #220]	; (8002134 <work_handler+0xe4>)
 8002056:	7833      	ldrb	r3, [r6, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d061      	beq.n	8002120 <work_handler+0xd0>
	__unused const struct gpio_driver_config *const cfg =
 800205c:	4c36      	ldr	r4, [pc, #216]	; (8002138 <work_handler+0xe8>)
	return gpio_pin_set(spec->port, spec->pin, value);
 800205e:	4837      	ldr	r0, [pc, #220]	; (800213c <work_handler+0xec>)
 8002060:	2105      	movs	r1, #5
 8002062:	f7ff ffcb 	bl	8001ffc <gpio_pin_set.constprop.0.isra.0>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8002066:	6867      	ldr	r7, [r4, #4]
	int time_aux=0; 
 8002068:	f04f 0800 	mov.w	r8, #0
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	049b      	lsls	r3, r3, #18
 8002070:	d445      	bmi.n	80020fe <work_handler+0xae>
 8002072:	4933      	ldr	r1, [pc, #204]	; (8002140 <work_handler+0xf0>)
 8002074:	4a33      	ldr	r2, [pc, #204]	; (8002144 <work_handler+0xf4>)
 8002076:	4834      	ldr	r0, [pc, #208]	; (8002148 <work_handler+0xf8>)
 8002078:	f240 43cc 	movw	r3, #1228	; 0x4cc
 800207c:	f009 fe7d 	bl	800bd7a <assert_print>
 8002080:	4832      	ldr	r0, [pc, #200]	; (800214c <work_handler+0xfc>)
 8002082:	f009 fe7a 	bl	800bd7a <assert_print>
 8002086:	482f      	ldr	r0, [pc, #188]	; (8002144 <work_handler+0xf4>)
 8002088:	f240 41cc 	movw	r1, #1228	; 0x4cc
 800208c:	f009 fe6e 	bl	800bd6c <assert_post_action>
				k_msleep(50);				// então equipamento será desligado, se ficar menos de XX segundos não será desligado.
 8002090:	2032      	movs	r0, #50	; 0x32
 8002092:	f009 fcf4 	bl	800ba7e <k_msleep.isra.0>
				time_aux = time_aux +50;
 8002096:	f108 0832 	add.w	r8, r8, #50	; 0x32
				if (time_aux > BUTTON_OFF_TIME) break;
 800209a:	f640 33ea 	movw	r3, #3050	; 0xbea
 800209e:	4598      	cmp	r8, r3
 80020a0:	d1e4      	bne.n	800206c <work_handler+0x1c>
			gpio_pin_toggle_dt(&led);
 80020a2:	f7ff ff85 	bl	8001fb0 <gpio_pin_toggle_dt.constprop.0.isra.0>
			k_msleep(300);
 80020a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020aa:	f009 fce8 	bl	800ba7e <k_msleep.isra.0>
			gpio_pin_toggle_dt(&led);
 80020ae:	f7ff ff7f 	bl	8001fb0 <gpio_pin_toggle_dt.constprop.0.isra.0>
			k_msleep(300);
 80020b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020b6:	f009 fce2 	bl	800ba7e <k_msleep.isra.0>
			gpio_pin_toggle_dt(&led);
 80020ba:	f7ff ff79 	bl	8001fb0 <gpio_pin_toggle_dt.constprop.0.isra.0>
			k_msleep(300);
 80020be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020c2:	f009 fcdc 	bl	800ba7e <k_msleep.isra.0>
			gpio_pin_toggle_dt(&led);
 80020c6:	f7ff ff73 	bl	8001fb0 <gpio_pin_toggle_dt.constprop.0.isra.0>
			k_msleep(300);
 80020ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020ce:	f009 fcd6 	bl	800ba7e <k_msleep.isra.0>
			gpio_pin_toggle_dt(&led);
 80020d2:	f7ff ff6d 	bl	8001fb0 <gpio_pin_toggle_dt.constprop.0.isra.0>
			k_msleep(300);
 80020d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020da:	f009 fcd0 	bl	800ba7e <k_msleep.isra.0>
			gpio_pin_toggle_dt(&led);
 80020de:	f7ff ff67 	bl	8001fb0 <gpio_pin_toggle_dt.constprop.0.isra.0>
			k_msleep(300);
 80020e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020e6:	f009 fcca 	bl	800ba7e <k_msleep.isra.0>
			gpio_pin_toggle_dt(&led);
 80020ea:	f7ff ff61 	bl	8001fb0 <gpio_pin_toggle_dt.constprop.0.isra.0>
			k_msleep(300);
 80020ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020f2:	f009 fcc4 	bl	800ba7e <k_msleep.isra.0>
			sistem_ON = false;				// indica o ifrmware que o equipamento está desligado
 80020f6:	2300      	movs	r3, #0
			smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_BT_Fim]);	// STM em estado de Desligamento do Equipamento
 80020f8:	4915      	ldr	r1, [pc, #84]	; (8002150 <work_handler+0x100>)
			sistem_ON = false;				// indica o ifrmware que o equipamento está desligado
 80020fa:	7033      	strb	r3, [r6, #0]
			smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_BT_Fim]);	// STM em estado de Desligamento do Equipamento
 80020fc:	e013      	b.n	8002126 <work_handler+0xd6>
	const struct gpio_driver_data *const data =
 80020fe:	6925      	ldr	r5, [r4, #16]
	return api->port_get_raw(port, value);
 8002100:	68a3      	ldr	r3, [r4, #8]
 8002102:	a901      	add	r1, sp, #4
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4620      	mov	r0, r4
 8002108:	4798      	blx	r3
	if (ret == 0) {
 800210a:	b920      	cbnz	r0, 8002116 <work_handler+0xc6>
		*value ^= data->invert;
 800210c:	682b      	ldr	r3, [r5, #0]
 800210e:	9801      	ldr	r0, [sp, #4]
 8002110:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8002112:	f3c0 3040 	ubfx	r0, r0, #13, #1
		while(gpio_pin_get_dt(&button)==1){	// testa se botão BT_LIGA_DESL fica mais de XX segundos pressionados 
 8002116:	2801      	cmp	r0, #1
 8002118:	d0ba      	beq.n	8002090 <work_handler+0x40>
}
 800211a:	b002      	add	sp, #8
 800211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sistem_ON = true;					// indica o ifrmware que o equipamento está ligado
 8002120:	2301      	movs	r3, #1
		smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_BT_Inicio]);		// STM em estado de Ligar o Equipamento
 8002122:	490c      	ldr	r1, [pc, #48]	; (8002154 <work_handler+0x104>)
		sistem_ON = true;					// indica o ifrmware que o equipamento está ligado
 8002124:	7033      	strb	r3, [r6, #0]
			smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_BT_Fim]);	// STM em estado de Desligamento do Equipamento
 8002126:	480c      	ldr	r0, [pc, #48]	; (8002158 <work_handler+0x108>)
}
 8002128:	b002      	add	sp, #8
 800212a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_BT_Fim]);	// STM em estado de Desligamento do Equipamento
 800212e:	f003 bc43 	b.w	80059b8 <smf_set_state>
 8002132:	bf00      	nop
 8002134:	20000cfc 	.word	0x20000cfc
 8002138:	0800d758 	.word	0x0800d758
 800213c:	0800d788 	.word	0x0800d788
 8002140:	0800e3f7 	.word	0x0800e3f7
 8002144:	0800e10a 	.word	0x0800e10a
 8002148:	0800e198 	.word	0x0800e198
 800214c:	0800e435 	.word	0x0800e435
 8002150:	0800dd18 	.word	0x0800dd18
 8002154:	0800dd08 	.word	0x0800dd08
 8002158:	20000ab8 	.word	0x20000ab8

0800215c <st_bt_inicio_run>:
static void st_bt_inicio_run(void *o)  { 
 800215c:	b510      	push	{r4, lr}
	 	display_blanking_off(dev);
 800215e:	4c14      	ldr	r4, [pc, #80]	; (80021b0 <st_bt_inicio_run+0x54>)
 8002160:	6820      	ldr	r0, [r4, #0]
 8002162:	f009 fc89 	bl	800ba78 <display_blanking_off.isra.0>
		cfb_framebuffer_clear(dev, false);
 8002166:	6820      	ldr	r0, [r4, #0]
 8002168:	2100      	movs	r1, #0
 800216a:	f002 fc33 	bl	80049d4 <cfb_framebuffer_clear>
		cfb_framebuffer_set_font(dev, 0);
 800216e:	6820      	ldr	r0, [r4, #0]
 8002170:	2100      	movs	r1, #0
 8002172:	f002 fc71 	bl	8004a58 <cfb_framebuffer_set_font>
		cfb_print(dev, " ON ", 0, 0);
 8002176:	2300      	movs	r3, #0
 8002178:	461a      	mov	r2, r3
 800217a:	490e      	ldr	r1, [pc, #56]	; (80021b4 <st_bt_inicio_run+0x58>)
 800217c:	6820      	ldr	r0, [r4, #0]
 800217e:	f002 fb4f 	bl	8004820 <cfb_print>
		cfb_framebuffer_set_font(dev, 1);
 8002182:	6820      	ldr	r0, [r4, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	f002 fc67 	bl	8004a58 <cfb_framebuffer_set_font>
		cfb_print(dev, "CRYODERME V 1", 8, 48);	// posição em multiplos 8 para y e x
 800218a:	490b      	ldr	r1, [pc, #44]	; (80021b8 <st_bt_inicio_run+0x5c>)
 800218c:	6820      	ldr	r0, [r4, #0]
 800218e:	2330      	movs	r3, #48	; 0x30
 8002190:	2208      	movs	r2, #8
 8002192:	f002 fb45 	bl	8004820 <cfb_print>
		cfb_framebuffer_finalize(dev);
 8002196:	6820      	ldr	r0, [r4, #0]
 8002198:	f002 fc2c 	bl	80049f4 <cfb_framebuffer_finalize>
		k_msleep(2000);
 800219c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021a0:	f009 fc6d 	bl	800ba7e <k_msleep.isra.0>
	}
 80021a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Idle]);	//set STM para voltar a Idle State depois de finalizar este estado
 80021a8:	4904      	ldr	r1, [pc, #16]	; (80021bc <st_bt_inicio_run+0x60>)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <st_bt_inicio_run+0x64>)
 80021ac:	f003 bc04 	b.w	80059b8 <smf_set_state>
 80021b0:	20000acc 	.word	0x20000acc
 80021b4:	0800e4e3 	.word	0x0800e4e3
 80021b8:	0800e4e8 	.word	0x0800e4e8
 80021bc:	0800dd68 	.word	0x0800dd68
 80021c0:	20000ab8 	.word	0x20000ab8

080021c4 <st_bt_fim_run>:
static void st_bt_fim_run(void *o){
 80021c4:	b510      	push	{r4, lr}
	 	display_blanking_off(dev);	
 80021c6:	4c11      	ldr	r4, [pc, #68]	; (800220c <st_bt_fim_run+0x48>)
 80021c8:	6820      	ldr	r0, [r4, #0]
 80021ca:	f009 fc55 	bl	800ba78 <display_blanking_off.isra.0>
		cfb_framebuffer_clear(dev, false);
 80021ce:	6820      	ldr	r0, [r4, #0]
 80021d0:	2100      	movs	r1, #0
 80021d2:	f002 fbff 	bl	80049d4 <cfb_framebuffer_clear>
		cfb_framebuffer_set_font(dev, 0);
 80021d6:	6820      	ldr	r0, [r4, #0]
 80021d8:	2100      	movs	r1, #0
 80021da:	f002 fc3d 	bl	8004a58 <cfb_framebuffer_set_font>
		cfb_print(dev, "OFF", 8, 8); 	// posição em multiplos 8 para y e x
 80021de:	2308      	movs	r3, #8
 80021e0:	490b      	ldr	r1, [pc, #44]	; (8002210 <st_bt_fim_run+0x4c>)
 80021e2:	6820      	ldr	r0, [r4, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f002 fb1b 	bl	8004820 <cfb_print>
		cfb_framebuffer_finalize(dev);
 80021ea:	6820      	ldr	r0, [r4, #0]
 80021ec:	f002 fc02 	bl	80049f4 <cfb_framebuffer_finalize>
		k_msleep(2000);
 80021f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021f4:	f009 fc43 	bl	800ba7e <k_msleep.isra.0>
		display_blanking_on(dev);	// desliga visualmente o display ou "blanking" ON!
 80021f8:	6820      	ldr	r0, [r4, #0]
static inline int display_blanking_on(const struct device *dev)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	return api->blanking_on(dev);
 80021fa:	6883      	ldr	r3, [r0, #8]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4798      	blx	r3
	}
 8002200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Idle]);
 8002204:	4903      	ldr	r1, [pc, #12]	; (8002214 <st_bt_fim_run+0x50>)
 8002206:	4804      	ldr	r0, [pc, #16]	; (8002218 <st_bt_fim_run+0x54>)
 8002208:	f003 bbd6 	b.w	80059b8 <smf_set_state>
 800220c:	20000acc 	.word	0x20000acc
 8002210:	0800e4f6 	.word	0x0800e4f6
 8002214:	0800dd68 	.word	0x0800dd68
 8002218:	20000ab8 	.word	0x20000ab8

0800221c <display_corrido>:
void display_corrido (char *buffer, int atraso){
 800221c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	char aux_buffer[5] = "     ";	// string é inicializada com espaço apenas
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <display_corrido+0x68>)
	display_blanking_off(dev);
 8002222:	4d19      	ldr	r5, [pc, #100]	; (8002288 <display_corrido+0x6c>)
void display_corrido (char *buffer, int atraso){
 8002224:	4607      	mov	r7, r0
	char aux_buffer[5] = "     ";	// string é inicializada com espaço apenas
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	9000      	str	r0, [sp, #0]
 800222a:	791b      	ldrb	r3, [r3, #4]
 800222c:	f88d 3004 	strb.w	r3, [sp, #4]
	unsigned int size = strlen (buffer); 
 8002230:	4638      	mov	r0, r7
void display_corrido (char *buffer, int atraso){
 8002232:	4688      	mov	r8, r1
	unsigned int size = strlen (buffer); 
 8002234:	f7fe fec8 	bl	8000fc8 <strlen>
 8002238:	4604      	mov	r4, r0
	display_blanking_off(dev);
 800223a:	6828      	ldr	r0, [r5, #0]
 800223c:	f009 fc1c 	bl	800ba78 <display_blanking_off.isra.0>
	cfb_framebuffer_set_font(dev, 0);
 8002240:	6828      	ldr	r0, [r5, #0]
 8002242:	2100      	movs	r1, #0
 8002244:	f002 fc08 	bl	8004a58 <cfb_framebuffer_set_font>
	for (int i=0; i < (size+1); i++){
 8002248:	2600      	movs	r6, #0
 800224a:	3401      	adds	r4, #1
 800224c:	42b4      	cmp	r4, r6
 800224e:	d802      	bhi.n	8002256 <display_corrido+0x3a>
}    //Modo Temp 0 graus
 8002250:	b002      	add	sp, #8
 8002252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cfb_framebuffer_clear(dev, false);
 8002256:	2100      	movs	r1, #0
 8002258:	6828      	ldr	r0, [r5, #0]
 800225a:	f002 fbbb 	bl	80049d4 <cfb_framebuffer_clear>
			strncpy(aux_buffer, buffer+i,4);
 800225e:	19b9      	adds	r1, r7, r6
 8002260:	2204      	movs	r2, #4
 8002262:	4668      	mov	r0, sp
 8002264:	f00a fe89 	bl	800cf7a <strncpy>
			cfb_print(dev,aux_buffer, 0, 0); 	// posição em multiplos 8 para y e x
 8002268:	2300      	movs	r3, #0
 800226a:	461a      	mov	r2, r3
 800226c:	4669      	mov	r1, sp
 800226e:	6828      	ldr	r0, [r5, #0]
 8002270:	f002 fad6 	bl	8004820 <cfb_print>
			cfb_framebuffer_finalize(dev);
 8002274:	6828      	ldr	r0, [r5, #0]
 8002276:	f002 fbbd 	bl	80049f4 <cfb_framebuffer_finalize>
			k_msleep(atraso);		
 800227a:	4640      	mov	r0, r8
 800227c:	f009 fbff 	bl	800ba7e <k_msleep.isra.0>
	for (int i=0; i < (size+1); i++){
 8002280:	3601      	adds	r6, #1
 8002282:	e7e3      	b.n	800224c <display_corrido+0x30>
 8002284:	0800e4fa 	.word	0x0800e4fa
 8002288:	20000acc 	.word	0x20000acc

0800228c <st_bt_flow_run>:
static void st_bt_flow_run(void *o){
 800228c:	b508      	push	{r3, lr}
		if (high_flow_trabalho) display_corrido("Tecla HiFLow", TEXT_PERIOD_S); // somente para tam fonte = 0. Função de apresentação texto corrido 
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <st_bt_flow_run+0x20>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2196      	movs	r1, #150	; 0x96
 8002294:	b143      	cbz	r3, 80022a8 <st_bt_flow_run+0x1c>
 8002296:	4806      	ldr	r0, [pc, #24]	; (80022b0 <st_bt_flow_run+0x24>)
		else display_corrido("Tecla LowFlow", TEXT_PERIOD_S);
 8002298:	f7ff ffc0 	bl	800221c <display_corrido>
	}
 800229c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Temp]);	// depois da msg do botão flow volta a apresentar a temperatura no dipslay
 80022a0:	4904      	ldr	r1, [pc, #16]	; (80022b4 <st_bt_flow_run+0x28>)
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <st_bt_flow_run+0x2c>)
 80022a4:	f003 bb88 	b.w	80059b8 <smf_set_state>
		else display_corrido("Tecla LowFlow", TEXT_PERIOD_S);
 80022a8:	4804      	ldr	r0, [pc, #16]	; (80022bc <st_bt_flow_run+0x30>)
 80022aa:	e7f5      	b.n	8002298 <st_bt_flow_run+0xc>
 80022ac:	200002f0 	.word	0x200002f0
 80022b0:	0800e500 	.word	0x0800e500
 80022b4:	0800dd58 	.word	0x0800dd58
 80022b8:	20000ab8 	.word	0x20000ab8
 80022bc:	0800e50d 	.word	0x0800e50d

080022c0 <st_bt_temp_run>:
static void st_bt_temp_run(void *o){
 80022c0:	b508      	push	{r3, lr}
		if (low_temp_trabalho) display_corrido("Tecla T-35", TEXT_PERIOD_S); // somente para tam fonte = 0. Função de apresentação texto corrido 
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <st_bt_temp_run+0x20>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2196      	movs	r1, #150	; 0x96
 80022c8:	b143      	cbz	r3, 80022dc <st_bt_temp_run+0x1c>
 80022ca:	4806      	ldr	r0, [pc, #24]	; (80022e4 <st_bt_temp_run+0x24>)
		else display_corrido("Tecla T0", TEXT_PERIOD_S);
 80022cc:	f7ff ffa6 	bl	800221c <display_corrido>
	}
 80022d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Temp]);	// depois da msg do botão flow volta a apresentar a temperatura no dipslay
 80022d4:	4904      	ldr	r1, [pc, #16]	; (80022e8 <st_bt_temp_run+0x28>)
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <st_bt_temp_run+0x2c>)
 80022d8:	f003 bb6e 	b.w	80059b8 <smf_set_state>
		else display_corrido("Tecla T0", TEXT_PERIOD_S);
 80022dc:	4804      	ldr	r0, [pc, #16]	; (80022f0 <st_bt_temp_run+0x30>)
 80022de:	e7f5      	b.n	80022cc <st_bt_temp_run+0xc>
 80022e0:	200002f1 	.word	0x200002f1
 80022e4:	0800e51b 	.word	0x0800e51b
 80022e8:	0800dd58 	.word	0x0800dd58
 80022ec:	20000ab8 	.word	0x20000ab8
 80022f0:	0800e526 	.word	0x0800e526

080022f4 <inicializa_GPIO_Interrupcao>:
}


void inicializa_GPIO_Interrupcao(void){
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	4825      	ldr	r0, [pc, #148]	; (800238c <inicializa_GPIO_Interrupcao+0x98>)
 80022f8:	f00a fbf4 	bl	800cae4 <z_device_is_ready>

    if (!device_is_ready(led.port)) {	// verifica se saida LED está OK
 80022fc:	2800      	cmp	r0, #0
 80022fe:	d044      	beq.n	800238a <inicializa_GPIO_Interrupcao+0x96>
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
 8002300:	4822      	ldr	r0, [pc, #136]	; (800238c <inicializa_GPIO_Interrupcao+0x98>)
 8002302:	f44f 12d0 	mov.w	r2, #1703936	; 0x1a0000
 8002306:	2105      	movs	r1, #5
 8002308:	f7ff fd58 	bl	8001dbc <z_impl_gpio_pin_configure>
        return;
    }

    ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);	// configura saida LED
 800230c:	4b20      	ldr	r3, [pc, #128]	; (8002390 <inicializa_GPIO_Interrupcao+0x9c>)
	if (ret < 0) {
 800230e:	2800      	cmp	r0, #0
    ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);	// configura saida LED
 8002310:	6018      	str	r0, [r3, #0]
	if (ret < 0) {
 8002312:	db3a      	blt.n	800238a <inicializa_GPIO_Interrupcao+0x96>
	return gpio_pin_set(spec->port, spec->pin, value);
 8002314:	481d      	ldr	r0, [pc, #116]	; (800238c <inicializa_GPIO_Interrupcao+0x98>)
 8002316:	2105      	movs	r1, #5
 8002318:	f7ff fe70 	bl	8001ffc <gpio_pin_set.constprop.0.isra.0>
 800231c:	4c1d      	ldr	r4, [pc, #116]	; (8002394 <inicializa_GPIO_Interrupcao+0xa0>)
 800231e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002322:	210d      	movs	r1, #13
 8002324:	4620      	mov	r0, r4
 8002326:	f7ff fd49 	bl	8001dbc <z_impl_gpio_pin_configure>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 800232a:	6862      	ldr	r2, [r4, #4]
	const struct gpio_driver_api *api =
 800232c:	68a5      	ldr	r5, [r4, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 800232e:	6812      	ldr	r2, [r2, #0]
	const struct gpio_driver_data *const data =
 8002330:	6923      	ldr	r3, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8002332:	0492      	lsls	r2, r2, #18
 8002334:	d40e      	bmi.n	8002354 <inicializa_GPIO_Interrupcao+0x60>
 8002336:	4918      	ldr	r1, [pc, #96]	; (8002398 <inicializa_GPIO_Interrupcao+0xa4>)
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <inicializa_GPIO_Interrupcao+0xa8>)
 800233a:	4819      	ldr	r0, [pc, #100]	; (80023a0 <inicializa_GPIO_Interrupcao+0xac>)
 800233c:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8002340:	f009 fd1b 	bl	800bd7a <assert_print>
 8002344:	4817      	ldr	r0, [pc, #92]	; (80023a4 <inicializa_GPIO_Interrupcao+0xb0>)
 8002346:	f009 fd18 	bl	800bd7a <assert_print>
 800234a:	4814      	ldr	r0, [pc, #80]	; (800239c <inicializa_GPIO_Interrupcao+0xa8>)
 800234c:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8002350:	f009 fd0c 	bl	800bd6c <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8002354:	681b      	ldr	r3, [r3, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8002356:	69ae      	ldr	r6, [r5, #24]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8002358:	f413 5f00 	tst.w	r3, #8192	; 0x2000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 800235c:	bf14      	ite	ne
 800235e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002362:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8002366:	210d      	movs	r1, #13
 8002368:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 800236c:	4620      	mov	r0, r4
 800236e:	47b0      	blx	r6
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8002370:	490d      	ldr	r1, [pc, #52]	; (80023a8 <inicializa_GPIO_Interrupcao+0xb4>)
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <inicializa_GPIO_Interrupcao+0xb8>)
 8002374:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
 8002376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800237a:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 800237c:	69eb      	ldr	r3, [r5, #28]
 800237e:	b123      	cbz	r3, 800238a <inicializa_GPIO_Interrupcao+0x96>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8002380:	4620      	mov	r0, r4
 8002382:	2201      	movs	r2, #1
    gpio_pin_configure_dt(&button, GPIO_INPUT);		//configura entrada BUTTON
    gpio_pin_interrupt_configure_dt(&button, GPIO_INT_EDGE_TO_ACTIVE);		// relaciona INTERRUPÇÂO ao BUTTON 

    gpio_init_callback(&button_cb_data, button_pressed, BIT(button.pin));	// inicializa interrupção com a função a ser executada na interrução
	gpio_add_callback(button.port, &button_cb_data);			// relaciona interrupção com a função a ser executada na interrução
}
 8002384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002388:	4718      	bx	r3
 800238a:	bd70      	pop	{r4, r5, r6, pc}
 800238c:	0800d788 	.word	0x0800d788
 8002390:	20000ac8 	.word	0x20000ac8
 8002394:	0800d758 	.word	0x0800d758
 8002398:	0800e3f7 	.word	0x0800e3f7
 800239c:	0800e10a 	.word	0x0800e10a
 80023a0:	0800e198 	.word	0x0800e198
 80023a4:	0800e435 	.word	0x0800e435
 80023a8:	20000aa0 	.word	0x20000aa0
 80023ac:	08001f19 	.word	0x08001f19

080023b0 <main>:
{
 80023b0:	b538      	push	{r3, r4, r5, lr}
	dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_display));
 80023b2:	4c20      	ldr	r4, [pc, #128]	; (8002434 <main+0x84>)
 80023b4:	4820      	ldr	r0, [pc, #128]	; (8002438 <main+0x88>)
 80023b6:	6020      	str	r0, [r4, #0]
 80023b8:	f00a fb94 	bl	800cae4 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80023bc:	b930      	cbnz	r0, 80023cc <main+0x1c>
			printk("Device %s not ready\n", dev->name);
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	481e      	ldr	r0, [pc, #120]	; (800243c <main+0x8c>)
 80023c2:	6819      	ldr	r1, [r3, #0]
}
 80023c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Device %s not ready\n", dev->name);
 80023c8:	f009 bba3 	b.w	800bb12 <printk>
	if (display_set_pixel_format(dev, PIXEL_FORMAT_MONO10) != 0) {
 80023cc:	6820      	ldr	r0, [r4, #0]
			 const enum display_pixel_format pixel_format)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	return api->set_pixel_format(dev, pixel_format);
 80023ce:	6883      	ldr	r3, [r0, #8]
 80023d0:	2104      	movs	r1, #4
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4798      	blx	r3
 80023d6:	b120      	cbz	r0, 80023e2 <main+0x32>
			printk("Failed to set required pixel format\n");
 80023d8:	4819      	ldr	r0, [pc, #100]	; (8002440 <main+0x90>)
}
 80023da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Framebuffer initialization failed!\n");
 80023de:	f009 bb98 	b.w	800bb12 <printk>
	if (cfb_framebuffer_init(dev)) {
 80023e2:	6820      	ldr	r0, [r4, #0]
 80023e4:	f002 fb44 	bl	8004a70 <cfb_framebuffer_init>
 80023e8:	b108      	cbz	r0, 80023ee <main+0x3e>
			printk("Framebuffer initialization failed!\n");
 80023ea:	4816      	ldr	r0, [pc, #88]	; (8002444 <main+0x94>)
 80023ec:	e7f5      	b.n	80023da <main+0x2a>
	printk("Initialized %s\n", dev->name);
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	4815      	ldr	r0, [pc, #84]	; (8002448 <main+0x98>)
 80023f2:	6819      	ldr	r1, [r3, #0]
		ret = smf_run_state(SMF_CTX(&s_obj));
 80023f4:	4d15      	ldr	r5, [pc, #84]	; (800244c <main+0x9c>)
	printk("Initialized %s\n", dev->name);
 80023f6:	f009 fb8c 	bl	800bb12 <printk>
	cfb_framebuffer_clear(dev, true);
 80023fa:	2101      	movs	r1, #1
 80023fc:	6820      	ldr	r0, [r4, #0]
 80023fe:	f002 fae9 	bl	80049d4 <cfb_framebuffer_clear>
	display_blanking_off(dev);
 8002402:	6820      	ldr	r0, [r4, #0]
 8002404:	f009 fb38 	bl	800ba78 <display_blanking_off.isra.0>
	cfb_framebuffer_set_font(dev, 1);
 8002408:	6820      	ldr	r0, [r4, #0]
		ret = smf_run_state(SMF_CTX(&s_obj));
 800240a:	4c11      	ldr	r4, [pc, #68]	; (8002450 <main+0xa0>)
	cfb_framebuffer_set_font(dev, 1);
 800240c:	2101      	movs	r1, #1
 800240e:	f002 fb23 	bl	8004a58 <cfb_framebuffer_set_font>
    smf_set_initial(SMF_CTX(&s_obj), &demo_states[ST_BT_Fim]);
 8002412:	4910      	ldr	r1, [pc, #64]	; (8002454 <main+0xa4>)
 8002414:	480d      	ldr	r0, [pc, #52]	; (800244c <main+0x9c>)
 8002416:	f009 fe28 	bl	800c06a <smf_set_initial>
	printk("vai entrar While \n");
 800241a:	480f      	ldr	r0, [pc, #60]	; (8002458 <main+0xa8>)
 800241c:	f009 fb79 	bl	800bb12 <printk>
	inicializa_GPIO_Interrupcao();	// Configura Buttons e interrupção dos buttons BT_LIGA_DESL, BT_FLOW, BT_TEMP
 8002420:	f7ff ff68 	bl	80022f4 <inicializa_GPIO_Interrupcao>
		ret = smf_run_state(SMF_CTX(&s_obj));
 8002424:	4628      	mov	r0, r5
 8002426:	f009 fe2c 	bl	800c082 <smf_run_state>
 800242a:	6020      	str	r0, [r4, #0]
		k_msleep(1);
 800242c:	2001      	movs	r0, #1
 800242e:	f009 fb26 	bl	800ba7e <k_msleep.isra.0>
	while (1) 
 8002432:	e7f7      	b.n	8002424 <main+0x74>
 8002434:	20000acc 	.word	0x20000acc
 8002438:	0800d800 	.word	0x0800d800
 800243c:	0800e52f 	.word	0x0800e52f
 8002440:	0800e544 	.word	0x0800e544
 8002444:	0800e569 	.word	0x0800e569
 8002448:	0800e58d 	.word	0x0800e58d
 800244c:	20000ab8 	.word	0x20000ab8
 8002450:	20000ac8 	.word	0x20000ac8
 8002454:	0800dd18 	.word	0x0800dd18
 8002458:	0800e59d 	.word	0x0800e59d

0800245c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
 800245c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002460:	b091      	sub	sp, #68	; 0x44
 8002462:	460f      	mov	r7, r1
 8002464:	4691      	mov	r9, r2
 8002466:	9301      	str	r3, [sp, #4]
	__ASSERT_NO_MSG(in_packaged != NULL);
 8002468:	4604      	mov	r4, r0
 800246a:	b958      	cbnz	r0, 8002484 <cbprintf_package_convert+0x28>
 800246c:	49a7      	ldr	r1, [pc, #668]	; (800270c <cbprintf_package_convert+0x2b0>)
 800246e:	4aa8      	ldr	r2, [pc, #672]	; (8002710 <cbprintf_package_convert+0x2b4>)
 8002470:	48a8      	ldr	r0, [pc, #672]	; (8002714 <cbprintf_package_convert+0x2b8>)
 8002472:	f240 335f 	movw	r3, #863	; 0x35f
 8002476:	f009 fc80 	bl	800bd7a <assert_print>
 800247a:	f240 315f 	movw	r1, #863	; 0x35f
		const char *str = *(const char **)&buf32[*str_pos];
		bool is_ro = ptr_in_rodata(str);

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
 800247e:	48a4      	ldr	r0, [pc, #656]	; (8002710 <cbprintf_package_convert+0x2b4>)
 8002480:	f009 fc74 	bl	800bd6c <assert_post_action>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
 8002484:	b941      	cbnz	r1, 8002498 <cbprintf_package_convert+0x3c>
	buf += ros_nbr;
 8002486:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
 8002488:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
 800248a:	7880      	ldrb	r0, [r0, #2]
 800248c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002490:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
 8002492:	42be      	cmp	r6, r7
 8002494:	d818      	bhi.n	80024c8 <cbprintf_package_convert+0x6c>
	return (size_t)(uintptr_t)(buf - start);
 8002496:	1b07      	subs	r7, r0, r4
	ros_nbr = in_desc->ro_str_cnt;
 8002498:	f894 a002 	ldrb.w	sl, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
 800249c:	78e3      	ldrb	r3, [r4, #3]
 800249e:	9302      	str	r3, [sp, #8]
	ro_cpy = ros_nbr &&
 80024a0:	f1ba 0f00 	cmp.w	sl, #0
 80024a4:	d002      	beq.n	80024ac <cbprintf_package_convert+0x50>
 80024a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80024a8:	07d9      	lsls	r1, r3, #31
 80024aa:	d415      	bmi.n	80024d8 <cbprintf_package_convert+0x7c>
	rw_cpy = rws_nbr > 0 &&
 80024ac:	9b02      	ldr	r3, [sp, #8]
 80024ae:	bb9b      	cbnz	r3, 8002518 <cbprintf_package_convert+0xbc>
		if (cb) {
 80024b0:	f1b9 0f00 	cmp.w	r9, #0
 80024b4:	d003      	beq.n	80024be <cbprintf_package_convert+0x62>
			cb(in_packaged, in_len, ctx);
 80024b6:	9a01      	ldr	r2, [sp, #4]
 80024b8:	4639      	mov	r1, r7
 80024ba:	4620      	mov	r0, r4
 80024bc:	47c8      	blx	r9
		return in_len;
 80024be:	463d      	mov	r5, r7

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
 80024c0:	4628      	mov	r0, r5
 80024c2:	b011      	add	sp, #68	; 0x44
 80024c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
 80024c8:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
 80024ca:	4628      	mov	r0, r5
 80024cc:	f7fe fd7c 	bl	8000fc8 <strlen>
 80024d0:	3001      	adds	r0, #1
 80024d2:	4428      	add	r0, r5
	for (int i = 0; i < s_nbr; i++) {
 80024d4:	3701      	adds	r7, #1
 80024d6:	e7dc      	b.n	8002492 <cbprintf_package_convert+0x36>
	rw_cpy = rws_nbr > 0 &&
 80024d8:	7823      	ldrb	r3, [r4, #0]
	args_size = in_desc->len * sizeof(int);
 80024da:	009a      	lsls	r2, r3, #2
 80024dc:	9204      	str	r2, [sp, #16]
	uint8_t *str_pos = &buf[args_size];
 80024de:	eb04 0683 	add.w	r6, r4, r3, lsl #2
	if (cb == NULL) {
 80024e2:	f1b9 0f00 	cmp.w	r9, #0
 80024e6:	f040 80cf 	bne.w	8002688 <cbprintf_package_convert+0x22c>
		out_len = (int)in_len;
 80024ea:	463d      	mov	r5, r7
		if (ro_cpy) {
 80024ec:	44b2      	add	sl, r6
	size_t strl_cnt = 0;
 80024ee:	2700      	movs	r7, #0
			for (int i = 0; i < ros_nbr; i++) {
 80024f0:	4556      	cmp	r6, sl
 80024f2:	d021      	beq.n	8002538 <cbprintf_package_convert+0xdc>
				const char *str = *(const char **)&buf32[*str_pos];
 80024f4:	f816 3b01 	ldrb.w	r3, [r6], #1
		return 1 + strlen(str);
 80024f8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80024fc:	f7fe fd64 	bl	8000fc8 <strlen>
				if (strl && strl_cnt < strl_len) {
 8002500:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
		return 1 + strlen(str);
 8002502:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
 8002504:	b133      	cbz	r3, 8002514 <cbprintf_package_convert+0xb8>
 8002506:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002508:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
 800250a:	bf3e      	ittt	cc
 800250c:	9b1b      	ldrcc	r3, [sp, #108]	; 0x6c
 800250e:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
 8002512:	3701      	addcc	r7, #1
				out_len += len;
 8002514:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
 8002516:	e7eb      	b.n	80024f0 <cbprintf_package_convert+0x94>
	rw_cpy = rws_nbr > 0 &&
 8002518:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800251a:	079a      	lsls	r2, r3, #30
 800251c:	d5c8      	bpl.n	80024b0 <cbprintf_package_convert+0x54>
	args_size = in_desc->len * sizeof(int);
 800251e:	7823      	ldrb	r3, [r4, #0]
 8002520:	009a      	lsls	r2, r3, #2
 8002522:	9204      	str	r2, [sp, #16]
	uint8_t *str_pos = &buf[args_size];
 8002524:	eb04 0683 	add.w	r6, r4, r3, lsl #2
	if (cb == NULL) {
 8002528:	f1b9 0f00 	cmp.w	r9, #0
 800252c:	d142      	bne.n	80025b4 <cbprintf_package_convert+0x158>
		out_len = (int)in_len;
 800252e:	463d      	mov	r5, r7
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8002530:	f1ba 0f00 	cmp.w	sl, #0
 8002534:	d11a      	bne.n	800256c <cbprintf_package_convert+0x110>
	size_t strl_cnt = 0;
 8002536:	4657      	mov	r7, sl
		bool drop_ro_str_pos = !(flags &
 8002538:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800253a:	f8dd a008 	ldr.w	sl, [sp, #8]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 800253e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8002718 <cbprintf_package_convert+0x2bc>
 8002542:	4976      	ldr	r1, [pc, #472]	; (800271c <cbprintf_package_convert+0x2c0>)
 8002544:	f003 0b05 	and.w	fp, r3, #5
		for (int i = 0; i < rws_nbr; i++) {
 8002548:	44b2      	add	sl, r6
			    (!is_ro && flags & CBPRINTF_PACKAGE_CONVERT_RW_STR)) {
 800254a:	f003 0202 	and.w	r2, r3, #2
		for (int i = 0; i < rws_nbr; i++) {
 800254e:	4556      	cmp	r6, sl
 8002550:	d0b6      	beq.n	80024c0 <cbprintf_package_convert+0x64>
			const char *str = *(const char **)&buf32[*str_pos];
 8002552:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002556:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800255a:	4540      	cmp	r0, r8
 800255c:	d301      	bcc.n	8002562 <cbprintf_package_convert+0x106>
 800255e:	4288      	cmp	r0, r1
 8002560:	d30b      	bcc.n	800257a <cbprintf_package_convert+0x11e>
			    (!is_ro && flags & CBPRINTF_PACKAGE_CONVERT_RW_STR)) {
 8002562:	2a00      	cmp	r2, #0
 8002564:	d0f3      	beq.n	800254e <cbprintf_package_convert+0xf2>
 8002566:	f04f 0900 	mov.w	r9, #0
 800256a:	e00b      	b.n	8002584 <cbprintf_package_convert+0x128>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 800256c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800256e:	f013 0704 	ands.w	r7, r3, #4
				str_pos += ros_nbr;
 8002572:	bf1c      	itt	ne
 8002574:	4456      	addne	r6, sl
	size_t strl_cnt = 0;
 8002576:	464f      	movne	r7, r9
 8002578:	e7de      	b.n	8002538 <cbprintf_package_convert+0xdc>
			if ((is_ro && flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ||
 800257a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800257c:	07db      	lsls	r3, r3, #31
 800257e:	d514      	bpl.n	80025aa <cbprintf_package_convert+0x14e>
 8002580:	f04f 0901 	mov.w	r9, #1
 8002584:	9201      	str	r2, [sp, #4]
		return 1 + strlen(str);
 8002586:	f7fe fd1f 	bl	8000fc8 <strlen>
				if (strl && strl_cnt < strl_len) {
 800258a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800258c:	9a01      	ldr	r2, [sp, #4]
 800258e:	4963      	ldr	r1, [pc, #396]	; (800271c <cbprintf_package_convert+0x2c0>)
		return 1 + strlen(str);
 8002590:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
 8002592:	b133      	cbz	r3, 80025a2 <cbprintf_package_convert+0x146>
 8002594:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002596:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
 8002598:	bf3e      	ittt	cc
 800259a:	9b1b      	ldrcc	r3, [sp, #108]	; 0x6c
 800259c:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
 80025a0:	3701      	addcc	r7, #1
				out_len += len;
 80025a2:	4405      	add	r5, r0
			if (is_ro && drop_ro_str_pos) {
 80025a4:	f1b9 0f00 	cmp.w	r9, #0
 80025a8:	d0d1      	beq.n	800254e <cbprintf_package_convert+0xf2>
 80025aa:	f1bb 0f00 	cmp.w	fp, #0
 80025ae:	d1ce      	bne.n	800254e <cbprintf_package_convert+0xf2>
				out_len--;
 80025b0:	3d01      	subs	r5, #1
		for (int i = 0; i < rws_nbr; i++) {
 80025b2:	e7cc      	b.n	800254e <cbprintf_package_convert+0xf2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 80025b4:	f1ba 0f00 	cmp.w	sl, #0
 80025b8:	d06b      	beq.n	8002692 <cbprintf_package_convert+0x236>
 80025ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80025bc:	f012 0804 	ands.w	r8, r2, #4
 80025c0:	d06a      	beq.n	8002698 <cbprintf_package_convert+0x23c>
		keep_cnt = ros_nbr;
 80025c2:	46d0      	mov	r8, sl
		dst = keep_str_pos;
 80025c4:	a80c      	add	r0, sp, #48	; 0x30
		scpy_cnt = 0;
 80025c6:	f04f 0b00 	mov.w	fp, #0
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80025ca:	4652      	mov	r2, sl
 80025cc:	4631      	mov	r1, r6
 80025ce:	9303      	str	r3, [sp, #12]
 80025d0:	f00a fb6e 	bl	800ccb0 <memcpy>
 80025d4:	9b03      	ldr	r3, [sp, #12]
 80025d6:	f8df e140 	ldr.w	lr, [pc, #320]	; 8002718 <cbprintf_package_convert+0x2bc>
	str_pos += ros_nbr;
 80025da:	eb06 020a 	add.w	r2, r6, sl
 80025de:	9203      	str	r2, [sp, #12]
 80025e0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80025e4:	eb02 0c01 	add.w	ip, r2, r1
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 80025e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80025ea:	4e4c      	ldr	r6, [pc, #304]	; (800271c <cbprintf_package_convert+0x2c0>)
 80025ec:	f002 0202 	and.w	r2, r2, #2
 80025f0:	9205      	str	r2, [sp, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 80025f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80025f4:	f002 0101 	and.w	r1, r2, #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 80025f8:	f002 0004 	and.w	r0, r2, #4
	for (int i = 0; i < rws_nbr; i++) {
 80025fc:	9a03      	ldr	r2, [sp, #12]
 80025fe:	4594      	cmp	ip, r2
 8002600:	d14c      	bne.n	800269c <cbprintf_package_convert+0x240>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : keep_cnt;
 8002602:	991a      	ldr	r1, [sp, #104]	; 0x68
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 8002604:	7866      	ldrb	r6, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : keep_cnt;
 8002606:	f011 0f02 	tst.w	r1, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 800260a:	eb06 020b 	add.w	r2, r6, fp
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : keep_cnt;
 800260e:	bf0c      	ite	eq
 8002610:	4640      	moveq	r0, r8
 8002612:	2000      	movne	r0, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 8002614:	07cd      	lsls	r5, r1, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 8002616:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 8002618:	f100 80a7 	bmi.w	800276a <cbprintf_package_convert+0x30e>
 800261c:	f011 0f04 	tst.w	r1, #4
 8002620:	bf14      	ite	ne
 8002622:	4641      	movne	r1, r8
 8002624:	2100      	moveq	r1, #0
	*in_desc = out_desc;
 8002626:	7062      	strb	r2, [r4, #1]
 8002628:	70a1      	strb	r1, [r4, #2]
 800262a:	70e0      	strb	r0, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
 800262c:	9a01      	ldr	r2, [sp, #4]
 800262e:	9904      	ldr	r1, [sp, #16]
 8002630:	9305      	str	r3, [sp, #20]
 8002632:	4620      	mov	r0, r4
 8002634:	47c8      	blx	r9
	if (rv < 0) {
 8002636:	1e05      	subs	r5, r0, #0
 8002638:	f6ff af42 	blt.w	80024c0 <cbprintf_package_convert+0x64>
	*in_desc = in_desc_backup;
 800263c:	9b05      	ldr	r3, [sp, #20]
 800263e:	7023      	strb	r3, [r4, #0]
 8002640:	9b02      	ldr	r3, [sp, #8]
 8002642:	7066      	strb	r6, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8002644:	9a01      	ldr	r2, [sp, #4]
	*in_desc = in_desc_backup;
 8002646:	f884 a002 	strb.w	sl, [r4, #2]
 800264a:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 800264c:	4641      	mov	r1, r8
 800264e:	a80c      	add	r0, sp, #48	; 0x30
 8002650:	47c8      	blx	r9
	if (rv < 0) {
 8002652:	1e06      	subs	r6, r0, #0
 8002654:	f2c0 80ae 	blt.w	80027b4 <cbprintf_package_convert+0x358>
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
 8002658:	9b04      	ldr	r3, [sp, #16]
	rv = cb(str_pos, strs_len, ctx);
 800265a:	9803      	ldr	r0, [sp, #12]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
 800265c:	eba7 010a 	sub.w	r1, r7, sl
 8002660:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
 8002662:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8002666:	1ac9      	subs	r1, r1, r3
 8002668:	47c8      	blx	r9
	if (rv < 0) {
 800266a:	2800      	cmp	r0, #0
 800266c:	f2c0 80a4 	blt.w	80027b8 <cbprintf_package_convert+0x35c>
	out_len += rv;
 8002670:	442e      	add	r6, r5
	out_len += rv;
 8002672:	1835      	adds	r5, r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
 8002674:	2700      	movs	r7, #0
		uint8_t loc = cpy_str_pos[i];
 8002676:	f10d 0a20 	add.w	sl, sp, #32
	for (int i = 0; i < scpy_cnt; i++) {
 800267a:	45bb      	cmp	fp, r7
 800267c:	dc77      	bgt.n	800276e <cbprintf_package_convert+0x312>
	(void)cb(NULL, 0, ctx);
 800267e:	2100      	movs	r1, #0
 8002680:	9a01      	ldr	r2, [sp, #4]
 8002682:	4608      	mov	r0, r1
 8002684:	47c8      	blx	r9
	return out_len;
 8002686:	e71b      	b.n	80024c0 <cbprintf_package_convert+0x64>
	if (cb == NULL) {
 8002688:	46d3      	mov	fp, sl
 800268a:	a808      	add	r0, sp, #32
 800268c:	f04f 0800 	mov.w	r8, #0
 8002690:	e79b      	b.n	80025ca <cbprintf_package_convert+0x16e>
		keep_cnt = 0;
 8002692:	46d0      	mov	r8, sl
		scpy_cnt = 0;
 8002694:	46d3      	mov	fp, sl
 8002696:	e79e      	b.n	80025d6 <cbprintf_package_convert+0x17a>
 8002698:	46c3      	mov	fp, r8
 800269a:	e79c      	b.n	80025d6 <cbprintf_package_convert+0x17a>
		const char *str = *(const char **)&buf32[*str_pos];
 800269c:	9d03      	ldr	r5, [sp, #12]
 800269e:	f815 2b01 	ldrb.w	r2, [r5], #1
 80026a2:	9503      	str	r5, [sp, #12]
 80026a4:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 80026a8:	4575      	cmp	r5, lr
 80026aa:	d301      	bcc.n	80026b0 <cbprintf_package_convert+0x254>
 80026ac:	42b5      	cmp	r5, r6
 80026ae:	d30f      	bcc.n	80026d0 <cbprintf_package_convert+0x274>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 80026b0:	9d05      	ldr	r5, [sp, #20]
 80026b2:	2d00      	cmp	r5, #0
 80026b4:	d138      	bne.n	8002728 <cbprintf_package_convert+0x2cc>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
 80026b6:	f1b8 0f0f 	cmp.w	r8, #15
 80026ba:	d94c      	bls.n	8002756 <cbprintf_package_convert+0x2fa>
 80026bc:	4918      	ldr	r1, [pc, #96]	; (8002720 <cbprintf_package_convert+0x2c4>)
 80026be:	4a14      	ldr	r2, [pc, #80]	; (8002710 <cbprintf_package_convert+0x2b4>)
 80026c0:	4814      	ldr	r0, [pc, #80]	; (8002714 <cbprintf_package_convert+0x2b8>)
 80026c2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80026c6:	f009 fb58 	bl	800bd7a <assert_print>
 80026ca:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80026ce:	e6d6      	b.n	800247e <cbprintf_package_convert+0x22>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 80026d0:	b161      	cbz	r1, 80026ec <cbprintf_package_convert+0x290>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
 80026d2:	f1bb 0f0f 	cmp.w	fp, #15
 80026d6:	d934      	bls.n	8002742 <cbprintf_package_convert+0x2e6>
 80026d8:	4912      	ldr	r1, [pc, #72]	; (8002724 <cbprintf_package_convert+0x2c8>)
 80026da:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <cbprintf_package_convert+0x2b4>)
 80026dc:	480d      	ldr	r0, [pc, #52]	; (8002714 <cbprintf_package_convert+0x2b8>)
 80026de:	f240 33f2 	movw	r3, #1010	; 0x3f2
 80026e2:	f009 fb4a 	bl	800bd7a <assert_print>
 80026e6:	f240 31f2 	movw	r1, #1010	; 0x3f2
 80026ea:	e6c8      	b.n	800247e <cbprintf_package_convert+0x22>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 80026ec:	2800      	cmp	r0, #0
 80026ee:	d085      	beq.n	80025fc <cbprintf_package_convert+0x1a0>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
 80026f0:	f1b8 0f0f 	cmp.w	r8, #15
 80026f4:	d92f      	bls.n	8002756 <cbprintf_package_convert+0x2fa>
 80026f6:	490a      	ldr	r1, [pc, #40]	; (8002720 <cbprintf_package_convert+0x2c4>)
 80026f8:	4a05      	ldr	r2, [pc, #20]	; (8002710 <cbprintf_package_convert+0x2b4>)
 80026fa:	4806      	ldr	r0, [pc, #24]	; (8002714 <cbprintf_package_convert+0x2b8>)
 80026fc:	f240 33f5 	movw	r3, #1013	; 0x3f5
 8002700:	f009 fb3b 	bl	800bd7a <assert_print>
 8002704:	f240 31f5 	movw	r1, #1013	; 0x3f5
 8002708:	e6b9      	b.n	800247e <cbprintf_package_convert+0x22>
 800270a:	bf00      	nop
 800270c:	08012629 	.word	0x08012629
 8002710:	08012594 	.word	0x08012594
 8002714:	0800e198 	.word	0x0800e198
 8002718:	0800d638 	.word	0x0800d638
 800271c:	08014524 	.word	0x08014524
 8002720:	08012663 	.word	0x08012663
 8002724:	08012644 	.word	0x08012644
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
 8002728:	f1bb 0f0f 	cmp.w	fp, #15
 800272c:	d909      	bls.n	8002742 <cbprintf_package_convert+0x2e6>
 800272e:	4923      	ldr	r1, [pc, #140]	; (80027bc <cbprintf_package_convert+0x360>)
 8002730:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <cbprintf_package_convert+0x364>)
 8002732:	4824      	ldr	r0, [pc, #144]	; (80027c4 <cbprintf_package_convert+0x368>)
 8002734:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8002738:	f009 fb1f 	bl	800bd7a <assert_print>
 800273c:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8002740:	e69d      	b.n	800247e <cbprintf_package_convert+0x22>
				cpy_str_pos[scpy_cnt++] = *str_pos;
 8002742:	f10b 0501 	add.w	r5, fp, #1
 8002746:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 800274a:	44eb      	add	fp, sp
 800274c:	f80b 2c20 	strb.w	r2, [fp, #-32]
 8002750:	fa5f fb85 	uxtb.w	fp, r5
 8002754:	e752      	b.n	80025fc <cbprintf_package_convert+0x1a0>
				keep_str_pos[keep_cnt++] = *str_pos;
 8002756:	f108 0501 	add.w	r5, r8, #1
 800275a:	f108 0840 	add.w	r8, r8, #64	; 0x40
 800275e:	44e8      	add	r8, sp
 8002760:	f808 2c10 	strb.w	r2, [r8, #-16]
 8002764:	fa5f f885 	uxtb.w	r8, r5
	for (int i = 0; i < rws_nbr; i++) {
 8002768:	e748      	b.n	80025fc <cbprintf_package_convert+0x1a0>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 800276a:	2100      	movs	r1, #0
 800276c:	e75b      	b.n	8002626 <cbprintf_package_convert+0x1ca>
		uint8_t loc = cpy_str_pos[i];
 800276e:	f817 300a 	ldrb.w	r3, [r7, sl]
 8002772:	f88d 301f 	strb.w	r3, [sp, #31]
		const char *str = *(const char **)&buf32[loc];
 8002776:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
 800277a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800277c:	b1c3      	cbz	r3, 80027b0 <cbprintf_package_convert+0x354>
 800277e:	f833 6017 	ldrh.w	r6, [r3, r7, lsl #1]
		rv = cb(&loc, 1, ctx);
 8002782:	9a01      	ldr	r2, [sp, #4]
 8002784:	2101      	movs	r1, #1
 8002786:	f10d 001f 	add.w	r0, sp, #31
 800278a:	47c8      	blx	r9
		if (rv < 0) {
 800278c:	2800      	cmp	r0, #0
 800278e:	db13      	blt.n	80027b8 <cbprintf_package_convert+0x35c>
		out_len += rv;
 8002790:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
 8002792:	b926      	cbnz	r6, 800279e <cbprintf_package_convert+0x342>
 8002794:	4640      	mov	r0, r8
 8002796:	f7fe fc17 	bl	8000fc8 <strlen>
 800279a:	1c46      	adds	r6, r0, #1
 800279c:	b2b6      	uxth	r6, r6
	return cb(str, strl, ctx);
 800279e:	9a01      	ldr	r2, [sp, #4]
 80027a0:	4631      	mov	r1, r6
 80027a2:	4640      	mov	r0, r8
 80027a4:	47c8      	blx	r9
		if (rv < 0) {
 80027a6:	2800      	cmp	r0, #0
 80027a8:	db06      	blt.n	80027b8 <cbprintf_package_convert+0x35c>
		out_len += rv;
 80027aa:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
 80027ac:	3701      	adds	r7, #1
 80027ae:	e764      	b.n	800267a <cbprintf_package_convert+0x21e>
		uint16_t str_len = strl ? strl[i] : 0;
 80027b0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80027b2:	e7e6      	b.n	8002782 <cbprintf_package_convert+0x326>
 80027b4:	4635      	mov	r5, r6
 80027b6:	e683      	b.n	80024c0 <cbprintf_package_convert+0x64>
 80027b8:	4605      	mov	r5, r0
 80027ba:	e681      	b.n	80024c0 <cbprintf_package_convert+0x64>
 80027bc:	08012644 	.word	0x08012644
 80027c0:	08012594 	.word	0x08012594
 80027c4:	0800e198 	.word	0x0800e198

080027c8 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 80027c8:	4b01      	ldr	r3, [pc, #4]	; (80027d0 <char_out+0x8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4718      	bx	r3
 80027ce:	bf00      	nop
 80027d0:	200000b0 	.word	0x200000b0

080027d4 <__printk_hook_install>:
	_char_out = fn;
 80027d4:	4b01      	ldr	r3, [pc, #4]	; (80027dc <__printk_hook_install+0x8>)
 80027d6:	6018      	str	r0, [r3, #0]
}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	200000b0 	.word	0x200000b0

080027e0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 80027e0:	b507      	push	{r0, r1, r2, lr}
 80027e2:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 80027e4:	2100      	movs	r1, #0
 80027e6:	4602      	mov	r2, r0
 80027e8:	9100      	str	r1, [sp, #0]
 80027ea:	4803      	ldr	r0, [pc, #12]	; (80027f8 <vprintk+0x18>)
 80027ec:	f000 f98c 	bl	8002b08 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 80027f0:	b003      	add	sp, #12
 80027f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80027f6:	bf00      	nop
 80027f8:	080027c9 	.word	0x080027c9

080027fc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80027fc:	b530      	push	{r4, r5, lr}
 80027fe:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
 8002800:	2500      	movs	r5, #0
 8002802:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
 8002806:	4604      	mov	r4, r0
 8002808:	9500      	str	r5, [sp, #0]
 800280a:	a903      	add	r1, sp, #12
 800280c:	4805      	ldr	r0, [pc, #20]	; (8002824 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
 800280e:	9505      	str	r5, [sp, #20]
 8002810:	f000 f97a 	bl	8002b08 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
 8002814:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8002818:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 800281a:	bfb8      	it	lt
 800281c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 800281e:	b007      	add	sp, #28
 8002820:	bd30      	pop	{r4, r5, pc}
 8002822:	bf00      	nop
 8002824:	0800baed 	.word	0x0800baed

08002828 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 8002828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800282c:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
 800282e:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
 8002830:	6806      	ldr	r6, [r0, #0]
{
 8002832:	460f      	mov	r7, r1
 8002834:	4614      	mov	r4, r2
	if (align != rew) {
 8002836:	d011      	beq.n	800285c <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
 8002838:	f1c1 0900 	rsb	r9, r1, #0
 800283c:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
 8002840:	464a      	mov	r2, r9
 8002842:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
 8002844:	f103 31ff 	add.w	r1, r3, #4294967295
		gap = MIN(rew, chunk_header_bytes(h));
 8002848:	bf28      	it	cs
 800284a:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
 800284c:	4219      	tst	r1, r3
 800284e:	d10c      	bne.n	800286a <sys_heap_aligned_alloc+0x42>
 8002850:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
 8002852:	b9e4      	cbnz	r4, 800288e <sys_heap_aligned_alloc+0x66>
		return NULL;
 8002854:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
 8002856:	4628      	mov	r0, r5
 8002858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
 800285c:	2904      	cmp	r1, #4
 800285e:	d813      	bhi.n	8002888 <sys_heap_aligned_alloc+0x60>
}
 8002860:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
 8002864:	4611      	mov	r1, r2
 8002866:	f009 ba12 	b.w	800bc8e <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
 800286a:	492c      	ldr	r1, [pc, #176]	; (800291c <sys_heap_aligned_alloc+0xf4>)
 800286c:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <sys_heap_aligned_alloc+0xf8>)
 800286e:	482d      	ldr	r0, [pc, #180]	; (8002924 <sys_heap_aligned_alloc+0xfc>)
 8002870:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8002874:	f009 fa81 	bl	800bd7a <assert_print>
 8002878:	482b      	ldr	r0, [pc, #172]	; (8002928 <sys_heap_aligned_alloc+0x100>)
 800287a:	f009 fa7e 	bl	800bd7a <assert_print>
 800287e:	4828      	ldr	r0, [pc, #160]	; (8002920 <sys_heap_aligned_alloc+0xf8>)
 8002880:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002884:	f009 fa72 	bl	800bd6c <assert_post_action>
		rew = 0;
 8002888:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
 800288a:	2204      	movs	r2, #4
 800288c:	e7e1      	b.n	8002852 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
 800288e:	68b3      	ldr	r3, [r6, #8]
 8002890:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
 8002894:	d9de      	bls.n	8002854 <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8002896:	f104 010b 	add.w	r1, r4, #11
 800289a:	4439      	add	r1, r7
 800289c:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 800289e:	08c9      	lsrs	r1, r1, #3
 80028a0:	4630      	mov	r0, r6
 80028a2:	f009 f9a3 	bl	800bbec <alloc_chunk>
	if (c0 == 0) {
 80028a6:	4680      	mov	r8, r0
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d0d3      	beq.n	8002854 <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 80028ac:	f109 0504 	add.w	r5, r9, #4
 80028b0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 80028b4:	1e7b      	subs	r3, r7, #1
 80028b6:	4435      	add	r5, r6
 80028b8:	441d      	add	r5, r3
 80028ba:	427f      	negs	r7, r7
 80028bc:	403d      	ands	r5, r7
 80028be:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 80028c2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 80028c4:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 80028c6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 80028c8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 80028ca:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
 80028ce:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
 80028d0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 80028d4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
 80028d8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
 80028dc:	d208      	bcs.n	80028f0 <sys_heap_aligned_alloc+0xc8>
		split_chunks(h, c0, c);
 80028de:	4601      	mov	r1, r0
 80028e0:	463a      	mov	r2, r7
 80028e2:	4630      	mov	r0, r6
 80028e4:	f009 f9b9 	bl	800bc5a <split_chunks>
		free_list_add(h, c0);
 80028e8:	4641      	mov	r1, r8
 80028ea:	4630      	mov	r0, r6
 80028ec:	f009 f93a 	bl	800bb64 <free_list_add>
	return c + chunk_size(h, c);
 80028f0:	4639      	mov	r1, r7
 80028f2:	4630      	mov	r0, r6
 80028f4:	f009 f931 	bl	800bb5a <chunk_size>
 80028f8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
 80028fa:	4284      	cmp	r4, r0
 80028fc:	d207      	bcs.n	800290e <sys_heap_aligned_alloc+0xe6>
		split_chunks(h, c, c_end);
 80028fe:	4630      	mov	r0, r6
 8002900:	4622      	mov	r2, r4
 8002902:	f009 f9aa 	bl	800bc5a <split_chunks>
		free_list_add(h, c_end);
 8002906:	4621      	mov	r1, r4
 8002908:	4630      	mov	r0, r6
 800290a:	f009 f92b 	bl	800bb64 <free_list_add>
	void *cmem = &buf[c];
 800290e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8002912:	8873      	ldrh	r3, [r6, #2]
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	8073      	strh	r3, [r6, #2]
 800291a:	e79c      	b.n	8002856 <sys_heap_aligned_alloc+0x2e>
 800291c:	0801274f 	.word	0x0801274f
 8002920:	08012683 	.word	0x08012683
 8002924:	0800e198 	.word	0x0800e198
 8002928:	0801276a 	.word	0x0801276a

0800292c <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
 800292c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
 8002934:	d30e      	bcc.n	8002954 <sys_heap_init+0x28>
 8002936:	493b      	ldr	r1, [pc, #236]	; (8002a24 <sys_heap_init+0xf8>)
 8002938:	4a3b      	ldr	r2, [pc, #236]	; (8002a28 <sys_heap_init+0xfc>)
 800293a:	483c      	ldr	r0, [pc, #240]	; (8002a2c <sys_heap_init+0x100>)
 800293c:	f240 13eb 	movw	r3, #491	; 0x1eb
 8002940:	f009 fa1b 	bl	800bd7a <assert_print>
 8002944:	483a      	ldr	r0, [pc, #232]	; (8002a30 <sys_heap_init+0x104>)
 8002946:	f009 fa18 	bl	800bd7a <assert_print>
 800294a:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
 800294e:	4836      	ldr	r0, [pc, #216]	; (8002a28 <sys_heap_init+0xfc>)
 8002950:	f009 fa0c 	bl	800bd6c <assert_post_action>
 8002954:	2a04      	cmp	r2, #4
 8002956:	d80c      	bhi.n	8002972 <sys_heap_init+0x46>
 8002958:	4936      	ldr	r1, [pc, #216]	; (8002a34 <sys_heap_init+0x108>)
 800295a:	4a33      	ldr	r2, [pc, #204]	; (8002a28 <sys_heap_init+0xfc>)
 800295c:	4833      	ldr	r0, [pc, #204]	; (8002a2c <sys_heap_init+0x100>)
 800295e:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8002962:	f009 fa0a 	bl	800bd7a <assert_print>
 8002966:	4834      	ldr	r0, [pc, #208]	; (8002a38 <sys_heap_init+0x10c>)
 8002968:	f009 fa07 	bl	800bd7a <assert_print>
 800296c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8002970:	e7ed      	b.n	800294e <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
 8002972:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8002974:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8002976:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8002978:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800297c:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8002980:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
 8002982:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8002984:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
 8002988:	d80c      	bhi.n	80029a4 <sys_heap_init+0x78>
 800298a:	492c      	ldr	r1, [pc, #176]	; (8002a3c <sys_heap_init+0x110>)
 800298c:	4a26      	ldr	r2, [pc, #152]	; (8002a28 <sys_heap_init+0xfc>)
 800298e:	4827      	ldr	r0, [pc, #156]	; (8002a2c <sys_heap_init+0x100>)
 8002990:	f240 13fb 	movw	r3, #507	; 0x1fb
 8002994:	f009 f9f1 	bl	800bd7a <assert_print>
 8002998:	4827      	ldr	r0, [pc, #156]	; (8002a38 <sys_heap_init+0x10c>)
 800299a:	f009 f9ee 	bl	800bd7a <assert_print>
 800299e:	f240 11fb 	movw	r1, #507	; 0x1fb
 80029a2:	e7d4      	b.n	800294e <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 80029a4:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 80029a8:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 80029ac:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
 80029b0:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80029b2:	3107      	adds	r1, #7
 80029b4:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
 80029b6:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
 80029b8:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
 80029ba:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
 80029bc:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
 80029c0:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
 80029c2:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
 80029c4:	d90c      	bls.n	80029e0 <sys_heap_init+0xb4>
 80029c6:	491e      	ldr	r1, [pc, #120]	; (8002a40 <sys_heap_init+0x114>)
 80029c8:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <sys_heap_init+0xfc>)
 80029ca:	4818      	ldr	r0, [pc, #96]	; (8002a2c <sys_heap_init+0x100>)
 80029cc:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80029d0:	f009 f9d3 	bl	800bd7a <assert_print>
 80029d4:	4818      	ldr	r0, [pc, #96]	; (8002a38 <sys_heap_init+0x10c>)
 80029d6:	f009 f9d0 	bl	800bd7a <assert_print>
 80029da:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80029de:	e7b6      	b.n	800294e <sys_heap_init+0x22>
 80029e0:	f100 050c 	add.w	r5, r0, #12
 80029e4:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
 80029e8:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
 80029ec:	42b5      	cmp	r5, r6
 80029ee:	d1fb      	bne.n	80029e8 <sys_heap_init+0xbc>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80029f0:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80029f2:	f045 0501 	orr.w	r5, r5, #1
 80029f6:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
 80029f8:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 80029fc:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80029fe:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
 8002a00:	8004      	strh	r4, [r0, #0]
 8002a02:	8077      	strh	r7, [r6, #2]
 8002a04:	1886      	adds	r6, r0, r2
 8002a06:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
 8002a0a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
 8002a0e:	8074      	strh	r4, [r6, #2]
 8002a10:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8002a12:	885a      	ldrh	r2, [r3, #2]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
 8002a1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 8002a1e:	f009 b8a1 	b.w	800bb64 <free_list_add>
 8002a22:	bf00      	nop
 8002a24:	08012787 	.word	0x08012787
 8002a28:	08012683 	.word	0x08012683
 8002a2c:	0800e198 	.word	0x0800e198
 8002a30:	0801279d 	.word	0x0801279d
 8002a34:	080127b4 	.word	0x080127b4
 8002a38:	080127d5 	.word	0x080127d5
 8002a3c:	080127ee 	.word	0x080127ee
 8002a40:	08012817 	.word	0x08012817

08002a44 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8002a44:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
 8002a46:	4e09      	ldr	r6, [pc, #36]	; (8002a6c <extract_decimal+0x28>)
 8002a48:	6801      	ldr	r1, [r0, #0]
{
 8002a4a:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
 8002a4c:	270a      	movs	r7, #10
	size_t val = 0;
 8002a4e:	2000      	movs	r0, #0
 8002a50:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
 8002a52:	3101      	adds	r1, #1
 8002a54:	781c      	ldrb	r4, [r3, #0]
 8002a56:	5d35      	ldrb	r5, [r6, r4]
 8002a58:	076d      	lsls	r5, r5, #29
 8002a5a:	d401      	bmi.n	8002a60 <extract_decimal+0x1c>
	}
	*str = sp;
 8002a5c:	6013      	str	r3, [r2, #0]
	return val;
}
 8002a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 8002a60:	fb07 4300 	mla	r3, r7, r0, r4
 8002a64:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002a68:	e7f2      	b.n	8002a50 <extract_decimal+0xc>
 8002a6a:	bf00      	nop
 8002a6c:	08014285 	.word	0x08014285

08002a70 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8002a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a74:	4615      	mov	r5, r2
 8002a76:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8002a78:	78d3      	ldrb	r3, [r2, #3]
 8002a7a:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <encode_uint+0x94>)
 8002a7c:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
 8002a80:	2b6f      	cmp	r3, #111	; 0x6f
{
 8002a82:	4680      	mov	r8, r0
 8002a84:	460f      	mov	r7, r1
 8002a86:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8002a8a:	d029      	beq.n	8002ae0 <encode_uint+0x70>
 8002a8c:	d824      	bhi.n	8002ad8 <encode_uint+0x68>
		return 10;
 8002a8e:	2b58      	cmp	r3, #88	; 0x58
 8002a90:	bf0c      	ite	eq
 8002a92:	2610      	moveq	r6, #16
 8002a94:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8002a96:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
 8002a9a:	4632      	mov	r2, r6
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	4640      	mov	r0, r8
 8002aa0:	4639      	mov	r1, r7
 8002aa2:	f7fe f861 	bl	8000b68 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002aa6:	2a09      	cmp	r2, #9
 8002aa8:	b2d4      	uxtb	r4, r2
 8002aaa:	d81e      	bhi.n	8002aea <encode_uint+0x7a>
 8002aac:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
 8002aae:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002ab0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8002ab2:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002ab6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8002aba:	d301      	bcc.n	8002ac0 <encode_uint+0x50>
 8002abc:	45d1      	cmp	r9, sl
 8002abe:	d811      	bhi.n	8002ae4 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8002ac0:	782b      	ldrb	r3, [r5, #0]
 8002ac2:	069b      	lsls	r3, r3, #26
 8002ac4:	d505      	bpl.n	8002ad2 <encode_uint+0x62>
		if (radix == 8) {
 8002ac6:	2e08      	cmp	r6, #8
 8002ac8:	d115      	bne.n	8002af6 <encode_uint+0x86>
			conv->altform_0 = true;
 8002aca:	78ab      	ldrb	r3, [r5, #2]
 8002acc:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
 8002ad0:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
 8002ad2:	4648      	mov	r0, r9
 8002ad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8002ad8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 8002adc:	2b70      	cmp	r3, #112	; 0x70
 8002ade:	e7d7      	b.n	8002a90 <encode_uint+0x20>
	switch (specifier) {
 8002ae0:	2608      	movs	r6, #8
 8002ae2:	e7d8      	b.n	8002a96 <encode_uint+0x26>
		value /= radix;
 8002ae4:	4680      	mov	r8, r0
 8002ae6:	460f      	mov	r7, r1
 8002ae8:	e7d7      	b.n	8002a9a <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002aea:	f1bb 0f01 	cmp.w	fp, #1
 8002aee:	bf0c      	ite	eq
 8002af0:	3437      	addeq	r4, #55	; 0x37
 8002af2:	3457      	addne	r4, #87	; 0x57
 8002af4:	e7db      	b.n	8002aae <encode_uint+0x3e>
		} else if (radix == 16) {
 8002af6:	2e10      	cmp	r6, #16
 8002af8:	d1eb      	bne.n	8002ad2 <encode_uint+0x62>
			conv->altform_0c = true;
 8002afa:	78ab      	ldrb	r3, [r5, #2]
 8002afc:	f043 0310 	orr.w	r3, r3, #16
 8002b00:	e7e6      	b.n	8002ad0 <encode_uint+0x60>
 8002b02:	bf00      	nop
 8002b04:	08014285 	.word	0x08014285

08002b08 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8002b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b0c:	b09f      	sub	sp, #124	; 0x7c
 8002b0e:	4682      	mov	sl, r0
 8002b10:	9103      	str	r1, [sp, #12]
 8002b12:	4616      	mov	r6, r2
 8002b14:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8002b16:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8002b18:	7830      	ldrb	r0, [r6, #0]
 8002b1a:	b910      	cbnz	r0, 8002b22 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f000 bd87 	b.w	8003630 <z_cbvprintf_impl+0xb28>
			OUTC(*fp++);
 8002b22:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
 8002b24:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8002b26:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
 8002b28:	d006      	beq.n	8002b38 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
 8002b2a:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
 8002b2c:	47d0      	blx	sl
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	f2c0 857e 	blt.w	8003630 <z_cbvprintf_impl+0xb28>
 8002b34:	3501      	adds	r5, #1
		if (bps == NULL) {
 8002b36:	e21f      	b.n	8002f78 <z_cbvprintf_impl+0x470>
		} state = {
 8002b38:	2218      	movs	r2, #24
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	a810      	add	r0, sp, #64	; 0x40
 8002b3e:	f00a f8c5 	bl	800cccc <memset>
	if (*sp == '%') {
 8002b42:	7873      	ldrb	r3, [r6, #1]
 8002b44:	2b25      	cmp	r3, #37	; 0x25
 8002b46:	f000 80bc 	beq.w	8002cc2 <z_cbvprintf_impl+0x1ba>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	1c71      	adds	r1, r6, #1
 8002b4e:	4698      	mov	r8, r3
 8002b50:	469e      	mov	lr, r3
 8002b52:	469c      	mov	ip, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	460f      	mov	r7, r1
		switch (*sp) {
 8002b58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b5c:	2a2b      	cmp	r2, #43	; 0x2b
 8002b5e:	f000 80df 	beq.w	8002d20 <z_cbvprintf_impl+0x218>
 8002b62:	f200 80d6 	bhi.w	8002d12 <z_cbvprintf_impl+0x20a>
 8002b66:	2a20      	cmp	r2, #32
 8002b68:	f000 80dd 	beq.w	8002d26 <z_cbvprintf_impl+0x21e>
 8002b6c:	2a23      	cmp	r2, #35	; 0x23
 8002b6e:	f000 80dd 	beq.w	8002d2c <z_cbvprintf_impl+0x224>
 8002b72:	b12b      	cbz	r3, 8002b80 <z_cbvprintf_impl+0x78>
 8002b74:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b7c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8002b80:	f1b8 0f00 	cmp.w	r8, #0
 8002b84:	d005      	beq.n	8002b92 <z_cbvprintf_impl+0x8a>
 8002b86:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002b8a:	f043 0320 	orr.w	r3, r3, #32
 8002b8e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8002b92:	f1be 0f00 	cmp.w	lr, #0
 8002b96:	d005      	beq.n	8002ba4 <z_cbvprintf_impl+0x9c>
 8002b98:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002b9c:	f043 0310 	orr.w	r3, r3, #16
 8002ba0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8002ba4:	f1bc 0f00 	cmp.w	ip, #0
 8002ba8:	d005      	beq.n	8002bb6 <z_cbvprintf_impl+0xae>
 8002baa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002bae:	f043 0308 	orr.w	r3, r3, #8
 8002bb2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8002bb6:	b128      	cbz	r0, 8002bc4 <z_cbvprintf_impl+0xbc>
 8002bb8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
 8002bc4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002bc8:	f003 0144 	and.w	r1, r3, #68	; 0x44
 8002bcc:	2944      	cmp	r1, #68	; 0x44
 8002bce:	d103      	bne.n	8002bd8 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
 8002bd0:	f36f 1386 	bfc	r3, #6, #1
 8002bd4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
 8002bd8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002bdc:	970e      	str	r7, [sp, #56]	; 0x38
 8002bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
 8002be2:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 8002be4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
 8002be8:	f040 80a5 	bne.w	8002d36 <z_cbvprintf_impl+0x22e>
		conv->width_star = true;
 8002bec:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
 8002bf8:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
 8002bfa:	781a      	ldrb	r2, [r3, #0]
 8002bfc:	2a2e      	cmp	r2, #46	; 0x2e
 8002bfe:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8002c02:	bf0c      	ite	eq
 8002c04:	2101      	moveq	r1, #1
 8002c06:	2100      	movne	r1, #0
 8002c08:	f361 0241 	bfi	r2, r1, #1, #1
 8002c0c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
 8002c10:	d10c      	bne.n	8002c2c <z_cbvprintf_impl+0x124>
	++sp;
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
 8002c16:	785a      	ldrb	r2, [r3, #1]
 8002c18:	2a2a      	cmp	r2, #42	; 0x2a
 8002c1a:	f040 809c 	bne.w	8002d56 <z_cbvprintf_impl+0x24e>
		conv->prec_star = true;
 8002c1e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8002c22:	f042 0204 	orr.w	r2, r2, #4
 8002c26:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
 8002c2a:	3302      	adds	r3, #2
	switch (*sp) {
 8002c2c:	781a      	ldrb	r2, [r3, #0]
 8002c2e:	2a6c      	cmp	r2, #108	; 0x6c
 8002c30:	f000 80bd 	beq.w	8002dae <z_cbvprintf_impl+0x2a6>
 8002c34:	f200 809f 	bhi.w	8002d76 <z_cbvprintf_impl+0x26e>
 8002c38:	2a68      	cmp	r2, #104	; 0x68
 8002c3a:	f000 80a5 	beq.w	8002d88 <z_cbvprintf_impl+0x280>
 8002c3e:	2a6a      	cmp	r2, #106	; 0x6a
 8002c40:	f000 80be 	beq.w	8002dc0 <z_cbvprintf_impl+0x2b8>
 8002c44:	2a4c      	cmp	r2, #76	; 0x4c
 8002c46:	f000 80c3 	beq.w	8002dd0 <z_cbvprintf_impl+0x2c8>
	conv->specifier = *sp++;
 8002c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c4e:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
 8002c50:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 8002c52:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
 8002c56:	f200 8105 	bhi.w	8002e64 <z_cbvprintf_impl+0x35c>
 8002c5a:	2a6d      	cmp	r2, #109	; 0x6d
 8002c5c:	f200 80c5 	bhi.w	8002dea <z_cbvprintf_impl+0x2e2>
 8002c60:	2a69      	cmp	r2, #105	; 0x69
 8002c62:	f200 80ff 	bhi.w	8002e64 <z_cbvprintf_impl+0x35c>
 8002c66:	2a57      	cmp	r2, #87	; 0x57
 8002c68:	f200 80de 	bhi.w	8002e28 <z_cbvprintf_impl+0x320>
 8002c6c:	2a41      	cmp	r2, #65	; 0x41
 8002c6e:	d004      	beq.n	8002c7a <z_cbvprintf_impl+0x172>
 8002c70:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	f200 80f5 	bhi.w	8002e64 <z_cbvprintf_impl+0x35c>
		conv->specifier_cat = SPECIFIER_FP;
 8002c7a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
 8002c7e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
 8002c82:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
 8002c84:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
 8002c88:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
 8002c8c:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
 8002c90:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
 8002c94:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
 8002c98:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
 8002c9c:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
 8002ca0:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
 8002ca2:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
 8002ca6:	b2cb      	uxtb	r3, r1
 8002ca8:	f100 811b 	bmi.w	8002ee2 <z_cbvprintf_impl+0x3da>
		if (conv->length_mod == LENGTH_L) {
 8002cac:	f003 0278 	and.w	r2, r3, #120	; 0x78
 8002cb0:	2a18      	cmp	r2, #24
 8002cb2:	f040 8105 	bne.w	8002ec0 <z_cbvprintf_impl+0x3b8>
			conv->length_mod = LENGTH_NONE;
 8002cb6:	f36f 03c6 	bfc	r3, #3, #4
 8002cba:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e0f4      	b.n	8002eac <z_cbvprintf_impl+0x3a4>
		conv->specifier = *sp++;
 8002cc2:	1cb2      	adds	r2, r6, #2
 8002cc4:	9206      	str	r2, [sp, #24]
 8002cc6:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
 8002cca:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8002cce:	07df      	lsls	r7, r3, #31
 8002cd0:	f140 8109 	bpl.w	8002ee6 <z_cbvprintf_impl+0x3de>
			width = va_arg(ap, int);
 8002cd4:	f854 2b04 	ldr.w	r2, [r4], #4
 8002cd8:	9204      	str	r2, [sp, #16]
			if (width < 0) {
 8002cda:	2a00      	cmp	r2, #0
 8002cdc:	da08      	bge.n	8002cf0 <z_cbvprintf_impl+0x1e8>
				conv->flag_dash = true;
 8002cde:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8002ce2:	f042 0204 	orr.w	r2, r2, #4
 8002ce6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
 8002cea:	9a04      	ldr	r2, [sp, #16]
 8002cec:	4252      	negs	r2, r2
		int width = -1;
 8002cee:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
 8002cf0:	0758      	lsls	r0, r3, #29
 8002cf2:	f140 8100 	bpl.w	8002ef6 <z_cbvprintf_impl+0x3ee>
			int arg = va_arg(ap, int);
 8002cf6:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
 8002cfa:	2f00      	cmp	r7, #0
 8002cfc:	f280 80ff 	bge.w	8002efe <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
 8002d00:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8002d04:	f36f 0341 	bfc	r3, #1, #1
 8002d08:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
 8002d0c:	f04f 37ff 	mov.w	r7, #4294967295
 8002d10:	e0f5      	b.n	8002efe <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
 8002d12:	2a2d      	cmp	r2, #45	; 0x2d
 8002d14:	d00d      	beq.n	8002d32 <z_cbvprintf_impl+0x22a>
 8002d16:	2a30      	cmp	r2, #48	; 0x30
 8002d18:	f47f af2b 	bne.w	8002b72 <z_cbvprintf_impl+0x6a>
 8002d1c:	2301      	movs	r3, #1
	} while (loop);
 8002d1e:	e71a      	b.n	8002b56 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
 8002d20:	f04f 0c01 	mov.w	ip, #1
 8002d24:	e717      	b.n	8002b56 <z_cbvprintf_impl+0x4e>
 8002d26:	f04f 0e01 	mov.w	lr, #1
 8002d2a:	e714      	b.n	8002b56 <z_cbvprintf_impl+0x4e>
 8002d2c:	f04f 0801 	mov.w	r8, #1
 8002d30:	e711      	b.n	8002b56 <z_cbvprintf_impl+0x4e>
 8002d32:	2001      	movs	r0, #1
 8002d34:	e70f      	b.n	8002b56 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
 8002d36:	a80e      	add	r0, sp, #56	; 0x38
 8002d38:	f7ff fe84 	bl	8002a44 <extract_decimal>
	if (sp != wp) {
 8002d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d3e:	42bb      	cmp	r3, r7
 8002d40:	f43f af5b 	beq.w	8002bfa <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
 8002d44:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
 8002d48:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
 8002d4a:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
 8002d4c:	f360 0241 	bfi	r2, r0, #1, #1
 8002d50:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 8002d54:	e751      	b.n	8002bfa <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
 8002d56:	a80e      	add	r0, sp, #56	; 0x38
 8002d58:	f7ff fe74 	bl	8002a44 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8002d5c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
 8002d60:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
 8002d62:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002d66:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
 8002d6a:	f362 0341 	bfi	r3, r2, #1, #1
 8002d6e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
 8002d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d74:	e75a      	b.n	8002c2c <z_cbvprintf_impl+0x124>
	switch (*sp) {
 8002d76:	2a74      	cmp	r2, #116	; 0x74
 8002d78:	d026      	beq.n	8002dc8 <z_cbvprintf_impl+0x2c0>
 8002d7a:	2a7a      	cmp	r2, #122	; 0x7a
 8002d7c:	f47f af65 	bne.w	8002c4a <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
 8002d80:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8002d84:	2106      	movs	r1, #6
 8002d86:	e00c      	b.n	8002da2 <z_cbvprintf_impl+0x29a>
		if (*++sp == 'h') {
 8002d88:	785a      	ldrb	r2, [r3, #1]
 8002d8a:	2a68      	cmp	r2, #104	; 0x68
 8002d8c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8002d90:	d106      	bne.n	8002da0 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_HH;
 8002d92:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8002d94:	f361 02c6 	bfi	r2, r1, #3, #4
 8002d98:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	e754      	b.n	8002c4a <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
 8002da0:	2102      	movs	r1, #2
 8002da2:	f361 02c6 	bfi	r2, r1, #3, #4
 8002da6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
 8002daa:	3301      	adds	r3, #1
 8002dac:	e74d      	b.n	8002c4a <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
 8002dae:	785a      	ldrb	r2, [r3, #1]
 8002db0:	2a6c      	cmp	r2, #108	; 0x6c
 8002db2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8002db6:	d101      	bne.n	8002dbc <z_cbvprintf_impl+0x2b4>
			conv->length_mod = LENGTH_LL;
 8002db8:	2104      	movs	r1, #4
 8002dba:	e7eb      	b.n	8002d94 <z_cbvprintf_impl+0x28c>
			conv->length_mod = LENGTH_L;
 8002dbc:	2103      	movs	r1, #3
 8002dbe:	e7f0      	b.n	8002da2 <z_cbvprintf_impl+0x29a>
		conv->length_mod = LENGTH_J;
 8002dc0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8002dc4:	2105      	movs	r1, #5
 8002dc6:	e7ec      	b.n	8002da2 <z_cbvprintf_impl+0x29a>
		conv->length_mod = LENGTH_T;
 8002dc8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8002dcc:	2107      	movs	r1, #7
 8002dce:	e7e8      	b.n	8002da2 <z_cbvprintf_impl+0x29a>
		conv->unsupported = true;
 8002dd0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8002dd4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8002dd8:	f022 0202 	bic.w	r2, r2, #2
 8002ddc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002de0:	f042 0202 	orr.w	r2, r2, #2
 8002de4:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
 8002de8:	e7df      	b.n	8002daa <z_cbvprintf_impl+0x2a2>
	switch (conv->specifier) {
 8002dea:	3a6e      	subs	r2, #110	; 0x6e
 8002dec:	b2d3      	uxtb	r3, r2
 8002dee:	2201      	movs	r2, #1
 8002df0:	409a      	lsls	r2, r3
 8002df2:	f240 4382 	movw	r3, #1154	; 0x482
 8002df6:	421a      	tst	r2, r3
 8002df8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8002dfc:	d139      	bne.n	8002e72 <z_cbvprintf_impl+0x36a>
 8002dfe:	f012 0f24 	tst.w	r2, #36	; 0x24
 8002e02:	d161      	bne.n	8002ec8 <z_cbvprintf_impl+0x3c0>
 8002e04:	07d1      	lsls	r1, r2, #31
 8002e06:	d52d      	bpl.n	8002e64 <z_cbvprintf_impl+0x35c>
		conv->specifier_cat = SPECIFIER_PTR;
 8002e08:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002e0c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8002e10:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 8002e14:	2103      	movs	r1, #3
 8002e16:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002e1a:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
 8002e1e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002e22:	eb43 030c 	adc.w	r3, r3, ip
 8002e26:	e041      	b.n	8002eac <z_cbvprintf_impl+0x3a4>
	switch (conv->specifier) {
 8002e28:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 8002e2c:	b2c9      	uxtb	r1, r1
 8002e2e:	2001      	movs	r0, #1
 8002e30:	fa00 f101 	lsl.w	r1, r0, r1
 8002e34:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 8002e38:	f47f af1f 	bne.w	8002c7a <z_cbvprintf_impl+0x172>
 8002e3c:	f640 0301 	movw	r3, #2049	; 0x801
 8002e40:	4219      	tst	r1, r3
 8002e42:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8002e46:	d11a      	bne.n	8002e7e <z_cbvprintf_impl+0x376>
 8002e48:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 8002e4c:	d00a      	beq.n	8002e64 <z_cbvprintf_impl+0x35c>
		conv->specifier_cat = SPECIFIER_SINT;
 8002e4e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8002e52:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002e56:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8002e5a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8002e5c:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002e60:	f47f af2d 	bne.w	8002cbe <z_cbvprintf_impl+0x1b6>
		conv->invalid = true;
 8002e64:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
 8002e70:	e725      	b.n	8002cbe <z_cbvprintf_impl+0x1b6>
		conv->specifier_cat = SPECIFIER_UINT;
 8002e72:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8002e76:	2102      	movs	r1, #2
 8002e78:	f361 0202 	bfi	r2, r1, #0, #3
 8002e7c:	e7eb      	b.n	8002e56 <z_cbvprintf_impl+0x34e>
 8002e7e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 8002e82:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002e84:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8002e88:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8002e8e:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
 8002e92:	bf02      	ittt	eq
 8002e94:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
 8002e98:	f041 0101 	orreq.w	r1, r1, #1
 8002e9c:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
 8002ea0:	2a63      	cmp	r2, #99	; 0x63
 8002ea2:	f47f af0c 	bne.w	8002cbe <z_cbvprintf_impl+0x1b6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8002ea6:	3b00      	subs	r3, #0
 8002ea8:	bf18      	it	ne
 8002eaa:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8002eac:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8002eb0:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	f363 0241 	bfi	r2, r3, #1, #1
 8002eba:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
 8002ebe:	e704      	b.n	8002cca <z_cbvprintf_impl+0x1c2>
		} else if ((conv->length_mod != LENGTH_NONE)
 8002ec0:	f013 0f38 	tst.w	r3, #56	; 0x38
 8002ec4:	d1ce      	bne.n	8002e64 <z_cbvprintf_impl+0x35c>
 8002ec6:	e6fa      	b.n	8002cbe <z_cbvprintf_impl+0x1b6>
		conv->specifier_cat = SPECIFIER_PTR;
 8002ec8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8002ecc:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 8002ece:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8002ed2:	f361 0202 	bfi	r2, r1, #0, #3
 8002ed6:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	e7e4      	b.n	8002eac <z_cbvprintf_impl+0x3a4>
			unsupported = true;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e7e2      	b.n	8002eac <z_cbvprintf_impl+0x3a4>
		} else if (conv->width_present) {
 8002ee6:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
 8002eea:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8002eec:	bfb4      	ite	lt
 8002eee:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
 8002ef0:	f04f 32ff 	movge.w	r2, #4294967295
 8002ef4:	e6fb      	b.n	8002cee <z_cbvprintf_impl+0x1e6>
		} else if (conv->prec_present) {
 8002ef6:	0799      	lsls	r1, r3, #30
 8002ef8:	f57f af08 	bpl.w	8002d0c <z_cbvprintf_impl+0x204>
			precision = conv->prec_value;
 8002efc:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
 8002efe:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
 8002f02:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8002f04:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
 8002f08:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 8002f0c:	f003 0207 	and.w	r2, r3, #7
 8002f10:	2a04      	cmp	r2, #4
 8002f12:	d107      	bne.n	8002f24 <z_cbvprintf_impl+0x41c>
		    && !conv->prec_present) {
 8002f14:	078a      	lsls	r2, r1, #30
 8002f16:	d405      	bmi.n	8002f24 <z_cbvprintf_impl+0x41c>
			if (conv->specifier_a) {
 8002f18:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
 8002f1c:	2a00      	cmp	r2, #0
 8002f1e:	bfac      	ite	ge
 8002f20:	2706      	movge	r7, #6
 8002f22:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
 8002f24:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8002f28:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8002f2a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8002f2e:	d133      	bne.n	8002f98 <z_cbvprintf_impl+0x490>
			switch (length_mod) {
 8002f30:	1ecb      	subs	r3, r1, #3
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d804      	bhi.n	8002f40 <z_cbvprintf_impl+0x438>
 8002f36:	e8df f003 	tbb	[pc, r3]
 8002f3a:	4621      	.short	0x4621
 8002f3c:	2146      	.short	0x2146
 8002f3e:	21          	.byte	0x21
 8002f3f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8002f40:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 8002f42:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 8002f44:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8002f48:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
 8002f4c:	d11c      	bne.n	8002f88 <z_cbvprintf_impl+0x480>
				value->sint = (signed char)value->sint;
 8002f4e:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
 8002f52:	17da      	asrs	r2, r3, #31
 8002f54:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
 8002f58:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 8002f5a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002f5e:	9307      	str	r3, [sp, #28]
 8002f60:	079b      	lsls	r3, r3, #30
 8002f62:	d050      	beq.n	8003006 <z_cbvprintf_impl+0x4fe>
			OUTS(sp, fp);
 8002f64:	9b06      	ldr	r3, [sp, #24]
 8002f66:	9903      	ldr	r1, [sp, #12]
 8002f68:	4632      	mov	r2, r6
 8002f6a:	4650      	mov	r0, sl
 8002f6c:	f008 fee7 	bl	800bd3e <outs>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	f2c0 835d 	blt.w	8003630 <z_cbvprintf_impl+0xb28>
 8002f76:	4405      	add	r5, r0
			continue;
 8002f78:	9e06      	ldr	r6, [sp, #24]
 8002f7a:	e5cd      	b.n	8002b18 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8002f7c:	f854 3b04 	ldr.w	r3, [r4], #4
 8002f80:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 8002f82:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8002f86:	e7e8      	b.n	8002f5a <z_cbvprintf_impl+0x452>
			} else if (length_mod == LENGTH_H) {
 8002f88:	2902      	cmp	r1, #2
 8002f8a:	d1e5      	bne.n	8002f58 <z_cbvprintf_impl+0x450>
				value->sint = (short)value->sint;
 8002f8c:	b21a      	sxth	r2, r3
 8002f8e:	f343 33c0 	sbfx	r3, r3, #15, #1
 8002f92:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002f96:	e7df      	b.n	8002f58 <z_cbvprintf_impl+0x450>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d124      	bne.n	8002fe6 <z_cbvprintf_impl+0x4de>
			switch (length_mod) {
 8002f9c:	1ecb      	subs	r3, r1, #3
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d804      	bhi.n	8002fac <z_cbvprintf_impl+0x4a4>
 8002fa2:	e8df f003 	tbb	[pc, r3]
 8002fa6:	1018      	.short	0x1018
 8002fa8:	1810      	.short	0x1810
 8002faa:	18          	.byte	0x18
 8002fab:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8002fac:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
 8002fae:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	d014      	beq.n	8002fe2 <z_cbvprintf_impl+0x4da>
			} else if (length_mod == LENGTH_H) {
 8002fb8:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 8002fba:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
 8002fbe:	d1cc      	bne.n	8002f5a <z_cbvprintf_impl+0x452>
				value->uint = (unsigned short)value->uint;
 8002fc0:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 8002fc2:	9310      	str	r3, [sp, #64]	; 0x40
 8002fc4:	e7c9      	b.n	8002f5a <z_cbvprintf_impl+0x452>
					(uint_value_type)va_arg(ap,
 8002fc6:	3407      	adds	r4, #7
 8002fc8:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8002fcc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8002fd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
 8002fd4:	e7c1      	b.n	8002f5a <z_cbvprintf_impl+0x452>
					(uint_value_type)va_arg(ap, size_t);
 8002fd6:	f854 3b04 	ldr.w	r3, [r4], #4
 8002fda:	9310      	str	r3, [sp, #64]	; 0x40
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
 8002fe0:	e7bb      	b.n	8002f5a <z_cbvprintf_impl+0x452>
				value->uint = (unsigned char)value->uint;
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	e7cd      	b.n	8002f82 <z_cbvprintf_impl+0x47a>
		} else if (specifier_cat == SPECIFIER_FP) {
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d108      	bne.n	8002ffc <z_cbvprintf_impl+0x4f4>
					(sint_value_type)va_arg(ap, long long);
 8002fea:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 8002fec:	f024 0407 	bic.w	r4, r4, #7
 8002ff0:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002ff4:	3408      	adds	r4, #8
 8002ff6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002ffa:	e7ae      	b.n	8002f5a <z_cbvprintf_impl+0x452>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d1ac      	bne.n	8002f5a <z_cbvprintf_impl+0x452>
			value->ptr = va_arg(ap, void *);
 8003000:	f854 3b04 	ldr.w	r3, [r4], #4
 8003004:	e7dd      	b.n	8002fc2 <z_cbvprintf_impl+0x4ba>
		switch (conv->specifier) {
 8003006:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
 800300a:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
 800300e:	d8b3      	bhi.n	8002f78 <z_cbvprintf_impl+0x470>
 8003010:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
 8003014:	d849      	bhi.n	80030aa <z_cbvprintf_impl+0x5a2>
 8003016:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800301a:	f000 8091 	beq.w	8003140 <z_cbvprintf_impl+0x638>
 800301e:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
 8003022:	d9a9      	bls.n	8002f78 <z_cbvprintf_impl+0x470>
 8003024:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
 8003028:	d003      	beq.n	8003032 <z_cbvprintf_impl+0x52a>
 800302a:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
 800302e:	2a02      	cmp	r2, #2
 8003030:	d8a2      	bhi.n	8002f78 <z_cbvprintf_impl+0x470>
	} u = {
 8003032:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
 8003036:	2a00      	cmp	r2, #0
 8003038:	f2c0 8136 	blt.w	80032a8 <z_cbvprintf_impl+0x7a0>
	} else if (conv->flag_plus) {
 800303c:	9b07      	ldr	r3, [sp, #28]
 800303e:	0718      	lsls	r0, r3, #28
 8003040:	f100 8135 	bmi.w	80032ae <z_cbvprintf_impl+0x7a6>
	} else if (conv->flag_space) {
 8003044:	f3c3 1900 	ubfx	r9, r3, #4, #1
 8003048:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 800304c:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 8003050:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
 8003054:	2800      	cmp	r0, #0
 8003056:	f040 812d 	bne.w	80032b4 <z_cbvprintf_impl+0x7ac>
 800305a:	ea51 0602 	orrs.w	r6, r1, r2
 800305e:	bf14      	ite	ne
 8003060:	2601      	movne	r6, #1
 8003062:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
 8003064:	02d2      	lsls	r2, r2, #11
 8003066:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
 800306a:	02c9      	lsls	r1, r1, #11
		c = 'f';
 800306c:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
 8003070:	ea40 0e01 	orr.w	lr, r0, r1
 8003074:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
 8003078:	bf08      	it	eq
 800307a:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
 800307e:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 8003082:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
 8003086:	f000 819e 	beq.w	80033c6 <z_cbvprintf_impl+0x8be>
		if (is_subnormal) {
 800308a:	2e00      	cmp	r6, #0
 800308c:	f040 8149 	bne.w	8003322 <z_cbvprintf_impl+0x81a>
		fract |= BIT_63;
 8003090:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003092:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8003096:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
 800309a:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 800309c:	2000      	movs	r0, #0
 800309e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80030a2:	4606      	mov	r6, r0
		fract *= 5U;
 80030a4:	f04f 0c05 	mov.w	ip, #5
 80030a8:	e155      	b.n	8003356 <z_cbvprintf_impl+0x84e>
		switch (conv->specifier) {
 80030aa:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
 80030ae:	2a20      	cmp	r2, #32
 80030b0:	f63f af62 	bhi.w	8002f78 <z_cbvprintf_impl+0x470>
 80030b4:	a001      	add	r0, pc, #4	; (adr r0, 80030bc <z_cbvprintf_impl+0x5b4>)
 80030b6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	08003247 	.word	0x08003247
 80030c0:	08002f79 	.word	0x08002f79
 80030c4:	08002f79 	.word	0x08002f79
 80030c8:	08002f79 	.word	0x08002f79
 80030cc:	08002f79 	.word	0x08002f79
 80030d0:	08002f79 	.word	0x08002f79
 80030d4:	08002f79 	.word	0x08002f79
 80030d8:	08002f79 	.word	0x08002f79
 80030dc:	08002f79 	.word	0x08002f79
 80030e0:	08003033 	.word	0x08003033
 80030e4:	08002f79 	.word	0x08002f79
 80030e8:	080031cb 	.word	0x080031cb
 80030ec:	080031df 	.word	0x080031df
 80030f0:	08003033 	.word	0x08003033
 80030f4:	08003033 	.word	0x08003033
 80030f8:	08003033 	.word	0x08003033
 80030fc:	08002f79 	.word	0x08002f79
 8003100:	080031df 	.word	0x080031df
 8003104:	08002f79 	.word	0x08002f79
 8003108:	08002f79 	.word	0x08002f79
 800310c:	08002f79 	.word	0x08002f79
 8003110:	08002f79 	.word	0x08002f79
 8003114:	08003281 	.word	0x08003281
 8003118:	08003247 	.word	0x08003247
 800311c:	0800324d 	.word	0x0800324d
 8003120:	08002f79 	.word	0x08002f79
 8003124:	08002f79 	.word	0x08002f79
 8003128:	08003147 	.word	0x08003147
 800312c:	08002f79 	.word	0x08002f79
 8003130:	08003247 	.word	0x08003247
 8003134:	08002f79 	.word	0x08002f79
 8003138:	08002f79 	.word	0x08002f79
 800313c:	08003247 	.word	0x08003247
			OUTC('%');
 8003140:	9903      	ldr	r1, [sp, #12]
 8003142:	4658      	mov	r0, fp
 8003144:	e4f2      	b.n	8002b2c <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
 8003146:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
 8003148:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
 800314a:	db3a      	blt.n	80031c2 <z_cbvprintf_impl+0x6ba>
				len = strnlen(bps, precision);
 800314c:	4639      	mov	r1, r7
 800314e:	4630      	mov	r0, r6
 8003150:	f009 ff26 	bl	800cfa0 <strnlen>
			bpe = bps + len;
 8003154:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
 8003156:	2e00      	cmp	r6, #0
 8003158:	f43f af0e 	beq.w	8002f78 <z_cbvprintf_impl+0x470>
		char sign = 0;
 800315c:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
 8003160:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8003164:	f013 0210 	ands.w	r2, r3, #16
 8003168:	9205      	str	r2, [sp, #20]
 800316a:	f000 8256 	beq.w	800361a <z_cbvprintf_impl+0xb12>
			nj_len += 2U;
 800316e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8003170:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
 8003174:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
 8003178:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
 800317a:	bf18      	it	ne
 800317c:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
 800317e:	f8cd 801c 	str.w	r8, [sp, #28]
 8003182:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
 8003184:	bf18      	it	ne
 8003186:	18c0      	addne	r0, r0, r3
		if (width > 0) {
 8003188:	9b04      	ldr	r3, [sp, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f340 8260 	ble.w	8003650 <z_cbvprintf_impl+0xb48>
			if (!conv->flag_dash) {
 8003190:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
 8003194:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
 8003196:	0750      	lsls	r0, r2, #29
			width -= (int)nj_len;
 8003198:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
 800319a:	f3c2 0b80 	ubfx	fp, r2, #2, #1
 800319e:	f100 8257 	bmi.w	8003650 <z_cbvprintf_impl+0xb48>
				if (conv->flag_zero) {
 80031a2:	0651      	lsls	r1, r2, #25
 80031a4:	f140 8247 	bpl.w	8003636 <z_cbvprintf_impl+0xb2e>
					if (sign != 0) {
 80031a8:	f1b9 0f00 	cmp.w	r9, #0
 80031ac:	d007      	beq.n	80031be <z_cbvprintf_impl+0x6b6>
						OUTC(sign);
 80031ae:	9903      	ldr	r1, [sp, #12]
 80031b0:	4648      	mov	r0, r9
 80031b2:	47d0      	blx	sl
 80031b4:	2800      	cmp	r0, #0
 80031b6:	f2c0 823b 	blt.w	8003630 <z_cbvprintf_impl+0xb28>
 80031ba:	3501      	adds	r5, #1
						sign = 0;
 80031bc:	46d9      	mov	r9, fp
					pad = '0';
 80031be:	2230      	movs	r2, #48	; 0x30
 80031c0:	e23a      	b.n	8003638 <z_cbvprintf_impl+0xb30>
				len = strlen(bps);
 80031c2:	4630      	mov	r0, r6
 80031c4:	f7fd ff00 	bl	8000fc8 <strlen>
 80031c8:	e7c4      	b.n	8003154 <z_cbvprintf_impl+0x64c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 80031ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80031cc:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
 80031d0:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
 80031d4:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
 80031d8:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
 80031da:	2001      	movs	r0, #1
 80031dc:	e7c0      	b.n	8003160 <z_cbvprintf_impl+0x658>
			if (conv->flag_plus) {
 80031de:	9b07      	ldr	r3, [sp, #28]
 80031e0:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
 80031e2:	bf58      	it	pl
 80031e4:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
 80031e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
 80031ec:	bf54      	ite	pl
 80031ee:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
 80031f2:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	da06      	bge.n	8003208 <z_cbvprintf_impl+0x700>
				value->uint = (uint_value_type)-sint;
 80031fa:	4252      	negs	r2, r2
 80031fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003200:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
 8003204:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 8003208:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003212:	ab17      	add	r3, sp, #92	; 0x5c
 8003214:	aa12      	add	r2, sp, #72	; 0x48
 8003216:	f7ff fc2b 	bl	8002a70 <encode_uint>
 800321a:	4606      	mov	r6, r0
			if (precision >= 0) {
 800321c:	2f00      	cmp	r7, #0
 800321e:	db0c      	blt.n	800323a <z_cbvprintf_impl+0x732>
				conv->flag_zero = false;
 8003220:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
 8003224:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8003228:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
 800322a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 800322e:	429f      	cmp	r7, r3
				conv->flag_zero = false;
 8003230:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
 8003234:	d901      	bls.n	800323a <z_cbvprintf_impl+0x732>
					conv->pad0_value = precision - (int)len;
 8003236:	1afb      	subs	r3, r7, r3
 8003238:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
 800323a:	2e00      	cmp	r6, #0
 800323c:	f43f ae9c 	beq.w	8002f78 <z_cbvprintf_impl+0x470>
 8003240:	f10d 0775 	add.w	r7, sp, #117	; 0x75
 8003244:	e05b      	b.n	80032fe <z_cbvprintf_impl+0x7f6>
		switch (conv->specifier) {
 8003246:	f04f 0900 	mov.w	r9, #0
 800324a:	e7dd      	b.n	8003208 <z_cbvprintf_impl+0x700>
			if (value->ptr != NULL) {
 800324c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800324e:	2800      	cmp	r0, #0
 8003250:	f000 81de 	beq.w	8003610 <z_cbvprintf_impl+0xb08>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8003254:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	aa12      	add	r2, sp, #72	; 0x48
 800325c:	ab17      	add	r3, sp, #92	; 0x5c
 800325e:	2100      	movs	r1, #0
 8003260:	f7ff fc06 	bl	8002a70 <encode_uint>
				conv->altform_0c = true;
 8003264:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8003268:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800326c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8003270:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8003274:	4606      	mov	r6, r0
				conv->altform_0c = true;
 8003276:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
 800327a:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
 800327e:	e7cd      	b.n	800321c <z_cbvprintf_impl+0x714>
				store_count(conv, value->ptr, count);
 8003280:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
 8003282:	2907      	cmp	r1, #7
 8003284:	f63f ae78 	bhi.w	8002f78 <z_cbvprintf_impl+0x470>
 8003288:	e8df f001 	tbb	[pc, r1]
 800328c:	0c06040c 	.word	0x0c06040c
 8003290:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8003294:	701d      	strb	r5, [r3, #0]
		break;
 8003296:	e66f      	b.n	8002f78 <z_cbvprintf_impl+0x470>
		*(short *)dp = (short)count;
 8003298:	801d      	strh	r5, [r3, #0]
		break;
 800329a:	e66d      	b.n	8002f78 <z_cbvprintf_impl+0x470>
		*(intmax_t *)dp = (intmax_t)count;
 800329c:	17ea      	asrs	r2, r5, #31
 800329e:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 80032a2:	e669      	b.n	8002f78 <z_cbvprintf_impl+0x470>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 80032a4:	601d      	str	r5, [r3, #0]
		break;
 80032a6:	e667      	b.n	8002f78 <z_cbvprintf_impl+0x470>
		*sign = '-';
 80032a8:	f04f 092d 	mov.w	r9, #45	; 0x2d
 80032ac:	e6ce      	b.n	800304c <z_cbvprintf_impl+0x544>
		*sign = '+';
 80032ae:	f04f 092b 	mov.w	r9, #43	; 0x2b
 80032b2:	e6cb      	b.n	800304c <z_cbvprintf_impl+0x544>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 80032b4:	f240 76ff 	movw	r6, #2047	; 0x7ff
 80032b8:	42b0      	cmp	r0, r6
 80032ba:	d12f      	bne.n	800331c <z_cbvprintf_impl+0x814>
			if (isupper((unsigned char)c)) {
 80032bc:	f10b 0301 	add.w	r3, fp, #1
 80032c0:	489e      	ldr	r0, [pc, #632]	; (800353c <z_cbvprintf_impl+0xa34>)
 80032c2:	b2db      	uxtb	r3, r3
		if (fract == 0) {
 80032c4:	430a      	orrs	r2, r1
 80032c6:	5cc3      	ldrb	r3, [r0, r3]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	d11e      	bne.n	800330c <z_cbvprintf_impl+0x804>
			if (isupper((unsigned char)c)) {
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	bf0b      	itete	eq
 80032d2:	2349      	moveq	r3, #73	; 0x49
 80032d4:	2369      	movne	r3, #105	; 0x69
 80032d6:	214e      	moveq	r1, #78	; 0x4e
 80032d8:	216e      	movne	r1, #110	; 0x6e
 80032da:	bf0c      	ite	eq
 80032dc:	2246      	moveq	r2, #70	; 0x46
 80032de:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
 80032e0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
 80032e4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
 80032e8:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
 80032ec:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
 80032f0:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
 80032f4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
 80032f8:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
 80032fc:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
 80032fe:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
 8003300:	f1b9 0f00 	cmp.w	r9, #0
 8003304:	f43f af2c 	beq.w	8003160 <z_cbvprintf_impl+0x658>
			nj_len += 1U;
 8003308:	3001      	adds	r0, #1
 800330a:	e729      	b.n	8003160 <z_cbvprintf_impl+0x658>
			if (isupper((unsigned char)c)) {
 800330c:	2b01      	cmp	r3, #1
 800330e:	bf15      	itete	ne
 8003310:	236e      	movne	r3, #110	; 0x6e
 8003312:	234e      	moveq	r3, #78	; 0x4e
 8003314:	2161      	movne	r1, #97	; 0x61
 8003316:	2141      	moveq	r1, #65	; 0x41
 8003318:	461a      	mov	r2, r3
 800331a:	e7e1      	b.n	80032e0 <z_cbvprintf_impl+0x7d8>
	bool is_subnormal = (expo == 0) && (fract != 0);
 800331c:	2600      	movs	r6, #0
 800331e:	e6a1      	b.n	8003064 <z_cbvprintf_impl+0x55c>
				expo--;
 8003320:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 8003322:	1849      	adds	r1, r1, r1
 8003324:	4152      	adcs	r2, r2
 8003326:	2a00      	cmp	r2, #0
 8003328:	dafa      	bge.n	8003320 <z_cbvprintf_impl+0x818>
 800332a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 800332e:	e6af      	b.n	8003090 <z_cbvprintf_impl+0x588>
			fract >>= 1;
 8003330:	0849      	lsrs	r1, r1, #1
 8003332:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
 8003336:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8003338:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
 800333c:	4640      	mov	r0, r8
			expo++;
 800333e:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8003342:	d2f5      	bcs.n	8003330 <z_cbvprintf_impl+0x828>
		fract *= 5U;
 8003344:	fb0c fe02 	mul.w	lr, ip, r2
 8003348:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
 800334c:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
 8003350:	4472      	add	r2, lr
		decexp--;
 8003352:	3e01      	subs	r6, #1
 8003354:	2001      	movs	r0, #1
	while (expo < -2) {
 8003356:	f118 0f02 	cmn.w	r8, #2
 800335a:	dbe9      	blt.n	8003330 <z_cbvprintf_impl+0x828>
 800335c:	b108      	cbz	r0, 8003362 <z_cbvprintf_impl+0x85a>
 800335e:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
 8003362:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
 8003366:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
 800336a:	dc2f      	bgt.n	80033cc <z_cbvprintf_impl+0x8c4>
	fract >>= (4 - expo);
 800336c:	f1c8 0004 	rsb	r0, r8, #4
 8003370:	f108 081c 	add.w	r8, r8, #28
 8003374:	f1a0 0c20 	sub.w	ip, r0, #32
 8003378:	40c2      	lsrs	r2, r0
 800337a:	fa21 f300 	lsr.w	r3, r1, r0
 800337e:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
 8003382:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
 8003386:	ea42 0208 	orr.w	r2, r2, r8
 800338a:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
 800338e:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
 8003390:	ea42 020c 	orr.w	r2, r2, ip
 8003394:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
 8003396:	d13a      	bne.n	800340e <z_cbvprintf_impl+0x906>
		if (decexp < (-4 + 1) || decexp > precision) {
 8003398:	1cf3      	adds	r3, r6, #3
 800339a:	db01      	blt.n	80033a0 <z_cbvprintf_impl+0x898>
 800339c:	42b7      	cmp	r7, r6
 800339e:	da2b      	bge.n	80033f8 <z_cbvprintf_impl+0x8f0>
			c += 'e' - 'g';  /* e or E */
 80033a0:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
 80033a4:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
 80033a6:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
 80033aa:	dd7f      	ble.n	80034ac <z_cbvprintf_impl+0x9a4>
		if (!conv->flag_hash && (precision > 0)) {
 80033ac:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80033b0:	0680      	lsls	r0, r0, #26
				precision--;
 80033b2:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
 80033b6:	d479      	bmi.n	80034ac <z_cbvprintf_impl+0x9a4>
 80033b8:	1e3b      	subs	r3, r7, #0
 80033ba:	bf18      	it	ne
 80033bc:	2301      	movne	r3, #1
	bool prune_zero = false;
 80033be:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
 80033c0:	f107 0801 	add.w	r8, r7, #1
 80033c4:	e02d      	b.n	8003422 <z_cbvprintf_impl+0x91a>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 80033c6:	f04f 0800 	mov.w	r8, #0
 80033ca:	e667      	b.n	800309c <z_cbvprintf_impl+0x594>
		fract += 2;
 80033cc:	3202      	adds	r2, #2
 80033ce:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
 80033d2:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
 80033d4:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
 80033d8:	f008 fc82 	bl	800bce0 <_ldiv5>
		expo--;
 80033dc:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 80033e0:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
 80033e4:	3601      	adds	r6, #1
			fract <<= 1;
 80033e6:	1892      	adds	r2, r2, r2
 80033e8:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
 80033ea:	2900      	cmp	r1, #0
			expo--;
 80033ec:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
 80033f0:	daf9      	bge.n	80033e6 <z_cbvprintf_impl+0x8de>
 80033f2:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
 80033f6:	e7b4      	b.n	8003362 <z_cbvprintf_impl+0x85a>
		if (!conv->flag_hash && (precision > 0)) {
 80033f8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80033fc:	0699      	lsls	r1, r3, #26
			precision -= decexp;
 80033fe:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
 8003402:	d451      	bmi.n	80034a8 <z_cbvprintf_impl+0x9a0>
 8003404:	1e3b      	subs	r3, r7, #0
 8003406:	bf18      	it	ne
 8003408:	2301      	movne	r3, #1
	bool prune_zero = false;
 800340a:	9305      	str	r3, [sp, #20]
 800340c:	e004      	b.n	8003418 <z_cbvprintf_impl+0x910>
 800340e:	2300      	movs	r3, #0
	if (c == 'f') {
 8003410:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
 8003414:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
 8003416:	d1d3      	bne.n	80033c0 <z_cbvprintf_impl+0x8b8>
		if (decimals < 0) {
 8003418:	eb17 0806 	adds.w	r8, r7, r6
 800341c:	f04f 0b66 	mov.w	fp, #102	; 0x66
 8003420:	d446      	bmi.n	80034b0 <z_cbvprintf_impl+0x9a8>
	if (decimals > 16) {
 8003422:	f1b8 0f10 	cmp.w	r8, #16
 8003426:	bfa8      	it	ge
 8003428:	f04f 0810 	movge.w	r8, #16
 800342c:	2010      	movs	r0, #16
 800342e:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
 8003430:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003434:	2000      	movs	r0, #0
 8003436:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
 800343a:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
 800343e:	f1b8 0f00 	cmp.w	r8, #0
 8003442:	d138      	bne.n	80034b6 <z_cbvprintf_impl+0x9ae>
	fract += round;
 8003444:	9908      	ldr	r1, [sp, #32]
 8003446:	1812      	adds	r2, r2, r0
 8003448:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
 800344c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003450:	d23f      	bcs.n	80034d2 <z_cbvprintf_impl+0x9ca>
	fract += round;
 8003452:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
 8003456:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
 8003458:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
 800345c:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
 8003460:	f040 80b5 	bne.w	80035ce <z_cbvprintf_impl+0xac6>
		if (decexp > 0) {
 8003464:	2e00      	cmp	r6, #0
 8003466:	dc3f      	bgt.n	80034e8 <z_cbvprintf_impl+0x9e0>
			*buf++ = '0';
 8003468:	2130      	movs	r1, #48	; 0x30
 800346a:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
 800346e:	2a00      	cmp	r2, #0
 8003470:	d166      	bne.n	8003540 <z_cbvprintf_impl+0xa38>
 8003472:	2f00      	cmp	r7, #0
 8003474:	f340 81af 	ble.w	80037d6 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
 8003478:	222e      	movs	r2, #46	; 0x2e
 800347a:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
 800347e:	b186      	cbz	r6, 80034a2 <z_cbvprintf_impl+0x99a>
			conv->pad0_value = -decexp;
 8003480:	4272      	negs	r2, r6
 8003482:	42ba      	cmp	r2, r7
 8003484:	bfa8      	it	ge
 8003486:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
 8003488:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 800348c:	9213      	str	r2, [sp, #76]	; 0x4c
 800348e:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
 8003490:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
 8003494:	bfd4      	ite	le
 8003496:	2200      	movle	r2, #0
 8003498:	2201      	movgt	r2, #1
 800349a:	f362 1145 	bfi	r1, r2, #5, #1
 800349e:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
 80034a2:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
 80034a6:	e037      	b.n	8003518 <z_cbvprintf_impl+0xa10>
	bool prune_zero = false;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e7ae      	b.n	800340a <z_cbvprintf_impl+0x902>
 80034ac:	2300      	movs	r3, #0
 80034ae:	e786      	b.n	80033be <z_cbvprintf_impl+0x8b6>
			decimals = 0;
 80034b0:	f04f 0800 	mov.w	r8, #0
 80034b4:	e7ba      	b.n	800342c <z_cbvprintf_impl+0x924>
	*v >>= 1;
 80034b6:	0840      	lsrs	r0, r0, #1
 80034b8:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
 80034c2:	a80e      	add	r0, sp, #56	; 0x38
 80034c4:	9209      	str	r2, [sp, #36]	; 0x24
 80034c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80034ca:	f008 fc09 	bl	800bce0 <_ldiv5>
 80034ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
 80034d0:	e7b3      	b.n	800343a <z_cbvprintf_impl+0x932>
	*v >>= 1;
 80034d2:	0852      	lsrs	r2, r2, #1
 80034d4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
 80034d8:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
 80034da:	0849      	lsrs	r1, r1, #1
 80034dc:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
 80034e0:	3601      	adds	r6, #1
	_ldiv5(v);
 80034e2:	f008 fbfd 	bl	800bce0 <_ldiv5>
		decexp++;
 80034e6:	e7b6      	b.n	8003456 <z_cbvprintf_impl+0x94e>
	char *buf = bps;
 80034e8:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
 80034ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034ee:	2900      	cmp	r1, #0
 80034f0:	dd09      	ble.n	8003506 <z_cbvprintf_impl+0x9fe>
				*buf++ = _get_digit(&fract, &digit_count);
 80034f2:	a90b      	add	r1, sp, #44	; 0x2c
 80034f4:	a80c      	add	r0, sp, #48	; 0x30
 80034f6:	9207      	str	r2, [sp, #28]
 80034f8:	f008 fc0a 	bl	800bd10 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 80034fc:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
 80034fe:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
 8003502:	9a07      	ldr	r2, [sp, #28]
 8003504:	d1f2      	bne.n	80034ec <z_cbvprintf_impl+0x9e4>
			conv->pad0_value = decexp;
 8003506:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
 8003508:	b99a      	cbnz	r2, 8003532 <z_cbvprintf_impl+0xa2a>
 800350a:	2f00      	cmp	r7, #0
 800350c:	f340 8161 	ble.w	80037d2 <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
 8003510:	212e      	movs	r1, #46	; 0x2e
 8003512:	f808 1b01 	strb.w	r1, [r8], #1
 8003516:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
 8003518:	2f00      	cmp	r7, #0
 800351a:	dd1a      	ble.n	8003552 <z_cbvprintf_impl+0xa4a>
 800351c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800351e:	2a00      	cmp	r2, #0
 8003520:	dd17      	ble.n	8003552 <z_cbvprintf_impl+0xa4a>
		*buf++ = _get_digit(&fract, &digit_count);
 8003522:	a90b      	add	r1, sp, #44	; 0x2c
 8003524:	a80c      	add	r0, sp, #48	; 0x30
 8003526:	f008 fbf3 	bl	800bd10 <_get_digit>
		precision--;
 800352a:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
 800352c:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
 8003530:	e7f2      	b.n	8003518 <z_cbvprintf_impl+0xa10>
			*buf++ = '.';
 8003532:	222e      	movs	r2, #46	; 0x2e
 8003534:	f808 2b01 	strb.w	r2, [r8], #1
 8003538:	e7ed      	b.n	8003516 <z_cbvprintf_impl+0xa0e>
 800353a:	bf00      	nop
 800353c:	08014284 	.word	0x08014284
 8003540:	222e      	movs	r2, #46	; 0x2e
 8003542:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
 8003546:	2e00      	cmp	r6, #0
 8003548:	d0ab      	beq.n	80034a2 <z_cbvprintf_impl+0x99a>
 800354a:	2f00      	cmp	r7, #0
 800354c:	dc98      	bgt.n	8003480 <z_cbvprintf_impl+0x978>
			*buf++ = '.';
 800354e:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
 8003552:	9b05      	ldr	r3, [sp, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d14e      	bne.n	80035f6 <z_cbvprintf_impl+0xaee>
	conv->pad0_pre_exp = precision;
 8003558:	9714      	str	r7, [sp, #80]	; 0x50
 800355a:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
 800355c:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003560:	2a45      	cmp	r2, #69	; 0x45
 8003562:	d123      	bne.n	80035ac <z_cbvprintf_impl+0xaa4>
		if (decexp < 0) {
 8003564:	2e00      	cmp	r6, #0
			decexp = -decexp;
 8003566:	bfba      	itte	lt
 8003568:	4276      	neglt	r6, r6
			*buf++ = '-';
 800356a:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
 800356c:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
 800356e:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
 8003570:	bfc8      	it	gt
 8003572:	2164      	movgt	r1, #100	; 0x64
 8003574:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
 8003576:	bfd1      	iteee	le
 8003578:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
 800357a:	fbb6 f3f1 	udivgt	r3, r6, r1
 800357e:	1cfa      	addgt	r2, r7, #3
 8003580:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
 8003584:	bfc8      	it	gt
 8003586:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
 800358a:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
 800358e:	bfc8      	it	gt
 8003590:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
 8003592:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
 8003596:	fbb6 f3f1 	udiv	r3, r6, r1
 800359a:	4617      	mov	r7, r2
 800359c:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 80035a0:	fb01 6313 	mls	r3, r1, r3, r6
 80035a4:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 80035a6:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
 80035aa:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
 80035ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	dc2c      	bgt.n	800360c <z_cbvprintf_impl+0xb04>
 80035b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bfd4      	ite	le
 80035b8:	2300      	movle	r3, #0
 80035ba:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 80035bc:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 80035c0:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 80035c4:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 80035c6:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
 80035ca:	703b      	strb	r3, [r7, #0]
	return bps;
 80035cc:	e696      	b.n	80032fc <z_cbvprintf_impl+0x7f4>
		*buf = _get_digit(&fract, &digit_count);
 80035ce:	a90b      	add	r1, sp, #44	; 0x2c
 80035d0:	a80c      	add	r0, sp, #48	; 0x30
 80035d2:	9207      	str	r2, [sp, #28]
 80035d4:	f008 fb9c 	bl	800bd10 <_get_digit>
		if (*buf++ != '0') {
 80035d8:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
 80035da:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
 80035de:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 80035e0:	bf18      	it	ne
 80035e2:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
 80035e6:	b912      	cbnz	r2, 80035ee <z_cbvprintf_impl+0xae6>
 80035e8:	2f00      	cmp	r7, #0
 80035ea:	f340 80f4 	ble.w	80037d6 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
 80035ee:	222e      	movs	r2, #46	; 0x2e
 80035f0:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 80035f4:	e755      	b.n	80034a2 <z_cbvprintf_impl+0x99a>
		while (*--buf == '0') {
 80035f6:	4647      	mov	r7, r8
 80035f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80035fc:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003600:	2a30      	cmp	r2, #48	; 0x30
 8003602:	d0f8      	beq.n	80035f6 <z_cbvprintf_impl+0xaee>
 8003604:	2a2e      	cmp	r2, #46	; 0x2e
 8003606:	bf08      	it	eq
 8003608:	4647      	moveq	r7, r8
 800360a:	e7a7      	b.n	800355c <z_cbvprintf_impl+0xa54>
		|| (conv->pad0_pre_exp > 0);
 800360c:	2301      	movs	r3, #1
 800360e:	e7d5      	b.n	80035bc <z_cbvprintf_impl+0xab4>
			bpe = bps + 5;
 8003610:	4f72      	ldr	r7, [pc, #456]	; (80037dc <z_cbvprintf_impl+0xcd4>)
		char sign = 0;
 8003612:	4681      	mov	r9, r0
			bps = "(nil)";
 8003614:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
 8003616:	2005      	movs	r0, #5
 8003618:	e5a2      	b.n	8003160 <z_cbvprintf_impl+0x658>
		} else if (conv->altform_0) {
 800361a:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 800361c:	bf48      	it	mi
 800361e:	3001      	addmi	r0, #1
 8003620:	e5a6      	b.n	8003170 <z_cbvprintf_impl+0x668>
					OUTC(pad);
 8003622:	4610      	mov	r0, r2
 8003624:	9209      	str	r2, [sp, #36]	; 0x24
 8003626:	9903      	ldr	r1, [sp, #12]
 8003628:	47d0      	blx	sl
 800362a:	2800      	cmp	r0, #0
 800362c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800362e:	da05      	bge.n	800363c <z_cbvprintf_impl+0xb34>
#undef OUTS
#undef OUTC
}
 8003630:	b01f      	add	sp, #124	; 0x7c
 8003632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8003636:	2220      	movs	r2, #32
					pad = '0';
 8003638:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
 800363c:	4659      	mov	r1, fp
 800363e:	2900      	cmp	r1, #0
 8003640:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003644:	dced      	bgt.n	8003622 <z_cbvprintf_impl+0xb1a>
 8003646:	9b04      	ldr	r3, [sp, #16]
 8003648:	f8cd b010 	str.w	fp, [sp, #16]
 800364c:	442b      	add	r3, r5
 800364e:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
 8003650:	f1b9 0f00 	cmp.w	r9, #0
 8003654:	d005      	beq.n	8003662 <z_cbvprintf_impl+0xb5a>
			OUTC(sign);
 8003656:	9903      	ldr	r1, [sp, #12]
 8003658:	4648      	mov	r0, r9
 800365a:	47d0      	blx	sl
 800365c:	2800      	cmp	r0, #0
 800365e:	dbe7      	blt.n	8003630 <z_cbvprintf_impl+0xb28>
 8003660:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 8003662:	9b08      	ldr	r3, [sp, #32]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d079      	beq.n	800375c <z_cbvprintf_impl+0xc54>
			if (conv->specifier_a) {
 8003668:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
 800366c:	2b00      	cmp	r3, #0
 800366e:	db29      	blt.n	80036c4 <z_cbvprintf_impl+0xbbc>
				while (isdigit((unsigned char)*cp)) {
 8003670:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80037e0 <z_cbvprintf_impl+0xcd8>
			if (conv->specifier_a) {
 8003674:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp)) {
 8003676:	7818      	ldrb	r0, [r3, #0]
 8003678:	f819 2000 	ldrb.w	r2, [r9, r0]
 800367c:	0752      	lsls	r2, r2, #29
 800367e:	469b      	mov	fp, r3
 8003680:	f103 0301 	add.w	r3, r3, #1
 8003684:	d43f      	bmi.n	8003706 <z_cbvprintf_impl+0xbfe>
				if (!conv->pad_postdp) {
 8003686:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800368a:	1bae      	subs	r6, r5, r6
 800368c:	0698      	lsls	r0, r3, #26
 800368e:	445e      	add	r6, fp
 8003690:	d407      	bmi.n	80036a2 <z_cbvprintf_impl+0xb9a>
					while (pad_len-- > 0) {
 8003692:	4642      	mov	r2, r8
 8003694:	2a00      	cmp	r2, #0
 8003696:	f108 38ff 	add.w	r8, r8, #4294967295
 800369a:	dc3b      	bgt.n	8003714 <z_cbvprintf_impl+0xc0c>
 800369c:	9b07      	ldr	r3, [sp, #28]
 800369e:	4433      	add	r3, r6
 80036a0:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
 80036a2:	f89b 0000 	ldrb.w	r0, [fp]
 80036a6:	282e      	cmp	r0, #46	; 0x2e
 80036a8:	d10a      	bne.n	80036c0 <z_cbvprintf_impl+0xbb8>
					OUTC(*cp++);
 80036aa:	9903      	ldr	r1, [sp, #12]
 80036ac:	47d0      	blx	sl
						OUTC('0');
 80036ae:	2800      	cmp	r0, #0
 80036b0:	dbbe      	blt.n	8003630 <z_cbvprintf_impl+0xb28>
					while (pad_len-- > 0) {
 80036b2:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
 80036b6:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
 80036ba:	dc31      	bgt.n	8003720 <z_cbvprintf_impl+0xc18>
					OUTC(*cp++);
 80036bc:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
 80036c0:	465d      	mov	r5, fp
 80036c2:	e038      	b.n	8003736 <z_cbvprintf_impl+0xc2e>
 80036c4:	46b1      	mov	r9, r6
				while (*cp != 'p') {
 80036c6:	f899 0000 	ldrb.w	r0, [r9]
 80036ca:	2870      	cmp	r0, #112	; 0x70
 80036cc:	46c8      	mov	r8, r9
 80036ce:	f109 0901 	add.w	r9, r9, #1
 80036d2:	d113      	bne.n	80036fc <z_cbvprintf_impl+0xbf4>
 80036d4:	1bae      	subs	r6, r5, r6
 80036d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80036d8:	4446      	add	r6, r8
			while (pad_len-- > 0) {
 80036da:	4435      	add	r5, r6
 80036dc:	1bab      	subs	r3, r5, r6
 80036de:	2b00      	cmp	r3, #0
 80036e0:	dc34      	bgt.n	800374c <z_cbvprintf_impl+0xc44>
			OUTS(cp, bpe);
 80036e2:	9903      	ldr	r1, [sp, #12]
 80036e4:	463b      	mov	r3, r7
 80036e6:	4642      	mov	r2, r8
 80036e8:	4650      	mov	r0, sl
 80036ea:	f008 fb28 	bl	800bd3e <outs>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	db9e      	blt.n	8003630 <z_cbvprintf_impl+0xb28>
 80036f2:	4430      	add	r0, r6
 80036f4:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
 80036f6:	4605      	mov	r5, r0
 80036f8:	4406      	add	r6, r0
 80036fa:	e065      	b.n	80037c8 <z_cbvprintf_impl+0xcc0>
					OUTC(*cp++);
 80036fc:	9903      	ldr	r1, [sp, #12]
 80036fe:	47d0      	blx	sl
 8003700:	2800      	cmp	r0, #0
 8003702:	dae0      	bge.n	80036c6 <z_cbvprintf_impl+0xbbe>
 8003704:	e794      	b.n	8003630 <z_cbvprintf_impl+0xb28>
 8003706:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
 8003708:	9903      	ldr	r1, [sp, #12]
 800370a:	47d0      	blx	sl
 800370c:	2800      	cmp	r0, #0
 800370e:	9b05      	ldr	r3, [sp, #20]
 8003710:	dab1      	bge.n	8003676 <z_cbvprintf_impl+0xb6e>
 8003712:	e78d      	b.n	8003630 <z_cbvprintf_impl+0xb28>
						OUTC('0');
 8003714:	9903      	ldr	r1, [sp, #12]
 8003716:	2030      	movs	r0, #48	; 0x30
 8003718:	47d0      	blx	sl
 800371a:	2800      	cmp	r0, #0
 800371c:	dab9      	bge.n	8003692 <z_cbvprintf_impl+0xb8a>
 800371e:	e787      	b.n	8003630 <z_cbvprintf_impl+0xb28>
						OUTC('0');
 8003720:	9903      	ldr	r1, [sp, #12]
 8003722:	2030      	movs	r0, #48	; 0x30
 8003724:	47d0      	blx	sl
 8003726:	f108 38ff 	add.w	r8, r8, #4294967295
 800372a:	e7c0      	b.n	80036ae <z_cbvprintf_impl+0xba6>
					OUTC(*cp++);
 800372c:	9903      	ldr	r1, [sp, #12]
 800372e:	47d0      	blx	sl
 8003730:	2800      	cmp	r0, #0
 8003732:	f6ff af7d 	blt.w	8003630 <z_cbvprintf_impl+0xb28>
				while (isdigit((unsigned char)*cp)) {
 8003736:	7828      	ldrb	r0, [r5, #0]
 8003738:	f819 3000 	ldrb.w	r3, [r9, r0]
 800373c:	0759      	lsls	r1, r3, #29
 800373e:	46a8      	mov	r8, r5
 8003740:	f105 0501 	add.w	r5, r5, #1
 8003744:	d4f2      	bmi.n	800372c <z_cbvprintf_impl+0xc24>
 8003746:	eba6 060b 	sub.w	r6, r6, fp
 800374a:	e7c4      	b.n	80036d6 <z_cbvprintf_impl+0xbce>
				OUTC('0');
 800374c:	9903      	ldr	r1, [sp, #12]
 800374e:	2030      	movs	r0, #48	; 0x30
 8003750:	47d0      	blx	sl
 8003752:	2800      	cmp	r0, #0
 8003754:	f6ff af6c 	blt.w	8003630 <z_cbvprintf_impl+0xb28>
 8003758:	3601      	adds	r6, #1
 800375a:	e7bf      	b.n	80036dc <z_cbvprintf_impl+0xbd4>
			if (conv->altform_0c | conv->altform_0) {
 800375c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8003760:	06da      	lsls	r2, r3, #27
 8003762:	d401      	bmi.n	8003768 <z_cbvprintf_impl+0xc60>
 8003764:	071b      	lsls	r3, r3, #28
 8003766:	d506      	bpl.n	8003776 <z_cbvprintf_impl+0xc6e>
				OUTC('0');
 8003768:	9903      	ldr	r1, [sp, #12]
 800376a:	2030      	movs	r0, #48	; 0x30
 800376c:	47d0      	blx	sl
 800376e:	2800      	cmp	r0, #0
 8003770:	f6ff af5e 	blt.w	8003630 <z_cbvprintf_impl+0xb28>
 8003774:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8003776:	9b05      	ldr	r3, [sp, #20]
 8003778:	b13b      	cbz	r3, 800378a <z_cbvprintf_impl+0xc82>
				OUTC(conv->specifier);
 800377a:	9903      	ldr	r1, [sp, #12]
 800377c:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 8003780:	47d0      	blx	sl
 8003782:	2800      	cmp	r0, #0
 8003784:	f6ff af54 	blt.w	8003630 <z_cbvprintf_impl+0xb28>
 8003788:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 800378a:	44a8      	add	r8, r5
 800378c:	e006      	b.n	800379c <z_cbvprintf_impl+0xc94>
				OUTC('0');
 800378e:	9903      	ldr	r1, [sp, #12]
 8003790:	2030      	movs	r0, #48	; 0x30
 8003792:	47d0      	blx	sl
 8003794:	2800      	cmp	r0, #0
 8003796:	f6ff af4b 	blt.w	8003630 <z_cbvprintf_impl+0xb28>
 800379a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 800379c:	eba8 0305 	sub.w	r3, r8, r5
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	dcf4      	bgt.n	800378e <z_cbvprintf_impl+0xc86>
			OUTS(bps, bpe);
 80037a4:	9903      	ldr	r1, [sp, #12]
 80037a6:	463b      	mov	r3, r7
 80037a8:	4632      	mov	r2, r6
 80037aa:	4650      	mov	r0, sl
 80037ac:	f008 fac7 	bl	800bd3e <outs>
 80037b0:	2800      	cmp	r0, #0
 80037b2:	f6ff af3d 	blt.w	8003630 <z_cbvprintf_impl+0xb28>
 80037b6:	4428      	add	r0, r5
 80037b8:	e79c      	b.n	80036f4 <z_cbvprintf_impl+0xbec>
			OUTC(' ');
 80037ba:	9903      	ldr	r1, [sp, #12]
 80037bc:	2020      	movs	r0, #32
 80037be:	47d0      	blx	sl
 80037c0:	2800      	cmp	r0, #0
 80037c2:	f6ff af35 	blt.w	8003630 <z_cbvprintf_impl+0xb28>
 80037c6:	3501      	adds	r5, #1
		while (width > 0) {
 80037c8:	1b73      	subs	r3, r6, r5
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	dcf5      	bgt.n	80037ba <z_cbvprintf_impl+0xcb2>
 80037ce:	f7ff bbd3 	b.w	8002f78 <z_cbvprintf_impl+0x470>
			decexp = 0;
 80037d2:	4616      	mov	r6, r2
 80037d4:	e6bd      	b.n	8003552 <z_cbvprintf_impl+0xa4a>
		if (*buf++ != '0') {
 80037d6:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
 80037da:	e6ba      	b.n	8003552 <z_cbvprintf_impl+0xa4a>
 80037dc:	08012847 	.word	0x08012847
 80037e0:	08014285 	.word	0x08014285

080037e4 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	460d      	mov	r5, r1
 80037e8:	4604      	mov	r4, r0
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 80037ea:	2220      	movs	r2, #32
 80037ec:	2100      	movs	r1, #0
 80037ee:	f009 fa6d 	bl	800cccc <memset>
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
 80037f2:	68eb      	ldr	r3, [r5, #12]
 80037f4:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
 80037f6:	68ab      	ldr	r3, [r5, #8]
 80037f8:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
 80037fa:	682b      	ldr	r3, [r5, #0]
 80037fc:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
 80037fe:	686b      	ldr	r3, [r5, #4]
 8003800:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->max_usage = 0;
 8003802:	2200      	movs	r2, #0
 8003804:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->flags = cfg->flags;
 8003806:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 8003808:	b123      	cbz	r3, 8003814 <mpsc_pbuf_init+0x30>
 800380a:	1e59      	subs	r1, r3, #1
 800380c:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 800380e:	bf08      	it	eq
 8003810:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
 8003814:	6122      	str	r2, [r4, #16]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
 8003816:	2201      	movs	r2, #1
 8003818:	2100      	movs	r1, #0
 800381a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800381e:	f009 f994 	bl	800cb4a <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
 8003822:	b148      	cbz	r0, 8003838 <mpsc_pbuf_init+0x54>
 8003824:	4905      	ldr	r1, [pc, #20]	; (800383c <mpsc_pbuf_init+0x58>)
 8003826:	4806      	ldr	r0, [pc, #24]	; (8003840 <mpsc_pbuf_init+0x5c>)
 8003828:	4a06      	ldr	r2, [pc, #24]	; (8003844 <mpsc_pbuf_init+0x60>)
 800382a:	232e      	movs	r3, #46	; 0x2e
 800382c:	f008 faa5 	bl	800bd7a <assert_print>
 8003830:	4804      	ldr	r0, [pc, #16]	; (8003844 <mpsc_pbuf_init+0x60>)
 8003832:	212e      	movs	r1, #46	; 0x2e
 8003834:	f008 fa9a 	bl	800bd6c <assert_post_action>
	ARG_UNUSED(err);
}
 8003838:	bd38      	pop	{r3, r4, r5, pc}
 800383a:	bf00      	nop
 800383c:	0801286e 	.word	0x0801286e
 8003840:	0800e198 	.word	0x0800e198
 8003844:	08012848 	.word	0x08012848

08003848 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 8003848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384c:	b087      	sub	sp, #28
 800384e:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 8003852:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003854:	3b01      	subs	r3, #1
 8003856:	428b      	cmp	r3, r1
{
 8003858:	4604      	mov	r4, r0
 800385a:	460f      	mov	r7, r1
	if (wlen > (buffer->size - 1)) {
 800385c:	f0c0 80a0 	bcc.w	80039a0 <mpsc_pbuf_alloc+0x158>
	union mpsc_pbuf_generic *dropped_item = NULL;
 8003860:	2600      	movs	r6, #0
	union mpsc_pbuf_generic *item = NULL;
 8003862:	46b2      	mov	sl, r6
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
 8003864:	f100 0514 	add.w	r5, r0, #20
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8003868:	f04f 0310 	mov.w	r3, #16
 800386c:	f3ef 8b11 	mrs	fp, BASEPRI
 8003870:	f383 8812 	msr	BASEPRI_MAX, r3
 8003874:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8003878:	4628      	mov	r0, r5
	k.key = arch_irq_lock();
 800387a:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800387c:	f004 f972 	bl	8007b64 <z_spin_lock_valid>
 8003880:	b958      	cbnz	r0, 800389a <mpsc_pbuf_alloc+0x52>
 8003882:	4a4a      	ldr	r2, [pc, #296]	; (80039ac <mpsc_pbuf_alloc+0x164>)
 8003884:	494a      	ldr	r1, [pc, #296]	; (80039b0 <mpsc_pbuf_alloc+0x168>)
 8003886:	484b      	ldr	r0, [pc, #300]	; (80039b4 <mpsc_pbuf_alloc+0x16c>)
 8003888:	238e      	movs	r3, #142	; 0x8e
 800388a:	f008 fa76 	bl	800bd7a <assert_print>
 800388e:	4629      	mov	r1, r5
 8003890:	4849      	ldr	r0, [pc, #292]	; (80039b8 <mpsc_pbuf_alloc+0x170>)
 8003892:	f008 fa72 	bl	800bd7a <assert_print>
 8003896:	218e      	movs	r1, #142	; 0x8e
 8003898:	e050      	b.n	800393c <mpsc_pbuf_alloc+0xf4>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
 800389a:	4628      	mov	r0, r5
 800389c:	f004 f980 	bl	8007ba0 <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
 80038a0:	a905      	add	r1, sp, #20
 80038a2:	4620      	mov	r0, r4
 80038a4:	f008 fa76 	bl	800bd94 <free_space>

		if (free_wlen >= wlen) {
 80038a8:	9905      	ldr	r1, [sp, #20]
 80038aa:	42b9      	cmp	r1, r7
		wrap = free_space(buffer, &free_wlen);
 80038ac:	4680      	mov	r8, r0
		if (free_wlen >= wlen) {
 80038ae:	d328      	bcc.n	8003902 <mpsc_pbuf_alloc+0xba>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 80038b0:	6822      	ldr	r2, [r4, #0]
			item =
 80038b2:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
 80038b4:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 80038b8:	f021 0103 	bic.w	r1, r1, #3
 80038bc:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
 80038c0:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
 80038c4:	6821      	ldr	r1, [r4, #0]
 80038c6:	463a      	mov	r2, r7
 80038c8:	4620      	mov	r0, r4
 80038ca:	f008 fa85 	bl	800bdd8 <idx_inc>
		cont = false;
 80038ce:	f04f 0800 	mov.w	r8, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
 80038d2:	6020      	str	r0, [r4, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80038d4:	4628      	mov	r0, r5
 80038d6:	f004 f953 	bl	8007b80 <z_spin_unlock_valid>
 80038da:	b320      	cbz	r0, 8003926 <mpsc_pbuf_alloc+0xde>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80038dc:	f389 8811 	msr	BASEPRI, r9
 80038e0:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
 80038e4:	f1b8 0f00 	cmp.w	r8, #0
 80038e8:	d05c      	beq.n	80039a4 <mpsc_pbuf_alloc+0x15c>
 80038ea:	b146      	cbz	r6, 80038fe <mpsc_pbuf_alloc+0xb6>
 80038ec:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0b9      	beq.n	8003868 <mpsc_pbuf_alloc+0x20>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
 80038f4:	69a3      	ldr	r3, [r4, #24]
 80038f6:	b113      	cbz	r3, 80038fe <mpsc_pbuf_alloc+0xb6>
				buffer->notify_drop(buffer, dropped_item);
 80038f8:	4631      	mov	r1, r6
 80038fa:	4620      	mov	r0, r4
 80038fc:	4798      	blx	r3
{
 80038fe:	2600      	movs	r6, #0
 8003900:	e7b2      	b.n	8003868 <mpsc_pbuf_alloc+0x20>
		} else if (wrap) {
 8003902:	b118      	cbz	r0, 800390c <mpsc_pbuf_alloc+0xc4>
			add_skip_item(buffer, free_wlen);
 8003904:	4620      	mov	r0, r4
 8003906:	f008 fa75 	bl	800bdf4 <add_skip_item>
			cont = true;
 800390a:	e7e3      	b.n	80038d4 <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800390c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8003910:	4313      	orrs	r3, r2
 8003912:	d036      	beq.n	8003982 <mpsc_pbuf_alloc+0x13a>
 8003914:	9103      	str	r1, [sp, #12]
			   !k_is_in_isr()) {
 8003916:	f009 f8fc 	bl	800cb12 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800391a:	9903      	ldr	r1, [sp, #12]
 800391c:	bb88      	cbnz	r0, 8003982 <mpsc_pbuf_alloc+0x13a>
 800391e:	4628      	mov	r0, r5
 8003920:	f004 f92e 	bl	8007b80 <z_spin_unlock_valid>
 8003924:	b968      	cbnz	r0, 8003942 <mpsc_pbuf_alloc+0xfa>
 8003926:	4a21      	ldr	r2, [pc, #132]	; (80039ac <mpsc_pbuf_alloc+0x164>)
 8003928:	4924      	ldr	r1, [pc, #144]	; (80039bc <mpsc_pbuf_alloc+0x174>)
 800392a:	4822      	ldr	r0, [pc, #136]	; (80039b4 <mpsc_pbuf_alloc+0x16c>)
 800392c:	23b9      	movs	r3, #185	; 0xb9
 800392e:	f008 fa24 	bl	800bd7a <assert_print>
 8003932:	4629      	mov	r1, r5
 8003934:	4822      	ldr	r0, [pc, #136]	; (80039c0 <mpsc_pbuf_alloc+0x178>)
 8003936:	f008 fa20 	bl	800bd7a <assert_print>
 800393a:	21b9      	movs	r1, #185	; 0xb9
 800393c:	481b      	ldr	r0, [pc, #108]	; (80039ac <mpsc_pbuf_alloc+0x164>)
 800393e:	f008 fa15 	bl	800bd6c <assert_post_action>
 8003942:	f38b 8811 	msr	BASEPRI, fp
 8003946:	f3bf 8f6f 	isb	sy
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 800394a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800394e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8003952:	f004 faed 	bl	8007f30 <z_impl_k_sem_take>
 8003956:	4680      	mov	r8, r0
	__asm__ volatile(
 8003958:	f04f 0310 	mov.w	r3, #16
 800395c:	f3ef 8911 	mrs	r9, BASEPRI
 8003960:	f383 8812 	msr	BASEPRI_MAX, r3
 8003964:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8003968:	4628      	mov	r0, r5
 800396a:	f004 f8fb 	bl	8007b64 <z_spin_lock_valid>
 800396e:	2800      	cmp	r0, #0
 8003970:	d087      	beq.n	8003882 <mpsc_pbuf_alloc+0x3a>
	z_spin_lock_set_owner(l);
 8003972:	4628      	mov	r0, r5
			if (err == 0) {
 8003974:	fab8 f888 	clz	r8, r8
 8003978:	f004 f912 	bl	8007ba0 <z_spin_lock_set_owner>
 800397c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8003980:	e7a8      	b.n	80038d4 <mpsc_pbuf_alloc+0x8c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 8003982:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 8003984:	f10d 0313 	add.w	r3, sp, #19
 8003988:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800398c:	4620      	mov	r0, r4
 800398e:	f008 fa54 	bl	800be3a <drop_item_locked>
			cont = dropped_item != NULL;
 8003992:	f1b0 0800 	subs.w	r8, r0, #0
 8003996:	4606      	mov	r6, r0
 8003998:	bf18      	it	ne
 800399a:	f04f 0801 	movne.w	r8, #1
 800399e:	e799      	b.n	80038d4 <mpsc_pbuf_alloc+0x8c>
		return NULL;
 80039a0:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 80039a4:	4650      	mov	r0, sl
 80039a6:	b007      	add	sp, #28
 80039a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ac:	08012877 	.word	0x08012877
 80039b0:	080128a4 	.word	0x080128a4
 80039b4:	0800e198 	.word	0x0800e198
 80039b8:	080128b9 	.word	0x080128b9
 80039bc:	080128d1 	.word	0x080128d1
 80039c0:	080128e8 	.word	0x080128e8

080039c4 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 80039c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c8:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 80039ca:	69c3      	ldr	r3, [r0, #28]
 80039cc:	4608      	mov	r0, r1
{
 80039ce:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
 80039d0:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
 80039d2:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
 80039d6:	4607      	mov	r7, r0
 80039d8:	f04f 0310 	mov.w	r3, #16
 80039dc:	f3ef 8811 	mrs	r8, BASEPRI
 80039e0:	f383 8812 	msr	BASEPRI_MAX, r3
 80039e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80039e8:	4628      	mov	r0, r5
 80039ea:	f004 f8bb 	bl	8007b64 <z_spin_lock_valid>
 80039ee:	b968      	cbnz	r0, 8003a0c <mpsc_pbuf_commit+0x48>
 80039f0:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <mpsc_pbuf_commit+0x94>)
 80039f2:	491a      	ldr	r1, [pc, #104]	; (8003a5c <mpsc_pbuf_commit+0x98>)
 80039f4:	481a      	ldr	r0, [pc, #104]	; (8003a60 <mpsc_pbuf_commit+0x9c>)
 80039f6:	238e      	movs	r3, #142	; 0x8e
 80039f8:	f008 f9bf 	bl	800bd7a <assert_print>
 80039fc:	4629      	mov	r1, r5
 80039fe:	4819      	ldr	r0, [pc, #100]	; (8003a64 <mpsc_pbuf_commit+0xa0>)
 8003a00:	f008 f9bb 	bl	800bd7a <assert_print>
 8003a04:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8003a06:	4814      	ldr	r0, [pc, #80]	; (8003a58 <mpsc_pbuf_commit+0x94>)
 8003a08:	f008 f9b0 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	f004 f8c7 	bl	8007ba0 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
 8003a12:	7833      	ldrb	r3, [r6, #0]
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8003a1a:	6861      	ldr	r1, [r4, #4]
 8003a1c:	463a      	mov	r2, r7
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f008 f9da 	bl	800bdd8 <idx_inc>
 8003a24:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
 8003a26:	4620      	mov	r0, r4
 8003a28:	f008 f9fa 	bl	800be20 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f004 f8a7 	bl	8007b80 <z_spin_unlock_valid>
 8003a32:	b958      	cbnz	r0, 8003a4c <mpsc_pbuf_commit+0x88>
 8003a34:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <mpsc_pbuf_commit+0x94>)
 8003a36:	490c      	ldr	r1, [pc, #48]	; (8003a68 <mpsc_pbuf_commit+0xa4>)
 8003a38:	4809      	ldr	r0, [pc, #36]	; (8003a60 <mpsc_pbuf_commit+0x9c>)
 8003a3a:	23b9      	movs	r3, #185	; 0xb9
 8003a3c:	f008 f99d 	bl	800bd7a <assert_print>
 8003a40:	4629      	mov	r1, r5
 8003a42:	480a      	ldr	r0, [pc, #40]	; (8003a6c <mpsc_pbuf_commit+0xa8>)
 8003a44:	f008 f999 	bl	800bd7a <assert_print>
 8003a48:	21b9      	movs	r1, #185	; 0xb9
 8003a4a:	e7dc      	b.n	8003a06 <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
 8003a4c:	f388 8811 	msr	BASEPRI, r8
 8003a50:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 8003a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a58:	08012877 	.word	0x08012877
 8003a5c:	080128a4 	.word	0x080128a4
 8003a60:	0800e198 	.word	0x0800e198
 8003a64:	080128b9 	.word	0x080128b9
 8003a68:	080128d1 	.word	0x080128d1
 8003a6c:	080128e8 	.word	0x080128e8

08003a70 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 8003a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a74:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
 8003a76:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
 8003a7a:	f04f 0310 	mov.w	r3, #16
 8003a7e:	f3ef 8811 	mrs	r8, BASEPRI
 8003a82:	f383 8812 	msr	BASEPRI_MAX, r3
 8003a86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	f004 f86a 	bl	8007b64 <z_spin_lock_valid>
 8003a90:	4605      	mov	r5, r0
 8003a92:	b968      	cbnz	r0, 8003ab0 <mpsc_pbuf_claim+0x40>
 8003a94:	4a33      	ldr	r2, [pc, #204]	; (8003b64 <mpsc_pbuf_claim+0xf4>)
 8003a96:	4934      	ldr	r1, [pc, #208]	; (8003b68 <mpsc_pbuf_claim+0xf8>)
 8003a98:	4834      	ldr	r0, [pc, #208]	; (8003b6c <mpsc_pbuf_claim+0xfc>)
 8003a9a:	238e      	movs	r3, #142	; 0x8e
 8003a9c:	f008 f96d 	bl	800bd7a <assert_print>
 8003aa0:	4639      	mov	r1, r7
 8003aa2:	4833      	ldr	r0, [pc, #204]	; (8003b70 <mpsc_pbuf_claim+0x100>)
 8003aa4:	f008 f969 	bl	800bd7a <assert_print>
 8003aa8:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8003aaa:	482e      	ldr	r0, [pc, #184]	; (8003b64 <mpsc_pbuf_claim+0xf4>)
 8003aac:	f008 f95e 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f004 f875 	bl	8007ba0 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 8003ab6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8003aba:	429a      	cmp	r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
 8003abc:	bf88      	it	hi
 8003abe:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
 8003ac0:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d03f      	beq.n	8003b46 <mpsc_pbuf_claim+0xd6>
		item = (union mpsc_pbuf_generic *)
 8003ac6:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
 8003ac8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
 8003acc:	f013 0003 	ands.w	r0, r3, #3
		item = (union mpsc_pbuf_generic *)
 8003ad0:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
 8003ad4:	d03a      	beq.n	8003b4c <mpsc_pbuf_claim+0xdc>
	if (item->hdr.busy && !item->hdr.valid) {
 8003ad6:	2802      	cmp	r0, #2
 8003ad8:	d103      	bne.n	8003ae2 <mpsc_pbuf_claim+0x72>
		return item->skip.len;
 8003ada:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
 8003ade:	08b6      	lsrs	r6, r6, #2
 8003ae0:	d105      	bne.n	8003aee <mpsc_pbuf_claim+0x7e>
 8003ae2:	07d8      	lsls	r0, r3, #31
 8003ae4:	d41f      	bmi.n	8003b26 <mpsc_pbuf_claim+0xb6>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
 8003ae6:	69e3      	ldr	r3, [r4, #28]
 8003ae8:	4648      	mov	r0, r9
 8003aea:	4798      	blx	r3
 8003aec:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 8003aee:	68a1      	ldr	r1, [r4, #8]
 8003af0:	4632      	mov	r2, r6
 8003af2:	4620      	mov	r0, r4
 8003af4:	f008 f970 	bl	800bdd8 <idx_inc>
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
 8003af8:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
 8003afa:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
 8003afc:	4632      	mov	r2, r6
 8003afe:	4620      	mov	r0, r4
 8003b00:	f008 f96a 	bl	800bdd8 <idx_inc>
				buffer->rd_idx =
 8003b04:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8003b06:	4638      	mov	r0, r7
 8003b08:	f004 f83a 	bl	8007b80 <z_spin_unlock_valid>
 8003b0c:	bb00      	cbnz	r0, 8003b50 <mpsc_pbuf_claim+0xe0>
 8003b0e:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <mpsc_pbuf_claim+0xf4>)
 8003b10:	4918      	ldr	r1, [pc, #96]	; (8003b74 <mpsc_pbuf_claim+0x104>)
 8003b12:	4816      	ldr	r0, [pc, #88]	; (8003b6c <mpsc_pbuf_claim+0xfc>)
 8003b14:	23b9      	movs	r3, #185	; 0xb9
 8003b16:	f008 f930 	bl	800bd7a <assert_print>
 8003b1a:	4639      	mov	r1, r7
 8003b1c:	4816      	ldr	r0, [pc, #88]	; (8003b78 <mpsc_pbuf_claim+0x108>)
 8003b1e:	f008 f92c 	bl	800bd7a <assert_print>
 8003b22:	21b9      	movs	r1, #185	; 0xb9
 8003b24:	e7c1      	b.n	8003aaa <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
 8003b26:	f043 0302 	orr.w	r3, r3, #2
 8003b2a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
 8003b2e:	4648      	mov	r0, r9
 8003b30:	69e3      	ldr	r3, [r4, #28]
 8003b32:	68a5      	ldr	r5, [r4, #8]
 8003b34:	4798      	blx	r3
 8003b36:	4629      	mov	r1, r5
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f008 f94c 	bl	800bdd8 <idx_inc>
		cont = false;
 8003b40:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
 8003b42:	60a0      	str	r0, [r4, #8]
 8003b44:	e7df      	b.n	8003b06 <mpsc_pbuf_claim+0x96>
		cont = false;
 8003b46:	461d      	mov	r5, r3
			item = NULL;
 8003b48:	46a9      	mov	r9, r5
 8003b4a:	e7dc      	b.n	8003b06 <mpsc_pbuf_claim+0x96>
		cont = false;
 8003b4c:	4605      	mov	r5, r0
 8003b4e:	e7fb      	b.n	8003b48 <mpsc_pbuf_claim+0xd8>
	__asm__ volatile(
 8003b50:	f388 8811 	msr	BASEPRI, r8
 8003b54:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
 8003b58:	2d00      	cmp	r5, #0
 8003b5a:	d18e      	bne.n	8003a7a <mpsc_pbuf_claim+0xa>

	return item;
}
 8003b5c:	4648      	mov	r0, r9
 8003b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b62:	bf00      	nop
 8003b64:	08012877 	.word	0x08012877
 8003b68:	080128a4 	.word	0x080128a4
 8003b6c:	0800e198 	.word	0x0800e198
 8003b70:	080128b9 	.word	0x080128b9
 8003b74:	080128d1 	.word	0x080128d1
 8003b78:	080128e8 	.word	0x080128e8

08003b7c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 8003b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b80:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 8003b82:	69c3      	ldr	r3, [r0, #28]
 8003b84:	4608      	mov	r0, r1
{
 8003b86:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 8003b88:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
 8003b8a:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
 8003b8e:	4607      	mov	r7, r0
	__asm__ volatile(
 8003b90:	f04f 0310 	mov.w	r3, #16
 8003b94:	f3ef 8811 	mrs	r8, BASEPRI
 8003b98:	f383 8812 	msr	BASEPRI_MAX, r3
 8003b9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f003 ffdf 	bl	8007b64 <z_spin_lock_valid>
 8003ba6:	b968      	cbnz	r0, 8003bc4 <mpsc_pbuf_free+0x48>
 8003ba8:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <mpsc_pbuf_free+0xbc>)
 8003baa:	4924      	ldr	r1, [pc, #144]	; (8003c3c <mpsc_pbuf_free+0xc0>)
 8003bac:	4824      	ldr	r0, [pc, #144]	; (8003c40 <mpsc_pbuf_free+0xc4>)
 8003bae:	238e      	movs	r3, #142	; 0x8e
 8003bb0:	f008 f8e3 	bl	800bd7a <assert_print>
 8003bb4:	4631      	mov	r1, r6
 8003bb6:	4823      	ldr	r0, [pc, #140]	; (8003c44 <mpsc_pbuf_free+0xc8>)
 8003bb8:	f008 f8df 	bl	800bd7a <assert_print>
 8003bbc:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8003bbe:	481e      	ldr	r0, [pc, #120]	; (8003c38 <mpsc_pbuf_free+0xbc>)
 8003bc0:	f008 f8d4 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f003 ffeb 	bl	8007ba0 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 8003bca:	782b      	ldrb	r3, [r5, #0]
 8003bcc:	f36f 0300 	bfc	r3, #0, #1
 8003bd0:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 8003bd2:	6923      	ldr	r3, [r4, #16]
 8003bd4:	079b      	lsls	r3, r3, #30
 8003bd6:	d505      	bpl.n	8003be4 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 8003bd8:	68e2      	ldr	r2, [r4, #12]
 8003bda:	6a23      	ldr	r3, [r4, #32]
 8003bdc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 8003be0:	429d      	cmp	r5, r3
 8003be2:	d119      	bne.n	8003c18 <mpsc_pbuf_free+0x9c>
		witem->hdr.busy = 0;
 8003be4:	782b      	ldrb	r3, [r5, #0]
 8003be6:	f36f 0341 	bfc	r3, #1, #1
 8003bea:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 8003bec:	68e1      	ldr	r1, [r4, #12]
 8003bee:	463a      	mov	r2, r7
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f008 f8f1 	bl	800bdd8 <idx_inc>
 8003bf6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	f003 ffc1 	bl	8007b80 <z_spin_unlock_valid>
 8003bfe:	b980      	cbnz	r0, 8003c22 <mpsc_pbuf_free+0xa6>
 8003c00:	4a0d      	ldr	r2, [pc, #52]	; (8003c38 <mpsc_pbuf_free+0xbc>)
 8003c02:	4911      	ldr	r1, [pc, #68]	; (8003c48 <mpsc_pbuf_free+0xcc>)
 8003c04:	480e      	ldr	r0, [pc, #56]	; (8003c40 <mpsc_pbuf_free+0xc4>)
 8003c06:	23b9      	movs	r3, #185	; 0xb9
 8003c08:	f008 f8b7 	bl	800bd7a <assert_print>
 8003c0c:	4631      	mov	r1, r6
 8003c0e:	480f      	ldr	r0, [pc, #60]	; (8003c4c <mpsc_pbuf_free+0xd0>)
 8003c10:	f008 f8b3 	bl	800bd7a <assert_print>
 8003c14:	21b9      	movs	r1, #185	; 0xb9
 8003c16:	e7d2      	b.n	8003bbe <mpsc_pbuf_free+0x42>
	} else {
		witem->skip.len = wlen;
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	f367 039f 	bfi	r3, r7, #2, #30
 8003c1e:	602b      	str	r3, [r5, #0]
 8003c20:	e7ea      	b.n	8003bf8 <mpsc_pbuf_free+0x7c>
	__asm__ volatile(
 8003c22:	f388 8811 	msr	BASEPRI, r8
 8003c26:	f3bf 8f6f 	isb	sy
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8003c2a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
 8003c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c32:	f004 b93f 	b.w	8007eb4 <z_impl_k_sem_give>
 8003c36:	bf00      	nop
 8003c38:	08012877 	.word	0x08012877
 8003c3c:	080128a4 	.word	0x080128a4
 8003c40:	0800e198 	.word	0x0800e198
 8003c44:	080128b9 	.word	0x080128b9
 8003c48:	080128d1 	.word	0x080128d1
 8003c4c:	080128e8 	.word	0x080128e8

08003c50 <stm32f3_init>:
	__asm__ volatile(
 8003c50:	f04f 0210 	mov.w	r2, #16
 8003c54:	f3ef 8311 	mrs	r3, BASEPRI
 8003c58:	f382 8812 	msr	BASEPRI_MAX, r2
 8003c5c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 8 MHz from HSI */
	SystemCoreClock = 8000000;
 8003c68:	4b02      	ldr	r3, [pc, #8]	; (8003c74 <stm32f3_init+0x24>)
 8003c6a:	4a03      	ldr	r2, [pc, #12]	; (8003c78 <stm32f3_init+0x28>)
 8003c6c:	601a      	str	r2, [r3, #0]

	return 0;
}
 8003c6e:	2000      	movs	r0, #0
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000114 	.word	0x20000114
 8003c78:	007a1200 	.word	0x007a1200

08003c7c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8003c7c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8003c7e:	4910      	ldr	r1, [pc, #64]	; (8003cc0 <enable_logger+0x44>)
 8003c80:	4810      	ldr	r0, [pc, #64]	; (8003cc4 <enable_logger+0x48>)
{
 8003c82:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8003c84:	2200      	movs	r2, #0
 8003c86:	f008 ffde 	bl	800cc46 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8003c8a:	4d0f      	ldr	r5, [pc, #60]	; (8003cc8 <enable_logger+0x4c>)
 8003c8c:	490f      	ldr	r1, [pc, #60]	; (8003ccc <enable_logger+0x50>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2300      	movs	r3, #0
 8003c92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003c96:	2400      	movs	r4, #0
 8003c98:	230e      	movs	r3, #14
 8003c9a:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003c9e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <enable_logger+0x54>)
 8003ca4:	9400      	str	r4, [sp, #0]
 8003ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003caa:	4628      	mov	r0, r5
 8003cac:	f003 fea2 	bl	80079f4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8003cb0:	4908      	ldr	r1, [pc, #32]	; (8003cd4 <enable_logger+0x58>)
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	f008 ff33 	bl	800cb1e <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
 8003cb8:	4620      	mov	r0, r4
 8003cba:	b009      	add	sp, #36	; 0x24
 8003cbc:	bd30      	pop	{r4, r5, pc}
 8003cbe:	bf00      	nop
 8003cc0:	08003e09 	.word	0x08003e09
 8003cc4:	200008c0 	.word	0x200008c0
 8003cc8:	20000440 	.word	0x20000440
 8003ccc:	20001180 	.word	0x20001180
 8003cd0:	08004011 	.word	0x08004011
 8003cd4:	080128fd 	.word	0x080128fd

08003cd8 <activate_foreach_backend>:
{
 8003cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8003cdc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8003d38 <activate_foreach_backend+0x60>
{
 8003ce0:	4604      	mov	r4, r0
	while (mask_cpy) {
 8003ce2:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
 8003ce4:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
 8003ce8:	b914      	cbnz	r4, 8003cf0 <activate_foreach_backend+0x18>
}
 8003cea:	4638      	mov	r0, r7
 8003cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
 8003cf0:	fa94 f5a4 	rbit	r5, r4
 8003cf4:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
 8003cf8:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8003cfc:	012e      	lsls	r6, r5, #4
 8003cfe:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
 8003d02:	ea6f 0a03 	mvn.w	sl, r3
 8003d06:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8003d0a:	7b2b      	ldrb	r3, [r5, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0eb      	beq.n	8003ce8 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
 8003d10:	f858 3006 	ldr.w	r3, [r8, r6]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	b94b      	cbnz	r3, 8003d2c <activate_foreach_backend+0x54>
					   backend->cb->ctx,
 8003d18:	4446      	add	r6, r8
			log_backend_enable(backend,
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	6873      	ldr	r3, [r6, #4]
 8003d1e:	4628      	mov	r0, r5
 8003d20:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
 8003d22:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
 8003d26:	f000 fa6f 	bl	8004208 <log_backend_enable>
 8003d2a:	e7dd      	b.n	8003ce8 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8003d30:	2800      	cmp	r0, #0
 8003d32:	d1d9      	bne.n	8003ce8 <activate_foreach_backend+0x10>
 8003d34:	e7f0      	b.n	8003d18 <activate_foreach_backend+0x40>
 8003d36:	bf00      	nop
 8003d38:	0800db9c 	.word	0x0800db9c

08003d3c <z_log_init>:
{
 8003d3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8003d40:	4d2b      	ldr	r5, [pc, #172]	; (8003df0 <z_log_init+0xb4>)
 8003d42:	4b2c      	ldr	r3, [pc, #176]	; (8003df4 <z_log_init+0xb8>)
 8003d44:	1b5b      	subs	r3, r3, r5
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
 8003d46:	2b90      	cmp	r3, #144	; 0x90
{
 8003d48:	4681      	mov	r9, r0
 8003d4a:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
 8003d4c:	d90b      	bls.n	8003d66 <z_log_init+0x2a>
 8003d4e:	492a      	ldr	r1, [pc, #168]	; (8003df8 <z_log_init+0xbc>)
 8003d50:	482a      	ldr	r0, [pc, #168]	; (8003dfc <z_log_init+0xc0>)
 8003d52:	4a2b      	ldr	r2, [pc, #172]	; (8003e00 <z_log_init+0xc4>)
 8003d54:	f44f 7384 	mov.w	r3, #264	; 0x108
 8003d58:	f008 f80f 	bl	800bd7a <assert_print>
 8003d5c:	4828      	ldr	r0, [pc, #160]	; (8003e00 <z_log_init+0xc4>)
 8003d5e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8003d62:	f008 f803 	bl	800bd6c <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003d66:	4a27      	ldr	r2, [pc, #156]	; (8003e04 <z_log_init+0xc8>)
 8003d68:	f3bf 8f5b 	dmb	ish
 8003d6c:	e852 4f00 	ldrex	r4, [r2]
 8003d70:	1c61      	adds	r1, r4, #1
 8003d72:	e842 1000 	strex	r0, r1, [r2]
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d1f8      	bne.n	8003d6c <z_log_init+0x30>
 8003d7a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8003d7e:	b11c      	cbz	r4, 8003d88 <z_log_init+0x4c>
	for (i = 0; i < log_backend_count_get(); i++) {
 8003d80:	2400      	movs	r4, #0
}
 8003d82:	4620      	mov	r0, r4
 8003d84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d88:	111f      	asrs	r7, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8003d8a:	4626      	mov	r6, r4
				mask |= BIT(i);
 8003d8c:	f04f 0a01 	mov.w	sl, #1
	for (i = 0; i < log_backend_count_get(); i++) {
 8003d90:	42be      	cmp	r6, r7
 8003d92:	db10      	blt.n	8003db6 <z_log_init+0x7a>
	if (blocking) {
 8003d94:	f1b9 0f00 	cmp.w	r9, #0
 8003d98:	d0f3      	beq.n	8003d82 <z_log_init+0x46>
		while (mask) {
 8003d9a:	2c00      	cmp	r4, #0
 8003d9c:	d0f0      	beq.n	8003d80 <z_log_init+0x44>
			mask = activate_foreach_backend(mask);
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f7ff ff9a 	bl	8003cd8 <activate_foreach_backend>
 8003da4:	4604      	mov	r4, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
 8003da6:	f1b8 0f00 	cmp.w	r8, #0
 8003daa:	d0f6      	beq.n	8003d9a <z_log_init+0x5e>
	return z_impl_k_sleep(timeout);
 8003dac:	2100      	movs	r1, #0
 8003dae:	2064      	movs	r0, #100	; 0x64
 8003db0:	f005 fb70 	bl	8009494 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 8003db4:	e7f1      	b.n	8003d9a <z_log_init+0x5e>
		if (backend->autostart) {
 8003db6:	7b2b      	ldrb	r3, [r5, #12]
 8003db8:	b17b      	cbz	r3, 8003dda <z_log_init+0x9e>
	if (backend->api->init) {
 8003dba:	f8d5 b000 	ldr.w	fp, [r5]
 8003dbe:	f8db 300c 	ldr.w	r3, [fp, #12]
 8003dc2:	b10b      	cbz	r3, 8003dc8 <z_log_init+0x8c>
		backend->api->init(backend);
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
 8003dc8:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003dcc:	b943      	cbnz	r3, 8003de0 <z_log_init+0xa4>
				log_backend_enable(backend,
 8003dce:	686b      	ldr	r3, [r5, #4]
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	f000 fa17 	bl	8004208 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8003dda:	3601      	adds	r6, #1
 8003ddc:	3510      	adds	r5, #16
 8003dde:	e7d7      	b.n	8003d90 <z_log_init+0x54>
		return backend->api->is_ready(backend);
 8003de0:	4628      	mov	r0, r5
 8003de2:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d0f2      	beq.n	8003dce <z_log_init+0x92>
				mask |= BIT(i);
 8003de8:	fa0a f306 	lsl.w	r3, sl, r6
 8003dec:	431c      	orrs	r4, r3
 8003dee:	e7f4      	b.n	8003dda <z_log_init+0x9e>
 8003df0:	0800db9c 	.word	0x0800db9c
 8003df4:	0800dbac 	.word	0x0800dbac
 8003df8:	08012932 	.word	0x08012932
 8003dfc:	0800e198 	.word	0x0800e198
 8003e00:	08012905 	.word	0x08012905
 8003e04:	20000b1c 	.word	0x20000b1c

08003e08 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
 8003e08:	4801      	ldr	r0, [pc, #4]	; (8003e10 <log_process_thread_timer_expiry_fn+0x8>)
 8003e0a:	f004 b853 	b.w	8007eb4 <z_impl_k_sem_give>
 8003e0e:	bf00      	nop
 8003e10:	200003ac 	.word	0x200003ac

08003e14 <log_format_func_t_get>:
}
 8003e14:	4b01      	ldr	r3, [pc, #4]	; (8003e1c <log_format_func_t_get+0x8>)
 8003e16:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003e1a:	4770      	bx	lr
 8003e1c:	0800dd8c 	.word	0x0800dd8c

08003e20 <z_log_notify_backend_enabled>:
{
 8003e20:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8003e22:	4c04      	ldr	r4, [pc, #16]	; (8003e34 <z_log_notify_backend_enabled+0x14>)
 8003e24:	7823      	ldrb	r3, [r4, #0]
 8003e26:	b913      	cbnz	r3, 8003e2e <z_log_notify_backend_enabled+0xe>
 8003e28:	4803      	ldr	r0, [pc, #12]	; (8003e38 <z_log_notify_backend_enabled+0x18>)
 8003e2a:	f004 f843 	bl	8007eb4 <z_impl_k_sem_give>
	backend_attached = true;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	7023      	strb	r3, [r4, #0]
}
 8003e32:	bd10      	pop	{r4, pc}
 8003e34:	20000cfd 	.word	0x20000cfd
 8003e38:	200003ac 	.word	0x200003ac

08003e3c <z_log_dropped>:
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <z_log_dropped+0x34>)
 8003e3e:	f3bf 8f5b 	dmb	ish
 8003e42:	e853 1f00 	ldrex	r1, [r3]
 8003e46:	3101      	adds	r1, #1
 8003e48:	e843 1200 	strex	r2, r1, [r3]
 8003e4c:	2a00      	cmp	r2, #0
 8003e4e:	d1f8      	bne.n	8003e42 <z_log_dropped+0x6>
 8003e50:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 8003e54:	b158      	cbz	r0, 8003e6e <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003e56:	f3bf 8f5b 	dmb	ish
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <z_log_dropped+0x38>)
 8003e5c:	e853 1f00 	ldrex	r1, [r3]
 8003e60:	3901      	subs	r1, #1
 8003e62:	e843 1200 	strex	r2, r1, [r3]
 8003e66:	2a00      	cmp	r2, #0
 8003e68:	d1f8      	bne.n	8003e5c <z_log_dropped+0x20>
 8003e6a:	f3bf 8f5b 	dmb	ish
}
 8003e6e:	4770      	bx	lr
 8003e70:	20000b14 	.word	0x20000b14
 8003e74:	20000b18 	.word	0x20000b18

08003e78 <z_log_dropped_read_and_clear>:
}
 8003e78:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <z_log_dropped_read_and_clear+0x1c>)
 8003e7c:	f3bf 8f5b 	dmb	ish
 8003e80:	4601      	mov	r1, r0
 8003e82:	e853 0f00 	ldrex	r0, [r3]
 8003e86:	e843 1200 	strex	r2, r1, [r3]
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	d1f9      	bne.n	8003e82 <z_log_dropped_read_and_clear+0xa>
 8003e8e:	f3bf 8f5b 	dmb	ish
 8003e92:	4770      	bx	lr
 8003e94:	20000b14 	.word	0x20000b14

08003e98 <dropped_notify>:
{
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8003e9a:	f7ff ffed 	bl	8003e78 <z_log_dropped_read_and_clear>
	return __log_backends_end - __log_backends_start;
 8003e9e:	4c0a      	ldr	r4, [pc, #40]	; (8003ec8 <dropped_notify+0x30>)
 8003ea0:	4d0a      	ldr	r5, [pc, #40]	; (8003ecc <dropped_notify+0x34>)
 8003ea2:	1b2d      	subs	r5, r5, r4
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003ea8:	2600      	movs	r6, #0
 8003eaa:	42ae      	cmp	r6, r5
 8003eac:	db00      	blt.n	8003eb0 <dropped_notify+0x18>
}
 8003eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8003eb0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8003eb2:	795b      	ldrb	r3, [r3, #5]
 8003eb4:	b12b      	cbz	r3, 8003ec2 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	b113      	cbz	r3, 8003ec2 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003ec2:	3601      	adds	r6, #1
 8003ec4:	3410      	adds	r4, #16
 8003ec6:	e7f0      	b.n	8003eaa <dropped_notify+0x12>
 8003ec8:	0800db9c 	.word	0x0800db9c
 8003ecc:	0800dbac 	.word	0x0800dbac

08003ed0 <z_log_msg_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 8003ed0:	4901      	ldr	r1, [pc, #4]	; (8003ed8 <z_log_msg_init+0x8>)
 8003ed2:	4802      	ldr	r0, [pc, #8]	; (8003edc <z_log_msg_init+0xc>)
 8003ed4:	f7ff bc86 	b.w	80037e4 <mpsc_pbuf_init>
 8003ed8:	0800dd78 	.word	0x0800dd78
 8003edc:	20000ad4 	.word	0x20000ad4

08003ee0 <log_core_init>:
	panic_mode = false;
 8003ee0:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <log_core_init+0x24>)
{
 8003ee2:	b508      	push	{r3, lr}
	panic_mode = false;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 8003ee8:	4a07      	ldr	r2, [pc, #28]	; (8003f08 <log_core_init+0x28>)
 8003eea:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <log_core_init+0x2c>)
 8003eee:	4a08      	ldr	r2, [pc, #32]	; (8003f10 <log_core_init+0x30>)
 8003ef0:	601a      	str	r2, [r3, #0]
		log_output_timestamp_freq_set(freq);
 8003ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ef6:	f000 fc2b 	bl	8004750 <log_output_timestamp_freq_set>
}
 8003efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
 8003efe:	f7ff bfe7 	b.w	8003ed0 <z_log_msg_init>
 8003f02:	bf00      	nop
 8003f04:	20000cfe 	.word	0x20000cfe
 8003f08:	20000b14 	.word	0x20000b14
 8003f0c:	200000b4 	.word	0x200000b4
 8003f10:	0800bf2f 	.word	0x0800bf2f

08003f14 <z_log_msg_alloc>:
{
 8003f14:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
 8003f16:	2200      	movs	r2, #0
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <z_log_msg_alloc+0xc>)
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f7ff bc94 	b.w	8003848 <mpsc_pbuf_alloc>
 8003f20:	20000ad4 	.word	0x20000ad4

08003f24 <z_log_msg_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
 8003f24:	4801      	ldr	r0, [pc, #4]	; (8003f2c <z_log_msg_claim+0x8>)
 8003f26:	f7ff bda3 	b.w	8003a70 <mpsc_pbuf_claim>
 8003f2a:	bf00      	nop
 8003f2c:	20000ad4 	.word	0x20000ad4

08003f30 <z_log_msg_free>:
{
 8003f30:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8003f32:	4801      	ldr	r0, [pc, #4]	; (8003f38 <z_log_msg_free+0x8>)
 8003f34:	f7ff be22 	b.w	8003b7c <mpsc_pbuf_free>
 8003f38:	20000ad4 	.word	0x20000ad4

08003f3c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
 8003f3c:	4801      	ldr	r0, [pc, #4]	; (8003f44 <z_log_msg_pending+0x8>)
 8003f3e:	f007 bfd6 	b.w	800beee <mpsc_pbuf_is_pending>
 8003f42:	bf00      	nop
 8003f44:	20000ad4 	.word	0x20000ad4

08003f48 <z_impl_log_process>:
{
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!backend_attached) {
 8003f4a:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <z_impl_log_process+0x68>)
 8003f4c:	7818      	ldrb	r0, [r3, #0]
 8003f4e:	b370      	cbz	r0, 8003fae <z_impl_log_process+0x66>
	msg = z_log_msg_claim();
 8003f50:	f7ff ffe8 	bl	8003f24 <z_log_msg_claim>
	if (msg) {
 8003f54:	4605      	mov	r5, r0
 8003f56:	b1a8      	cbz	r0, 8003f84 <z_impl_log_process+0x3c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003f58:	f3bf 8f5b 	dmb	ish
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <z_impl_log_process+0x6c>)
 8003f5e:	e853 1f00 	ldrex	r1, [r3]
 8003f62:	3901      	subs	r1, #1
 8003f64:	e843 1200 	strex	r2, r1, [r3]
 8003f68:	2a00      	cmp	r2, #0
 8003f6a:	d1f8      	bne.n	8003f5e <z_impl_log_process+0x16>
 8003f6c:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
 8003f70:	4c11      	ldr	r4, [pc, #68]	; (8003fb8 <z_impl_log_process+0x70>)
 8003f72:	4e12      	ldr	r6, [pc, #72]	; (8003fbc <z_impl_log_process+0x74>)
 8003f74:	1b36      	subs	r6, r6, r4
 8003f76:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003f78:	2700      	movs	r7, #0
 8003f7a:	42b7      	cmp	r7, r6
 8003f7c:	db0c      	blt.n	8003f98 <z_impl_log_process+0x50>
		z_log_msg_free(msg);
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f7ff ffd6 	bl	8003f30 <z_log_msg_free>
	return dropped_cnt > 0;
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <z_impl_log_process+0x78>)
	if (z_log_dropped_pending()) {
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	dd01      	ble.n	8003f90 <z_impl_log_process+0x48>
		dropped_notify();
 8003f8c:	f7ff ff84 	bl	8003e98 <dropped_notify>
}
 8003f90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return z_log_msg_pending();
 8003f94:	f7ff bfd2 	b.w	8003f3c <z_log_msg_pending>
	return backend->cb->active;
 8003f98:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
 8003f9a:	795b      	ldrb	r3, [r3, #5]
 8003f9c:	b123      	cbz	r3, 8003fa8 <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003fa8:	3701      	adds	r7, #1
 8003faa:	3410      	adds	r4, #16
 8003fac:	e7e5      	b.n	8003f7a <z_impl_log_process+0x32>
}
 8003fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fb0:	20000cfd 	.word	0x20000cfd
 8003fb4:	20000b18 	.word	0x20000b18
 8003fb8:	0800db9c 	.word	0x0800db9c
 8003fbc:	0800dbac 	.word	0x0800dbac
 8003fc0:	20000b14 	.word	0x20000b14

08003fc4 <z_impl_log_panic>:
{
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 8003fc6:	4f0f      	ldr	r7, [pc, #60]	; (8004004 <z_impl_log_panic+0x40>)
 8003fc8:	783d      	ldrb	r5, [r7, #0]
 8003fca:	b97d      	cbnz	r5, 8003fec <z_impl_log_panic+0x28>
	return __log_backends_end - __log_backends_start;
 8003fcc:	4c0e      	ldr	r4, [pc, #56]	; (8004008 <z_impl_log_panic+0x44>)
 8003fce:	4e0f      	ldr	r6, [pc, #60]	; (800400c <z_impl_log_panic+0x48>)
	(void)z_log_init(true, false);
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f7ff feb2 	bl	8003d3c <z_log_init>
 8003fd8:	1b36      	subs	r6, r6, r4
 8003fda:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003fdc:	42b5      	cmp	r5, r6
 8003fde:	db06      	blt.n	8003fee <z_impl_log_panic+0x2a>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
 8003fe0:	f7ff ffb2 	bl	8003f48 <z_impl_log_process>
		while (log_process() == true) {
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d1fb      	bne.n	8003fe0 <z_impl_log_panic+0x1c>
	panic_mode = true;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	703b      	strb	r3, [r7, #0]
}
 8003fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 8003fee:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8003ff0:	795b      	ldrb	r3, [r3, #5]
 8003ff2:	b11b      	cbz	r3, 8003ffc <z_impl_log_panic+0x38>
	backend->api->panic(backend);
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003ffc:	3501      	adds	r5, #1
 8003ffe:	3410      	adds	r4, #16
 8004000:	e7ec      	b.n	8003fdc <z_impl_log_panic+0x18>
 8004002:	bf00      	nop
 8004004:	20000cfe 	.word	0x20000cfe
 8004008:	0800db9c 	.word	0x0800db9c
 800400c:	0800dbac 	.word	0x0800dbac

08004010 <log_process_thread_func>:
{
 8004010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __log_backends_end - __log_backends_start;
 8004014:	4d2a      	ldr	r5, [pc, #168]	; (80040c0 <log_process_thread_func+0xb0>)
 8004016:	4b2b      	ldr	r3, [pc, #172]	; (80040c4 <log_process_thread_func+0xb4>)
 8004018:	1aed      	subs	r5, r5, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
 800401a:	2d00      	cmp	r5, #0
 800401c:	dc0b      	bgt.n	8004036 <log_process_thread_func+0x26>
 800401e:	492a      	ldr	r1, [pc, #168]	; (80040c8 <log_process_thread_func+0xb8>)
 8004020:	482a      	ldr	r0, [pc, #168]	; (80040cc <log_process_thread_func+0xbc>)
 8004022:	4a2b      	ldr	r2, [pc, #172]	; (80040d0 <log_process_thread_func+0xc0>)
 8004024:	f240 238f 	movw	r3, #655	; 0x28f
 8004028:	f007 fea7 	bl	800bd7a <assert_print>
 800402c:	4828      	ldr	r0, [pc, #160]	; (80040d0 <log_process_thread_func+0xc0>)
 800402e:	f240 218f 	movw	r1, #655	; 0x28f
 8004032:	f007 fe9b 	bl	800bd6c <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
 8004036:	2100      	movs	r1, #0
 8004038:	4608      	mov	r0, r1
 800403a:	f7ff fe7f 	bl	8003d3c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 800403e:	4604      	mov	r4, r0
 8004040:	b368      	cbz	r0, 800409e <log_process_thread_func+0x8e>
 8004042:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8004046:	2700      	movs	r7, #0
	return z_impl_z_current_get();
 8004048:	f005 fa56 	bl	80094f8 <z_impl_z_current_get>
	proc_tid = process_tid;
 800404c:	4b21      	ldr	r3, [pc, #132]	; (80040d4 <log_process_thread_func+0xc4>)
 800404e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8004050:	b130      	cbz	r0, 8004060 <log_process_thread_func+0x50>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8004052:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <log_process_thread_func+0xc8>)
	    process_tid &&
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b09      	cmp	r3, #9
 8004058:	dd02      	ble.n	8004060 <log_process_thread_func+0x50>
	z_impl_k_sem_give(sem);
 800405a:	4820      	ldr	r0, [pc, #128]	; (80040dc <log_process_thread_func+0xcc>)
 800405c:	f003 ff2a 	bl	8007eb4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 8004060:	f8df b078 	ldr.w	fp, [pc, #120]	; 80040dc <log_process_thread_func+0xcc>
 8004064:	ea4f 1825 	mov.w	r8, r5, asr #4
 8004068:	2500      	movs	r5, #0
		if (activate_mask) {
 800406a:	b144      	cbz	r4, 800407e <log_process_thread_func+0x6e>
			activate_mask = activate_foreach_backend(activate_mask);
 800406c:	4620      	mov	r0, r4
 800406e:	f7ff fe33 	bl	8003cd8 <activate_foreach_backend>
			if (!activate_mask) {
 8004072:	4604      	mov	r4, r0
 8004074:	b918      	cbnz	r0, 800407e <log_process_thread_func+0x6e>
				timeout = K_FOREVER;
 8004076:	f04f 36ff 	mov.w	r6, #4294967295
 800407a:	f04f 37ff 	mov.w	r7, #4294967295
 800407e:	f7ff ff63 	bl	8003f48 <z_impl_log_process>
		if (log_process() == false) {
 8004082:	4681      	mov	r9, r0
 8004084:	b948      	cbnz	r0, 800409a <log_process_thread_func+0x8a>
			if (processed_any) {
 8004086:	b11d      	cbz	r5, 8004090 <log_process_thread_func+0x80>
 8004088:	4d0e      	ldr	r5, [pc, #56]	; (80040c4 <log_process_thread_func+0xb4>)
	for (int i = 0; i < log_backend_count_get(); i++) {
 800408a:	4682      	mov	sl, r0
 800408c:	45c2      	cmp	sl, r8
 800408e:	db0b      	blt.n	80040a8 <log_process_thread_func+0x98>
 8004090:	4632      	mov	r2, r6
 8004092:	463b      	mov	r3, r7
 8004094:	4658      	mov	r0, fp
 8004096:	f003 ff4b 	bl	8007f30 <z_impl_k_sem_take>
 800409a:	464d      	mov	r5, r9
 800409c:	e7e5      	b.n	800406a <log_process_thread_func+0x5a>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 800409e:	f04f 36ff 	mov.w	r6, #4294967295
 80040a2:	f04f 37ff 	mov.w	r7, #4294967295
 80040a6:	e7cf      	b.n	8004048 <log_process_thread_func+0x38>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	b11b      	cbz	r3, 80040b6 <log_process_thread_func+0xa6>
		backend->api->notify(backend, event, arg);
 80040ae:	2200      	movs	r2, #0
 80040b0:	4611      	mov	r1, r2
 80040b2:	4628      	mov	r0, r5
 80040b4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 80040b6:	f10a 0a01 	add.w	sl, sl, #1
 80040ba:	3510      	adds	r5, #16
 80040bc:	e7e6      	b.n	800408c <log_process_thread_func+0x7c>
 80040be:	bf00      	nop
 80040c0:	0800dbac 	.word	0x0800dbac
 80040c4:	0800db9c 	.word	0x0800db9c
 80040c8:	08012956 	.word	0x08012956
 80040cc:	0800e198 	.word	0x0800e198
 80040d0:	08012905 	.word	0x08012905
 80040d4:	20000b10 	.word	0x20000b10
 80040d8:	20000b18 	.word	0x20000b18
 80040dc:	200003ac 	.word	0x200003ac

080040e0 <z_log_msg_commit>:
{
 80040e0:	b513      	push	{r0, r1, r4, lr}
	msg->hdr.timestamp = timestamp_func();
 80040e2:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <z_log_msg_commit+0xd4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
{
 80040e6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 80040e8:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, &m->buf);
 80040ea:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
 80040ec:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
 80040ee:	4832      	ldr	r0, [pc, #200]	; (80041b8 <z_log_msg_commit+0xd8>)
 80040f0:	f7ff fc68 	bl	80039c4 <mpsc_pbuf_commit>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80040f4:	f3bf 8f5b 	dmb	ish
 80040f8:	4b30      	ldr	r3, [pc, #192]	; (80041bc <z_log_msg_commit+0xdc>)
 80040fa:	e853 2f00 	ldrex	r2, [r3]
 80040fe:	1c51      	adds	r1, r2, #1
 8004100:	e843 1000 	strex	r0, r1, [r3]
 8004104:	2800      	cmp	r0, #0
 8004106:	d1f8      	bne.n	80040fa <z_log_msg_commit+0x1a>
 8004108:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 800410c:	4b2c      	ldr	r3, [pc, #176]	; (80041c0 <z_log_msg_commit+0xe0>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d034      	beq.n	800417e <z_log_msg_commit+0x9e>
	__asm__ volatile(
 8004114:	f04f 0310 	mov.w	r3, #16
 8004118:	f3ef 8411 	mrs	r4, BASEPRI
 800411c:	f383 8812 	msr	BASEPRI_MAX, r3
 8004120:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8004124:	4827      	ldr	r0, [pc, #156]	; (80041c4 <z_log_msg_commit+0xe4>)
 8004126:	f003 fd1d 	bl	8007b64 <z_spin_lock_valid>
 800412a:	b968      	cbnz	r0, 8004148 <z_log_msg_commit+0x68>
 800412c:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <z_log_msg_commit+0xe8>)
 800412e:	4927      	ldr	r1, [pc, #156]	; (80041cc <z_log_msg_commit+0xec>)
 8004130:	4827      	ldr	r0, [pc, #156]	; (80041d0 <z_log_msg_commit+0xf0>)
 8004132:	238e      	movs	r3, #142	; 0x8e
 8004134:	f007 fe21 	bl	800bd7a <assert_print>
 8004138:	4922      	ldr	r1, [pc, #136]	; (80041c4 <z_log_msg_commit+0xe4>)
 800413a:	4826      	ldr	r0, [pc, #152]	; (80041d4 <z_log_msg_commit+0xf4>)
 800413c:	f007 fe1d 	bl	800bd7a <assert_print>
 8004140:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8004142:	4821      	ldr	r0, [pc, #132]	; (80041c8 <z_log_msg_commit+0xe8>)
 8004144:	f007 fe12 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8004148:	481e      	ldr	r0, [pc, #120]	; (80041c4 <z_log_msg_commit+0xe4>)
 800414a:	f003 fd29 	bl	8007ba0 <z_spin_lock_set_owner>
 800414e:	f7ff fefb 	bl	8003f48 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8004152:	481c      	ldr	r0, [pc, #112]	; (80041c4 <z_log_msg_commit+0xe4>)
 8004154:	f003 fd14 	bl	8007b80 <z_spin_unlock_valid>
 8004158:	b958      	cbnz	r0, 8004172 <z_log_msg_commit+0x92>
 800415a:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <z_log_msg_commit+0xe8>)
 800415c:	491e      	ldr	r1, [pc, #120]	; (80041d8 <z_log_msg_commit+0xf8>)
 800415e:	481c      	ldr	r0, [pc, #112]	; (80041d0 <z_log_msg_commit+0xf0>)
 8004160:	23b9      	movs	r3, #185	; 0xb9
 8004162:	f007 fe0a 	bl	800bd7a <assert_print>
 8004166:	4917      	ldr	r1, [pc, #92]	; (80041c4 <z_log_msg_commit+0xe4>)
 8004168:	481c      	ldr	r0, [pc, #112]	; (80041dc <z_log_msg_commit+0xfc>)
 800416a:	f007 fe06 	bl	800bd7a <assert_print>
 800416e:	21b9      	movs	r1, #185	; 0xb9
 8004170:	e7e7      	b.n	8004142 <z_log_msg_commit+0x62>
	__asm__ volatile(
 8004172:	f384 8811 	msr	BASEPRI, r4
 8004176:	f3bf 8f6f 	isb	sy
}
 800417a:	b002      	add	sp, #8
 800417c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
 800417e:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <z_log_msg_commit+0x100>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f9      	beq.n	800417a <z_log_msg_commit+0x9a>
		if (cnt == 0) {
 8004186:	b952      	cbnz	r2, 800419e <z_log_msg_commit+0xbe>
	z_impl_k_timer_start(timer, duration, period);
 8004188:	2200      	movs	r2, #0
 800418a:	2300      	movs	r3, #0
 800418c:	e9cd 2300 	strd	r2, r3, [sp]
 8004190:	4814      	ldr	r0, [pc, #80]	; (80041e4 <z_log_msg_commit+0x104>)
 8004192:	f242 7210 	movw	r2, #10000	; 0x2710
 8004196:	2300      	movs	r3, #0
 8004198:	f005 fe6a 	bl	8009e70 <z_impl_k_timer_start>
 800419c:	e7ed      	b.n	800417a <z_log_msg_commit+0x9a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 800419e:	2a0a      	cmp	r2, #10
 80041a0:	d1eb      	bne.n	800417a <z_log_msg_commit+0x9a>
	z_impl_k_timer_stop(timer);
 80041a2:	4810      	ldr	r0, [pc, #64]	; (80041e4 <z_log_msg_commit+0x104>)
 80041a4:	f008 fd5b 	bl	800cc5e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80041a8:	480f      	ldr	r0, [pc, #60]	; (80041e8 <z_log_msg_commit+0x108>)
}
 80041aa:	b002      	add	sp, #8
 80041ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041b0:	f003 be80 	b.w	8007eb4 <z_impl_k_sem_give>
 80041b4:	200000b4 	.word	0x200000b4
 80041b8:	20000ad4 	.word	0x20000ad4
 80041bc:	20000b18 	.word	0x20000b18
 80041c0:	20000cfe 	.word	0x20000cfe
 80041c4:	20000ad0 	.word	0x20000ad0
 80041c8:	08012877 	.word	0x08012877
 80041cc:	080128a4 	.word	0x080128a4
 80041d0:	0800e198 	.word	0x0800e198
 80041d4:	080128b9 	.word	0x080128b9
 80041d8:	080128d1 	.word	0x080128d1
 80041dc:	080128e8 	.word	0x080128e8
 80041e0:	20000b10 	.word	0x20000b10
 80041e4:	200008c0 	.word	0x200008c0
 80041e8:	200003ac 	.word	0x200003ac

080041ec <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 80041ec:	4a04      	ldr	r2, [pc, #16]	; (8004200 <log_source_name_get+0x14>)
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <log_source_name_get+0x18>)
 80041f0:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 80041f2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 80041f6:	bf34      	ite	cc
 80041f8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 80041fc:	2000      	movcs	r0, #0
}
 80041fe:	4770      	bx	lr
 8004200:	0800db3c 	.word	0x0800db3c
 8004204:	0800db9c 	.word	0x0800db9c

08004208 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 8004208:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <log_backend_enable+0x38>)
 800420c:	1ac3      	subs	r3, r0, r3
 800420e:	111b      	asrs	r3, r3, #4
 8004210:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
 8004212:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
 8004214:	b948      	cbnz	r0, 800422a <log_backend_enable+0x22>
 8004216:	490b      	ldr	r1, [pc, #44]	; (8004244 <log_backend_enable+0x3c>)
 8004218:	480b      	ldr	r0, [pc, #44]	; (8004248 <log_backend_enable+0x40>)
 800421a:	4a0c      	ldr	r2, [pc, #48]	; (800424c <log_backend_enable+0x44>)
 800421c:	23de      	movs	r3, #222	; 0xde
 800421e:	f007 fdac 	bl	800bd7a <assert_print>
 8004222:	480a      	ldr	r0, [pc, #40]	; (800424c <log_backend_enable+0x44>)
 8004224:	21de      	movs	r1, #222	; 0xde
 8004226:	f007 fda1 	bl	800bd6c <assert_post_action>
	backend->cb->id = id;
 800422a:	6842      	ldr	r2, [r0, #4]
 800422c:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 800422e:	6843      	ldr	r3, [r0, #4]
 8004230:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8004232:	6843      	ldr	r3, [r0, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
 8004238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_log_notify_backend_enabled();
 800423c:	f7ff bdf0 	b.w	8003e20 <z_log_notify_backend_enabled>
 8004240:	0800db9c 	.word	0x0800db9c
 8004244:	08012a06 	.word	0x08012a06
 8004248:	0800e198 	.word	0x0800e198
 800424c:	080129ce 	.word	0x080129ce

08004250 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
 8004250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004254:	b08f      	sub	sp, #60	; 0x3c
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 8004256:	f3c1 44cb 	ubfx	r4, r1, #19, #12
 800425a:	f3c1 2649 	ubfx	r6, r1, #9, #10
 800425e:	9005      	str	r0, [sp, #20]
 8004260:	460d      	mov	r5, r1
 8004262:	4690      	mov	r8, r2
 8004264:	4699      	mov	r9, r3
 8004266:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
 8004268:	2e00      	cmp	r6, #0
 800426a:	d03e      	beq.n	80042ea <z_impl_z_log_msg_static_create+0x9a>
	return cbprintf_package_convert(in_packaged, in_len,
 800426c:	f04f 0a02 	mov.w	sl, #2
 8004270:	f04f 0b04 	mov.w	fp, #4
 8004274:	af09      	add	r7, sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
 8004276:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
 8004278:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
 800427a:	ab0b      	add	r3, sp, #44	; 0x2c
 800427c:	f8cd b008 	str.w	fp, [sp, #8]
 8004280:	9701      	str	r7, [sp, #4]
 8004282:	f8cd a000 	str.w	sl, [sp]
 8004286:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
 8004288:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
 800428c:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
 800428e:	9607      	str	r6, [sp, #28]
 8004290:	f7fe f8e4 	bl	800245c <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
 8004294:	f3c0 0309 	ubfx	r3, r0, #0, #10
 8004298:	1918      	adds	r0, r3, r4
 800429a:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 800429e:	fa20 f00a 	lsr.w	r0, r0, sl
		out_desc.package_len = len;
 80042a2:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 80042a4:	f363 2552 	bfi	r5, r3, #9, #10
 80042a8:	9306      	str	r3, [sp, #24]
 80042aa:	f7ff fe33 	bl	8003f14 <z_log_msg_alloc>
		if (msg) {
 80042ae:	4604      	mov	r4, r0
 80042b0:	b308      	cbz	r0, 80042f6 <z_impl_z_log_msg_static_create+0xa6>
	struct z_cbprintf_buf_desc buf_desc = {
 80042b2:	9b06      	ldr	r3, [sp, #24]
 80042b4:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
 80042b6:	3010      	adds	r0, #16
 80042b8:	2200      	movs	r2, #0
 80042ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80042bc:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
 80042be:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 80042c2:	4a12      	ldr	r2, [pc, #72]	; (800430c <z_impl_z_log_msg_static_create+0xbc>)
 80042c4:	9907      	ldr	r1, [sp, #28]
 80042c6:	f8cd a000 	str.w	sl, [sp]
 80042ca:	ab0b      	add	r3, sp, #44	; 0x2c
 80042cc:	4640      	mov	r0, r8
 80042ce:	f7fe f8c5 	bl	800245c <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
 80042d2:	2800      	cmp	r0, #0
 80042d4:	da0f      	bge.n	80042f6 <z_impl_z_log_msg_static_create+0xa6>
 80042d6:	490e      	ldr	r1, [pc, #56]	; (8004310 <z_impl_z_log_msg_static_create+0xc0>)
 80042d8:	480e      	ldr	r0, [pc, #56]	; (8004314 <z_impl_z_log_msg_static_create+0xc4>)
 80042da:	4a0f      	ldr	r2, [pc, #60]	; (8004318 <z_impl_z_log_msg_static_create+0xc8>)
 80042dc:	2348      	movs	r3, #72	; 0x48
 80042de:	f007 fd4c 	bl	800bd7a <assert_print>
 80042e2:	480d      	ldr	r0, [pc, #52]	; (8004318 <z_impl_z_log_msg_static_create+0xc8>)
 80042e4:	2148      	movs	r1, #72	; 0x48
 80042e6:	f007 fd41 	bl	800bd6c <assert_post_action>
 80042ea:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 80042ee:	0880      	lsrs	r0, r0, #2
 80042f0:	f7ff fe10 	bl	8003f14 <z_log_msg_alloc>
 80042f4:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
 80042f6:	f366 2552 	bfi	r5, r6, #9, #10
 80042fa:	9905      	ldr	r1, [sp, #20]
 80042fc:	464b      	mov	r3, r9
 80042fe:	462a      	mov	r2, r5
 8004300:	4620      	mov	r0, r4
}
 8004302:	b00f      	add	sp, #60	; 0x3c
 8004304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
 8004308:	f007 be34 	b.w	800bf74 <z_log_msg_finalize>
 800430c:	0800bf49 	.word	0x0800bf49
 8004310:	08012a49 	.word	0x08012a49
 8004314:	0800e198 	.word	0x0800e198
 8004318:	08012a1d 	.word	0x08012a1d

0800431c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 800431c:	b40e      	push	{r1, r2, r3}
 800431e:	b503      	push	{r0, r1, lr}
 8004320:	ab03      	add	r3, sp, #12
 8004322:	4601      	mov	r1, r0
 8004324:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8004328:	4804      	ldr	r0, [pc, #16]	; (800433c <print_formatted+0x20>)
	va_start(args, fmt);
 800432a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 800432c:	f007 fe49 	bl	800bfc2 <cbvprintf>
	va_end(args);

	return length;
}
 8004330:	b002      	add	sp, #8
 8004332:	f85d eb04 	ldr.w	lr, [sp], #4
 8004336:	b003      	add	sp, #12
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	0800435d 	.word	0x0800435d

08004340 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8004340:	06ca      	lsls	r2, r1, #27
 8004342:	d405      	bmi.n	8004350 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8004344:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
 8004346:	bf4c      	ite	mi
 8004348:	4902      	ldrmi	r1, [pc, #8]	; (8004354 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
 800434a:	4903      	ldrpl	r1, [pc, #12]	; (8004358 <newline_print+0x18>)
 800434c:	f7ff bfe6 	b.w	800431c <print_formatted>
	}
}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	08013e56 	.word	0x08013e56
 8004358:	08012a52 	.word	0x08012a52

0800435c <out_func>:
{
 800435c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 800435e:	684b      	ldr	r3, [r1, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68cb      	ldr	r3, [r1, #12]
 8004364:	429a      	cmp	r2, r3
{
 8004366:	4605      	mov	r5, r0
 8004368:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800436a:	d102      	bne.n	8004372 <out_func+0x16>
		log_output_flush(out_ctx);
 800436c:	4608      	mov	r0, r1
 800436e:	f007 fe2f 	bl	800bfd0 <log_output_flush>
 8004372:	6863      	ldr	r3, [r4, #4]
 8004374:	f3bf 8f5b 	dmb	ish
 8004378:	e853 2f00 	ldrex	r2, [r3]
 800437c:	1c51      	adds	r1, r2, #1
 800437e:	e843 1000 	strex	r0, r1, [r3]
 8004382:	2800      	cmp	r0, #0
 8004384:	d1f8      	bne.n	8004378 <out_func+0x1c>
 8004386:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800438a:	68a3      	ldr	r3, [r4, #8]
 800438c:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
 800438e:	6863      	ldr	r3, [r4, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68e3      	ldr	r3, [r4, #12]
 8004394:	429a      	cmp	r2, r3
 8004396:	d909      	bls.n	80043ac <out_func+0x50>
 8004398:	4905      	ldr	r1, [pc, #20]	; (80043b0 <out_func+0x54>)
 800439a:	4806      	ldr	r0, [pc, #24]	; (80043b4 <out_func+0x58>)
 800439c:	4a06      	ldr	r2, [pc, #24]	; (80043b8 <out_func+0x5c>)
 800439e:	2379      	movs	r3, #121	; 0x79
 80043a0:	f007 fceb 	bl	800bd7a <assert_print>
 80043a4:	4804      	ldr	r0, [pc, #16]	; (80043b8 <out_func+0x5c>)
 80043a6:	2179      	movs	r1, #121	; 0x79
 80043a8:	f007 fce0 	bl	800bd6c <assert_post_action>
}
 80043ac:	2000      	movs	r0, #0
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	08012a84 	.word	0x08012a84
 80043b4:	0800e198 	.word	0x0800e198
 80043b8:	08012a55 	.word	0x08012a55

080043bc <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
 80043bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c0:	b089      	sub	sp, #36	; 0x24
 80043c2:	469a      	mov	sl, r3
 80043c4:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
 80043c8:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
 80043cc:	9305      	str	r3, [sp, #20]
 80043ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043d0:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80043d2:	9206      	str	r2, [sp, #24]
 80043d4:	4604      	mov	r4, r0
 80043d6:	460d      	mov	r5, r1
 80043d8:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
 80043da:	f1bb 0f00 	cmp.w	fp, #0
 80043de:	f000 8085 	beq.w	80044ec <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 80043e2:	f006 0308 	and.w	r3, r6, #8
 80043e6:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
 80043e8:	f007 fdac 	bl	800bf44 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 80043ec:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
 80043f0:	4602      	mov	r2, r0
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d049      	beq.n	800448a <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
 80043f6:	498d      	ldr	r1, [pc, #564]	; (800462c <log_output_process+0x270>)
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff ff8f 	bl	800431c <print_formatted>
 80043fe:	4680      	mov	r8, r0
	if (stamp) {
 8004400:	f1b9 0f00 	cmp.w	r9, #0
 8004404:	d008      	beq.n	8004418 <log_output_process+0x5c>
	if (!format) {
 8004406:	f016 0f44 	tst.w	r6, #68	; 0x44
 800440a:	d140      	bne.n	800448e <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
 800440c:	4988      	ldr	r1, [pc, #544]	; (8004630 <log_output_process+0x274>)
 800440e:	462a      	mov	r2, r5
 8004410:	4620      	mov	r0, r4
 8004412:	f7ff ff83 	bl	800431c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 8004416:	4480      	add	r8, r0
	if (color) {
 8004418:	f006 0301 	and.w	r3, r6, #1
 800441c:	b153      	cbz	r3, 8004434 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
 800441e:	4b85      	ldr	r3, [pc, #532]	; (8004634 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
 8004420:	4985      	ldr	r1, [pc, #532]	; (8004638 <log_output_process+0x27c>)
		const char *log_color = start && (colors[level] != NULL) ?
 8004422:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
 8004426:	4b85      	ldr	r3, [pc, #532]	; (800463c <log_output_process+0x280>)
 8004428:	4620      	mov	r0, r4
 800442a:	2a00      	cmp	r2, #0
 800442c:	bf08      	it	eq
 800442e:	461a      	moveq	r2, r3
 8004430:	f7ff ff74 	bl	800431c <print_formatted>
	if (level_on) {
 8004434:	f006 0308 	and.w	r3, r6, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d054      	beq.n	80044e6 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
 800443c:	4b80      	ldr	r3, [pc, #512]	; (8004640 <log_output_process+0x284>)
 800443e:	4981      	ldr	r1, [pc, #516]	; (8004644 <log_output_process+0x288>)
 8004440:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
 8004444:	4620      	mov	r0, r4
 8004446:	f7ff ff69 	bl	800431c <print_formatted>
 800444a:	4605      	mov	r5, r0
	if (domain) {
 800444c:	9b06      	ldr	r3, [sp, #24]
 800444e:	b12b      	cbz	r3, 800445c <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
 8004450:	497d      	ldr	r1, [pc, #500]	; (8004648 <log_output_process+0x28c>)
 8004452:	461a      	mov	r2, r3
 8004454:	4620      	mov	r0, r4
 8004456:	f7ff ff61 	bl	800431c <print_formatted>
 800445a:	4405      	add	r5, r0
	if (source) {
 800445c:	f1ba 0f00 	cmp.w	sl, #0
 8004460:	d005      	beq.n	800446e <log_output_process+0xb2>
		total += print_formatted(output,
 8004462:	497a      	ldr	r1, [pc, #488]	; (800464c <log_output_process+0x290>)
 8004464:	4652      	mov	r2, sl
 8004466:	4620      	mov	r0, r4
 8004468:	f7ff ff58 	bl	800431c <print_formatted>
 800446c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
 800446e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
 8004470:	2f00      	cmp	r7, #0
 8004472:	d149      	bne.n	8004508 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
 8004474:	9b04      	ldr	r3, [sp, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d160      	bne.n	800453c <log_output_process+0x180>
	if (color) {
 800447a:	07f3      	lsls	r3, r6, #31
 800447c:	f100 80cf 	bmi.w	800461e <log_output_process+0x262>
	newline_print(output, flags);
 8004480:	4631      	mov	r1, r6
 8004482:	4620      	mov	r0, r4
 8004484:	f7ff ff5c 	bl	8004340 <newline_print>
}
 8004488:	e0c3      	b.n	8004612 <log_output_process+0x256>
	uint32_t length = 0U;
 800448a:	4680      	mov	r8, r0
 800448c:	e7b8      	b.n	8004400 <log_output_process+0x44>
	} else if (freq != 0U) {
 800448e:	4b70      	ldr	r3, [pc, #448]	; (8004650 <log_output_process+0x294>)
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	2800      	cmp	r0, #0
 8004494:	d0bf      	beq.n	8004416 <log_output_process+0x5a>
		timestamp /= timestamp_div;
 8004496:	4b6f      	ldr	r3, [pc, #444]	; (8004654 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
 8004498:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
 80044a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80044a6:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
 80044aa:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
 80044ae:	fb09 f505 	mul.w	r5, r9, r5
		mins = seconds / 60U;
 80044b2:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80044b6:	fbb3 f2f1 	udiv	r2, r3, r1
 80044ba:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80044be:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
 80044c2:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80044c6:	fb00 551e 	mls	r5, r0, lr, r5
				length = print_formatted(output,
 80044ca:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80044ce:	fb09 f505 	mul.w	r5, r9, r5
				length = print_formatted(output,
 80044d2:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80044d4:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
 80044d8:	495f      	ldr	r1, [pc, #380]	; (8004658 <log_output_process+0x29c>)
 80044da:	e9cd e501 	strd	lr, r5, [sp, #4]
 80044de:	4620      	mov	r0, r4
 80044e0:	f7ff ff1c 	bl	800431c <print_formatted>
 80044e4:	e797      	b.n	8004416 <log_output_process+0x5a>
	int total = 0;
 80044e6:	f006 0508 	and.w	r5, r6, #8
 80044ea:	e7af      	b.n	800444c <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 80044ec:	f1ba 0f01 	cmp.w	sl, #1
 80044f0:	d106      	bne.n	8004500 <log_output_process+0x144>
	if (package) {
 80044f2:	b9ef      	cbnz	r7, 8004530 <log_output_process+0x174>
	if (data_len) {
 80044f4:	9b04      	ldr	r3, [sp, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 808b 	beq.w	8004612 <log_output_process+0x256>
		prefix_offset = 0;
 80044fc:	2500      	movs	r5, #0
 80044fe:	e01d      	b.n	800453c <log_output_process+0x180>
	if (package) {
 8004500:	2f00      	cmp	r7, #0
 8004502:	d0f7      	beq.n	80044f4 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8004504:	4855      	ldr	r0, [pc, #340]	; (800465c <log_output_process+0x2a0>)
 8004506:	e014      	b.n	8004532 <log_output_process+0x176>
		cb = out_func;
 8004508:	4855      	ldr	r0, [pc, #340]	; (8004660 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 800450a:	4956      	ldr	r1, [pc, #344]	; (8004664 <log_output_process+0x2a8>)
 800450c:	463b      	mov	r3, r7
 800450e:	4622      	mov	r2, r4
 8004510:	f007 fabd 	bl	800ba8e <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
 8004514:	2800      	cmp	r0, #0
 8004516:	da0e      	bge.n	8004536 <log_output_process+0x17a>
 8004518:	4953      	ldr	r1, [pc, #332]	; (8004668 <log_output_process+0x2ac>)
 800451a:	4854      	ldr	r0, [pc, #336]	; (800466c <log_output_process+0x2b0>)
 800451c:	4a54      	ldr	r2, [pc, #336]	; (8004670 <log_output_process+0x2b4>)
 800451e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004522:	f007 fc2a 	bl	800bd7a <assert_print>
 8004526:	4852      	ldr	r0, [pc, #328]	; (8004670 <log_output_process+0x2b4>)
 8004528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800452c:	f007 fc1e 	bl	800bd6c <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8004530:	484b      	ldr	r0, [pc, #300]	; (8004660 <log_output_process+0x2a4>)
		prefix_offset = 0;
 8004532:	465d      	mov	r5, fp
 8004534:	e7e9      	b.n	800450a <log_output_process+0x14e>
	if (data_len) {
 8004536:	9b04      	ldr	r3, [sp, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d066      	beq.n	800460a <log_output_process+0x24e>
		print_formatted(output, " ");
 800453c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8004674 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
 8004540:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8004678 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8004544:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
 8004546:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8004548:	2f10      	cmp	r7, #16
	newline_print(output, flags);
 800454a:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 800454c:	bf28      	it	cs
 800454e:	2710      	movcs	r7, #16
	newline_print(output, flags);
 8004550:	f7ff fef6 	bl	8004340 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
 8004554:	f04f 0a00 	mov.w	sl, #0
 8004558:	4555      	cmp	r5, sl
 800455a:	dc43      	bgt.n	80045e4 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
 800455c:	9b05      	ldr	r3, [sp, #20]
 800455e:	4649      	mov	r1, r9
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	4620      	mov	r0, r4
 8004564:	f7ff feda 	bl	800431c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004568:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
 800456c:	f01a 0f07 	tst.w	sl, #7
 8004570:	d103      	bne.n	800457a <log_output_process+0x1be>
			print_formatted(output, " ");
 8004572:	4641      	mov	r1, r8
 8004574:	4620      	mov	r0, r4
 8004576:	f7ff fed1 	bl	800431c <print_formatted>
		if (i < length) {
 800457a:	4557      	cmp	r7, sl
 800457c:	d939      	bls.n	80045f2 <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
 800457e:	9b05      	ldr	r3, [sp, #20]
 8004580:	4649      	mov	r1, r9
 8004582:	f813 200a 	ldrb.w	r2, [r3, sl]
 8004586:	4620      	mov	r0, r4
 8004588:	f7ff fec8 	bl	800431c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800458c:	f10a 0a01 	add.w	sl, sl, #1
 8004590:	f1ba 0f10 	cmp.w	sl, #16
 8004594:	d1ea      	bne.n	800456c <log_output_process+0x1b0>
	print_formatted(output, "|");
 8004596:	4939      	ldr	r1, [pc, #228]	; (800467c <log_output_process+0x2c0>)
 8004598:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800459a:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
 800459e:	f7ff febd 	bl	800431c <print_formatted>
		if (i < length) {
 80045a2:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
 80045a4:	9b05      	ldr	r3, [sp, #20]
 80045a6:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
 80045a8:	4b35      	ldr	r3, [pc, #212]	; (8004680 <log_output_process+0x2c4>)
 80045aa:	5c99      	ldrb	r1, [r3, r2]
 80045ac:	f011 0f97 	tst.w	r1, #151	; 0x97
 80045b0:	bf08      	it	eq
 80045b2:	222e      	moveq	r2, #46	; 0x2e
 80045b4:	4933      	ldr	r1, [pc, #204]	; (8004684 <log_output_process+0x2c8>)
 80045b6:	4620      	mov	r0, r4
 80045b8:	f7ff feb0 	bl	800431c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80045bc:	f10a 0a01 	add.w	sl, sl, #1
 80045c0:	f1ba 0f10 	cmp.w	sl, #16
 80045c4:	d01a      	beq.n	80045fc <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
 80045c6:	f01a 0f07 	tst.w	sl, #7
 80045ca:	d103      	bne.n	80045d4 <log_output_process+0x218>
			print_formatted(output, " ");
 80045cc:	4641      	mov	r1, r8
 80045ce:	4620      	mov	r0, r4
 80045d0:	f7ff fea4 	bl	800431c <print_formatted>
		if (i < length) {
 80045d4:	4557      	cmp	r7, sl
 80045d6:	4652      	mov	r2, sl
 80045d8:	d8e4      	bhi.n	80045a4 <log_output_process+0x1e8>
			print_formatted(output, " ");
 80045da:	4641      	mov	r1, r8
 80045dc:	4620      	mov	r0, r4
 80045de:	f7ff fe9d 	bl	800431c <print_formatted>
 80045e2:	e7eb      	b.n	80045bc <log_output_process+0x200>
		print_formatted(output, " ");
 80045e4:	4641      	mov	r1, r8
 80045e6:	4620      	mov	r0, r4
 80045e8:	f7ff fe98 	bl	800431c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80045ec:	f10a 0a01 	add.w	sl, sl, #1
 80045f0:	e7b2      	b.n	8004558 <log_output_process+0x19c>
			print_formatted(output, "   ");
 80045f2:	4925      	ldr	r1, [pc, #148]	; (8004688 <log_output_process+0x2cc>)
 80045f4:	4620      	mov	r0, r4
 80045f6:	f7ff fe91 	bl	800431c <print_formatted>
 80045fa:	e7c7      	b.n	800458c <log_output_process+0x1d0>
		data += length;
 80045fc:	9b05      	ldr	r3, [sp, #20]
 80045fe:	443b      	add	r3, r7
 8004600:	9305      	str	r3, [sp, #20]
	} while (len);
 8004602:	9b04      	ldr	r3, [sp, #16]
 8004604:	1bdb      	subs	r3, r3, r7
 8004606:	9304      	str	r3, [sp, #16]
 8004608:	d19c      	bne.n	8004544 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
 800460a:	f1bb 0f00 	cmp.w	fp, #0
 800460e:	f47f af34 	bne.w	800447a <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 8004612:	4620      	mov	r0, r4
}
 8004614:	b009      	add	sp, #36	; 0x24
 8004616:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
 800461a:	f007 bcd9 	b.w	800bfd0 <log_output_flush>
		print_formatted(output, "%s", log_color);
 800461e:	4a07      	ldr	r2, [pc, #28]	; (800463c <log_output_process+0x280>)
 8004620:	4905      	ldr	r1, [pc, #20]	; (8004638 <log_output_process+0x27c>)
 8004622:	4620      	mov	r0, r4
 8004624:	f7ff fe7a 	bl	800431c <print_formatted>
}
 8004628:	e72a      	b.n	8004480 <log_output_process+0xc4>
 800462a:	bf00      	nop
 800462c:	08012ab9 	.word	0x08012ab9
 8004630:	08012abd 	.word	0x08012abd
 8004634:	0800dd98 	.word	0x0800dd98
 8004638:	08012ae2 	.word	0x08012ae2
 800463c:	08012ab4 	.word	0x08012ab4
 8004640:	0800ddac 	.word	0x0800ddac
 8004644:	08012ae5 	.word	0x08012ae5
 8004648:	08012aeb 	.word	0x08012aeb
 800464c:	08012aef 	.word	0x08012aef
 8004650:	20000b24 	.word	0x20000b24
 8004654:	20000b20 	.word	0x20000b20
 8004658:	08012ac6 	.word	0x08012ac6
 800465c:	0800bfeb 	.word	0x0800bfeb
 8004660:	0800435d 	.word	0x0800435d
 8004664:	0800bfc3 	.word	0x0800bfc3
 8004668:	08012af4 	.word	0x08012af4
 800466c:	0800e198 	.word	0x0800e198
 8004670:	08012a55 	.word	0x08012a55
 8004674:	0800e4fe 	.word	0x0800e4fe
 8004678:	08012afd 	.word	0x08012afd
 800467c:	08012b03 	.word	0x08012b03
 8004680:	08014285 	.word	0x08014285
 8004684:	08012b05 	.word	0x08012b05
 8004688:	0800e4fc 	.word	0x0800e4fc

0800468c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
 800468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
 8004690:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
 8004692:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
 8004694:	688e      	ldr	r6, [r1, #8]
 8004696:	b086      	sub	sp, #24
 8004698:	4605      	mov	r5, r0
 800469a:	460c      	mov	r4, r1
 800469c:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
 800469e:	f3c7 1782 	ubfx	r7, r7, #6, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
 80046a2:	b15b      	cbz	r3, 80046bc <log_output_msg_process+0x30>
 80046a4:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <log_output_msg_process+0x68>)
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	f343 01cf 	sbfx	r1, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 80046ac:	2900      	cmp	r1, #0
 80046ae:	db1f      	blt.n	80046f0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
 80046b0:	7820      	ldrb	r0, [r4, #0]
 80046b2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
 80046b6:	f7ff fd99 	bl	80041ec <log_source_name_get>
 80046ba:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 80046bc:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
 80046be:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
 80046c0:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
 80046c4:	9700      	str	r7, [sp, #0]
 80046c6:	f3c2 2249 	ubfx	r2, r2, #9, #10
 80046ca:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
 80046cc:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
 80046d0:	f3c0 00cb 	ubfx	r0, r0, #3, #12
 80046d4:	bf08      	it	eq
 80046d6:	2100      	moveq	r1, #0
 80046d8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80046dc:	e9cd 1401 	strd	r1, r4, [sp, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	4631      	mov	r1, r6
 80046e4:	4628      	mov	r0, r5
 80046e6:	f7ff fe69 	bl	80043bc <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
 80046ea:	b006      	add	sp, #24
 80046ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e7e3      	b.n	80046bc <log_output_msg_process+0x30>
 80046f4:	0800db3c 	.word	0x0800db3c

080046f8 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 80046f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80046fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80046fe:	428b      	cmp	r3, r1
 8004700:	bf28      	it	cs
 8004702:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 8004704:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8004706:	4a0f      	ldr	r2, [pc, #60]	; (8004744 <log_output_dropped_process+0x4c>)
{
 8004708:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800470a:	2105      	movs	r1, #5
 800470c:	4668      	mov	r0, sp
 800470e:	f007 fa0d 	bl	800bb2c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8004712:	6863      	ldr	r3, [r4, #4]
 8004714:	490c      	ldr	r1, [pc, #48]	; (8004748 <log_output_dropped_process+0x50>)
 8004716:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8004718:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 800471a:	220b      	movs	r2, #11
 800471c:	4628      	mov	r0, r5
 800471e:	f007 fc43 	bl	800bfa8 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 8004722:	6863      	ldr	r3, [r4, #4]
 8004724:	4632      	mov	r2, r6
 8004726:	4669      	mov	r1, sp
 8004728:	4628      	mov	r0, r5
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f007 fc3c 	bl	800bfa8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8004730:	6863      	ldr	r3, [r4, #4]
 8004732:	4906      	ldr	r1, [pc, #24]	; (800474c <log_output_dropped_process+0x54>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	221b      	movs	r2, #27
 8004738:	4628      	mov	r0, r5
 800473a:	f007 fc35 	bl	800bfa8 <buffer_write>
		     output->control_block->ctx);
}
 800473e:	b002      	add	sp, #8
 8004740:	bd70      	pop	{r4, r5, r6, pc}
 8004742:	bf00      	nop
 8004744:	08013ae7 	.word	0x08013ae7
 8004748:	08012b24 	.word	0x08012b24
 800474c:	08012b08 	.word	0x08012b08

08004750 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8004750:	4a07      	ldr	r2, [pc, #28]	; (8004770 <log_output_timestamp_freq_set+0x20>)
 8004752:	2100      	movs	r1, #0
 8004754:	2301      	movs	r3, #1
 8004756:	4290      	cmp	r0, r2
 8004758:	d806      	bhi.n	8004768 <log_output_timestamp_freq_set+0x18>
 800475a:	4a06      	ldr	r2, [pc, #24]	; (8004774 <log_output_timestamp_freq_set+0x24>)
 800475c:	b901      	cbnz	r1, 8004760 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
 800475e:	2301      	movs	r3, #1
 8004760:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <log_output_timestamp_freq_set+0x28>)
 8004764:	6018      	str	r0, [r3, #0]
}
 8004766:	4770      	bx	lr
		frequency /= 2U;
 8004768:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	2101      	movs	r1, #1
 800476e:	e7f2      	b.n	8004756 <log_output_timestamp_freq_set+0x6>
 8004770:	000f4240 	.word	0x000f4240
 8004774:	20000b20 	.word	0x20000b20
 8004778:	20000b24 	.word	0x20000b24

0800477c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
 800477c:	4b01      	ldr	r3, [pc, #4]	; (8004784 <format_set+0x8>)
	return 0;
}
 800477e:	2000      	movs	r0, #0
	log_format_current = log_type;
 8004780:	6019      	str	r1, [r3, #0]
}
 8004782:	4770      	bx	lr
 8004784:	20000b3c 	.word	0x20000b3c

08004788 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
 8004788:	4b02      	ldr	r3, [pc, #8]	; (8004794 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 800478a:	4803      	ldr	r0, [pc, #12]	; (8004798 <panic+0x10>)
 800478c:	2201      	movs	r2, #1
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	f007 bc1e 	b.w	800bfd0 <log_output_flush>
 8004794:	20000d00 	.word	0x20000d00
 8004798:	0800dddc 	.word	0x0800dddc

0800479c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <dropped+0x8>)
 800479e:	f7ff bfab 	b.w	80046f8 <log_output_dropped_process>
 80047a2:	bf00      	nop
 80047a4:	0800dddc 	.word	0x0800dddc

080047a8 <process>:
{
 80047a8:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <process+0x1c>)
 80047ac:	6818      	ldr	r0, [r3, #0]
{
 80047ae:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 80047b0:	f7ff fb30 	bl	8003e14 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
 80047b4:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 80047b6:	4603      	mov	r3, r0
}
 80047b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
 80047bc:	4802      	ldr	r0, [pc, #8]	; (80047c8 <process+0x20>)
 80047be:	220f      	movs	r2, #15
 80047c0:	4718      	bx	r3
 80047c2:	bf00      	nop
 80047c4:	20000b3c 	.word	0x20000b3c
 80047c8:	0800dddc 	.word	0x0800dddc

080047cc <char_out>:
{
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80047ce:	4f07      	ldr	r7, [pc, #28]	; (80047ec <char_out+0x20>)
 80047d0:	460d      	mov	r5, r1
 80047d2:	4604      	mov	r4, r0
 80047d4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
 80047d6:	42b4      	cmp	r4, r6
 80047d8:	d101      	bne.n	80047de <char_out+0x12>
}
 80047da:	4628      	mov	r0, r5
 80047dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
 80047de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4801      	ldr	r0, [pc, #4]	; (80047ec <char_out+0x20>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 80047ea:	e7f4      	b.n	80047d6 <char_out+0xa>
 80047ec:	0800d7a0 	.word	0x0800d7a0

080047f0 <log_backend_uart_init>:
{
 80047f0:	b508      	push	{r3, lr}
 80047f2:	4807      	ldr	r0, [pc, #28]	; (8004810 <log_backend_uart_init+0x20>)
 80047f4:	f008 f976 	bl	800cae4 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
 80047f8:	b948      	cbnz	r0, 800480e <log_backend_uart_init+0x1e>
 80047fa:	4906      	ldr	r1, [pc, #24]	; (8004814 <log_backend_uart_init+0x24>)
 80047fc:	4806      	ldr	r0, [pc, #24]	; (8004818 <log_backend_uart_init+0x28>)
 80047fe:	4a07      	ldr	r2, [pc, #28]	; (800481c <log_backend_uart_init+0x2c>)
 8004800:	236f      	movs	r3, #111	; 0x6f
 8004802:	f007 faba 	bl	800bd7a <assert_print>
 8004806:	4805      	ldr	r0, [pc, #20]	; (800481c <log_backend_uart_init+0x2c>)
 8004808:	216f      	movs	r1, #111	; 0x6f
 800480a:	f007 faaf 	bl	800bd6c <assert_post_action>
}
 800480e:	bd08      	pop	{r3, pc}
 8004810:	0800d7a0 	.word	0x0800d7a0
 8004814:	08012b85 	.word	0x08012b85
 8004818:	0800e198 	.word	0x0800e198
 800481c:	08012b50 	.word	0x08012b50

08004820 <cfb_print>:

	return fptr->width;
}

int cfb_print(const struct device *dev, char *str, uint16_t x, uint16_t y)
{
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct char_framebuffer *fb = &char_fb;
	const struct cfb_font *fptr;

	if (!fb->fonts || !fb->buf) {
 8004824:	4c66      	ldr	r4, [pc, #408]	; (80049c0 <cfb_print+0x1a0>)
{
 8004826:	b08f      	sub	sp, #60	; 0x3c
 8004828:	4616      	mov	r6, r2
	if (!fb->fonts || !fb->buf) {
 800482a:	68a2      	ldr	r2, [r4, #8]
{
 800482c:	9102      	str	r1, [sp, #8]
 800482e:	461f      	mov	r7, r3
	if (!fb->fonts || !fb->buf) {
 8004830:	2a00      	cmp	r2, #0
 8004832:	f000 80c2 	beq.w	80049ba <cfb_print+0x19a>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80be 	beq.w	80049ba <cfb_print+0x19a>
		return -ENODEV;
	}

	fptr = &(fb->fonts[fb->font_idx]);
 800483e:	7d23      	ldrb	r3, [r4, #20]
 8004840:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004844:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004848:	9300      	str	r3, [sp, #0]

	if (fptr->height % 8) {
 800484a:	799b      	ldrb	r3, [r3, #6]
 800484c:	075d      	lsls	r5, r3, #29
 800484e:	d00f      	beq.n	8004870 <cfb_print+0x50>
		LOG_ERR("Wrong font size");
 8004850:	4b5c      	ldr	r3, [pc, #368]	; (80049c4 <cfb_print+0x1a4>)
 8004852:	930d      	str	r3, [sp, #52]	; 0x34
 8004854:	2302      	movs	r3, #2
 8004856:	930c      	str	r3, [sp, #48]	; 0x30
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
 8004858:	485b      	ldr	r0, [pc, #364]	; (80049c8 <cfb_print+0x1a8>)
 800485a:	2300      	movs	r3, #0
 800485c:	aa0c      	add	r2, sp, #48	; 0x30
 800485e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004862:	f7ff fcf5 	bl	8004250 <z_impl_z_log_msg_static_create>
		return -EINVAL;
 8004866:	f06f 0015 	mvn.w	r0, #21
		return 0;
	}

	LOG_ERR("Unsupported framebuffer configuration");
	return -EINVAL;
}
 800486a:	b00f      	add	sp, #60	; 0x3c
 800486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((fb->screen_info & SCREEN_INFO_MONO_VTILED) && !(y % 8)) {
 8004870:	7b63      	ldrb	r3, [r4, #13]
 8004872:	07d8      	lsls	r0, r3, #31
 8004874:	d502      	bpl.n	800487c <cfb_print+0x5c>
 8004876:	f017 0807 	ands.w	r8, r7, #7
 800487a:	d03d      	beq.n	80048f8 <cfb_print+0xd8>
	LOG_ERR("Unsupported framebuffer configuration");
 800487c:	4b53      	ldr	r3, [pc, #332]	; (80049cc <cfb_print+0x1ac>)
 800487e:	e7e8      	b.n	8004852 <cfb_print+0x32>
			if (x + fptr->width > fb->x_res) {
 8004880:	9b00      	ldr	r3, [sp, #0]
 8004882:	89e2      	ldrh	r2, [r4, #14]
 8004884:	795b      	ldrb	r3, [r3, #5]
 8004886:	4433      	add	r3, r6
 8004888:	4293      	cmp	r3, r2
 800488a:	dd04      	ble.n	8004896 <cfb_print+0x76>
				y += fptr->height;
 800488c:	9b00      	ldr	r3, [sp, #0]
 800488e:	799b      	ldrb	r3, [r3, #6]
 8004890:	443b      	add	r3, r7
 8004892:	b29f      	uxth	r7, r3
				x = 0U;
 8004894:	2600      	movs	r6, #0
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
 8004896:	7d21      	ldrb	r1, [r4, #20]
 8004898:	68a0      	ldr	r0, [r4, #8]
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
 800489a:	f994 3015 	ldrsb.w	r3, [r4, #21]
			     != ((fptr->caps & CFB_FONT_MSB_FIRST) != 0));
 800489e:	7b62      	ldrb	r2, [r4, #13]
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
 80048a0:	9303      	str	r3, [sp, #12]
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
 80048a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80048a6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
 80048aa:	9b02      	ldr	r3, [sp, #8]
	if (c < fptr->first_char || c > fptr->last_char) {
 80048ac:	f895 c007 	ldrb.w	ip, [r5, #7]
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
 80048b0:	f813 3008 	ldrb.w	r3, [r3, r8]
			     != ((fptr->caps & CFB_FONT_MSB_FIRST) != 0));
 80048b4:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80048b8:	9204      	str	r2, [sp, #16]
 80048ba:	792a      	ldrb	r2, [r5, #4]
	if (c < fptr->first_char || c > fptr->last_char) {
 80048bc:	4563      	cmp	r3, ip
			     != ((fptr->caps & CFB_FONT_MSB_FIRST) != 0));
 80048be:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80048c2:	9205      	str	r2, [sp, #20]
	if (c < fptr->first_char || c > fptr->last_char) {
 80048c4:	d31f      	bcc.n	8004906 <cfb_print+0xe6>
 80048c6:	7a2a      	ldrb	r2, [r5, #8]
		c = ' ';
 80048c8:	429a      	cmp	r2, r3
 80048ca:	bf38      	it	cc
 80048cc:	2320      	movcc	r3, #32
	       (fptr->width * fptr->height / 8U);
 80048ce:	796a      	ldrb	r2, [r5, #5]
 80048d0:	f895 e006 	ldrb.w	lr, [r5, #6]
	return (uint8_t *)fptr->data +
 80048d4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	       (fptr->width * fptr->height / 8U);
 80048d8:	fb12 f20e 	smulbb	r2, r2, lr
 80048dc:	08d2      	lsrs	r2, r2, #3
	       (c - fptr->first_char) *
 80048de:	eba3 030c 	sub.w	r3, r3, ip
	return (uint8_t *)fptr->data +
 80048e2:	fb03 1302 	mla	r3, r3, r2, r1
 80048e6:	9301      	str	r3, [sp, #4]
	if (!glyph_ptr) {
 80048e8:	b97b      	cbnz	r3, 800490a <cfb_print+0xea>
		return 0;
 80048ea:	2300      	movs	r3, #0
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
 80048ec:	9a03      	ldr	r2, [sp, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	4433      	add	r3, r6
 80048f2:	b29e      	uxth	r6, r3
		for (size_t i = 0; i < strlen(str); i++) {
 80048f4:	f108 0801 	add.w	r8, r8, #1
 80048f8:	9802      	ldr	r0, [sp, #8]
 80048fa:	f7fc fb65 	bl	8000fc8 <strlen>
 80048fe:	4540      	cmp	r0, r8
 8004900:	d8be      	bhi.n	8004880 <cfb_print+0x60>
		return 0;
 8004902:	2000      	movs	r0, #0
 8004904:	e7b1      	b.n	800486a <cfb_print+0x4a>
		c = ' ';
 8004906:	2320      	movs	r3, #32
 8004908:	e7e1      	b.n	80048ce <cfb_print+0xae>
		uint32_t y_segment = y / 8U;
 800490a:	08fb      	lsrs	r3, r7, #3
 800490c:	9306      	str	r3, [sp, #24]
	for (size_t g_x = 0; g_x < fptr->width; g_x++) {
 800490e:	f04f 0900 	mov.w	r9, #0
 8004912:	796b      	ldrb	r3, [r5, #5]
 8004914:	4599      	cmp	r9, r3
 8004916:	d2e9      	bcs.n	80048ec <cfb_print+0xcc>
 8004918:	482b      	ldr	r0, [pc, #172]	; (80049c8 <cfb_print+0x1a8>)
		for (size_t g_y = 0; g_y < fptr->height / 8U; g_y++) {
 800491a:	f04f 0a00 	mov.w	sl, #0
 800491e:	e02c      	b.n	800497a <cfb_print+0x15a>
			uint32_t fb_y = (y_segment + g_y) * fb->x_res;
 8004920:	9b06      	ldr	r3, [sp, #24]
 8004922:	89e1      	ldrh	r1, [r4, #14]
 8004924:	4453      	add	r3, sl
			if ((fb_y + x + g_x) >= fb->size) {
 8004926:	eb06 0b09 	add.w	fp, r6, r9
 800492a:	fb01 bb03 	mla	fp, r1, r3, fp
 800492e:	6863      	ldr	r3, [r4, #4]
 8004930:	459b      	cmp	fp, r3
 8004932:	d2da      	bcs.n	80048ea <cfb_print+0xca>
	if (fptr->caps & CFB_FONT_MONO_VPACKED) {
 8004934:	792b      	ldrb	r3, [r5, #4]
 8004936:	07d9      	lsls	r1, r3, #31
 8004938:	d528      	bpl.n	800498c <cfb_print+0x16c>
		return glyph_ptr[x * (fptr->height / 8U) + y];
 800493a:	9b01      	ldr	r3, [sp, #4]
 800493c:	fb02 3209 	mla	r2, r2, r9, r3
 8004940:	f812 300a 	ldrb.w	r3, [r2, sl]
			if (need_reverse) {
 8004944:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8004948:	428a      	cmp	r2, r1
 800494a:	d011      	beq.n	8004970 <cfb_print+0x150>
	b = (b & 0xf0) >> 4 | (b & 0x0f) << 4;
 800494c:	011a      	lsls	r2, r3, #4
 800494e:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
	b = (b & 0xcc) >> 2 | (b & 0x33) << 2;
 8004952:	f3c2 0385 	ubfx	r3, r2, #2, #6
 8004956:	0092      	lsls	r2, r2, #2
 8004958:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800495c:	f002 02cc 	and.w	r2, r2, #204	; 0xcc
	b = (b & 0xaa) >> 1 | (b & 0x55) << 1;
 8004960:	431a      	orrs	r2, r3
 8004962:	1053      	asrs	r3, r2, #1
 8004964:	0052      	lsls	r2, r2, #1
 8004966:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800496a:	f002 02aa 	and.w	r2, r2, #170	; 0xaa
 800496e:	4313      	orrs	r3, r2
			fb->buf[fb_y + x + g_x] = byte;
 8004970:	6822      	ldr	r2, [r4, #0]
 8004972:	f802 300b 	strb.w	r3, [r2, fp]
		for (size_t g_y = 0; g_y < fptr->height / 8U; g_y++) {
 8004976:	f10a 0a01 	add.w	sl, sl, #1
 800497a:	79ab      	ldrb	r3, [r5, #6]
 800497c:	ebba 0fd3 	cmp.w	sl, r3, lsr #3
 8004980:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8004984:	d3cc      	bcc.n	8004920 <cfb_print+0x100>
	for (size_t g_x = 0; g_x < fptr->width; g_x++) {
 8004986:	f109 0901 	add.w	r9, r9, #1
 800498a:	e7c2      	b.n	8004912 <cfb_print+0xf2>
	} else if (fptr->caps & CFB_FONT_MONO_HPACKED) {
 800498c:	f013 0302 	ands.w	r3, r3, #2
 8004990:	d006      	beq.n	80049a0 <cfb_print+0x180>
		return glyph_ptr[y * (fptr->width) + x];
 8004992:	796b      	ldrb	r3, [r5, #5]
 8004994:	9a01      	ldr	r2, [sp, #4]
 8004996:	fb0a 2303 	mla	r3, sl, r3, r2
 800499a:	f813 3009 	ldrb.w	r3, [r3, r9]
 800499e:	e7d1      	b.n	8004944 <cfb_print+0x124>
	LOG_WRN("Unknown font type");
 80049a0:	4a0b      	ldr	r2, [pc, #44]	; (80049d0 <cfb_print+0x1b0>)
 80049a2:	920d      	str	r2, [sp, #52]	; 0x34
 80049a4:	2202      	movs	r2, #2
 80049a6:	920c      	str	r2, [sp, #48]	; 0x30
 80049a8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 80049ac:	aa0c      	add	r2, sp, #48	; 0x30
 80049ae:	9307      	str	r3, [sp, #28]
 80049b0:	f7ff fc4e 	bl	8004250 <z_impl_z_log_msg_static_create>
 80049b4:	4804      	ldr	r0, [pc, #16]	; (80049c8 <cfb_print+0x1a8>)
	return 0;
 80049b6:	9b07      	ldr	r3, [sp, #28]
 80049b8:	e7c4      	b.n	8004944 <cfb_print+0x124>
		return -ENODEV;
 80049ba:	f06f 0012 	mvn.w	r0, #18
 80049be:	e754      	b.n	800486a <cfb_print+0x4a>
 80049c0:	20000b40 	.word	0x20000b40
 80049c4:	08012bb9 	.word	0x08012bb9
 80049c8:	0800db44 	.word	0x0800db44
 80049cc:	08012bdb 	.word	0x08012bdb
 80049d0:	08012bc9 	.word	0x08012bc9

080049d4 <cfb_framebuffer_clear>:

	return 0;
}

int cfb_framebuffer_clear(const struct device *dev, bool clear_display)
{
 80049d4:	b508      	push	{r3, lr}
	const struct char_framebuffer *fb = &char_fb;
	struct display_buffer_descriptor desc;

	if (!fb || !fb->buf) {
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <cfb_framebuffer_clear+0x1c>)
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	b128      	cbz	r0, 80049e8 <cfb_framebuffer_clear+0x14>
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	2100      	movs	r1, #0
 80049e0:	f008 f974 	bl	800cccc <memset>
	desc.width = fb->x_res;
	desc.height = fb->y_res;
	desc.pitch = fb->x_res;
	memset(fb->buf, 0, fb->size);

	return 0;
 80049e4:	2000      	movs	r0, #0
}
 80049e6:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80049e8:	f06f 0012 	mvn.w	r0, #18
 80049ec:	e7fb      	b.n	80049e6 <cfb_framebuffer_clear+0x12>
 80049ee:	bf00      	nop
 80049f0:	20000b40 	.word	0x20000b40

080049f4 <cfb_framebuffer_finalize>:

	return 0;
}

int cfb_framebuffer_finalize(const struct device *dev)
{
 80049f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct display_driver_api *api = dev->api;
	const struct char_framebuffer *fb = &char_fb;
	struct display_buffer_descriptor desc;

	if (!fb || !fb->buf) {
 80049f6:	4a17      	ldr	r2, [pc, #92]	; (8004a54 <cfb_framebuffer_finalize+0x60>)
	const struct display_driver_api *api = dev->api;
 80049f8:	6885      	ldr	r5, [r0, #8]
	if (!fb || !fb->buf) {
 80049fa:	6814      	ldr	r4, [r2, #0]
{
 80049fc:	b087      	sub	sp, #28
	if (!fb || !fb->buf) {
 80049fe:	b334      	cbz	r4, 8004a4e <cfb_framebuffer_finalize+0x5a>
	desc.buf_size = fb->size;
	desc.width = fb->x_res;
	desc.height = fb->y_res;
	desc.pitch = fb->x_res;

	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
 8004a00:	7b11      	ldrb	r1, [r2, #12]
 8004a02:	7d96      	ldrb	r6, [r2, #22]
	desc.buf_size = fb->size;
 8004a04:	6853      	ldr	r3, [r2, #4]
	desc.height = fb->y_res;
 8004a06:	8a17      	ldrh	r7, [r2, #16]
	desc.buf_size = fb->size;
 8004a08:	9303      	str	r3, [sp, #12]
	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
 8004a0a:	f081 0104 	eor.w	r1, r1, #4
	desc.width = fb->x_res;
 8004a0e:	89d3      	ldrh	r3, [r2, #14]
 8004a10:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
 8004a14:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8004a18:	f086 0101 	eor.w	r1, r6, #1
 8004a1c:	428a      	cmp	r2, r1
	desc.height = fb->y_res;
 8004a1e:	f8ad 7012 	strh.w	r7, [sp, #18]
	desc.pitch = fb->x_res;
 8004a22:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
 8004a26:	d107      	bne.n	8004a38 <cfb_framebuffer_finalize+0x44>
		cfb_invert(fb);
	}

	return api->write(dev, 0, 0, &desc, fb->buf);
 8004a28:	9400      	str	r4, [sp, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	68ac      	ldr	r4, [r5, #8]
 8004a2e:	ab03      	add	r3, sp, #12
 8004a30:	4611      	mov	r1, r2
 8004a32:	47a0      	blx	r4
}
 8004a34:	b007      	add	sp, #28
 8004a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < fb->x_res * fb->y_res / 8U; i++) {
 8004a38:	437b      	muls	r3, r7
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	eb04 03d3 	add.w	r3, r4, r3, lsr #3
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d0f1      	beq.n	8004a28 <cfb_framebuffer_finalize+0x34>
		fb->buf[i] = ~fb->buf[i];
 8004a44:	7811      	ldrb	r1, [r2, #0]
 8004a46:	43c9      	mvns	r1, r1
 8004a48:	f802 1b01 	strb.w	r1, [r2], #1
	for (size_t i = 0; i < fb->x_res * fb->y_res / 8U; i++) {
 8004a4c:	e7f8      	b.n	8004a40 <cfb_framebuffer_finalize+0x4c>
		return -ENODEV;
 8004a4e:	f06f 0012 	mvn.w	r0, #18
 8004a52:	e7ef      	b.n	8004a34 <cfb_framebuffer_finalize+0x40>
 8004a54:	20000b40 	.word	0x20000b40

08004a58 <cfb_framebuffer_set_font>:

int cfb_framebuffer_set_font(const struct device *dev, uint8_t idx)
{
	struct char_framebuffer *fb = &char_fb;

	if (idx >= fb->numof_fonts) {
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <cfb_framebuffer_set_font+0x14>)
 8004a5a:	7cda      	ldrb	r2, [r3, #19]
 8004a5c:	428a      	cmp	r2, r1
		return -EINVAL;
	}

	fb->font_idx = idx;

	return 0;
 8004a5e:	bf86      	itte	hi
 8004a60:	2000      	movhi	r0, #0
	fb->font_idx = idx;
 8004a62:	7519      	strbhi	r1, [r3, #20]
		return -EINVAL;
 8004a64:	f06f 0015 	mvnls.w	r0, #21
}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	20000b40 	.word	0x20000b40

08004a70 <cfb_framebuffer_init>:

	return fb->numof_fonts;
}

int cfb_framebuffer_init(const struct device *dev)
{
 8004a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a72:	b085      	sub	sp, #20
	const struct display_driver_api *api = dev->api;
	struct char_framebuffer *fb = &char_fb;
	struct display_capabilities cfg;

	api->get_capabilities(dev, &cfg);
 8004a74:	6883      	ldr	r3, [r0, #8]

	fb->numof_fonts = __font_entry_end - __font_entry_start;
 8004a76:	4d22      	ldr	r5, [pc, #136]	; (8004b00 <cfb_framebuffer_init+0x90>)
	api->get_capabilities(dev, &cfg);
 8004a78:	69db      	ldr	r3, [r3, #28]
	fb->numof_fonts = __font_entry_end - __font_entry_start;
 8004a7a:	4c22      	ldr	r4, [pc, #136]	; (8004b04 <cfb_framebuffer_init+0x94>)
{
 8004a7c:	af00      	add	r7, sp, #0
	api->get_capabilities(dev, &cfg);
 8004a7e:	4639      	mov	r1, r7
 8004a80:	4798      	blx	r3
	fb->numof_fonts = __font_entry_end - __font_entry_start;
 8004a82:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <cfb_framebuffer_init+0x98>)
 8004a84:	4a21      	ldr	r2, [pc, #132]	; (8004b0c <cfb_framebuffer_init+0x9c>)
 8004a86:	1b5b      	subs	r3, r3, r5
 8004a88:	109b      	asrs	r3, r3, #2
 8004a8a:	4353      	muls	r3, r2
	LOG_DBG("number of fonts %d", fb->numof_fonts);
 8004a8c:	466e      	mov	r6, sp
 8004a8e:	b088      	sub	sp, #32
	fb->numof_fonts = __font_entry_end - __font_entry_start;
 8004a90:	74e3      	strb	r3, [r4, #19]
	LOG_DBG("number of fonts %d", fb->numof_fonts);
 8004a92:	466a      	mov	r2, sp
 8004a94:	491e      	ldr	r1, [pc, #120]	; (8004b10 <cfb_framebuffer_init+0xa0>)
 8004a96:	6151      	str	r1, [r2, #20]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	61d3      	str	r3, [r2, #28]
 8004a9c:	491d      	ldr	r1, [pc, #116]	; (8004b14 <cfb_framebuffer_init+0xa4>)
 8004a9e:	6191      	str	r1, [r2, #24]
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f842 3f10 	str.w	r3, [r2, #16]!
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	481b      	ldr	r0, [pc, #108]	; (8004b18 <cfb_framebuffer_init+0xa8>)
 8004aaa:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8004aae:	f7ff fbcf 	bl	8004250 <z_impl_z_log_msg_static_create>
	if (!fb->numof_fonts) {
 8004ab2:	7ce3      	ldrb	r3, [r4, #19]
 8004ab4:	46b5      	mov	sp, r6
 8004ab6:	b1eb      	cbz	r3, 8004af4 <cfb_framebuffer_init+0x84>
		return -ENODEV;
	}

	fb->x_res = cfg.x_resolution;
 8004ab8:	8838      	ldrh	r0, [r7, #0]
	fb->y_res = cfg.y_resolution;
 8004aba:	887b      	ldrh	r3, [r7, #2]
	fb->x_res = cfg.x_resolution;
 8004abc:	81e0      	strh	r0, [r4, #14]
	fb->ppt = 8U;
 8004abe:	2208      	movs	r2, #8
	fb->pixel_format = cfg.current_pixel_format;
	fb->screen_info = cfg.screen_info;
	fb->buf = NULL;
 8004ac0:	2600      	movs	r6, #0
	fb->ppt = 8U;
 8004ac2:	74a2      	strb	r2, [r4, #18]
	fb->inverted = false;

	fb->fonts = __font_entry_start;
	fb->font_idx = 0U;

	fb->size = fb->x_res * fb->y_res / fb->ppt;
 8004ac4:	4358      	muls	r0, r3
	fb->pixel_format = cfg.current_pixel_format;
 8004ac6:	7b3a      	ldrb	r2, [r7, #12]
 8004ac8:	7322      	strb	r2, [r4, #12]
	fb->size = fb->x_res * fb->y_res / fb->ppt;
 8004aca:	10c0      	asrs	r0, r0, #3
	fb->screen_info = cfg.screen_info;
 8004acc:	68ba      	ldr	r2, [r7, #8]
	fb->font_idx = 0U;
 8004ace:	82a6      	strh	r6, [r4, #20]
	fb->y_res = cfg.y_resolution;
 8004ad0:	8223      	strh	r3, [r4, #16]
	fb->screen_info = cfg.screen_info;
 8004ad2:	7362      	strb	r2, [r4, #13]
	fb->buf = NULL;
 8004ad4:	6026      	str	r6, [r4, #0]
	fb->inverted = false;
 8004ad6:	75a6      	strb	r6, [r4, #22]
	fb->fonts = __font_entry_start;
 8004ad8:	60a5      	str	r5, [r4, #8]
	fb->size = fb->x_res * fb->y_res / fb->ppt;
 8004ada:	6060      	str	r0, [r4, #4]
	fb->buf = k_malloc(fb->size);
 8004adc:	f008 f8dc 	bl	800cc98 <k_malloc>
 8004ae0:	6020      	str	r0, [r4, #0]
	if (!fb->buf) {
 8004ae2:	b150      	cbz	r0, 8004afa <cfb_framebuffer_init+0x8a>
 8004ae4:	6862      	ldr	r2, [r4, #4]
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	f008 f8f0 	bl	800cccc <memset>
		return -ENOMEM;
	}

	memset(fb->buf, 0, fb->size);

	return 0;
 8004aec:	4630      	mov	r0, r6
}
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENODEV;
 8004af4:	f06f 0012 	mvn.w	r0, #18
 8004af8:	e7f9      	b.n	8004aee <cfb_framebuffer_init+0x7e>
		return -ENOMEM;
 8004afa:	f06f 000b 	mvn.w	r0, #11
 8004afe:	e7f6      	b.n	8004aee <cfb_framebuffer_init+0x7e>
 8004b00:	0800dbac 	.word	0x0800dbac
 8004b04:	20000b40 	.word	0x20000b40
 8004b08:	0800dbc4 	.word	0x0800dbc4
 8004b0c:	aaaaaaab 	.word	0xaaaaaaab
 8004b10:	08012c01 	.word	0x08012c01
 8004b14:	08012c18 	.word	0x08012c18
 8004b18:	0800db44 	.word	0x0800db44

08004b1c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8004b1c:	4901      	ldr	r1, [pc, #4]	; (8004b24 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8004b1e:	2210      	movs	r2, #16
	str	r2, [r1]
 8004b20:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8004b22:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8004b24:	e000ed10 	.word	0xe000ed10

08004b28 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8004b28:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8004b2a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8004b2c:	f380 8811 	msr	BASEPRI, r0
	isb
 8004b30:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8004b34:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8004b38:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8004b3a:	b662      	cpsie	i
	isb
 8004b3c:	f3bf 8f6f 	isb	sy

	bx	lr
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop

08004b44 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8004b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b48:	4681      	mov	r9, r0
 8004b4a:	af00      	add	r7, sp, #0

	if (esf != NULL) {
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	2900      	cmp	r1, #0
 8004b50:	d04c      	beq.n	8004bec <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8004b52:	466e      	mov	r6, sp
 8004b54:	b08a      	sub	sp, #40	; 0x28
 8004b56:	e9d1 1200 	ldrd	r1, r2, [r1]
 8004b5a:	68a3      	ldr	r3, [r4, #8]
 8004b5c:	466d      	mov	r5, sp
 8004b5e:	4827      	ldr	r0, [pc, #156]	; (8004bfc <z_arm_fatal_error+0xb8>)
 8004b60:	46a8      	mov	r8, r5
 8004b62:	f04f 0a05 	mov.w	sl, #5
 8004b66:	e9c5 0105 	strd	r0, r1, [r5, #20]
 8004b6a:	e9c5 2307 	strd	r2, r3, [r5, #28]
 8004b6e:	f848 af10 	str.w	sl, [r8, #16]!
 8004b72:	4823      	ldr	r0, [pc, #140]	; (8004c00 <z_arm_fatal_error+0xbc>)
 8004b74:	4642      	mov	r2, r8
 8004b76:	2300      	movs	r3, #0
 8004b78:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8004b7c:	f7ff fb68 	bl	8004250 <z_impl_z_log_msg_static_create>
 8004b80:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8004b82:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8004b86:	6963      	ldr	r3, [r4, #20]
 8004b88:	46ad      	mov	sp, r5
 8004b8a:	481e      	ldr	r0, [pc, #120]	; (8004c04 <z_arm_fatal_error+0xc0>)
 8004b8c:	f8c5 a010 	str.w	sl, [r5, #16]
 8004b90:	e9c5 0105 	strd	r0, r1, [r5, #20]
 8004b94:	e9c5 2307 	strd	r2, r3, [r5, #28]
 8004b98:	4819      	ldr	r0, [pc, #100]	; (8004c00 <z_arm_fatal_error+0xbc>)
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8004ba2:	f7ff fb55 	bl	8004250 <z_impl_z_log_msg_static_create>
 8004ba6:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8004ba8:	b088      	sub	sp, #32
 8004baa:	69e3      	ldr	r3, [r4, #28]
 8004bac:	466d      	mov	r5, sp
 8004bae:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <z_arm_fatal_error+0xc4>)
 8004bb0:	46a8      	mov	r8, r5
 8004bb2:	f04f 0a03 	mov.w	sl, #3
 8004bb6:	e9c5 2305 	strd	r2, r3, [r5, #20]
 8004bba:	f848 af10 	str.w	sl, [r8, #16]!
 8004bbe:	4810      	ldr	r0, [pc, #64]	; (8004c00 <z_arm_fatal_error+0xbc>)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4642      	mov	r2, r8
 8004bc4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004bc8:	f7ff fb42 	bl	8004250 <z_impl_z_log_msg_static_create>
 8004bcc:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8004bce:	69a3      	ldr	r3, [r4, #24]
 8004bd0:	46ad      	mov	sp, r5
 8004bd2:	4a0e      	ldr	r2, [pc, #56]	; (8004c0c <z_arm_fatal_error+0xc8>)
 8004bd4:	f8c5 a010 	str.w	sl, [r5, #16]
 8004bd8:	e9c5 2305 	strd	r2, r3, [r5, #20]
 8004bdc:	4808      	ldr	r0, [pc, #32]	; (8004c00 <z_arm_fatal_error+0xbc>)
 8004bde:	2300      	movs	r3, #0
 8004be0:	4642      	mov	r2, r8
 8004be2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004be6:	f7ff fb33 	bl	8004250 <z_impl_z_log_msg_static_create>
 8004bea:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8004bec:	4621      	mov	r1, r4
 8004bee:	4648      	mov	r0, r9
 8004bf0:	f002 fd4a 	bl	8007688 <z_fatal_error>
}
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bfa:	bf00      	nop
 8004bfc:	08012c31 	.word	0x08012c31
 8004c00:	0800db7c 	.word	0x0800db7c
 8004c04:	08012c60 	.word	0x08012c60
 8004c08:	08012c8f 	.word	0x08012c8f
 8004c0c:	08012c9e 	.word	0x08012c9e

08004c10 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8004c10:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004c12:	2800      	cmp	r0, #0
 8004c14:	db07      	blt.n	8004c26 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c16:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <arch_irq_enable+0x18>)
 8004c18:	0941      	lsrs	r1, r0, #5
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f000 001f 	and.w	r0, r0, #31
 8004c20:	4083      	lsls	r3, r0
 8004c22:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8004c26:	4770      	bx	lr
 8004c28:	e000e100 	.word	0xe000e100

08004c2c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
 8004c2c:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8004c2e:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
 8004c30:	2b0f      	cmp	r3, #15
{
 8004c32:	4604      	mov	r4, r0
 8004c34:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
 8004c36:	d90f      	bls.n	8004c58 <z_arm_irq_priority_set+0x2c>
 8004c38:	4a11      	ldr	r2, [pc, #68]	; (8004c80 <z_arm_irq_priority_set+0x54>)
 8004c3a:	4912      	ldr	r1, [pc, #72]	; (8004c84 <z_arm_irq_priority_set+0x58>)
 8004c3c:	4812      	ldr	r0, [pc, #72]	; (8004c88 <z_arm_irq_priority_set+0x5c>)
 8004c3e:	235b      	movs	r3, #91	; 0x5b
 8004c40:	f007 f89b 	bl	800bd7a <assert_print>
 8004c44:	4811      	ldr	r0, [pc, #68]	; (8004c8c <z_arm_irq_priority_set+0x60>)
 8004c46:	4629      	mov	r1, r5
 8004c48:	230f      	movs	r3, #15
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	f007 f895 	bl	800bd7a <assert_print>
 8004c50:	480b      	ldr	r0, [pc, #44]	; (8004c80 <z_arm_irq_priority_set+0x54>)
 8004c52:	215b      	movs	r1, #91	; 0x5b
 8004c54:	f007 f88a 	bl	800bd6c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8004c58:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004c5a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5c:	bfac      	ite	ge
 8004c5e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c62:	4a0b      	ldrlt	r2, [pc, #44]	; (8004c90 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c64:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c68:	bfb8      	it	lt
 8004c6a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	bfaa      	itet	ge
 8004c72:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c76:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c78:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
 8004c7c:	bd38      	pop	{r3, r4, r5, pc}
 8004c7e:	bf00      	nop
 8004c80:	08012ccc 	.word	0x08012ccc
 8004c84:	08012d02 	.word	0x08012d02
 8004c88:	0800e198 	.word	0x0800e198
 8004c8c:	08012d1d 	.word	0x08012d1d
 8004c90:	e000ed14 	.word	0xe000ed14

08004c94 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8004c94:	bf30      	wfi
    b z_SysNmiOnReset
 8004c96:	f7ff bffd 	b.w	8004c94 <z_SysNmiOnReset>
 8004c9a:	bf00      	nop

08004c9c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8004c9c:	4a0f      	ldr	r2, [pc, #60]	; (8004cdc <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8004c9e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <z_arm_prep_c+0x44>)
 8004ca2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004ca6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004ca8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004cac:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8004cb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cb4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8004cbc:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8004cc0:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8004cc4:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8004cc8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8004ccc:	f002 fd8a 	bl	80077e4 <z_bss_zero>
	z_data_copy();
 8004cd0:	f004 fd50 	bl	8009774 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8004cd4:	f000 fc08 	bl	80054e8 <z_arm_interrupt_init>
	z_cstart();
 8004cd8:	f002 fdc8 	bl	800786c <z_cstart>
 8004cdc:	08000000 	.word	0x08000000
 8004ce0:	e000ed00 	.word	0xe000ed00

08004ce4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8004ce4:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8004ce6:	490a      	ldr	r1, [pc, #40]	; (8004d10 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8004ce8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8004cea:	6809      	ldr	r1, [r1, #0]
 8004cec:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004cee:	4909      	ldr	r1, [pc, #36]	; (8004d14 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8004cf0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004cf2:	684b      	ldr	r3, [r1, #4]
 8004cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	604b      	str	r3, [r1, #4]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8004d04:	6893      	ldr	r3, [r2, #8]
}
 8004d06:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000c9c 	.word	0x20000c9c
 8004d10:	0800e06c 	.word	0x0800e06c
 8004d14:	e000ed00 	.word	0xe000ed00

08004d18 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8004d18:	4912      	ldr	r1, [pc, #72]	; (8004d64 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8004d1a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8004d1c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8004d20:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8004d22:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8004d26:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8004d2a:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8004d2c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8004d30:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8004d34:	4f0c      	ldr	r7, [pc, #48]	; (8004d68 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8004d36:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8004d3a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8004d3c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8004d3e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8004d40:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8004d42:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8004d44:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8004d46:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8004d4a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8004d4c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8004d4e:	f000 fc0f 	bl	8005570 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8004d52:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8004d56:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8004d5a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8004d5e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8004d62:	4770      	bx	lr
    ldr r1, =_kernel
 8004d64:	20000c9c 	.word	0x20000c9c
    ldr v4, =_SCS_ICSR
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8004d6c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8004d70:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8004d72:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8004d76:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8004d7a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8004d7c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8004d80:	2902      	cmp	r1, #2
    beq _oops
 8004d82:	d0ff      	beq.n	8004d84 <_oops>

08004d84 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8004d84:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8004d86:	f007 f93e 	bl	800c006 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8004d8a:	bd01      	pop	{r0, pc}

08004d8c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8004d8c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8004d90:	9b00      	ldr	r3, [sp, #0]
 8004d92:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8004d96:	490a      	ldr	r1, [pc, #40]	; (8004dc0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8004d98:	9b01      	ldr	r3, [sp, #4]
 8004d9a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8004d9e:	9b02      	ldr	r3, [sp, #8]
 8004da0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8004da4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8004da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dac:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8004db0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8004db4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8004db6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8004db8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8004dba:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	0800bb47 	.word	0x0800bb47

08004dc4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8004dc4:	4a09      	ldr	r2, [pc, #36]	; (8004dec <z_check_thread_stack_fail+0x28>)
{
 8004dc6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8004dc8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8004dca:	b170      	cbz	r0, 8004dea <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8004dcc:	f113 0f16 	cmn.w	r3, #22
 8004dd0:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8004dd2:	d005      	beq.n	8004de0 <z_check_thread_stack_fail+0x1c>
 8004dd4:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d805      	bhi.n	8004de8 <z_check_thread_stack_fail+0x24>
 8004ddc:	4283      	cmp	r3, r0
 8004dde:	d203      	bcs.n	8004de8 <z_check_thread_stack_fail+0x24>
		return 0;
 8004de0:	4281      	cmp	r1, r0
 8004de2:	bf28      	it	cs
 8004de4:	2000      	movcs	r0, #0
 8004de6:	4770      	bx	lr
 8004de8:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 8004dea:	4770      	bx	lr
 8004dec:	20000c9c 	.word	0x20000c9c

08004df0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8004df0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <arch_switch_to_main_thread+0x28>)
 8004df4:	6098      	str	r0, [r3, #8]
{
 8004df6:	460d      	mov	r5, r1
 8004df8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8004dfa:	f000 fbb9 	bl	8005570 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f385 8809 	msr	PSP, r5
 8004e04:	2100      	movs	r1, #0
 8004e06:	b663      	cpsie	if
 8004e08:	f381 8811 	msr	BASEPRI, r1
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	2200      	movs	r2, #0
 8004e12:	2300      	movs	r3, #0
 8004e14:	f006 fe97 	bl	800bb46 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8004e18:	20000c9c 	.word	0x20000c9c

08004e1c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8004e1c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8004e1e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8004e22:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8004e26:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8004e2a:	4904      	ldr	r1, [pc, #16]	; (8004e3c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8004e2c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8004e2e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8004e30:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8004e32:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8004e36:	4902      	ldr	r1, [pc, #8]	; (8004e40 <_isr_wrapper+0x24>)
	bx r1
 8004e38:	4708      	bx	r1
 8004e3a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8004e3c:	0800d818 	.word	0x0800d818
	ldr r1, =z_arm_int_exit
 8004e40:	08004e45 	.word	0x08004e45

08004e44 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8004e46:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8004e48:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8004e4a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8004e4c:	d003      	beq.n	8004e56 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8004e4e:	4903      	ldr	r1, [pc, #12]	; (8004e5c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8004e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8004e54:	600a      	str	r2, [r1, #0]

08004e56 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8004e56:	4770      	bx	lr
	ldr r3, =_kernel
 8004e58:	20000c9c 	.word	0x20000c9c
	ldr r1, =_SCS_ICSR
 8004e5c:	e000ed04 	.word	0xe000ed04

08004e60 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8004e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e64:	b086      	sub	sp, #24
 8004e66:	4606      	mov	r6, r0
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
 8004e6c:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <bus_fault.constprop.0+0x108>)
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	2402      	movs	r4, #2
 8004e72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004e76:	483d      	ldr	r0, [pc, #244]	; (8004f6c <bus_fault.constprop.0+0x10c>)
 8004e78:	613c      	str	r4, [r7, #16]
 8004e7a:	f107 0210 	add.w	r2, r7, #16
 8004e7e:	f007 f8d1 	bl	800c024 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8004e82:	4b3b      	ldr	r3, [pc, #236]	; (8004f70 <bus_fault.constprop.0+0x110>)
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	04d9      	lsls	r1, r3, #19
 8004e88:	d509      	bpl.n	8004e9e <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
 8004e8a:	4b3a      	ldr	r3, [pc, #232]	; (8004f74 <bus_fault.constprop.0+0x114>)
 8004e8c:	4837      	ldr	r0, [pc, #220]	; (8004f6c <bus_fault.constprop.0+0x10c>)
 8004e8e:	e9c7 4304 	strd	r4, r3, [r7, #16]
 8004e92:	f107 0210 	add.w	r2, r7, #16
 8004e96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004e9a:	f007 f8c3 	bl	800c024 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8004e9e:	4b34      	ldr	r3, [pc, #208]	; (8004f70 <bus_fault.constprop.0+0x110>)
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	051a      	lsls	r2, r3, #20
 8004ea4:	d50a      	bpl.n	8004ebc <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
 8004ea6:	4b34      	ldr	r3, [pc, #208]	; (8004f78 <bus_fault.constprop.0+0x118>)
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	2302      	movs	r3, #2
 8004eac:	482f      	ldr	r0, [pc, #188]	; (8004f6c <bus_fault.constprop.0+0x10c>)
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	f107 0210 	add.w	r2, r7, #16
 8004eb4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004eb8:	f007 f8b4 	bl	800c024 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8004ebc:	4c2c      	ldr	r4, [pc, #176]	; (8004f70 <bus_fault.constprop.0+0x110>)
 8004ebe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ec0:	059b      	lsls	r3, r3, #22
 8004ec2:	d522      	bpl.n	8004f0a <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
 8004ec4:	46e8      	mov	r8, sp
 8004ec6:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <bus_fault.constprop.0+0x11c>)
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	2302      	movs	r3, #2
 8004ecc:	4827      	ldr	r0, [pc, #156]	; (8004f6c <bus_fault.constprop.0+0x10c>)
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	f107 0210 	add.w	r2, r7, #16
 8004ed4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ed8:	f007 f8a4 	bl	800c024 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8004edc:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8004ede:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ee0:	0410      	lsls	r0, r2, #16
 8004ee2:	d512      	bpl.n	8004f0a <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8004ee4:	b088      	sub	sp, #32
 8004ee6:	466a      	mov	r2, sp
 8004ee8:	4925      	ldr	r1, [pc, #148]	; (8004f80 <bus_fault.constprop.0+0x120>)
 8004eea:	4820      	ldr	r0, [pc, #128]	; (8004f6c <bus_fault.constprop.0+0x10c>)
 8004eec:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	f842 3f10 	str.w	r3, [r2, #16]!
 8004ef6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004efa:	f007 f893 	bl	800c024 <z_log_msg_static_create.constprop.0>
 8004efe:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
 8004f00:	b11e      	cbz	r6, 8004f0a <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8004f02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f08:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8004f0a:	4b19      	ldr	r3, [pc, #100]	; (8004f70 <bus_fault.constprop.0+0x110>)
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	0559      	lsls	r1, r3, #21
 8004f10:	d50a      	bpl.n	8004f28 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
 8004f12:	4b1c      	ldr	r3, [pc, #112]	; (8004f84 <bus_fault.constprop.0+0x124>)
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	2302      	movs	r3, #2
 8004f18:	4814      	ldr	r0, [pc, #80]	; (8004f6c <bus_fault.constprop.0+0x10c>)
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	f107 0210 	add.w	r2, r7, #16
 8004f20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004f24:	f007 f87e 	bl	800c024 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8004f28:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <bus_fault.constprop.0+0x110>)
 8004f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f2c:	05d2      	lsls	r2, r2, #23
 8004f2e:	d515      	bpl.n	8004f5c <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
 8004f30:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	2302      	movs	r3, #2
 8004f36:	480d      	ldr	r0, [pc, #52]	; (8004f6c <bus_fault.constprop.0+0x10c>)
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	f107 0210 	add.w	r2, r7, #16
 8004f3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004f42:	f007 f86f 	bl	800c024 <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004f46:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <bus_fault.constprop.0+0x110>)
 8004f48:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8004f4a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004f4c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
 8004f50:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004f52:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8004f54:	7028      	strb	r0, [r5, #0]
}
 8004f56:	46bd      	mov	sp, r7
 8004f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	049b      	lsls	r3, r3, #18
 8004f60:	d5f1      	bpl.n	8004f46 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8004f62:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <bus_fault.constprop.0+0x12c>)
 8004f64:	e7e5      	b.n	8004f32 <bus_fault.constprop.0+0xd2>
 8004f66:	bf00      	nop
 8004f68:	08012d5d 	.word	0x08012d5d
 8004f6c:	0800db7c 	.word	0x0800db7c
 8004f70:	e000ed00 	.word	0xe000ed00
 8004f74:	08012d73 	.word	0x08012d73
 8004f78:	08012d84 	.word	0x08012d84
 8004f7c:	08012d97 	.word	0x08012d97
 8004f80:	08012db0 	.word	0x08012db0
 8004f84:	08012dc5 	.word	0x08012dc5
 8004f88:	08012de0 	.word	0x08012de0
 8004f8c:	08012df8 	.word	0x08012df8

08004f90 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 8004f90:	b510      	push	{r4, lr}
 8004f92:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8004f94:	4b33      	ldr	r3, [pc, #204]	; (8005064 <usage_fault.constprop.0+0xd4>)
 8004f96:	4834      	ldr	r0, [pc, #208]	; (8005068 <usage_fault.constprop.0+0xd8>)
 8004f98:	9305      	str	r3, [sp, #20]
 8004f9a:	2402      	movs	r4, #2
 8004f9c:	aa04      	add	r2, sp, #16
 8004f9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004fa2:	9404      	str	r4, [sp, #16]
 8004fa4:	f007 f83e 	bl	800c024 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8004fa8:	4b30      	ldr	r3, [pc, #192]	; (800506c <usage_fault.constprop.0+0xdc>)
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	019b      	lsls	r3, r3, #6
 8004fae:	d508      	bpl.n	8004fc2 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
 8004fb0:	4b2f      	ldr	r3, [pc, #188]	; (8005070 <usage_fault.constprop.0+0xe0>)
 8004fb2:	482d      	ldr	r0, [pc, #180]	; (8005068 <usage_fault.constprop.0+0xd8>)
 8004fb4:	aa04      	add	r2, sp, #16
 8004fb6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004fba:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004fbe:	f007 f831 	bl	800c024 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8004fc2:	4b2a      	ldr	r3, [pc, #168]	; (800506c <usage_fault.constprop.0+0xdc>)
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	01dc      	lsls	r4, r3, #7
 8004fc8:	d509      	bpl.n	8004fde <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
 8004fca:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <usage_fault.constprop.0+0xe4>)
 8004fcc:	9305      	str	r3, [sp, #20]
 8004fce:	4826      	ldr	r0, [pc, #152]	; (8005068 <usage_fault.constprop.0+0xd8>)
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	aa04      	add	r2, sp, #16
 8004fd4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004fd8:	9304      	str	r3, [sp, #16]
 8004fda:	f007 f823 	bl	800c024 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8004fde:	4b23      	ldr	r3, [pc, #140]	; (800506c <usage_fault.constprop.0+0xdc>)
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	0318      	lsls	r0, r3, #12
 8004fe4:	d509      	bpl.n	8004ffa <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <usage_fault.constprop.0+0xe8>)
 8004fe8:	9305      	str	r3, [sp, #20]
 8004fea:	481f      	ldr	r0, [pc, #124]	; (8005068 <usage_fault.constprop.0+0xd8>)
 8004fec:	2302      	movs	r3, #2
 8004fee:	aa04      	add	r2, sp, #16
 8004ff0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ff4:	9304      	str	r3, [sp, #16]
 8004ff6:	f007 f815 	bl	800c024 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8004ffa:	4b1c      	ldr	r3, [pc, #112]	; (800506c <usage_fault.constprop.0+0xdc>)
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	0359      	lsls	r1, r3, #13
 8005000:	d509      	bpl.n	8005016 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8005002:	4b1e      	ldr	r3, [pc, #120]	; (800507c <usage_fault.constprop.0+0xec>)
 8005004:	9305      	str	r3, [sp, #20]
 8005006:	4818      	ldr	r0, [pc, #96]	; (8005068 <usage_fault.constprop.0+0xd8>)
 8005008:	2302      	movs	r3, #2
 800500a:	aa04      	add	r2, sp, #16
 800500c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	f007 f807 	bl	800c024 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8005016:	4b15      	ldr	r3, [pc, #84]	; (800506c <usage_fault.constprop.0+0xdc>)
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	039a      	lsls	r2, r3, #14
 800501c:	d509      	bpl.n	8005032 <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 800501e:	4b18      	ldr	r3, [pc, #96]	; (8005080 <usage_fault.constprop.0+0xf0>)
 8005020:	9305      	str	r3, [sp, #20]
 8005022:	4811      	ldr	r0, [pc, #68]	; (8005068 <usage_fault.constprop.0+0xd8>)
 8005024:	2302      	movs	r3, #2
 8005026:	aa04      	add	r2, sp, #16
 8005028:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800502c:	9304      	str	r3, [sp, #16]
 800502e:	f006 fff9 	bl	800c024 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8005032:	4b0e      	ldr	r3, [pc, #56]	; (800506c <usage_fault.constprop.0+0xdc>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	03db      	lsls	r3, r3, #15
 8005038:	d509      	bpl.n	800504e <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 800503a:	4b12      	ldr	r3, [pc, #72]	; (8005084 <usage_fault.constprop.0+0xf4>)
 800503c:	9305      	str	r3, [sp, #20]
 800503e:	480a      	ldr	r0, [pc, #40]	; (8005068 <usage_fault.constprop.0+0xd8>)
 8005040:	2302      	movs	r3, #2
 8005042:	aa04      	add	r2, sp, #16
 8005044:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005048:	9304      	str	r3, [sp, #16]
 800504a:	f006 ffeb 	bl	800c024 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800504e:	4a07      	ldr	r2, [pc, #28]	; (800506c <usage_fault.constprop.0+0xdc>)
 8005050:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005052:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8005056:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
 800505a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800505c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800505e:	b006      	add	sp, #24
 8005060:	bd10      	pop	{r4, pc}
 8005062:	bf00      	nop
 8005064:	08012e27 	.word	0x08012e27
 8005068:	0800db7c 	.word	0x0800db7c
 800506c:	e000ed00 	.word	0xe000ed00
 8005070:	08012e3f 	.word	0x08012e3f
 8005074:	08012e52 	.word	0x08012e52
 8005078:	08012e6c 	.word	0x08012e6c
 800507c:	08012e8a 	.word	0x08012e8a
 8005080:	08012eaf 	.word	0x08012eaf
 8005084:	08012ec9 	.word	0x08012ec9

08005088 <mem_manage_fault>:
{
 8005088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800508c:	b086      	sub	sp, #24
 800508e:	4606      	mov	r6, r0
 8005090:	af00      	add	r7, sp, #0
 8005092:	4688      	mov	r8, r1
 8005094:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8005096:	4b5b      	ldr	r3, [pc, #364]	; (8005204 <mem_manage_fault+0x17c>)
 8005098:	485b      	ldr	r0, [pc, #364]	; (8005208 <mem_manage_fault+0x180>)
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	2502      	movs	r5, #2
 800509e:	613d      	str	r5, [r7, #16]
 80050a0:	f107 0210 	add.w	r2, r7, #16
 80050a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80050a8:	f006 ffbc 	bl	800c024 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80050ac:	4b57      	ldr	r3, [pc, #348]	; (800520c <mem_manage_fault+0x184>)
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	06d8      	lsls	r0, r3, #27
 80050b2:	d509      	bpl.n	80050c8 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
 80050b4:	4b56      	ldr	r3, [pc, #344]	; (8005210 <mem_manage_fault+0x188>)
 80050b6:	4854      	ldr	r0, [pc, #336]	; (8005208 <mem_manage_fault+0x180>)
 80050b8:	e9c7 5304 	strd	r5, r3, [r7, #16]
 80050bc:	f107 0210 	add.w	r2, r7, #16
 80050c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80050c4:	f006 ffae 	bl	800c024 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80050c8:	4b50      	ldr	r3, [pc, #320]	; (800520c <mem_manage_fault+0x184>)
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	0719      	lsls	r1, r3, #28
 80050ce:	d50a      	bpl.n	80050e6 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
 80050d0:	4b50      	ldr	r3, [pc, #320]	; (8005214 <mem_manage_fault+0x18c>)
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	2302      	movs	r3, #2
 80050d6:	484c      	ldr	r0, [pc, #304]	; (8005208 <mem_manage_fault+0x180>)
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	f107 0210 	add.w	r2, r7, #16
 80050de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80050e2:	f006 ff9f 	bl	800c024 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80050e6:	f8df a124 	ldr.w	sl, [pc, #292]	; 800520c <mem_manage_fault+0x184>
 80050ea:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 80050ee:	079a      	lsls	r2, r3, #30
 80050f0:	d448      	bmi.n	8005184 <mem_manage_fault+0xfc>
	uint32_t mmfar = -EINVAL;
 80050f2:	f06f 0515 	mvn.w	r5, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80050f6:	4b45      	ldr	r3, [pc, #276]	; (800520c <mem_manage_fault+0x184>)
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	07d8      	lsls	r0, r3, #31
 80050fc:	d50a      	bpl.n	8005114 <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
 80050fe:	4b46      	ldr	r3, [pc, #280]	; (8005218 <mem_manage_fault+0x190>)
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	2302      	movs	r3, #2
 8005104:	4840      	ldr	r0, [pc, #256]	; (8005208 <mem_manage_fault+0x180>)
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	f107 0210 	add.w	r2, r7, #16
 800510c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005110:	f006 ff88 	bl	800c024 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8005114:	4b3d      	ldr	r3, [pc, #244]	; (800520c <mem_manage_fault+0x184>)
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	0699      	lsls	r1, r3, #26
 800511a:	d50a      	bpl.n	8005132 <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
 800511c:	4b3f      	ldr	r3, [pc, #252]	; (800521c <mem_manage_fault+0x194>)
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	2302      	movs	r3, #2
 8005122:	4839      	ldr	r0, [pc, #228]	; (8005208 <mem_manage_fault+0x180>)
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	f107 0210 	add.w	r2, r7, #16
 800512a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800512e:	f006 ff79 	bl	800c024 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8005132:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800520c <mem_manage_fault+0x184>
 8005136:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800513a:	06da      	lsls	r2, r3, #27
 800513c:	d403      	bmi.n	8005146 <mem_manage_fault+0xbe>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 800513e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8005142:	079b      	lsls	r3, r3, #30
 8005144:	d55b      	bpl.n	80051fe <mem_manage_fault+0x176>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8005146:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800514a:	0518      	lsls	r0, r3, #20
 800514c:	d557      	bpl.n	80051fe <mem_manage_fault+0x176>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 800514e:	4631      	mov	r1, r6
 8005150:	4628      	mov	r0, r5
 8005152:	f7ff fe37 	bl	8004dc4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8005156:	2800      	cmp	r0, #0
 8005158:	d03e      	beq.n	80051d8 <mem_manage_fault+0x150>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800515a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 800515e:	2002      	movs	r0, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8005160:	4b2a      	ldr	r3, [pc, #168]	; (800520c <mem_manage_fault+0x184>)
 8005162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005164:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8005166:	bf42      	ittt	mi
 8005168:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
 800516a:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
 800516e:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8005170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005172:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8005176:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005178:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
 800517a:	2300      	movs	r3, #0
 800517c:	7023      	strb	r3, [r4, #0]
}
 800517e:	46bd      	mov	sp, r7
 8005180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
 8005184:	46e9      	mov	r9, sp
 8005186:	4b26      	ldr	r3, [pc, #152]	; (8005220 <mem_manage_fault+0x198>)
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	2302      	movs	r3, #2
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	481e      	ldr	r0, [pc, #120]	; (8005208 <mem_manage_fault+0x180>)
 8005190:	f107 0210 	add.w	r2, r7, #16
 8005194:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005198:	f006 ff44 	bl	800c024 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
 800519c:	f8da 5034 	ldr.w	r5, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80051a0:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 80051a4:	061b      	lsls	r3, r3, #24
 80051a6:	d5a4      	bpl.n	80050f2 <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 80051a8:	b088      	sub	sp, #32
 80051aa:	466a      	mov	r2, sp
 80051ac:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <mem_manage_fault+0x19c>)
 80051ae:	4816      	ldr	r0, [pc, #88]	; (8005208 <mem_manage_fault+0x180>)
 80051b0:	e9c2 3505 	strd	r3, r5, [r2, #20]
 80051b4:	2303      	movs	r3, #3
 80051b6:	f842 3f10 	str.w	r3, [r2, #16]!
 80051ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80051be:	f006 ff31 	bl	800c024 <z_log_msg_static_create.constprop.0>
 80051c2:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
 80051c4:	f1b8 0f00 	cmp.w	r8, #0
 80051c8:	d095      	beq.n	80050f6 <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80051ca:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 80051ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d2:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
 80051d6:	e78e      	b.n	80050f6 <mem_manage_fault+0x6e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
 80051d8:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80051dc:	06d9      	lsls	r1, r3, #27
 80051de:	d50e      	bpl.n	80051fe <mem_manage_fault+0x176>
 80051e0:	4911      	ldr	r1, [pc, #68]	; (8005228 <mem_manage_fault+0x1a0>)
 80051e2:	4a12      	ldr	r2, [pc, #72]	; (800522c <mem_manage_fault+0x1a4>)
 80051e4:	4812      	ldr	r0, [pc, #72]	; (8005230 <mem_manage_fault+0x1a8>)
 80051e6:	f240 1353 	movw	r3, #339	; 0x153
 80051ea:	f006 fdc6 	bl	800bd7a <assert_print>
 80051ee:	4811      	ldr	r0, [pc, #68]	; (8005234 <mem_manage_fault+0x1ac>)
 80051f0:	f006 fdc3 	bl	800bd7a <assert_print>
 80051f4:	480d      	ldr	r0, [pc, #52]	; (800522c <mem_manage_fault+0x1a4>)
 80051f6:	f240 1153 	movw	r1, #339	; 0x153
 80051fa:	f006 fdb7 	bl	800bd6c <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80051fe:	2000      	movs	r0, #0
 8005200:	e7ae      	b.n	8005160 <mem_manage_fault+0xd8>
 8005202:	bf00      	nop
 8005204:	08012ef4 	.word	0x08012ef4
 8005208:	0800db7c 	.word	0x0800db7c
 800520c:	e000ed00 	.word	0xe000ed00
 8005210:	08012f0a 	.word	0x08012f0a
 8005214:	08012d84 	.word	0x08012d84
 8005218:	08012f6b 	.word	0x08012f6b
 800521c:	08012df8 	.word	0x08012df8
 8005220:	08012f3d 	.word	0x08012f3d
 8005224:	08012f55 	.word	0x08012f55
 8005228:	08012fc4 	.word	0x08012fc4
 800522c:	08012f8a 	.word	0x08012f8a
 8005230:	0800e198 	.word	0x0800e198
 8005234:	0801300e 	.word	0x0801300e

08005238 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8005238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800523c:	4b8d      	ldr	r3, [pc, #564]	; (8005474 <z_arm_fault+0x23c>)
{
 800523e:	b08b      	sub	sp, #44	; 0x2c
 8005240:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8005242:	6858      	ldr	r0, [r3, #4]
{
 8005244:	af00      	add	r7, sp, #0
 8005246:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800524a:	2600      	movs	r6, #0
 800524c:	f386 8811 	msr	BASEPRI, r6
 8005250:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8005254:	f002 457f 	and.w	r5, r2, #4278190080	; 0xff000000
 8005258:	f1b5 4f7f 	cmp.w	r5, #4278190080	; 0xff000000
 800525c:	d10e      	bne.n	800527c <z_arm_fault+0x44>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800525e:	f002 050c 	and.w	r5, r2, #12
 8005262:	2d08      	cmp	r5, #8
 8005264:	d119      	bne.n	800529a <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8005266:	4b84      	ldr	r3, [pc, #528]	; (8005478 <z_arm_fault+0x240>)
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	2302      	movs	r3, #2
 800526c:	4883      	ldr	r0, [pc, #524]	; (800547c <z_arm_fault+0x244>)
 800526e:	61bb      	str	r3, [r7, #24]
 8005270:	f107 0218 	add.w	r2, r7, #24
 8005274:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005278:	f006 fed4 	bl	800c024 <z_log_msg_static_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
 800527c:	4980      	ldr	r1, [pc, #512]	; (8005480 <z_arm_fault+0x248>)
 800527e:	4a81      	ldr	r2, [pc, #516]	; (8005484 <z_arm_fault+0x24c>)
 8005280:	4881      	ldr	r0, [pc, #516]	; (8005488 <z_arm_fault+0x250>)
 8005282:	f240 431d 	movw	r3, #1053	; 0x41d
 8005286:	f006 fd78 	bl	800bd7a <assert_print>
 800528a:	4880      	ldr	r0, [pc, #512]	; (800548c <z_arm_fault+0x254>)
 800528c:	f006 fd75 	bl	800bd7a <assert_print>
 8005290:	f240 411d 	movw	r1, #1053	; 0x41d
			__ASSERT(0,
 8005294:	487b      	ldr	r0, [pc, #492]	; (8005484 <z_arm_fault+0x24c>)
 8005296:	f006 fd69 	bl	800bd6c <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 800529a:	0715      	lsls	r5, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 800529c:	bf4c      	ite	mi
 800529e:	460c      	movmi	r4, r1
			*nested_exc = true;
 80052a0:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
 80052a2:	2c00      	cmp	r4, #0
 80052a4:	d0ea      	beq.n	800527c <z_arm_fault+0x44>
	*recoverable = false;
 80052a6:	2200      	movs	r2, #0
 80052a8:	71fa      	strb	r2, [r7, #7]
	switch (fault) {
 80052aa:	1eda      	subs	r2, r3, #3
 80052ac:	2a09      	cmp	r2, #9
 80052ae:	f200 80c1 	bhi.w	8005434 <z_arm_fault+0x1fc>
 80052b2:	e8df f002 	tbb	[pc, r2]
 80052b6:	b405      	.short	0xb405
 80052b8:	bfbf97b7 	.word	0xbfbf97b7
 80052bc:	babfbfbf 	.word	0xbabfbfbf
	PR_FAULT_INFO("***** HARD FAULT *****");
 80052c0:	46e9      	mov	r9, sp
 80052c2:	4b73      	ldr	r3, [pc, #460]	; (8005490 <z_arm_fault+0x258>)
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	f04f 0802 	mov.w	r8, #2
 80052ca:	f107 0218 	add.w	r2, r7, #24
 80052ce:	486b      	ldr	r0, [pc, #428]	; (800547c <z_arm_fault+0x244>)
 80052d0:	f8c7 8018 	str.w	r8, [r7, #24]
 80052d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80052d8:	f006 fea4 	bl	800c024 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
 80052dc:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80052de:	4d65      	ldr	r5, [pc, #404]	; (8005474 <z_arm_fault+0x23c>)
	*recoverable = false;
 80052e0:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80052e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80052e4:	079a      	lsls	r2, r3, #30
 80052e6:	d50b      	bpl.n	8005300 <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
 80052e8:	4b6a      	ldr	r3, [pc, #424]	; (8005494 <z_arm_fault+0x25c>)
		PR_EXC("  Debug event");
 80052ea:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
 80052ee:	4863      	ldr	r0, [pc, #396]	; (800547c <z_arm_fault+0x244>)
 80052f0:	f107 0218 	add.w	r2, r7, #24
 80052f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80052f8:	f006 fe94 	bl	800c024 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80052fc:	2300      	movs	r3, #0
 80052fe:	e038      	b.n	8005372 <z_arm_fault+0x13a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8005300:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005302:	2b00      	cmp	r3, #0
 8005304:	da01      	bge.n	800530a <z_arm_fault+0xd2>
		PR_EXC("  Debug event");
 8005306:	4b64      	ldr	r3, [pc, #400]	; (8005498 <z_arm_fault+0x260>)
 8005308:	e7ef      	b.n	80052ea <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800530a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	d579      	bpl.n	8005404 <z_arm_fault+0x1cc>
		PR_EXC("  Fault escalation (see below)");
 8005310:	4b62      	ldr	r3, [pc, #392]	; (800549c <z_arm_fault+0x264>)
 8005312:	485a      	ldr	r0, [pc, #360]	; (800547c <z_arm_fault+0x244>)
 8005314:	e9c7 8306 	strd	r8, r3, [r7, #24]
 8005318:	f107 0218 	add.w	r2, r7, #24
 800531c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005320:	f006 fe80 	bl	800c024 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8005324:	696b      	ldr	r3, [r5, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8005326:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8005328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532c:	616b      	str	r3, [r5, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800532e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005332:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8005336:	696b      	ldr	r3, [r5, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8005338:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 800533c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005340:	616b      	str	r3, [r5, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005342:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005346:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 800534a:	f64d 7302 	movw	r3, #57090	; 0xdf02
 800534e:	429a      	cmp	r2, r3
 8005350:	d131      	bne.n	80053b6 <z_arm_fault+0x17e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8005352:	b088      	sub	sp, #32
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	466a      	mov	r2, sp
 8005358:	4951      	ldr	r1, [pc, #324]	; (80054a0 <z_arm_fault+0x268>)
 800535a:	4848      	ldr	r0, [pc, #288]	; (800547c <z_arm_fault+0x244>)
 800535c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8005360:	2303      	movs	r3, #3
 8005362:	f842 3f10 	str.w	r3, [r2, #16]!
 8005366:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800536a:	f006 fe5b 	bl	800c024 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8005372:	79fa      	ldrb	r2, [r7, #7]
 8005374:	b9da      	cbnz	r2, 80053ae <z_arm_fault+0x176>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8005376:	f107 0508 	add.w	r5, r7, #8
 800537a:	f104 0c20 	add.w	ip, r4, #32
 800537e:	6820      	ldr	r0, [r4, #0]
 8005380:	6861      	ldr	r1, [r4, #4]
 8005382:	462a      	mov	r2, r5
 8005384:	c203      	stmia	r2!, {r0, r1}
 8005386:	3408      	adds	r4, #8
 8005388:	4564      	cmp	r4, ip
 800538a:	4615      	mov	r5, r2
 800538c:	d1f7      	bne.n	800537e <z_arm_fault+0x146>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 800538e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005390:	2e00      	cmp	r6, #0
 8005392:	d06a      	beq.n	800546a <z_arm_fault+0x232>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8005394:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005398:	b921      	cbnz	r1, 80053a4 <z_arm_fault+0x16c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800539a:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 800539e:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80053a2:	627a      	str	r2, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 80053a4:	f107 0108 	add.w	r1, r7, #8
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff fbcb 	bl	8004b44 <z_arm_fatal_error>
}
 80053ae:	372c      	adds	r7, #44	; 0x2c
 80053b0:	46bd      	mov	sp, r7
 80053b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 80053b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	b133      	cbz	r3, 80053ca <z_arm_fault+0x192>
			reason = mem_manage_fault(esf, 1, recoverable);
 80053bc:	1dfa      	adds	r2, r7, #7
 80053be:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80053c0:	4620      	mov	r0, r4
 80053c2:	f7ff fe61 	bl	8005088 <mem_manage_fault>
 80053c6:	4603      	mov	r3, r0
		break;
 80053c8:	e7d3      	b.n	8005372 <z_arm_fault+0x13a>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 80053ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80053cc:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80053d0:	d004      	beq.n	80053dc <z_arm_fault+0x1a4>
			reason = bus_fault(esf, 1, recoverable);
 80053d2:	1df9      	adds	r1, r7, #7
 80053d4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80053d6:	f7ff fd43 	bl	8004e60 <bus_fault.constprop.0>
 80053da:	e7f4      	b.n	80053c6 <z_arm_fault+0x18e>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 80053dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80053de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e2:	d302      	bcc.n	80053ea <z_arm_fault+0x1b2>
		reason = usage_fault(esf);
 80053e4:	f7ff fdd4 	bl	8004f90 <usage_fault.constprop.0>
 80053e8:	e7ed      	b.n	80053c6 <z_arm_fault+0x18e>
			__ASSERT(0,
 80053ea:	492e      	ldr	r1, [pc, #184]	; (80054a4 <z_arm_fault+0x26c>)
 80053ec:	4a25      	ldr	r2, [pc, #148]	; (8005484 <z_arm_fault+0x24c>)
 80053ee:	4826      	ldr	r0, [pc, #152]	; (8005488 <z_arm_fault+0x250>)
 80053f0:	f240 23ef 	movw	r3, #751	; 0x2ef
 80053f4:	f006 fcc1 	bl	800bd7a <assert_print>
 80053f8:	482b      	ldr	r0, [pc, #172]	; (80054a8 <z_arm_fault+0x270>)
 80053fa:	f006 fcbe 	bl	800bd7a <assert_print>
 80053fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005402:	e747      	b.n	8005294 <z_arm_fault+0x5c>
		__ASSERT(0,
 8005404:	4927      	ldr	r1, [pc, #156]	; (80054a4 <z_arm_fault+0x26c>)
 8005406:	4a1f      	ldr	r2, [pc, #124]	; (8005484 <z_arm_fault+0x24c>)
 8005408:	481f      	ldr	r0, [pc, #124]	; (8005488 <z_arm_fault+0x250>)
 800540a:	f240 23f3 	movw	r3, #755	; 0x2f3
 800540e:	f006 fcb4 	bl	800bd7a <assert_print>
 8005412:	4826      	ldr	r0, [pc, #152]	; (80054ac <z_arm_fault+0x274>)
 8005414:	f006 fcb1 	bl	800bd7a <assert_print>
 8005418:	f240 21f3 	movw	r1, #755	; 0x2f3
 800541c:	e73a      	b.n	8005294 <z_arm_fault+0x5c>
		reason = mem_manage_fault(esf, 0, recoverable);
 800541e:	1dfa      	adds	r2, r7, #7
 8005420:	2100      	movs	r1, #0
 8005422:	e7cd      	b.n	80053c0 <z_arm_fault+0x188>
		reason = bus_fault(esf, 0, recoverable);
 8005424:	1df9      	adds	r1, r7, #7
 8005426:	2000      	movs	r0, #0
 8005428:	e7d5      	b.n	80053d6 <z_arm_fault+0x19e>
	PR_FAULT_INFO(
 800542a:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <z_arm_fault+0x278>)
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	2302      	movs	r3, #2
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e75c      	b.n	80052ee <z_arm_fault+0xb6>
	PR_FAULT_INFO("***** %s %d) *****",
 8005434:	4a1f      	ldr	r2, [pc, #124]	; (80054b4 <z_arm_fault+0x27c>)
 8005436:	4920      	ldr	r1, [pc, #128]	; (80054b8 <z_arm_fault+0x280>)
 8005438:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
 800543c:	466d      	mov	r5, sp
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	bf18      	it	ne
 8005442:	4611      	movne	r1, r2
 8005444:	466a      	mov	r2, sp
 8005446:	3b10      	subs	r3, #16
 8005448:	61d3      	str	r3, [r2, #28]
 800544a:	481c      	ldr	r0, [pc, #112]	; (80054bc <z_arm_fault+0x284>)
 800544c:	2302      	movs	r3, #2
 800544e:	f882 3020 	strb.w	r3, [r2, #32]
 8005452:	4b1b      	ldr	r3, [pc, #108]	; (80054c0 <z_arm_fault+0x288>)
 8005454:	e9c2 0105 	strd	r0, r1, [r2, #20]
 8005458:	f842 3f10 	str.w	r3, [r2, #16]!
 800545c:	4807      	ldr	r0, [pc, #28]	; (800547c <z_arm_fault+0x244>)
 800545e:	f44f 5109 	mov.w	r1, #8768	; 0x2240
 8005462:	f006 fddf 	bl	800c024 <z_log_msg_static_create.constprop.0>
 8005466:	46ad      	mov	sp, r5
}
 8005468:	e748      	b.n	80052fc <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800546a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	e796      	b.n	80053a2 <z_arm_fault+0x16a>
 8005474:	e000ed00 	.word	0xe000ed00
 8005478:	0801305f 	.word	0x0801305f
 800547c:	0800db7c 	.word	0x0800db7c
 8005480:	0801308a 	.word	0x0801308a
 8005484:	08012f8a 	.word	0x08012f8a
 8005488:	0800e198 	.word	0x0800e198
 800548c:	0801309d 	.word	0x0801309d
 8005490:	080130db 	.word	0x080130db
 8005494:	080130f2 	.word	0x080130f2
 8005498:	08013113 	.word	0x08013113
 800549c:	08013121 	.word	0x08013121
 80054a0:	08013140 	.word	0x08013140
 80054a4:	0800e34d 	.word	0x0800e34d
 80054a8:	0801315c 	.word	0x0801315c
 80054ac:	08013180 	.word	0x08013180
 80054b0:	080131b0 	.word	0x080131b0
 80054b4:	08013046 	.word	0x08013046
 80054b8:	08013031 	.word	0x08013031
 80054bc:	080131d4 	.word	0x080131d4
 80054c0:	01000004 	.word	0x01000004

080054c4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80054c4:	4a02      	ldr	r2, [pc, #8]	; (80054d0 <z_arm_fault_init+0xc>)
 80054c6:	6953      	ldr	r3, [r2, #20]
 80054c8:	f043 0310 	orr.w	r3, r3, #16
 80054cc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 80054ce:	4770      	bx	lr
 80054d0:	e000ed00 	.word	0xe000ed00

080054d4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80054d4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80054d8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80054dc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80054de:	4672      	mov	r2, lr
	bl z_arm_fault
 80054e0:	f7ff feaa 	bl	8005238 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80054e4:	bd01      	pop	{r0, pc}
 80054e6:	bf00      	nop

080054e8 <z_arm_interrupt_init>:
 80054e8:	4804      	ldr	r0, [pc, #16]	; (80054fc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	2110      	movs	r1, #16
 80054ee:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80054f0:	3301      	adds	r3, #1
 80054f2:	2b55      	cmp	r3, #85	; 0x55
 80054f4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80054f8:	d1f9      	bne.n	80054ee <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80054fa:	4770      	bx	lr
 80054fc:	e000e100 	.word	0xe000e100

08005500 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8005500:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8005502:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8005506:	4808      	ldr	r0, [pc, #32]	; (8005528 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8005508:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 800550c:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800550e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8005512:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8005516:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8005518:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800551a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800551e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8005522:	f7ff fbbb 	bl	8004c9c <z_arm_prep_c>
 8005526:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8005528:	200019c0 	.word	0x200019c0

0800552c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 800552c:	4b08      	ldr	r3, [pc, #32]	; (8005550 <z_impl_k_thread_abort+0x24>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	4283      	cmp	r3, r0
 8005532:	d10b      	bne.n	800554c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005534:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8005538:	b143      	cbz	r3, 800554c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800553a:	4b06      	ldr	r3, [pc, #24]	; (8005554 <z_impl_k_thread_abort+0x28>)
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005542:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8005544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005546:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800554a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 800554c:	f003 bfda 	b.w	8009504 <z_thread_abort>
 8005550:	20000c9c 	.word	0x20000c9c
 8005554:	e000ed00 	.word	0xe000ed00

08005558 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8005558:	4b02      	ldr	r3, [pc, #8]	; (8005564 <z_arm_configure_static_mpu_regions+0xc>)
 800555a:	4a03      	ldr	r2, [pc, #12]	; (8005568 <z_arm_configure_static_mpu_regions+0x10>)
 800555c:	4803      	ldr	r0, [pc, #12]	; (800556c <z_arm_configure_static_mpu_regions+0x14>)
 800555e:	2101      	movs	r1, #1
 8005560:	f000 b892 	b.w	8005688 <arm_core_mpu_configure_static_mpu_regions>
 8005564:	20010000 	.word	0x20010000
 8005568:	20000000 	.word	0x20000000
 800556c:	0800ddec 	.word	0x0800ddec

08005570 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8005570:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8005574:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 8005576:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8005578:	4a04      	ldr	r2, [pc, #16]	; (800558c <z_arm_configure_dynamic_mpu_regions+0x1c>)
 800557a:	2140      	movs	r1, #64	; 0x40
 800557c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8005580:	4618      	mov	r0, r3
 8005582:	2101      	movs	r1, #1
 8005584:	f000 b8a6 	b.w	80056d4 <arm_core_mpu_configure_dynamic_mpu_regions>
 8005588:	20000b58 	.word	0x20000b58
 800558c:	150b0000 	.word	0x150b0000

08005590 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8005590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8005594:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800564c <mpu_configure_regions+0xbc>
 8005598:	469c      	mov	ip, r3
 800559a:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
 800559c:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
 800559e:	2300      	movs	r3, #0
 80055a0:	428b      	cmp	r3, r1
 80055a2:	da1a      	bge.n	80055da <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
 80055a4:	6844      	ldr	r4, [r0, #4]
 80055a6:	2c00      	cmp	r4, #0
 80055a8:	d04d      	beq.n	8005646 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 80055aa:	f1bc 0f00 	cmp.w	ip, #0
 80055ae:	d01d      	beq.n	80055ec <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 80055b0:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 80055b2:	4234      	tst	r4, r6
 80055b4:	d015      	beq.n	80055e2 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 80055b6:	466c      	mov	r4, sp
 80055b8:	b088      	sub	sp, #32
 80055ba:	466a      	mov	r2, sp
 80055bc:	4924      	ldr	r1, [pc, #144]	; (8005650 <mpu_configure_regions+0xc0>)
 80055be:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80055c2:	2303      	movs	r3, #3
 80055c4:	f842 3f10 	str.w	r3, [r2, #16]!
 80055c8:	4822      	ldr	r0, [pc, #136]	; (8005654 <mpu_configure_regions+0xc4>)
 80055ca:	2300      	movs	r3, #0
 80055cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80055d0:	f7fe fe3e 	bl	8004250 <z_impl_z_log_msg_static_create>
			return -EINVAL;
 80055d4:	f06f 0515 	mvn.w	r5, #21
 80055d8:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80055da:	4628      	mov	r0, r5
 80055dc:	46bd      	mov	sp, r7
 80055de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
 80055e2:	2c1f      	cmp	r4, #31
 80055e4:	d9e7      	bls.n	80055b6 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
 80055e6:	6802      	ldr	r2, [r0, #0]
		&&
 80055e8:	4216      	tst	r6, r2
 80055ea:	d1e4      	bne.n	80055b6 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80055ec:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 80055ee:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80055f0:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80055f2:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
 80055f6:	d914      	bls.n	8005622 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
 80055f8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80055fc:	d813      	bhi.n	8005626 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80055fe:	3c01      	subs	r4, #1
 8005600:	fab4 f484 	clz	r4, r4
 8005604:	f1c4 041f 	rsb	r4, r4, #31
 8005608:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 800560a:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800560e:	ea46 0604 	orr.w	r6, r6, r4
 8005612:	d90a      	bls.n	800562a <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8005614:	466c      	mov	r4, sp
 8005616:	b088      	sub	sp, #32
 8005618:	466a      	mov	r2, sp
 800561a:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <mpu_configure_regions+0xc8>)
 800561c:	e9c2 3505 	strd	r3, r5, [r2, #20]
 8005620:	e7cf      	b.n	80055c2 <mpu_configure_regions+0x32>
		return REGION_32B;
 8005622:	2408      	movs	r4, #8
 8005624:	e7f1      	b.n	800560a <mpu_configure_regions+0x7a>
		return REGION_4G;
 8005626:	243e      	movs	r4, #62	; 0x3e
 8005628:	e7ef      	b.n	800560a <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800562a:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
 800562e:	432a      	orrs	r2, r5
 8005630:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8005634:	f046 0601 	orr.w	r6, r6, #1
 8005638:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800563c:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
 8005640:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8005642:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 8005646:	3301      	adds	r3, #1
 8005648:	300c      	adds	r0, #12
 800564a:	e7a9      	b.n	80055a0 <mpu_configure_regions+0x10>
 800564c:	e000ed00 	.word	0xe000ed00
 8005650:	080131eb 	.word	0x080131eb
 8005654:	0800db74 	.word	0x0800db74
 8005658:	0801320e 	.word	0x0801320e

0800565c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <arm_core_mpu_enable+0x14>)
 800565e:	2205      	movs	r2, #5
 8005660:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8005664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005668:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	e000ed00 	.word	0xe000ed00

08005674 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005674:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8005678:	4b02      	ldr	r3, [pc, #8]	; (8005684 <arm_core_mpu_disable+0x10>)
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	e000ed00 	.word	0xe000ed00

08005688 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8005688:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 800568a:	4d0d      	ldr	r5, [pc, #52]	; (80056c0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 800568c:	2301      	movs	r3, #1
 800568e:	782a      	ldrb	r2, [r5, #0]
 8005690:	460c      	mov	r4, r1
 8005692:	f7ff ff7d 	bl	8005590 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8005696:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 8005698:	3016      	adds	r0, #22
 800569a:	d10f      	bne.n	80056bc <arm_core_mpu_configure_static_mpu_regions+0x34>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
 800569c:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
 800569e:	490a      	ldr	r1, [pc, #40]	; (80056c8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
 80056a0:	480a      	ldr	r0, [pc, #40]	; (80056cc <arm_core_mpu_configure_static_mpu_regions+0x44>)
 80056a2:	f44f 738b 	mov.w	r3, #278	; 0x116
 80056a6:	f006 fb68 	bl	800bd7a <assert_print>
 80056aa:	4809      	ldr	r0, [pc, #36]	; (80056d0 <arm_core_mpu_configure_static_mpu_regions+0x48>)
 80056ac:	4621      	mov	r1, r4
 80056ae:	f006 fb64 	bl	800bd7a <assert_print>
 80056b2:	4804      	ldr	r0, [pc, #16]	; (80056c4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
 80056b4:	f44f 718b 	mov.w	r1, #278	; 0x116
 80056b8:	f006 fb58 	bl	800bd6c <assert_post_action>
			regions_num);
	}
}
 80056bc:	bd38      	pop	{r3, r4, r5, pc}
 80056be:	bf00      	nop
 80056c0:	20000d01 	.word	0x20000d01
 80056c4:	08013234 	.word	0x08013234
 80056c8:	0800e34d 	.word	0x0800e34d
 80056cc:	0800e198 	.word	0x0800e198
 80056d0:	0801326b 	.word	0x0801326b

080056d4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 80056d4:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80056d6:	4a12      	ldr	r2, [pc, #72]	; (8005720 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
 80056d8:	2300      	movs	r3, #0
 80056da:	7812      	ldrb	r2, [r2, #0]
 80056dc:	460c      	mov	r4, r1
 80056de:	f7ff ff57 	bl	8005590 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80056e2:	f110 0f16 	cmn.w	r0, #22
 80056e6:	d004      	beq.n	80056f2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80056e8:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
 80056ea:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80056ec:	2807      	cmp	r0, #7
 80056ee:	dd10      	ble.n	8005712 <arm_core_mpu_configure_dynamic_mpu_regions+0x3e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 80056f0:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
 80056f2:	4a0d      	ldr	r2, [pc, #52]	; (8005728 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
 80056f4:	490d      	ldr	r1, [pc, #52]	; (800572c <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
 80056f6:	480e      	ldr	r0, [pc, #56]	; (8005730 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
 80056f8:	f240 1335 	movw	r3, #309	; 0x135
 80056fc:	f006 fb3d 	bl	800bd7a <assert_print>
 8005700:	480c      	ldr	r0, [pc, #48]	; (8005734 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
 8005702:	4621      	mov	r1, r4
 8005704:	f006 fb39 	bl	800bd7a <assert_print>
 8005708:	4807      	ldr	r0, [pc, #28]	; (8005728 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
 800570a:	f240 1135 	movw	r1, #309	; 0x135
 800570e:	f006 fb2d 	bl	800bd6c <assert_post_action>
  MPU->RNR = rnr;
 8005712:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
 8005716:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800571a:	3001      	adds	r0, #1
 800571c:	e7e6      	b.n	80056ec <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
 800571e:	bf00      	nop
 8005720:	20000d01 	.word	0x20000d01
 8005724:	e000ed00 	.word	0xe000ed00
 8005728:	08013234 	.word	0x08013234
 800572c:	0800e34d 	.word	0x0800e34d
 8005730:	0800e198 	.word	0x0800e198
 8005734:	08013297 	.word	0x08013297

08005738 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8005738:	4925      	ldr	r1, [pc, #148]	; (80057d0 <z_arm_mpu_init+0x98>)
{
 800573a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 800573c:	680c      	ldr	r4, [r1, #0]
 800573e:	2c08      	cmp	r4, #8
 8005740:	d910      	bls.n	8005764 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
 8005742:	4a24      	ldr	r2, [pc, #144]	; (80057d4 <z_arm_mpu_init+0x9c>)
 8005744:	4924      	ldr	r1, [pc, #144]	; (80057d8 <z_arm_mpu_init+0xa0>)
 8005746:	4825      	ldr	r0, [pc, #148]	; (80057dc <z_arm_mpu_init+0xa4>)
 8005748:	f240 134d 	movw	r3, #333	; 0x14d
 800574c:	f006 fb15 	bl	800bd7a <assert_print>
 8005750:	4621      	mov	r1, r4
 8005752:	4823      	ldr	r0, [pc, #140]	; (80057e0 <z_arm_mpu_init+0xa8>)
 8005754:	2208      	movs	r2, #8
 8005756:	f006 fb10 	bl	800bd7a <assert_print>
 800575a:	f240 114d 	movw	r1, #333	; 0x14d

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
 800575e:	481d      	ldr	r0, [pc, #116]	; (80057d4 <z_arm_mpu_init+0x9c>)
 8005760:	f006 fb04 	bl	800bd6c <assert_post_action>
	arm_core_mpu_disable();
 8005764:	f7ff ff86 	bl	8005674 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8005768:	6848      	ldr	r0, [r1, #4]
 800576a:	491e      	ldr	r1, [pc, #120]	; (80057e4 <z_arm_mpu_init+0xac>)
 800576c:	2200      	movs	r2, #0
 800576e:	4294      	cmp	r4, r2
 8005770:	f100 000c 	add.w	r0, r0, #12
 8005774:	d116      	bne.n	80057a4 <z_arm_mpu_init+0x6c>
	static_regions_num = mpu_config.num_regions;
 8005776:	4b1c      	ldr	r3, [pc, #112]	; (80057e8 <z_arm_mpu_init+0xb0>)
 8005778:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
 800577a:	f7ff ff6f 	bl	800565c <arm_core_mpu_enable>
	__ASSERT(
 800577e:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 8005782:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005786:	2b08      	cmp	r3, #8
 8005788:	d01f      	beq.n	80057ca <z_arm_mpu_init+0x92>
 800578a:	4918      	ldr	r1, [pc, #96]	; (80057ec <z_arm_mpu_init+0xb4>)
 800578c:	4a11      	ldr	r2, [pc, #68]	; (80057d4 <z_arm_mpu_init+0x9c>)
 800578e:	4813      	ldr	r0, [pc, #76]	; (80057dc <z_arm_mpu_init+0xa4>)
 8005790:	f240 13ad 	movw	r3, #429	; 0x1ad
 8005794:	f006 faf1 	bl	800bd7a <assert_print>
 8005798:	4815      	ldr	r0, [pc, #84]	; (80057f0 <z_arm_mpu_init+0xb8>)
 800579a:	f006 faee 	bl	800bd7a <assert_print>
 800579e:	f240 11ad 	movw	r1, #429	; 0x1ad
 80057a2:	e7dc      	b.n	800575e <z_arm_mpu_init+0x26>
 80057a4:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80057a8:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 80057ac:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80057b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80057ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80057c6:	3201      	adds	r2, #1
 80057c8:	e7d1      	b.n	800576e <z_arm_mpu_init+0x36>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
 80057ca:	2000      	movs	r0, #0
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	bf00      	nop
 80057d0:	0800ddf8 	.word	0x0800ddf8
 80057d4:	08013234 	.word	0x08013234
 80057d8:	0800e34d 	.word	0x0800e34d
 80057dc:	0800e198 	.word	0x0800e198
 80057e0:	080132c4 	.word	0x080132c4
 80057e4:	e000ed00 	.word	0xe000ed00
 80057e8:	20000d01 	.word	0x20000d01
 80057ec:	080132f8 	.word	0x080132f8
 80057f0:	08013348 	.word	0x08013348

080057f4 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
 80057f4:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
 80057f6:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <malloc_prepare+0x30>)
 80057f8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80057fc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005804:	d20c      	bcs.n	8005820 <malloc_prepare+0x2c>
 8005806:	4908      	ldr	r1, [pc, #32]	; (8005828 <malloc_prepare+0x34>)
 8005808:	4a08      	ldr	r2, [pc, #32]	; (800582c <malloc_prepare+0x38>)
 800580a:	4809      	ldr	r0, [pc, #36]	; (8005830 <malloc_prepare+0x3c>)
 800580c:	2381      	movs	r3, #129	; 0x81
 800580e:	f006 fab4 	bl	800bd7a <assert_print>
 8005812:	4808      	ldr	r0, [pc, #32]	; (8005834 <malloc_prepare+0x40>)
 8005814:	f006 fab1 	bl	800bd7a <assert_print>
 8005818:	4804      	ldr	r0, [pc, #16]	; (800582c <malloc_prepare+0x38>)
 800581a:	2181      	movs	r1, #129	; 0x81
 800581c:	f006 faa6 	bl	800bd6c <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
 8005820:	2000      	movs	r0, #0
 8005822:	bd08      	pop	{r3, pc}
 8005824:	20006c00 	.word	0x20006c00
 8005828:	08013399 	.word	0x08013399
 800582c:	08013369 	.word	0x08013369
 8005830:	0800e198 	.word	0x0800e198
 8005834:	080133df 	.word	0x080133df

08005838 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8005838:	4b01      	ldr	r3, [pc, #4]	; (8005840 <__stdout_hook_install+0x8>)
 800583a:	6018      	str	r0, [r3, #0]
}
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	200000bc 	.word	0x200000bc

08005844 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
 8005846:	4f08      	ldr	r7, [pc, #32]	; (8005868 <z_impl_zephyr_read_stdin+0x24>)
{
 8005848:	4606      	mov	r6, r0
 800584a:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
 800584c:	2400      	movs	r4, #0
 800584e:	42ac      	cmp	r4, r5
 8005850:	da08      	bge.n	8005864 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8005856:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 8005858:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
 800585a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 800585e:	d001      	beq.n	8005864 <z_impl_zephyr_read_stdin+0x20>
 8005860:	280d      	cmp	r0, #13
 8005862:	d1f4      	bne.n	800584e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
 8005864:	4620      	mov	r0, r4
 8005866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005868:	200000b8 	.word	0x200000b8

0800586c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	4f0a      	ldr	r7, [pc, #40]	; (8005898 <z_impl_zephyr_write_stdout+0x2c>)
 8005870:	460d      	mov	r5, r1
 8005872:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8005874:	f1c0 0401 	rsb	r4, r0, #1
 8005878:	19a3      	adds	r3, r4, r6
 800587a:	429d      	cmp	r5, r3
 800587c:	dc01      	bgt.n	8005882 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 800587e:	4628      	mov	r0, r5
 8005880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 8005882:	7873      	ldrb	r3, [r6, #1]
 8005884:	2b0a      	cmp	r3, #10
 8005886:	d102      	bne.n	800588e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	200d      	movs	r0, #13
 800588c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8005894:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8005896:	e7ef      	b.n	8005878 <z_impl_zephyr_write_stdout+0xc>
 8005898:	200000bc 	.word	0x200000bc

0800589c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 800589c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800589e:	4802      	ldr	r0, [pc, #8]	; (80058a8 <_exit+0xc>)
 80058a0:	2105      	movs	r1, #5
 80058a2:	f7ff ffe3 	bl	800586c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
 80058a6:	e7fe      	b.n	80058a6 <_exit+0xa>
 80058a8:	08013466 	.word	0x08013466

080058ac <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 80058ac:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 80058ae:	4c07      	ldr	r4, [pc, #28]	; (80058cc <_sbrk+0x20>)
 80058b0:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80058b2:	18c2      	adds	r2, r0, r3
 80058b4:	4806      	ldr	r0, [pc, #24]	; (80058d0 <_sbrk+0x24>)
 80058b6:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
 80058ba:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80058be:	428a      	cmp	r2, r1
		heap_sz += count;
 80058c0:	bf3a      	itte	cc
 80058c2:	6022      	strcc	r2, [r4, #0]
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80058c4:	18c0      	addcc	r0, r0, r3

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 80058c6:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
 80058ca:	bd10      	pop	{r4, pc}
 80058cc:	20000b64 	.word	0x20000b64
 80058d0:	20006c00 	.word	0x20006c00

080058d4 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80058d4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
 80058d6:	4604      	mov	r4, r0
 80058d8:	b958      	cbnz	r0, 80058f2 <__retarget_lock_init_recursive+0x1e>
 80058da:	4911      	ldr	r1, [pc, #68]	; (8005920 <__retarget_lock_init_recursive+0x4c>)
 80058dc:	4a11      	ldr	r2, [pc, #68]	; (8005924 <__retarget_lock_init_recursive+0x50>)
 80058de:	4812      	ldr	r0, [pc, #72]	; (8005928 <__retarget_lock_init_recursive+0x54>)
 80058e0:	f240 1377 	movw	r3, #375	; 0x177
 80058e4:	f006 fa49 	bl	800bd7a <assert_print>
 80058e8:	f240 1177 	movw	r1, #375	; 0x177
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
 80058ec:	480d      	ldr	r0, [pc, #52]	; (8005924 <__retarget_lock_init_recursive+0x50>)
 80058ee:	f006 fa3d 	bl	800bd6c <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
 80058f2:	2014      	movs	r0, #20
 80058f4:	f004 fc6e 	bl	800a1d4 <malloc>
 80058f8:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
 80058fa:	b960      	cbnz	r0, 8005916 <__retarget_lock_init_recursive+0x42>
 80058fc:	490b      	ldr	r1, [pc, #44]	; (800592c <__retarget_lock_init_recursive+0x58>)
 80058fe:	4a09      	ldr	r2, [pc, #36]	; (8005924 <__retarget_lock_init_recursive+0x50>)
 8005900:	4809      	ldr	r0, [pc, #36]	; (8005928 <__retarget_lock_init_recursive+0x54>)
 8005902:	f240 137f 	movw	r3, #383	; 0x17f
 8005906:	f006 fa38 	bl	800bd7a <assert_print>
 800590a:	4809      	ldr	r0, [pc, #36]	; (8005930 <__retarget_lock_init_recursive+0x5c>)
 800590c:	f006 fa35 	bl	800bd7a <assert_print>
 8005910:	f240 117f 	movw	r1, #383	; 0x17f
 8005914:	e7ea      	b.n	80058ec <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
 8005916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
 800591a:	f007 b90f 	b.w	800cb3c <z_impl_k_mutex_init>
 800591e:	bf00      	nop
 8005920:	0801346d 	.word	0x0801346d
 8005924:	08013369 	.word	0x08013369
 8005928:	0800e198 	.word	0x0800e198
 800592c:	0801346c 	.word	0x0801346c
 8005930:	080134a8 	.word	0x080134a8

08005934 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8005934:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
 8005936:	b958      	cbnz	r0, 8005950 <__retarget_lock_acquire_recursive+0x1c>
 8005938:	4909      	ldr	r1, [pc, #36]	; (8005960 <__retarget_lock_acquire_recursive+0x2c>)
 800593a:	480a      	ldr	r0, [pc, #40]	; (8005964 <__retarget_lock_acquire_recursive+0x30>)
 800593c:	4a0a      	ldr	r2, [pc, #40]	; (8005968 <__retarget_lock_acquire_recursive+0x34>)
 800593e:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8005942:	f006 fa1a 	bl	800bd7a <assert_print>
 8005946:	4808      	ldr	r0, [pc, #32]	; (8005968 <__retarget_lock_acquire_recursive+0x34>)
 8005948:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800594c:	f006 fa0e 	bl	800bd6c <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
 8005950:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 8005954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005958:	f04f 33ff 	mov.w	r3, #4294967295
 800595c:	f002 b94c 	b.w	8007bf8 <z_impl_k_mutex_lock>
 8005960:	0801346d 	.word	0x0801346d
 8005964:	0800e198 	.word	0x0800e198
 8005968:	08013369 	.word	0x08013369

0800596c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800596c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
 800596e:	b958      	cbnz	r0, 8005988 <__retarget_lock_release_recursive+0x1c>
 8005970:	4907      	ldr	r1, [pc, #28]	; (8005990 <__retarget_lock_release_recursive+0x24>)
 8005972:	4808      	ldr	r0, [pc, #32]	; (8005994 <__retarget_lock_release_recursive+0x28>)
 8005974:	4a08      	ldr	r2, [pc, #32]	; (8005998 <__retarget_lock_release_recursive+0x2c>)
 8005976:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800597a:	f006 f9fe 	bl	800bd7a <assert_print>
 800597e:	4806      	ldr	r0, [pc, #24]	; (8005998 <__retarget_lock_release_recursive+0x2c>)
 8005980:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005984:	f006 f9f2 	bl	800bd6c <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
 8005988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 800598c:	f002 ba04 	b.w	8007d98 <z_impl_k_mutex_unlock>
 8005990:	0801346d 	.word	0x0801346d
 8005994:	0800e198 	.word	0x0800e198
 8005998:	08013369 	.word	0x08013369

0800599c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 800599c:	b508      	push	{r3, lr}
 800599e:	211d      	movs	r1, #29
 80059a0:	4804      	ldr	r0, [pc, #16]	; (80059b4 <__chk_fail+0x18>)
 80059a2:	f7ff ff63 	bl	800586c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
 80059a6:	4040      	eors	r0, r0
 80059a8:	f380 8811 	msr	BASEPRI, r0
 80059ac:	f04f 0003 	mov.w	r0, #3
 80059b0:	df02      	svc	2
	CODE_UNREACHABLE;
 80059b2:	bf00      	nop
 80059b4:	080134cb 	.word	0x080134cb

080059b8 <smf_set_state>:
		init_state->entry(ctx);
	}
}

void smf_set_state(struct smf_ctx *const ctx, const struct smf_state *target)
{
 80059b8:	b5b0      	push	{r4, r5, r7, lr}
	/*
	 * It does not make sense to call set_state in an exit phase of a state
	 * since we are already in a transition; we would always ignore the
	 * intended state to transition into.
	 */
	if (internal->exit) {
 80059ba:	7b03      	ldrb	r3, [r0, #12]
 80059bc:	075a      	lsls	r2, r3, #29
{
 80059be:	af00      	add	r7, sp, #0
 80059c0:	4604      	mov	r4, r0
 80059c2:	460d      	mov	r5, r1
	if (internal->exit) {
 80059c4:	d514      	bpl.n	80059f0 <smf_set_state+0x38>
		LOG_WRN("Calling %s from exit action", __func__);
 80059c6:	466c      	mov	r4, sp
 80059c8:	b088      	sub	sp, #32
 80059ca:	466a      	mov	r2, sp
 80059cc:	4b14      	ldr	r3, [pc, #80]	; (8005a20 <smf_set_state+0x68>)
 80059ce:	6153      	str	r3, [r2, #20]
 80059d0:	4b14      	ldr	r3, [pc, #80]	; (8005a24 <smf_set_state+0x6c>)
 80059d2:	6193      	str	r3, [r2, #24]
 80059d4:	2302      	movs	r3, #2
 80059d6:	7713      	strb	r3, [r2, #28]
 80059d8:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <smf_set_state+0x70>)
 80059da:	f842 3f10 	str.w	r3, [r2, #16]!
 80059de:	4813      	ldr	r0, [pc, #76]	; (8005a2c <smf_set_state+0x74>)
 80059e0:	2300      	movs	r3, #0
 80059e2:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
 80059e6:	f7fe fc33 	bl	8004250 <z_impl_z_log_msg_static_create>
 80059ea:	46a5      	mov	sp, r4
		/*
		 * If terminate was set, it will be handled in the
		 * smf_run_state function
		 */
	}
}
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bdb0      	pop	{r4, r5, r7, pc}
	internal->exit = true;
 80059f0:	f043 0304 	orr.w	r3, r3, #4
 80059f4:	7303      	strb	r3, [r0, #12]
	if (ctx->current->exit) {
 80059f6:	6803      	ldr	r3, [r0, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	b963      	cbnz	r3, 8005a16 <smf_set_state+0x5e>
	internal->exit = false;
 80059fc:	7b23      	ldrb	r3, [r4, #12]
 80059fe:	f36f 0382 	bfc	r3, #2, #1
 8005a02:	7323      	strb	r3, [r4, #12]
	ctx->previous = ctx->current;
 8005a04:	6823      	ldr	r3, [r4, #0]
	ctx->current = target;
 8005a06:	e9c4 5300 	strd	r5, r3, [r4]
	if (ctx->current->entry) {
 8005a0a:	682b      	ldr	r3, [r5, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0ed      	beq.n	80059ec <smf_set_state+0x34>
		ctx->current->entry(ctx);
 8005a10:	4620      	mov	r0, r4
 8005a12:	4798      	blx	r3
 8005a14:	e7ea      	b.n	80059ec <smf_set_state+0x34>
		ctx->current->exit(ctx);
 8005a16:	4798      	blx	r3
		if (internal->terminate) {
 8005a18:	7b23      	ldrb	r3, [r4, #12]
 8005a1a:	079b      	lsls	r3, r3, #30
 8005a1c:	d5ee      	bpl.n	80059fc <smf_set_state+0x44>
 8005a1e:	e7e5      	b.n	80059ec <smf_set_state+0x34>
 8005a20:	080134e9 	.word	0x080134e9
 8005a24:	08013505 	.word	0x08013505
 8005a28:	01000003 	.word	0x01000003
 8005a2c:	0800db84 	.word	0x0800db84

08005a30 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8005a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8005a34:	4f0d      	ldr	r7, [pc, #52]	; (8005a6c <__stm32_exti_isr.isra.0+0x3c>)
 8005a36:	4604      	mov	r4, r0
 8005a38:	460e      	mov	r6, r1
 8005a3a:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8005a3c:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8005a40:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8005a44:	42b4      	cmp	r4, r6
 8005a46:	db01      	blt.n	8005a4c <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8005a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a4c:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8005a4e:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8005a52:	ea33 0202 	bics.w	r2, r3, r2
 8005a56:	d107      	bne.n	8005a68 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8005a58:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8005a5a:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8005a5e:	b11b      	cbz	r3, 8005a68 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8005a60:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8005a64:	4620      	mov	r0, r4
 8005a66:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8005a68:	3401      	adds	r4, #1
 8005a6a:	e7eb      	b.n	8005a44 <__stm32_exti_isr.isra.0+0x14>
 8005a6c:	40010400 	.word	0x40010400

08005a70 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8005a70:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8005a72:	2301      	movs	r3, #1
 8005a74:	6811      	ldr	r1, [r2, #0]
 8005a76:	4083      	lsls	r3, r0
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8005a7c:	4b02      	ldr	r3, [pc, #8]	; (8005a88 <stm32_exti_enable+0x18>)
 8005a7e:	5618      	ldrsb	r0, [r3, r0]
 8005a80:	f7ff b8c6 	b.w	8004c10 <arch_irq_enable>
 8005a84:	40010400 	.word	0x40010400
 8005a88:	08013544 	.word	0x08013544

08005a8c <stm32_exti_disable>:
	if (line < 32) {
 8005a8c:	281f      	cmp	r0, #31
 8005a8e:	dc06      	bgt.n	8005a9e <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8005a90:	4903      	ldr	r1, [pc, #12]	; (8005aa0 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8005a92:	2201      	movs	r2, #1
 8005a94:	680b      	ldr	r3, [r1, #0]
 8005a96:	4082      	lsls	r2, r0
 8005a98:	ea23 0302 	bic.w	r3, r3, r2
 8005a9c:	600b      	str	r3, [r1, #0]
}
 8005a9e:	4770      	bx	lr
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <stm32_exti_trigger>:
	switch (trigger) {
 8005aa4:	2903      	cmp	r1, #3
 8005aa6:	d82a      	bhi.n	8005afe <stm32_exti_trigger+0x5a>
 8005aa8:	e8df f001 	tbb	[pc, r1]
 8005aac:	1f140e02 	.word	0x1f140e02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005ab0:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <stm32_exti_trigger+0x5c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	6899      	ldr	r1, [r3, #8]
 8005ab6:	4082      	lsls	r2, r0
 8005ab8:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005abc:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005abe:	68d9      	ldr	r1, [r3, #12]
 8005ac0:	ea21 0202 	bic.w	r2, r1, r2
 8005ac4:	60da      	str	r2, [r3, #12]
}
 8005ac6:	4770      	bx	lr
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005ac8:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8005aca:	2201      	movs	r2, #1
 8005acc:	6899      	ldr	r1, [r3, #8]
 8005ace:	4082      	lsls	r2, r0
 8005ad0:	4311      	orrs	r1, r2
 8005ad2:	e7f3      	b.n	8005abc <stm32_exti_trigger+0x18>
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	68d9      	ldr	r1, [r3, #12]
 8005ada:	4082      	lsls	r2, r0
 8005adc:	4311      	orrs	r1, r2
 8005ade:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005ae0:	6899      	ldr	r1, [r3, #8]
 8005ae2:	ea21 0202 	bic.w	r2, r1, r2
 8005ae6:	609a      	str	r2, [r3, #8]
}
 8005ae8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8005aea:	2301      	movs	r3, #1
 8005aec:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005af0:	4b03      	ldr	r3, [pc, #12]	; (8005b00 <stm32_exti_trigger+0x5c>)
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	4302      	orrs	r2, r0
 8005af6:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	4310      	orrs	r0, r2
 8005afc:	60d8      	str	r0, [r3, #12]
}
 8005afe:	4770      	bx	lr
 8005b00:	40010400 	.word	0x40010400

08005b04 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 8005b04:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8005b06:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <stm32_exti_set_callback+0x20>)
{
 8005b08:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 8005b0a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8005b0e:	b928      	cbnz	r0, 8005b1c <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8005b10:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8005b14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b18:	605a      	str	r2, [r3, #4]

	return 0;
}
 8005b1a:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8005b1c:	f06f 000f 	mvn.w	r0, #15
 8005b20:	e7fb      	b.n	8005b1a <stm32_exti_set_callback+0x16>
 8005b22:	bf00      	nop
 8005b24:	20000b68 	.word	0x20000b68

08005b28 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8005b28:	4b03      	ldr	r3, [pc, #12]	; (8005b38 <stm32_exti_unset_callback+0x10>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8005b30:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8005b34:	605a      	str	r2, [r3, #4]
}
 8005b36:	4770      	bx	lr
 8005b38:	20000b68 	.word	0x20000b68

08005b3c <adc_stm32_channel_setup>:
#endif
}

static int adc_stm32_channel_setup(const struct device *dev,
				   const struct adc_channel_cfg *channel_cfg)
{
 8005b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b3e:	b087      	sub	sp, #28
	 defined(CONFIG_SOC_SERIES_STM32L0X)
	struct adc_stm32_data *data = dev->data;
#endif
	int acq_time_index;

	if (channel_cfg->channel_id >= STM32_CHANNEL_COUNT) {
 8005b40:	790e      	ldrb	r6, [r1, #4]
 8005b42:	f006 041f 	and.w	r4, r6, #31
 8005b46:	2c13      	cmp	r4, #19
{
 8005b48:	af00      	add	r7, sp, #0
	if (channel_cfg->channel_id >= STM32_CHANNEL_COUNT) {
 8005b4a:	d913      	bls.n	8005b74 <adc_stm32_channel_setup+0x38>
		LOG_ERR("Channel %d is not valid", channel_cfg->channel_id);
 8005b4c:	466d      	mov	r5, sp
 8005b4e:	b088      	sub	sp, #32
 8005b50:	466a      	mov	r2, sp
 8005b52:	4b40      	ldr	r3, [pc, #256]	; (8005c54 <adc_stm32_channel_setup+0x118>)
 8005b54:	4840      	ldr	r0, [pc, #256]	; (8005c58 <adc_stm32_channel_setup+0x11c>)
 8005b56:	e9c2 3405 	strd	r3, r4, [r2, #20]
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	f842 3f10 	str.w	r3, [r2, #16]!
 8005b60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8005b64:	f006 fb09 	bl	800c17a <z_log_msg_static_create.constprop.0>
 8005b68:	46ad      	mov	sp, r5
		return -EINVAL;
 8005b6a:	f06f 0015 	mvn.w	r0, #21
				  acq_time_index);

	LOG_DBG("Channel setup succeeded!");

	return 0;
}
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
				channel_cfg->acquisition_time);
 8005b74:	884b      	ldrh	r3, [r1, #2]
	if (acq_time == ADC_ACQ_TIME_MAX) {
 8005b76:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d018      	beq.n	8005bb0 <adc_stm32_channel_setup+0x74>
 8005b7e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8005c5c <adc_stm32_channel_setup+0x120>
	for (int i = 0; i < 8; i++) {
 8005b82:	2200      	movs	r2, #0
		if (acq_time == ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS,
 8005b84:	f83c 5b02 	ldrh.w	r5, [ip], #2
 8005b88:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 8005b8c:	42ab      	cmp	r3, r5
 8005b8e:	d010      	beq.n	8005bb2 <adc_stm32_channel_setup+0x76>
	for (int i = 0; i < 8; i++) {
 8005b90:	3201      	adds	r2, #1
 8005b92:	2a08      	cmp	r2, #8
 8005b94:	d1f6      	bne.n	8005b84 <adc_stm32_channel_setup+0x48>
	if (acq_time == ADC_ACQ_TIME_DEFAULT) {
 8005b96:	b183      	cbz	r3, 8005bba <adc_stm32_channel_setup+0x7e>
	LOG_ERR("Conversion time not supported.");
 8005b98:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <adc_stm32_channel_setup+0x124>)
		LOG_ERR("Differential channels are not supported");
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	482e      	ldr	r0, [pc, #184]	; (8005c58 <adc_stm32_channel_setup+0x11c>)
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	f107 0210 	add.w	r2, r7, #16
 8005ba6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005baa:	f006 fae6 	bl	800c17a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
 8005bae:	e7dc      	b.n	8005b6a <adc_stm32_channel_setup+0x2e>
		return ARRAY_SIZE(acq_time_tbl) - 1;
 8005bb0:	2207      	movs	r2, #7
	if (channel_cfg->differential) {
 8005bb2:	06b3      	lsls	r3, r6, #26
 8005bb4:	d503      	bpl.n	8005bbe <adc_stm32_channel_setup+0x82>
		LOG_ERR("Differential channels are not supported");
 8005bb6:	4b2b      	ldr	r3, [pc, #172]	; (8005c64 <adc_stm32_channel_setup+0x128>)
 8005bb8:	e7ef      	b.n	8005b9a <adc_stm32_channel_setup+0x5e>
		return 0;
 8005bba:	461a      	mov	r2, r3
 8005bbc:	e7f9      	b.n	8005bb2 <adc_stm32_channel_setup+0x76>
	if (channel_cfg->gain != ADC_GAIN_1) {
 8005bbe:	780b      	ldrb	r3, [r1, #0]
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d001      	beq.n	8005bc8 <adc_stm32_channel_setup+0x8c>
		LOG_ERR("Invalid channel gain");
 8005bc4:	4b28      	ldr	r3, [pc, #160]	; (8005c68 <adc_stm32_channel_setup+0x12c>)
 8005bc6:	e7e8      	b.n	8005b9a <adc_stm32_channel_setup+0x5e>
	if (channel_cfg->reference != ADC_REF_INTERNAL) {
 8005bc8:	784b      	ldrb	r3, [r1, #1]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	f04f 0302 	mov.w	r3, #2
 8005bd0:	d002      	beq.n	8005bd8 <adc_stm32_channel_setup+0x9c>
		LOG_ERR("Invalid channel reference");
 8005bd2:	4a26      	ldr	r2, [pc, #152]	; (8005c6c <adc_stm32_channel_setup+0x130>)
 8005bd4:	617a      	str	r2, [r7, #20]
 8005bd6:	e7e2      	b.n	8005b9e <adc_stm32_channel_setup+0x62>
	ADC_TypeDef *adc = config->base;
 8005bd8:	6841      	ldr	r1, [r0, #4]
	LL_ADC_SetChannelSamplingTime(adc,
 8005bda:	2c09      	cmp	r4, #9
	ADC_TypeDef *adc = config->base;
 8005bdc:	6808      	ldr	r0, [r1, #0]
		__LL_ADC_DECIMAL_NB_TO_CHANNEL(id),
 8005bde:	fa03 f304 	lsl.w	r3, r3, r4
 8005be2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8005be6:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
 8005bea:	bf86      	itte	hi
 8005bec:	391e      	subhi	r1, #30
 8005bee:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
	LL_ADC_SetChannelSamplingTime(adc,
 8005bf2:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
		table_samp_time[acq_time_index]);
 8005bf6:	491e      	ldr	r1, [pc, #120]	; (8005c70 <adc_stm32_channel_setup+0x134>)
	LL_ADC_SetChannelSamplingTime(adc,
 8005bf8:	bf88      	it	hi
 8005bfa:	f043 7300 	orrhi.w	r3, r3, #33554432	; 0x2000000
		table_samp_time[acq_time_index]);
 8005bfe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8005c02:	f003 7400 	and.w	r4, r3, #33554432	; 0x2000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c0a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005c0e:	fab2 f282 	clz	r2, r2
 8005c12:	3014      	adds	r0, #20
 8005c14:	40d4      	lsrs	r4, r2

  MODIFY_REG(*preg,
 8005c16:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8005c1e:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005c22:	fab2 f282 	clz	r2, r2
 8005c26:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8005c2a:	fa23 f202 	lsr.w	r2, r3, r2
 8005c2e:	2607      	movs	r6, #7
 8005c30:	fa06 f202 	lsl.w	r2, r6, r2
 8005c34:	ea25 0502 	bic.w	r5, r5, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c38:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8005c3c:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005c40:	fab2 f282 	clz	r2, r2
 8005c44:	40d3      	lsrs	r3, r2
 8005c46:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4a:	432b      	orrs	r3, r5
 8005c4c:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
	return 0;
 8005c50:	2000      	movs	r0, #0
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8005c52:	e78c      	b.n	8005b6e <adc_stm32_channel_setup+0x32>
 8005c54:	08013554 	.word	0x08013554
 8005c58:	0800db3c 	.word	0x0800db3c
 8005c5c:	0800e0f4 	.word	0x0800e0f4
 8005c60:	0801356c 	.word	0x0801356c
 8005c64:	0801358b 	.word	0x0801358b
 8005c68:	080135b3 	.word	0x080135b3
 8005c6c:	080135c8 	.word	0x080135c8
 8005c70:	0800de6c 	.word	0x0800de6c

08005c74 <adc_stm32_unset_common_path.isra.0>:
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 8005c74:	6803      	ldr	r3, [r0, #0]
	const uint32_t currentPath = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(adc));
 8005c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
	PathInternal = ~PathInternal & currentPath;
 8005c7a:	ea6f 0101 	mvn.w	r1, r1
	const uint32_t currentPath = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(adc));
 8005c7e:	d00e      	beq.n	8005c9e <adc_stm32_unset_common_path.isra.0+0x2a>
 8005c80:	4a08      	ldr	r2, [pc, #32]	; (8005ca4 <adc_stm32_unset_common_path.isra.0+0x30>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00b      	beq.n	8005c9e <adc_stm32_unset_common_path.isra.0+0x2a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005c86:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8005c8a:	6893      	ldr	r3, [r2, #8]
	PathInternal = ~PathInternal & currentPath;
 8005c8c:	400b      	ands	r3, r1
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005c8e:	6891      	ldr	r1, [r2, #8]
 8005c90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8005c94:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	6093      	str	r3, [r2, #8]
}
 8005c9c:	4770      	bx	lr
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005c9e:	4a02      	ldr	r2, [pc, #8]	; (8005ca8 <adc_stm32_unset_common_path.isra.0+0x34>)
 8005ca0:	e7f3      	b.n	8005c8a <adc_stm32_unset_common_path.isra.0+0x16>
 8005ca2:	bf00      	nop
 8005ca4:	50000100 	.word	0x50000100
 8005ca8:	50000300 	.word	0x50000300

08005cac <adc_stm32_set_common_path.isra.0>:
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 8005cac:	6803      	ldr	r3, [r0, #0]
	PathInternal |= LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(adc));
 8005cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cb2:	d00d      	beq.n	8005cd0 <adc_stm32_set_common_path.isra.0+0x24>
 8005cb4:	4a07      	ldr	r2, [pc, #28]	; (8005cd4 <adc_stm32_set_common_path.isra.0+0x28>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00a      	beq.n	8005cd0 <adc_stm32_set_common_path.isra.0+0x24>
 8005cba:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <adc_stm32_set_common_path.isra.0+0x2c>)
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	f002 72e0 	and.w	r2, r2, #29360128	; 0x1c00000
 8005cc2:	4311      	orrs	r1, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	609a      	str	r2, [r3, #8]
}
 8005cce:	4770      	bx	lr
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005cd0:	4b02      	ldr	r3, [pc, #8]	; (8005cdc <adc_stm32_set_common_path.isra.0+0x30>)
 8005cd2:	e7f3      	b.n	8005cbc <adc_stm32_set_common_path.isra.0+0x10>
 8005cd4:	50000100 	.word	0x50000100
 8005cd8:	50000700 	.word	0x50000700
 8005cdc:	50000300 	.word	0x50000300

08005ce0 <adc_stm32_read>:
{
 8005ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce4:	b08b      	sub	sp, #44	; 0x2c

static inline void adc_context_lock(struct adc_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
	k_sem_take(&ctx->lock, K_FOREVER);
 8005ce6:	6903      	ldr	r3, [r0, #16]
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	3340      	adds	r3, #64	; 0x40
 8005cec:	4606      	mov	r6, r0
 8005cee:	4688      	mov	r8, r1
 8005cf0:	607b      	str	r3, [r7, #4]
	return z_impl_k_sem_take(sem, timeout);
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfc:	f002 f918 	bl	8007f30 <z_impl_k_sem_take>
	switch (sequence->resolution) {
 8005d00:	f898 3010 	ldrb.w	r3, [r8, #16]
	const struct adc_stm32_cfg *config = dev->config;
 8005d04:	f8d6 9004 	ldr.w	r9, [r6, #4]
	struct adc_stm32_data *data = dev->data;
 8005d08:	6934      	ldr	r4, [r6, #16]
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 8005d0a:	f8d9 b000 	ldr.w	fp, [r9]
	switch (sequence->resolution) {
 8005d0e:	3b06      	subs	r3, #6
 8005d10:	2b06      	cmp	r3, #6
 8005d12:	d826      	bhi.n	8005d62 <adc_stm32_read+0x82>
 8005d14:	e8df f003 	tbb	[pc, r3]
 8005d18:	253d253a 	.word	0x253d253a
 8005d1c:	2504      	.short	0x2504
 8005d1e:	22          	.byte	0x22
 8005d1f:	00          	.byte	0x00
		resolution = table_resolution[2];
 8005d20:	f04f 0a08 	mov.w	sl, #8
	uint32_t channels = sequence->channels;
 8005d24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8005d28:	2900      	cmp	r1, #0
 8005d2a:	fa91 f5a1 	rbit	r5, r1
 8005d2e:	fab5 f585 	clz	r5, r5
	if (channels > BIT(index)) {
 8005d32:	f04f 0301 	mov.w	r3, #1
	uint8_t index = find_lsb_set(channels) - 1;
 8005d36:	bf08      	it	eq
 8005d38:	25ff      	moveq	r5, #255	; 0xff
	if (channels > BIT(index)) {
 8005d3a:	40ab      	lsls	r3, r5
 8005d3c:	4299      	cmp	r1, r3
 8005d3e:	d92b      	bls.n	8005d98 <adc_stm32_read+0xb8>
		LOG_ERR("Only single channel supported");
 8005d40:	4baa      	ldr	r3, [pc, #680]	; (8005fec <adc_stm32_read+0x30c>)
		LOG_ERR("Oversampling not supported");
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	2302      	movs	r3, #2
 8005d46:	48aa      	ldr	r0, [pc, #680]	; (8005ff0 <adc_stm32_read+0x310>)
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	f107 0218 	add.w	r2, r7, #24
 8005d4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005d52:	f006 fa12 	bl	800c17a <z_log_msg_static_create.constprop.0>
		return -ENOTSUP;
 8005d56:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8005d5a:	e00f      	b.n	8005d7c <adc_stm32_read+0x9c>
		resolution = table_resolution[3];
 8005d5c:	f04f 0a00 	mov.w	sl, #0
		break;
 8005d60:	e7e0      	b.n	8005d24 <adc_stm32_read+0x44>
		LOG_ERR("Invalid resolution");
 8005d62:	4ba4      	ldr	r3, [pc, #656]	; (8005ff4 <adc_stm32_read+0x314>)
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	2302      	movs	r3, #2
 8005d68:	48a1      	ldr	r0, [pc, #644]	; (8005ff0 <adc_stm32_read+0x310>)
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	f107 0218 	add.w	r2, r7, #24
 8005d70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
 8005d74:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("Invalid resolution");
 8005d78:	f006 f9ff 	bl	800c17a <z_log_msg_static_create.constprop.0>
	z_impl_k_sem_give(sem);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f002 f899 	bl	8007eb4 <z_impl_k_sem_give>
}
 8005d82:	4620      	mov	r0, r4
 8005d84:	3724      	adds	r7, #36	; 0x24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		resolution = table_resolution[0];
 8005d8c:	f04f 0a18 	mov.w	sl, #24
 8005d90:	e7c8      	b.n	8005d24 <adc_stm32_read+0x44>
	switch (sequence->resolution) {
 8005d92:	f04f 0a10 	mov.w	sl, #16
 8005d96:	e7c5      	b.n	8005d24 <adc_stm32_read+0x44>
	if (config->has_temp_channel &&
 8005d98:	f899 3014 	ldrb.w	r3, [r9, #20]
 8005d9c:	b193      	cbz	r3, 8005dc4 <adc_stm32_read+0xe4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d9e:	4b96      	ldr	r3, [pc, #600]	; (8005ff8 <adc_stm32_read+0x318>)
 8005da0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005da4:	b173      	cbz	r3, 8005dc4 <adc_stm32_read+0xe4>
 8005da6:	fab3 f383 	clz	r3, r3
 8005daa:	429d      	cmp	r5, r3
 8005dac:	d10a      	bne.n	8005dc4 <adc_stm32_read+0xe4>
		adc_stm32_disable(adc);
 8005dae:	4658      	mov	r0, fp
 8005db0:	f006 f9d4 	bl	800c15c <adc_stm32_disable>
		adc_stm32_set_common_path(dev, LL_ADC_PATH_INTERNAL_TEMPSENSOR);
 8005db4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8005db8:	6870      	ldr	r0, [r6, #4]
 8005dba:	f7ff ff77 	bl	8005cac <adc_stm32_set_common_path.isra.0>
	return z_impl_k_usleep(us);
 8005dbe:	2078      	movs	r0, #120	; 0x78
 8005dc0:	f006 ff08 	bl	800cbd4 <z_impl_k_usleep>
	if (config->has_vref_channel &&
 8005dc4:	f899 3015 	ldrb.w	r3, [r9, #21]
 8005dc8:	b193      	cbz	r3, 8005df0 <adc_stm32_read+0x110>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dca:	4b8c      	ldr	r3, [pc, #560]	; (8005ffc <adc_stm32_read+0x31c>)
 8005dcc:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005dd0:	b173      	cbz	r3, 8005df0 <adc_stm32_read+0x110>
 8005dd2:	fab3 f383 	clz	r3, r3
 8005dd6:	429d      	cmp	r5, r3
 8005dd8:	d10a      	bne.n	8005df0 <adc_stm32_read+0x110>
		adc_stm32_disable(adc);
 8005dda:	4658      	mov	r0, fp
 8005ddc:	f006 f9be 	bl	800c15c <adc_stm32_disable>
		adc_stm32_set_common_path(dev, LL_ADC_PATH_INTERNAL_VREFINT);
 8005de0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005de4:	6870      	ldr	r0, [r6, #4]
 8005de6:	f7ff ff61 	bl	8005cac <adc_stm32_set_common_path.isra.0>
 8005dea:	200c      	movs	r0, #12
 8005dec:	f006 fef2 	bl	800cbd4 <z_impl_k_usleep>
	if (config->has_vbat_channel &&
 8005df0:	f899 3016 	ldrb.w	r3, [r9, #22]
 8005df4:	b17b      	cbz	r3, 8005e16 <adc_stm32_read+0x136>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df6:	4b82      	ldr	r3, [pc, #520]	; (8006000 <adc_stm32_read+0x320>)
 8005df8:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005dfc:	b15b      	cbz	r3, 8005e16 <adc_stm32_read+0x136>
 8005dfe:	fab3 f383 	clz	r3, r3
 8005e02:	429d      	cmp	r5, r3
 8005e04:	d107      	bne.n	8005e16 <adc_stm32_read+0x136>
		adc_stm32_disable(adc);
 8005e06:	4658      	mov	r0, fp
 8005e08:	f006 f9a8 	bl	800c15c <adc_stm32_disable>
		adc_stm32_set_common_path(dev, LL_ADC_PATH_INTERNAL_VBAT);
 8005e0c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8005e10:	6870      	ldr	r0, [r6, #4]
 8005e12:	f7ff ff4b 	bl	8005cac <adc_stm32_set_common_path.isra.0>
	data->buffer = sequence->buffer;
 8005e16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e1a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	uint32_t channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL(index);
 8005e1e:	2302      	movs	r3, #2
 8005e20:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8005e24:	2d09      	cmp	r5, #9
 8005e26:	fa03 f305 	lsl.w	r3, r3, r5
 8005e2a:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
 8005e2e:	bf85      	ittet	hi
 8005e30:	3a1e      	subhi	r2, #30
 8005e32:	ea43 5302 	orrhi.w	r3, r3, r2, lsl #20
 8005e36:	ea43 5302 	orrls.w	r3, r3, r2, lsl #20
 8005e3a:	f043 7300 	orrhi.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8005e3e:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 8005e42:	0d1b      	lsrs	r3, r3, #20
 8005e44:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005e48:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005e52:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8005e56:	f023 030f 	bic.w	r3, r3, #15
 8005e5a:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
	data->channel_count = 1;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	if (sequence->options) {
 8005e64:	f8d8 3000 	ldr.w	r3, [r8]
 8005e68:	b1cb      	cbz	r3, 8005e9e <adc_stm32_read+0x1be>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
 8005e6a:	899b      	ldrh	r3, [r3, #12]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	005b      	lsls	r3, r3, #1
	if (sequence->buffer_size < needed_buffer_size) {
 8005e70:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8005e74:	4299      	cmp	r1, r3
 8005e76:	d214      	bcs.n	8005ea2 <adc_stm32_read+0x1c2>
		LOG_ERR("Provided buffer is too small (%u/%u)",
 8005e78:	466c      	mov	r4, sp
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	aa02      	add	r2, sp, #8
 8005e7e:	4861      	ldr	r0, [pc, #388]	; (8006004 <adc_stm32_read+0x324>)
 8005e80:	61d3      	str	r3, [r2, #28]
 8005e82:	2304      	movs	r3, #4
 8005e84:	e9c2 0105 	strd	r0, r1, [r2, #20]
 8005e88:	f842 3f10 	str.w	r3, [r2, #16]!
 8005e8c:	4858      	ldr	r0, [pc, #352]	; (8005ff0 <adc_stm32_read+0x310>)
 8005e8e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8005e92:	f006 f972 	bl	800c17a <z_log_msg_static_create.constprop.0>
 8005e96:	46a5      	mov	sp, r4
		return -ENOMEM;
 8005e98:	f06f 040b 	mvn.w	r4, #11
 8005e9c:	e76e      	b.n	8005d7c <adc_stm32_read+0x9c>
	needed_buffer_size = active_channels * sizeof(uint16_t);
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e7e6      	b.n	8005e70 <adc_stm32_read+0x190>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
 8005ea2:	f8db 300c 	ldr.w	r3, [fp, #12]
 8005ea6:	f023 0318 	bic.w	r3, r3, #24
 8005eaa:	ea43 030a 	orr.w	r3, r3, sl
 8005eae:	f8cb 300c 	str.w	r3, [fp, #12]
	if (sequence->oversampling) {
 8005eb2:	f898 3011 	ldrb.w	r3, [r8, #17]
 8005eb6:	b10b      	cbz	r3, 8005ebc <adc_stm32_read+0x1dc>
		LOG_ERR("Oversampling not supported");
 8005eb8:	4b53      	ldr	r3, [pc, #332]	; (8006008 <adc_stm32_read+0x328>)
 8005eba:	e742      	b.n	8005d42 <adc_stm32_read+0x62>
	if (sequence->calibrate) {
 8005ebc:	f898 3012 	ldrb.w	r3, [r8, #18]
 8005ec0:	b12b      	cbz	r3, 8005ece <adc_stm32_read+0x1ee>
		adc_stm32_disable(adc);
 8005ec2:	4658      	mov	r0, fp
 8005ec4:	f006 f94a 	bl	800c15c <adc_stm32_disable>
		adc_stm32_calib(dev);
 8005ec8:	6870      	ldr	r0, [r6, #4]
 8005eca:	f006 f959 	bl	800c180 <adc_stm32_calib.isra.0>
	adc_stm32_enable(adc);
 8005ece:	4658      	mov	r0, fp
 8005ed0:	f006 f92c 	bl	800c12c <adc_stm32_enable>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8005ed4:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005ed8:	f043 0304 	orr.w	r3, r3, #4
 8005edc:	f8cb 3004 	str.w	r3, [fp, #4]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
 8005ee0:	46c6      	mov	lr, r8
 8005ee2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005ee6:	f104 0c64 	add.w	ip, r4, #100	; 0x64
 8005eea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005eee:	f8de 3000 	ldr.w	r3, [lr]
 8005ef2:	f8cc 3000 	str.w	r3, [ip]
	ctx->status = 0;
 8005ef6:	f04f 0e00 	mov.w	lr, #0
 8005efa:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60

	if (sequence->options) {
 8005efe:	f8d8 3000 	ldr.w	r3, [r8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d06e      	beq.n	8005fe4 <adc_stm32_read+0x304>
		ctx->options = *sequence->options;
 8005f06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f08:	f104 0c78 	add.w	ip, r4, #120	; 0x78
 8005f0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
 8005f10:	f8c4 c064 	str.w	ip, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
 8005f14:	f8a4 e088 	strh.w	lr, [r4, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d063      	beq.n	8005fe4 <adc_stm32_read+0x304>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005f1c:	f3bf 8f5b 	dmb	ish
 8005f20:	e854 3f00 	ldrex	r3, [r4]
 8005f24:	e844 e200 	strex	r2, lr, [r4]
 8005f28:	2a00      	cmp	r2, #0
 8005f2a:	d1f9      	bne.n	8005f20 <adc_stm32_read+0x240>
 8005f2c:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
 8005f30:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	 * the same mathematical relationship, each expressed with and
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
 8005f32:	3063      	adds	r0, #99	; 0x63
 8005f34:	f14e 0100 	adc.w	r1, lr, #0
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 8005f38:	2264      	movs	r2, #100	; 0x64
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f7fa fe14 	bl	8000b68 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
 8005f40:	2200      	movs	r2, #0
 8005f42:	e9cd 0100 	strd	r0, r1, [sp]
 8005f46:	2300      	movs	r3, #0
 8005f48:	f104 0008 	add.w	r0, r4, #8
 8005f4c:	f003 ff90 	bl	8009e70 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
 8005f50:	f04f 33ff 	mov.w	r3, #4294967295
 8005f54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f58:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5c:	f001 ffe8 	bl	8007f30 <z_impl_k_sem_take>
	const struct adc_stm32_cfg *config = dev->config;
 8005f60:	f8d6 a004 	ldr.w	sl, [r6, #4]
	return ctx->status;
 8005f64:	6e24      	ldr	r4, [r4, #96]	; 0x60
	if (config->has_temp_channel &&
 8005f66:	f89a 3014 	ldrb.w	r3, [sl, #20]
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 8005f6a:	f8da 8000 	ldr.w	r8, [sl]
	if (config->has_temp_channel &&
 8005f6e:	b17b      	cbz	r3, 8005f90 <adc_stm32_read+0x2b0>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f70:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <adc_stm32_read+0x318>)
 8005f72:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005f76:	b15b      	cbz	r3, 8005f90 <adc_stm32_read+0x2b0>
 8005f78:	fab3 f383 	clz	r3, r3
 8005f7c:	429d      	cmp	r5, r3
 8005f7e:	d107      	bne.n	8005f90 <adc_stm32_read+0x2b0>
		adc_stm32_disable(adc);
 8005f80:	4640      	mov	r0, r8
 8005f82:	f006 f8eb 	bl	800c15c <adc_stm32_disable>
		adc_stm32_unset_common_path(dev, LL_ADC_PATH_INTERNAL_TEMPSENSOR);
 8005f86:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8005f8a:	6870      	ldr	r0, [r6, #4]
 8005f8c:	f7ff fe72 	bl	8005c74 <adc_stm32_unset_common_path.isra.0>
	if (config->has_vref_channel &&
 8005f90:	f89a 3015 	ldrb.w	r3, [sl, #21]
 8005f94:	b17b      	cbz	r3, 8005fb6 <adc_stm32_read+0x2d6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f96:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <adc_stm32_read+0x31c>)
 8005f98:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005f9c:	b15b      	cbz	r3, 8005fb6 <adc_stm32_read+0x2d6>
 8005f9e:	fab3 f383 	clz	r3, r3
 8005fa2:	429d      	cmp	r5, r3
 8005fa4:	d107      	bne.n	8005fb6 <adc_stm32_read+0x2d6>
		adc_stm32_disable(adc);
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f006 f8d8 	bl	800c15c <adc_stm32_disable>
		adc_stm32_unset_common_path(dev, LL_ADC_PATH_INTERNAL_VREFINT);
 8005fac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fb0:	6870      	ldr	r0, [r6, #4]
 8005fb2:	f7ff fe5f 	bl	8005c74 <adc_stm32_unset_common_path.isra.0>
	if (config->has_vbat_channel &&
 8005fb6:	f89a 3016 	ldrb.w	r3, [sl, #22]
 8005fba:	b17b      	cbz	r3, 8005fdc <adc_stm32_read+0x2fc>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbc:	4b10      	ldr	r3, [pc, #64]	; (8006000 <adc_stm32_read+0x320>)
 8005fbe:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005fc2:	b15b      	cbz	r3, 8005fdc <adc_stm32_read+0x2fc>
 8005fc4:	fab3 f383 	clz	r3, r3
 8005fc8:	429d      	cmp	r5, r3
 8005fca:	d107      	bne.n	8005fdc <adc_stm32_read+0x2fc>
		adc_stm32_disable(adc);
 8005fcc:	4640      	mov	r0, r8
 8005fce:	f006 f8c5 	bl	800c15c <adc_stm32_disable>
		adc_stm32_unset_common_path(dev, LL_ADC_PATH_INTERNAL_VBAT);
 8005fd2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8005fd6:	6870      	ldr	r0, [r6, #4]
 8005fd8:	f7ff fe4c 	bl	8005c74 <adc_stm32_unset_common_path.isra.0>
	adc_stm32_enable(adc);
 8005fdc:	4640      	mov	r0, r8
 8005fde:	f006 f8a5 	bl	800c12c <adc_stm32_enable>
}
 8005fe2:	e6cb      	b.n	8005d7c <adc_stm32_read+0x9c>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f006 f8d8 	bl	800c19a <adc_context_start_sampling>
 8005fea:	e7b1      	b.n	8005f50 <adc_stm32_read+0x270>
 8005fec:	080135f5 	.word	0x080135f5
 8005ff0:	0800db3c 	.word	0x0800db3c
 8005ff4:	080135e2 	.word	0x080135e2
 8005ff8:	c3210000 	.word	0xc3210000
 8005ffc:	cb840000 	.word	0xcb840000
 8006000:	c7520000 	.word	0xc7520000
 8006004:	08013613 	.word	0x08013613
 8006008:	08013638 	.word	0x08013638

0800600c <adc_stm32_init>:

static int adc_stm32_init(const struct device *dev)
{
 800600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006010:	b08b      	sub	sp, #44	; 0x2c
	struct adc_stm32_data *data = dev->data;
	const struct adc_stm32_cfg *config = dev->config;
 8006012:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct adc_stm32_data *data = dev->data;
 8006016:	f8d0 a010 	ldr.w	sl, [r0, #16]
	const struct device *const clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 800601a:	f8d8 5000 	ldr.w	r5, [r8]
{
 800601e:	af00      	add	r7, sp, #0
 8006020:	4606      	mov	r6, r0
 8006022:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8006148 <adc_stm32_init+0x13c>
 8006026:	4648      	mov	r0, r9
 8006028:	f006 fd5c 	bl	800cae4 <z_device_is_ready>
	int err;

	LOG_DBG("Initializing....");

	if (!device_is_ready(clk)) {
 800602c:	b988      	cbnz	r0, 8006052 <adc_stm32_init+0x46>
		LOG_ERR("clock control device not ready");
 800602e:	4b47      	ldr	r3, [pc, #284]	; (800614c <adc_stm32_init+0x140>)
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
 8006032:	2302      	movs	r3, #2
 8006034:	4846      	ldr	r0, [pc, #280]	; (8006150 <adc_stm32_init+0x144>)
 8006036:	623b      	str	r3, [r7, #32]
 8006038:	f107 0220 	add.w	r2, r7, #32
 800603c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
 8006040:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("clock control device not ready");
 8006044:	f006 f899 	bl	800c17a <z_log_msg_static_create.constprop.0>
	}
#endif
	adc_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8006048:	4620      	mov	r0, r4
 800604a:	372c      	adds	r7, #44	; 0x2c
 800604c:	46bd      	mov	sp, r7
 800604e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8006052:	f8d9 3008 	ldr.w	r3, [r9, #8]
	data->dev = dev;
 8006056:	f8ca 6090 	str.w	r6, [sl, #144]	; 0x90
		(clock_control_subsys_t *) &config->pclken) != 0) {
 800605a:	f108 0b08 	add.w	fp, r8, #8
 800605e:	4659      	mov	r1, fp
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4648      	mov	r0, r9
 8006064:	4798      	blx	r3
	if (clock_control_on(clk,
 8006066:	4601      	mov	r1, r0
 8006068:	2800      	cmp	r0, #0
 800606a:	d16a      	bne.n	8006142 <adc_stm32_init+0x136>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	f107 0210 	add.w	r2, r7, #16
 8006072:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8006076:	f006 fd0d 	bl	800ca94 <pinctrl_lookup_state>
	if (ret < 0) {
 800607a:	1e04      	subs	r4, r0, #0
 800607c:	db08      	blt.n	8006090 <adc_stm32_init+0x84>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800607e:	693b      	ldr	r3, [r7, #16]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	460a      	mov	r2, r1
 8006086:	7919      	ldrb	r1, [r3, #4]
 8006088:	f001 f9cc 	bl	8007424 <pinctrl_configure_pins>
	if (err < 0) {
 800608c:	1e04      	subs	r4, r0, #0
 800608e:	da0f      	bge.n	80060b0 <adc_stm32_init+0xa4>
		LOG_ERR("ADC pinctrl setup failed (%d)", err);
 8006090:	466d      	mov	r5, sp
 8006092:	b088      	sub	sp, #32
 8006094:	466a      	mov	r2, sp
 8006096:	4b2f      	ldr	r3, [pc, #188]	; (8006154 <adc_stm32_init+0x148>)
 8006098:	482d      	ldr	r0, [pc, #180]	; (8006150 <adc_stm32_init+0x144>)
 800609a:	e9c2 3405 	strd	r3, r4, [r2, #20]
 800609e:	2303      	movs	r3, #3
 80060a0:	f842 3f10 	str.w	r3, [r2, #16]!
 80060a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80060a8:	f006 f867 	bl	800c17a <z_log_msg_static_create.constprop.0>
 80060ac:	46ad      	mov	sp, r5
		return err;
 80060ae:	e7cb      	b.n	8006048 <adc_stm32_init+0x3c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80060b0:	68ab      	ldr	r3, [r5, #8]
 80060b2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80060b6:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CR,
 80060b8:	68ab      	ldr	r3, [r5, #8]
 80060ba:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80060be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c6:	60ab      	str	r3, [r5, #8]
	z_impl_k_busy_wait(usec_to_wait);
 80060c8:	200a      	movs	r0, #10
 80060ca:	f003 fe0b 	bl	8009ce4 <z_impl_k_busy_wait>
	LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(adc),
 80060ce:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
 80060d2:	d02c      	beq.n	800612e <adc_stm32_init+0x122>
 80060d4:	4920      	ldr	r1, [pc, #128]	; (8006158 <adc_stm32_init+0x14c>)
 80060d6:	4b21      	ldr	r3, [pc, #132]	; (800615c <adc_stm32_init+0x150>)
 80060d8:	4a21      	ldr	r2, [pc, #132]	; (8006160 <adc_stm32_init+0x154>)
 80060da:	428d      	cmp	r5, r1
 80060dc:	bf08      	it	eq
 80060de:	4613      	moveq	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE, CommonClock);
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80060e6:	609a      	str	r2, [r3, #8]
	adc_stm32_calib(dev);
 80060e8:	6870      	ldr	r0, [r6, #4]
 80060ea:	f006 f849 	bl	800c180 <adc_stm32_calib.isra.0>
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80060ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	b9eb      	cbnz	r3, 8006132 <adc_stm32_init+0x126>
		LOG_ERR("ADC clock rate get error.");
 80060f6:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <adc_stm32_init+0x158>)
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
 80060fa:	2302      	movs	r3, #2
 80060fc:	4814      	ldr	r0, [pc, #80]	; (8006150 <adc_stm32_init+0x144>)
 80060fe:	623b      	str	r3, [r7, #32]
 8006100:	f107 0220 	add.w	r2, r7, #32
 8006104:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006108:	f006 f837 	bl	800c17a <z_log_msg_static_create.constprop.0>
	err = adc_stm32_enable(adc);
 800610c:	4628      	mov	r0, r5
 800610e:	f006 f80d 	bl	800c12c <adc_stm32_enable>
	if (err < 0) {
 8006112:	1e04      	subs	r4, r0, #0
 8006114:	db98      	blt.n	8006048 <adc_stm32_init+0x3c>
	config->irq_cfg_func();
 8006116:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800611a:	4798      	blx	r3
	if (!k_sem_count_get(&ctx->lock)) {
 800611c:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8006120:	b91b      	cbnz	r3, 800612a <adc_stm32_init+0x11e>
	z_impl_k_sem_give(sem);
 8006122:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8006126:	f001 fec5 	bl	8007eb4 <z_impl_k_sem_give>
	return 0;
 800612a:	2400      	movs	r4, #0
 800612c:	e78c      	b.n	8006048 <adc_stm32_init+0x3c>
	LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(adc),
 800612e:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <adc_stm32_init+0x154>)
 8006130:	e7d6      	b.n	80060e0 <adc_stm32_init+0xd4>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8006132:	4805      	ldr	r0, [pc, #20]	; (8006148 <adc_stm32_init+0x13c>)
 8006134:	f107 020c 	add.w	r2, r7, #12
 8006138:	4659      	mov	r1, fp
 800613a:	4798      	blx	r3
	if (clock_control_get_rate(clk,
 800613c:	2800      	cmp	r0, #0
 800613e:	dae5      	bge.n	800610c <adc_stm32_init+0x100>
 8006140:	e7d9      	b.n	80060f6 <adc_stm32_init+0xea>
		return -EIO;
 8006142:	f06f 0404 	mvn.w	r4, #4
 8006146:	e77f      	b.n	8006048 <adc_stm32_init+0x3c>
 8006148:	0800d6e0 	.word	0x0800d6e0
 800614c:	08013653 	.word	0x08013653
 8006150:	0800db3c 	.word	0x0800db3c
 8006154:	08013672 	.word	0x08013672
 8006158:	50000100 	.word	0x50000100
 800615c:	50000700 	.word	0x50000700
 8006160:	50000300 	.word	0x50000300
 8006164:	08013690 	.word	0x08013690

08006168 <stm32_clock_control_get_subsys_rate>:
}

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8006168:	b510      	push	{r4, lr}
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 800616a:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <stm32_clock_control_get_subsys_rate+0x50>)
 800616c:	6818      	ldr	r0, [r3, #0]
	/* AHB3 bus exists, but w/o dedicated prescaler */
	uint32_t ahb3_clock = ahb_clock;
#endif

#if defined(STM32_SRC_PCLK)
	if (pclken->bus == STM32_SRC_PCLK) {
 800616e:	680b      	ldr	r3, [r1, #0]
 8006170:	2b05      	cmp	r3, #5
{
 8006172:	4614      	mov	r4, r2
	if (pclken->bus == STM32_SRC_PCLK) {
 8006174:	d005      	beq.n	8006182 <stm32_clock_control_get_subsys_rate+0x1a>
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8006176:	2b06      	cmp	r3, #6
 8006178:	d015      	beq.n	80061a6 <stm32_clock_control_get_subsys_rate+0x3e>
 800617a:	d80a      	bhi.n	8006192 <stm32_clock_control_get_subsys_rate+0x2a>
 800617c:	2b02      	cmp	r3, #2
 800617e:	d803      	bhi.n	8006188 <stm32_clock_control_get_subsys_rate+0x20>
 8006180:	b96b      	cbnz	r3, 800619e <stm32_clock_control_get_subsys_rate+0x36>
 8006182:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006186:	e003      	b.n	8006190 <stm32_clock_control_get_subsys_rate+0x28>
 8006188:	2b04      	cmp	r3, #4
 800618a:	d1fa      	bne.n	8006182 <stm32_clock_control_get_subsys_rate+0x1a>
	case STM32_CLOCK_BUS_AHB2:
#endif
#if defined(STM32_CLOCK_BUS_IOP)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 800618c:	6020      	str	r0, [r4, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800618e:	2000      	movs	r0, #0
}
 8006190:	bd10      	pop	{r4, pc}
	switch (pclken->bus) {
 8006192:	2b18      	cmp	r3, #24
 8006194:	d0fa      	beq.n	800618c <stm32_clock_control_get_subsys_rate+0x24>
 8006196:	2b1c      	cmp	r3, #28
 8006198:	d003      	beq.n	80061a2 <stm32_clock_control_get_subsys_rate+0x3a>
 800619a:	2b14      	cmp	r3, #20
 800619c:	e7f5      	b.n	800618a <stm32_clock_control_get_subsys_rate+0x22>
 800619e:	2000      	movs	r0, #0
 80061a0:	e7f4      	b.n	800618c <stm32_clock_control_get_subsys_rate+0x24>
	return clock / prescaler;
 80061a2:	0840      	lsrs	r0, r0, #1
		break;
 80061a4:	e7f2      	b.n	800618c <stm32_clock_control_get_subsys_rate+0x24>
		if (get_pllout_frequency() == 0) {
 80061a6:	f000 f88b 	bl	80062c0 <get_pllout_frequency>
 80061aa:	b110      	cbz	r0, 80061b2 <stm32_clock_control_get_subsys_rate+0x4a>
		*rate = get_pllout_frequency();
 80061ac:	f000 f888 	bl	80062c0 <get_pllout_frequency>
		break;
 80061b0:	e7ec      	b.n	800618c <stm32_clock_control_get_subsys_rate+0x24>
			return -EIO;
 80061b2:	f06f 0004 	mvn.w	r0, #4
 80061b6:	e7eb      	b.n	8006190 <stm32_clock_control_get_subsys_rate+0x28>
 80061b8:	20000114 	.word	0x20000114

080061bc <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 80061bc:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80061be:	4c34      	ldr	r4, [pc, #208]	; (8006290 <stm32_clock_control_init+0xd4>)

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 80061c0:	4e34      	ldr	r6, [pc, #208]	; (8006294 <stm32_clock_control_init+0xd8>)
	config_enable_default_clocks();
 80061c2:	f006 f894 	bl	800c2ee <config_enable_default_clocks>
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 80061c6:	f001 f987 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 80061ca:	6863      	ldr	r3, [r4, #4]
 80061cc:	4a32      	ldr	r2, [pc, #200]	; (8006298 <stm32_clock_control_init+0xdc>)
 80061ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80061d2:	5cd3      	ldrb	r3, [r2, r3]
 80061d4:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 80061d8:	42b5      	cmp	r5, r6
 80061da:	d802      	bhi.n	80061e2 <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 80061dc:	482f      	ldr	r0, [pc, #188]	; (800629c <stm32_clock_control_init+0xe0>)
 80061de:	f001 f9f3 	bl	80075c8 <LL_SetFlashLatency>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061e8:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f0:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80061f2:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 80061f4:	0398      	lsls	r0, r3, #14
 80061f6:	d5fc      	bpl.n	80061f2 <stm32_clock_control_init+0x36>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	f003 030c 	and.w	r3, r3, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d115      	bne.n	800622e <stm32_clock_control_init+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006202:	6863      	ldr	r3, [r4, #4]
 8006204:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006208:	6063      	str	r3, [r4, #4]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800620a:	6823      	ldr	r3, [r4, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 800620c:	0799      	lsls	r1, r3, #30
 800620e:	d406      	bmi.n	800621e <stm32_clock_control_init+0x62>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	f043 0301 	orr.w	r3, r3, #1
 8006216:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8006218:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 800621a:	079a      	lsls	r2, r3, #30
 800621c:	d5fc      	bpl.n	8006218 <stm32_clock_control_init+0x5c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800621e:	6863      	ldr	r3, [r4, #4]
 8006220:	f023 0303 	bic.w	r3, r3, #3
 8006224:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006226:	6863      	ldr	r3, [r4, #4]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8006228:	f013 0f0c 	tst.w	r3, #12
 800622c:	d1fb      	bne.n	8006226 <stm32_clock_control_init+0x6a>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006234:	6023      	str	r3, [r4, #0]
	config_pll_sysclock();
 8006236:	f000 f835 	bl	80062a4 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006240:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8006242:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 8006244:	019b      	lsls	r3, r3, #6
 8006246:	d5fc      	bpl.n	8006242 <stm32_clock_control_init+0x86>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006248:	6863      	ldr	r3, [r4, #4]
 800624a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800624e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	f023 0303 	bic.w	r3, r3, #3
 8006256:	f043 0302 	orr.w	r3, r3, #2
 800625a:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800625c:	6863      	ldr	r3, [r4, #4]
 800625e:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8006262:	2b08      	cmp	r3, #8
 8006264:	d1fa      	bne.n	800625c <stm32_clock_control_init+0xa0>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8006266:	42b5      	cmp	r5, r6
 8006268:	d902      	bls.n	8006270 <stm32_clock_control_init+0xb4>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 800626a:	480c      	ldr	r0, [pc, #48]	; (800629c <stm32_clock_control_init+0xe0>)
 800626c:	f001 f9ac 	bl	80075c8 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8006270:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <stm32_clock_control_init+0xe4>)
 8006272:	4a0a      	ldr	r2, [pc, #40]	; (800629c <stm32_clock_control_init+0xe0>)
 8006274:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006276:	6863      	ldr	r3, [r4, #4]
 8006278:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800627c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006280:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006282:	6863      	ldr	r3, [r4, #4]
 8006284:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006288:	6063      	str	r3, [r4, #4]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800628a:	2000      	movs	r0, #0
 800628c:	bd70      	pop	{r4, r5, r6, pc}
 800628e:	bf00      	nop
 8006290:	40021000 	.word	0x40021000
 8006294:	044aa1ff 	.word	0x044aa1ff
 8006298:	08013a6d 	.word	0x08013a6d
 800629c:	044aa200 	.word	0x044aa200
 80062a0:	20000114 	.word	0x20000114

080062a4 <config_pll_sysclock>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 80062a4:	4a05      	ldr	r2, [pc, #20]	; (80062bc <config_pll_sysclock+0x18>)
 80062a6:	6853      	ldr	r3, [r2, #4]
 80062a8:	f423 1376 	bic.w	r3, r3, #4030464	; 0x3d8000
 80062ac:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80062b0:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 80062b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80062b4:	f023 030f 	bic.w	r3, r3, #15
 80062b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		__ASSERT(0, "Invalid source");
	}

	LL_RCC_PLL_ConfigDomain_SYS(pll_source, pll_mul);
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80062ba:	4770      	bx	lr
 80062bc:	40021000 	.word	0x40021000

080062c0 <get_pllout_frequency>:
		pll_input_freq = STM32_HSI_FREQ;
	} else {
		return 0;
	}

	return __LL_RCC_CALC_PLLCLK_FREQ(pll_input_freq, pll_mul, pll_div);
 80062c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80062c8:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80062cc:	fab2 f282 	clz	r2, r2
 80062d0:	40d3      	lsrs	r3, r2
		return 0;
	}

	return __LL_RCC_CALC_PLLCLK_FREQ(pll_input_freq, pll_mul);
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80062d2:	4802      	ldr	r0, [pc, #8]	; (80062dc <get_pllout_frequency+0x1c>)
	return __LL_RCC_CALC_PLLCLK_FREQ(pll_input_freq, pll_mul, pll_div);
 80062d4:	3302      	adds	r3, #2
}
 80062d6:	4358      	muls	r0, r3
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	007a1200 	.word	0x007a1200

080062e0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 80062e0:	b508      	push	{r3, lr}
 80062e2:	4807      	ldr	r0, [pc, #28]	; (8006300 <uart_console_init+0x20>)
 80062e4:	f006 fbfe 	bl	800cae4 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
 80062e8:	b138      	cbz	r0, 80062fa <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 80062ea:	4806      	ldr	r0, [pc, #24]	; (8006304 <uart_console_init+0x24>)
 80062ec:	f7ff faa4 	bl	8005838 <__stdout_hook_install>
	__printk_hook_install(console_out);
 80062f0:	4804      	ldr	r0, [pc, #16]	; (8006304 <uart_console_init+0x24>)
 80062f2:	f7fc fa6f 	bl	80027d4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 80062f6:	2000      	movs	r0, #0
}
 80062f8:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80062fa:	f06f 0012 	mvn.w	r0, #18
 80062fe:	e7fb      	b.n	80062f8 <uart_console_init+0x18>
 8006300:	0800d7a0 	.word	0x0800d7a0
 8006304:	08006309 	.word	0x08006309

08006308 <console_out>:
	if ('\n' == c) {
 8006308:	280a      	cmp	r0, #10
{
 800630a:	b538      	push	{r3, r4, r5, lr}
 800630c:	4d07      	ldr	r5, [pc, #28]	; (800632c <console_out+0x24>)
 800630e:	4604      	mov	r4, r0
	if ('\n' == c) {
 8006310:	d104      	bne.n	800631c <console_out+0x14>
 8006312:	68ab      	ldr	r3, [r5, #8]
 8006314:	210d      	movs	r1, #13
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	4628      	mov	r0, r5
 800631a:	4798      	blx	r3
 800631c:	68ab      	ldr	r3, [r5, #8]
 800631e:	4803      	ldr	r0, [pc, #12]	; (800632c <console_out+0x24>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	b2e1      	uxtb	r1, r4
 8006324:	4798      	blx	r3
}
 8006326:	4620      	mov	r0, r4
 8006328:	bd38      	pop	{r3, r4, r5, pc}
 800632a:	bf00      	nop
 800632c:	0800d7a0 	.word	0x0800d7a0

08006330 <ssd1306_get_capabilities>:
 8006330:	2300      	movs	r3, #0
				     struct display_capabilities *caps)
{
	memset(caps, 0, sizeof(struct display_capabilities));
	caps->x_resolution = DT_INST_PROP(0, width);
	caps->y_resolution = DT_INST_PROP(0, height);
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
 8006332:	4a05      	ldr	r2, [pc, #20]	; (8006348 <ssd1306_get_capabilities+0x18>)
 8006334:	f8a1 300d 	strh.w	r3, [r1, #13]
 8006338:	73cb      	strb	r3, [r1, #15]
 800633a:	2304      	movs	r3, #4
 800633c:	e9c1 2300 	strd	r2, r3, [r1]
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
	caps->screen_info = SCREEN_INFO_MONO_VTILED;
 8006340:	2201      	movs	r2, #1
 8006342:	608a      	str	r2, [r1, #8]
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
 8006344:	730b      	strb	r3, [r1, #12]
}
 8006346:	4770      	bx	lr
 8006348:	00400080 	.word	0x00400080

0800634c <ssd1306_read>:
{
 800634c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Unsupported");
 800634e:	4b07      	ldr	r3, [pc, #28]	; (800636c <ssd1306_read+0x20>)
 8006350:	9305      	str	r3, [sp, #20]
 8006352:	4807      	ldr	r0, [pc, #28]	; (8006370 <ssd1306_read+0x24>)
 8006354:	2302      	movs	r3, #2
 8006356:	aa04      	add	r2, sp, #16
 8006358:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800635c:	9304      	str	r3, [sp, #16]
 800635e:	f005 ffc7 	bl	800c2f0 <z_log_msg_static_create.constprop.0>
}
 8006362:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006366:	b007      	add	sp, #28
 8006368:	f85d fb04 	ldr.w	pc, [sp], #4
 800636c:	080136ce 	.word	0x080136ce
 8006370:	0800db8c 	.word	0x0800db8c

08006374 <ssd1306_get_framebuffer>:
{
 8006374:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Unsupported");
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <ssd1306_get_framebuffer+0x20>)
 8006378:	9305      	str	r3, [sp, #20]
 800637a:	4807      	ldr	r0, [pc, #28]	; (8006398 <ssd1306_get_framebuffer+0x24>)
 800637c:	2302      	movs	r3, #2
 800637e:	aa04      	add	r2, sp, #16
 8006380:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	f005 ffb3 	bl	800c2f0 <z_log_msg_static_create.constprop.0>
}
 800638a:	2000      	movs	r0, #0
 800638c:	b007      	add	sp, #28
 800638e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006392:	bf00      	nop
 8006394:	080136ce 	.word	0x080136ce
 8006398:	0800db8c 	.word	0x0800db8c

0800639c <ssd1306_set_brightness>:
{
 800639c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_WRN("Unsupported");
 800639e:	4b07      	ldr	r3, [pc, #28]	; (80063bc <ssd1306_set_brightness+0x20>)
 80063a0:	9305      	str	r3, [sp, #20]
 80063a2:	4807      	ldr	r0, [pc, #28]	; (80063c0 <ssd1306_set_brightness+0x24>)
 80063a4:	2302      	movs	r3, #2
 80063a6:	aa04      	add	r2, sp, #16
 80063a8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	f005 ff9f 	bl	800c2f0 <z_log_msg_static_create.constprop.0>
}
 80063b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80063b6:	b007      	add	sp, #28
 80063b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80063bc:	080136ce 	.word	0x080136ce
 80063c0:	0800db8c 	.word	0x0800db8c

080063c4 <ssd1306_set_pixel_format.part.0>:
{
	LOG_ERR("Unsupported");
	return -ENOTSUP;
}

static int ssd1306_set_pixel_format(const struct device *dev,
 80063c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
				    const enum display_pixel_format pf)
{
	if (pf == PIXEL_FORMAT_MONO10) {
		return 0;
	}
	LOG_ERR("Unsupported");
 80063c6:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <ssd1306_set_pixel_format.part.0+0x20>)
 80063c8:	9305      	str	r3, [sp, #20]
 80063ca:	4807      	ldr	r0, [pc, #28]	; (80063e8 <ssd1306_set_pixel_format.part.0+0x24>)
 80063cc:	2302      	movs	r3, #2
 80063ce:	aa04      	add	r2, sp, #16
 80063d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80063d4:	9304      	str	r3, [sp, #16]
 80063d6:	f005 ff8b 	bl	800c2f0 <z_log_msg_static_create.constprop.0>
	return -ENOTSUP;
}
 80063da:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80063de:	b007      	add	sp, #28
 80063e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80063e4:	080136ce 	.word	0x080136ce
 80063e8:	0800db8c 	.word	0x0800db8c

080063ec <ssd1306_set_orientation>:
{
 80063ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Unsupported");
 80063ee:	4b07      	ldr	r3, [pc, #28]	; (800640c <ssd1306_set_orientation+0x20>)
 80063f0:	9305      	str	r3, [sp, #20]
 80063f2:	4807      	ldr	r0, [pc, #28]	; (8006410 <ssd1306_set_orientation+0x24>)
 80063f4:	2302      	movs	r3, #2
 80063f6:	aa04      	add	r2, sp, #16
 80063f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	f005 ff77 	bl	800c2f0 <z_log_msg_static_create.constprop.0>
}
 8006402:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006406:	b007      	add	sp, #28
 8006408:	f85d fb04 	ldr.w	pc, [sp], #4
 800640c:	080136ce 	.word	0x080136ce
 8006410:	0800db8c 	.word	0x0800db8c

08006414 <ssd1306_write>:
{
 8006414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006418:	461c      	mov	r4, r3
	if (desc->pitch < desc->width) {
 800641a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800641e:	889b      	ldrh	r3, [r3, #4]
{
 8006420:	b088      	sub	sp, #32
	if (desc->pitch < desc->width) {
 8006422:	459c      	cmp	ip, r3
{
 8006424:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006426:	4606      	mov	r6, r0
	if (desc->pitch < desc->width) {
 8006428:	d20e      	bcs.n	8006448 <ssd1306_write+0x34>
		LOG_ERR("Pitch is smaller then width");
 800642a:	4b2b      	ldr	r3, [pc, #172]	; (80064d8 <ssd1306_write+0xc4>)
		LOG_ERR("Display buffer is not available");
 800642c:	9307      	str	r3, [sp, #28]
 800642e:	482b      	ldr	r0, [pc, #172]	; (80064dc <ssd1306_write+0xc8>)
 8006430:	2302      	movs	r3, #2
 8006432:	aa06      	add	r2, sp, #24
 8006434:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006438:	9306      	str	r3, [sp, #24]
 800643a:	f005 ff59 	bl	800c2f0 <z_log_msg_static_create.constprop.0>
		return -1;
 800643e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006442:	b008      	add	sp, #32
 8006444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf_len = MIN(desc->buf_size, desc->height * desc->width / 8);
 8006448:	88e5      	ldrh	r5, [r4, #6]
 800644a:	6820      	ldr	r0, [r4, #0]
 800644c:	435d      	muls	r5, r3
 800644e:	10ed      	asrs	r5, r5, #3
 8006450:	4285      	cmp	r5, r0
 8006452:	bf28      	it	cs
 8006454:	4605      	movcs	r5, r0
	if (buf == NULL || buf_len == 0U) {
 8006456:	b107      	cbz	r7, 800645a <ssd1306_write+0x46>
 8006458:	b90d      	cbnz	r5, 800645e <ssd1306_write+0x4a>
		LOG_ERR("Display buffer is not available");
 800645a:	4b21      	ldr	r3, [pc, #132]	; (80064e0 <ssd1306_write+0xcc>)
 800645c:	e7e6      	b.n	800642c <ssd1306_write+0x18>
	if (desc->pitch > desc->width) {
 800645e:	459c      	cmp	ip, r3
 8006460:	d901      	bls.n	8006466 <ssd1306_write+0x52>
		LOG_ERR("Unsupported mode");
 8006462:	4b20      	ldr	r3, [pc, #128]	; (80064e4 <ssd1306_write+0xd0>)
 8006464:	e7e2      	b.n	800642c <ssd1306_write+0x18>
	if ((y & 0x7) != 0U) {
 8006466:	f012 0907 	ands.w	r9, r2, #7
 800646a:	d001      	beq.n	8006470 <ssd1306_write+0x5c>
		LOG_ERR("Unsupported origin");
 800646c:	4b1e      	ldr	r3, [pc, #120]	; (80064e8 <ssd1306_write+0xd4>)
 800646e:	e7dd      	b.n	800642c <ssd1306_write+0x18>
	uint8_t x_offset = x + DT_INST_PROP(0, segment_offset);
 8006470:	3102      	adds	r1, #2
		SSD1306_SET_LOWER_COL_ADDRESS |
 8006472:	f001 030f 	and.w	r3, r1, #15
		SSD1306_SET_HIGHER_COL_ADDRESS |
 8006476:	f3c1 1103 	ubfx	r1, r1, #4, #4
	uint8_t cmd_buf[] = {
 800647a:	f041 0110 	orr.w	r1, r1, #16
 800647e:	f88d 3004 	strb.w	r3, [sp, #4]
 8006482:	f88d 1005 	strb.w	r1, [sp, #5]
 8006486:	f3c2 08c7 	ubfx	r8, r2, #3, #8
	for (uint8_t n = 0; n < desc->height / 8; n++) {
 800648a:	46ba      	mov	sl, r7
 800648c:	88e2      	ldrh	r2, [r4, #6]
 800648e:	fa5f f389 	uxtb.w	r3, r9
 8006492:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8006496:	d301      	bcc.n	800649c <ssd1306_write+0x88>
	return 0;
 8006498:	2000      	movs	r0, #0
 800649a:	e7d2      	b.n	8006442 <ssd1306_write+0x2e>
			SSD1306_SET_PAGE_START_ADDRESS | (n + (y / 8));
 800649c:	4443      	add	r3, r8
		cmd_buf[sizeof(cmd_buf) - 1] =
 800649e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80064a2:	f88d 3006 	strb.w	r3, [sp, #6]
		if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
 80064a6:	6870      	ldr	r0, [r6, #4]
 80064a8:	2301      	movs	r3, #1
 80064aa:	2203      	movs	r2, #3
 80064ac:	a901      	add	r1, sp, #4
 80064ae:	f005 ff28 	bl	800c302 <ssd1306_write_bus.isra.0>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d1c2      	bne.n	800643e <ssd1306_write+0x2a>
		if (ssd1306_write_bus(dev, buf_ptr, desc->width, false)) {
 80064b8:	88a2      	ldrh	r2, [r4, #4]
 80064ba:	6870      	ldr	r0, [r6, #4]
 80064bc:	4651      	mov	r1, sl
 80064be:	f005 ff20 	bl	800c302 <ssd1306_write_bus.isra.0>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d1bb      	bne.n	800643e <ssd1306_write+0x2a>
		buf_ptr = buf_ptr + desc->width;
 80064c6:	88a3      	ldrh	r3, [r4, #4]
 80064c8:	449a      	add	sl, r3
		if (buf_ptr > ((uint8_t *)buf + buf_len)) {
 80064ca:	197b      	adds	r3, r7, r5
 80064cc:	459a      	cmp	sl, r3
 80064ce:	f109 0901 	add.w	r9, r9, #1
 80064d2:	d9db      	bls.n	800648c <ssd1306_write+0x78>
			LOG_ERR("Exceeded buffer length");
 80064d4:	4b05      	ldr	r3, [pc, #20]	; (80064ec <ssd1306_write+0xd8>)
 80064d6:	e7a9      	b.n	800642c <ssd1306_write+0x18>
 80064d8:	080136da 	.word	0x080136da
 80064dc:	0800db8c 	.word	0x0800db8c
 80064e0:	080136f6 	.word	0x080136f6
 80064e4:	08013716 	.word	0x08013716
 80064e8:	08013727 	.word	0x08013727
 80064ec:	0801373a 	.word	0x0801373a

080064f0 <gpio_pin_set.isra.0>:
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
 80064f0:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 80064f2:	2301      	movs	r3, #1
 80064f4:	fa03 f101 	lsl.w	r1, r3, r1
 80064f8:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
 80064fa:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4219      	tst	r1, r3
 8006500:	d10e      	bne.n	8006520 <gpio_pin_set.isra.0+0x30>
 8006502:	490e      	ldr	r1, [pc, #56]	; (800653c <gpio_pin_set.isra.0+0x4c>)
 8006504:	4a0e      	ldr	r2, [pc, #56]	; (8006540 <gpio_pin_set.isra.0+0x50>)
 8006506:	480f      	ldr	r0, [pc, #60]	; (8006544 <gpio_pin_set.isra.0+0x54>)
 8006508:	f240 5325 	movw	r3, #1317	; 0x525
 800650c:	f005 fc35 	bl	800bd7a <assert_print>
 8006510:	480d      	ldr	r0, [pc, #52]	; (8006548 <gpio_pin_set.isra.0+0x58>)
 8006512:	f005 fc32 	bl	800bd7a <assert_print>
 8006516:	480a      	ldr	r0, [pc, #40]	; (8006540 <gpio_pin_set.isra.0+0x50>)
 8006518:	f240 5125 	movw	r1, #1317	; 0x525
 800651c:	f005 fc26 	bl	800bd6c <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8006524:	bf18      	it	ne
 8006526:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 800652a:	b122      	cbz	r2, 8006536 <gpio_pin_set.isra.0+0x46>
	return api->port_set_bits_raw(port, pins);
 800652c:	6883      	ldr	r3, [r0, #8]
 800652e:	68db      	ldr	r3, [r3, #12]
}
 8006530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
 8006534:	4718      	bx	r3
 8006536:	6883      	ldr	r3, [r0, #8]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	e7f9      	b.n	8006530 <gpio_pin_set.isra.0+0x40>
 800653c:	0800e3f7 	.word	0x0800e3f7
 8006540:	0800e10a 	.word	0x0800e10a
 8006544:	0800e198 	.word	0x0800e198
 8006548:	0800e435 	.word	0x0800e435

0800654c <ssd1306_init>:

	return 0;
}

static int ssd1306_init(const struct device *dev)
{
 800654c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800654e:	b089      	sub	sp, #36	; 0x24
	const struct ssd1306_config *config = dev->config;
 8006550:	6845      	ldr	r5, [r0, #4]
{
 8006552:	af00      	add	r7, sp, #0
 8006554:	4604      	mov	r4, r0
	return device_is_ready(config->bus.bus);
 8006556:	6828      	ldr	r0, [r5, #0]
 8006558:	f006 fac4 	bl	800cae4 <z_device_is_ready>

	LOG_DBG("");

	if (!ssd1306_bus_ready(dev)) {
 800655c:	b9c0      	cbnz	r0, 8006590 <ssd1306_init+0x44>
		LOG_ERR("Bus device %s not ready!", config->bus.bus->name);
 800655e:	682b      	ldr	r3, [r5, #0]
 8006560:	466c      	mov	r4, sp
 8006562:	b088      	sub	sp, #32
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	466a      	mov	r2, sp
 8006568:	4971      	ldr	r1, [pc, #452]	; (8006730 <ssd1306_init+0x1e4>)
 800656a:	4872      	ldr	r0, [pc, #456]	; (8006734 <ssd1306_init+0x1e8>)
 800656c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8006570:	2302      	movs	r3, #2
 8006572:	7713      	strb	r3, [r2, #28]
 8006574:	4b70      	ldr	r3, [pc, #448]	; (8006738 <ssd1306_init+0x1ec>)
 8006576:	f842 3f10 	str.w	r3, [r2, #16]!
 800657a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
 800657e:	f005 feb7 	bl	800c2f0 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
 8006582:	f06f 0515 	mvn.w	r5, #21
 8006586:	46a5      	mov	sp, r4
		LOG_ERR("Failed to initialize device!");
		return -EIO;
	}

	return 0;
}
 8006588:	4628      	mov	r0, r5
 800658a:	3724      	adds	r7, #36	; 0x24
 800658c:	46bd      	mov	sp, r7
 800658e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (config->reset.port) {
 8006590:	68a8      	ldr	r0, [r5, #8]
 8006592:	b9c8      	cbnz	r0, 80065c8 <ssd1306_init+0x7c>
	const struct ssd1306_config *config = dev->config;
 8006594:	6865      	ldr	r5, [r4, #4]
	uint8_t cmd_buf[] = {
 8006596:	f24a 73a4 	movw	r3, #42916	; 0xa7a4
 800659a:	80bb      	strh	r3, [r7, #4]
	if (config->reset.port) {
 800659c:	68ab      	ldr	r3, [r5, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d162      	bne.n	8006668 <ssd1306_init+0x11c>
	if (ssd1306_suspend(dev)) {
 80065a2:	4620      	mov	r0, r4
 80065a4:	f005 feda 	bl	800c35c <ssd1306_suspend>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d070      	beq.n	800668e <ssd1306_init+0x142>
		LOG_ERR("Failed to initialize device!");
 80065ac:	4b63      	ldr	r3, [pc, #396]	; (800673c <ssd1306_init+0x1f0>)
 80065ae:	61fb      	str	r3, [r7, #28]
 80065b0:	2302      	movs	r3, #2
 80065b2:	4860      	ldr	r0, [pc, #384]	; (8006734 <ssd1306_init+0x1e8>)
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	f107 0218 	add.w	r2, r7, #24
 80065ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80065be:	f005 fe97 	bl	800c2f0 <z_log_msg_static_create.constprop.0>
		return -EIO;
 80065c2:	f06f 0504 	mvn.w	r5, #4
 80065c6:	e7df      	b.n	8006588 <ssd1306_init+0x3c>
				  spec->pin,
 80065c8:	7b29      	ldrb	r1, [r5, #12]
				  spec->dt_flags | extra_flags);
 80065ca:	89eb      	ldrh	r3, [r5, #14]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
 80065cc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80065d0:	2a30      	cmp	r2, #48	; 0x30
	__unused const struct gpio_driver_config *const cfg =
 80065d2:	e9d0 5e01 	ldrd	r5, lr, [r0, #4]
	struct gpio_driver_data *data =
 80065d6:	f8d0 c010 	ldr.w	ip, [r0, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
 80065da:	d10e      	bne.n	80065fa <ssd1306_init+0xae>
 80065dc:	4958      	ldr	r1, [pc, #352]	; (8006740 <ssd1306_init+0x1f4>)
 80065de:	4a59      	ldr	r2, [pc, #356]	; (8006744 <ssd1306_init+0x1f8>)
 80065e0:	4859      	ldr	r0, [pc, #356]	; (8006748 <ssd1306_init+0x1fc>)
 80065e2:	f240 23bf 	movw	r3, #703	; 0x2bf
 80065e6:	f005 fbc8 	bl	800bd7a <assert_print>
 80065ea:	4858      	ldr	r0, [pc, #352]	; (800674c <ssd1306_init+0x200>)
 80065ec:	f005 fbc5 	bl	800bd7a <assert_print>
 80065f0:	f240 21bf 	movw	r1, #703	; 0x2bf
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
 80065f4:	4853      	ldr	r0, [pc, #332]	; (8006744 <ssd1306_init+0x1f8>)
 80065f6:	f005 fbb9 	bl	800bd6c <assert_post_action>
 80065fa:	f003 0206 	and.w	r2, r3, #6
 80065fe:	2a04      	cmp	r2, #4
 8006600:	d109      	bne.n	8006616 <ssd1306_init+0xca>
 8006602:	4953      	ldr	r1, [pc, #332]	; (8006750 <ssd1306_init+0x204>)
 8006604:	4a4f      	ldr	r2, [pc, #316]	; (8006744 <ssd1306_init+0x1f8>)
 8006606:	4850      	ldr	r0, [pc, #320]	; (8006748 <ssd1306_init+0x1fc>)
 8006608:	f240 23c7 	movw	r3, #711	; 0x2c7
 800660c:	f005 fbb5 	bl	800bd7a <assert_print>
 8006610:	f240 21c7 	movw	r1, #711	; 0x2c7
 8006614:	e7ee      	b.n	80065f4 <ssd1306_init+0xa8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8006616:	682d      	ldr	r5, [r5, #0]
 8006618:	2601      	movs	r6, #1
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800661a:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 800661c:	fa06 f601 	lsl.w	r6, r6, r1
	return gpio_pin_configure(spec->port,
 8006620:	bf54      	ite	pl
 8006622:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8006626:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 800662a:	422e      	tst	r6, r5
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800662c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8006630:	d10c      	bne.n	800664c <ssd1306_init+0x100>
 8006632:	4948      	ldr	r1, [pc, #288]	; (8006754 <ssd1306_init+0x208>)
 8006634:	4a43      	ldr	r2, [pc, #268]	; (8006744 <ssd1306_init+0x1f8>)
 8006636:	4844      	ldr	r0, [pc, #272]	; (8006748 <ssd1306_init+0x1fc>)
 8006638:	f240 23da 	movw	r3, #730	; 0x2da
 800663c:	f005 fb9d 	bl	800bd7a <assert_print>
 8006640:	4845      	ldr	r0, [pc, #276]	; (8006758 <ssd1306_init+0x20c>)
 8006642:	f005 fb9a 	bl	800bd7a <assert_print>
 8006646:	f240 21da 	movw	r1, #730	; 0x2da
 800664a:	e7d3      	b.n	80065f4 <ssd1306_init+0xa8>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800664c:	f8dc 5000 	ldr.w	r5, [ip]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006650:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006652:	bf4c      	ite	mi
 8006654:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8006656:	43b5      	bicpl	r5, r6
 8006658:	f8cc 5000 	str.w	r5, [ip]
	return api->pin_configure(port, pin, flags);
 800665c:	f8de 3000 	ldr.w	r3, [lr]
 8006660:	4798      	blx	r3
		if (ret < 0) {
 8006662:	1e05      	subs	r5, r0, #0
 8006664:	da96      	bge.n	8006594 <ssd1306_init+0x48>
 8006666:	e78f      	b.n	8006588 <ssd1306_init+0x3c>
	return z_impl_k_sleep(timeout);
 8006668:	2100      	movs	r1, #0
 800666a:	200a      	movs	r0, #10
 800666c:	f002 ff12 	bl	8009494 <z_impl_k_sleep>
	return gpio_pin_set(spec->port, spec->pin, value);
 8006670:	7b29      	ldrb	r1, [r5, #12]
 8006672:	68a8      	ldr	r0, [r5, #8]
 8006674:	2201      	movs	r2, #1
 8006676:	f7ff ff3b 	bl	80064f0 <gpio_pin_set.isra.0>
 800667a:	2100      	movs	r1, #0
 800667c:	200a      	movs	r0, #10
 800667e:	f002 ff09 	bl	8009494 <z_impl_k_sleep>
 8006682:	7b29      	ldrb	r1, [r5, #12]
 8006684:	68a8      	ldr	r0, [r5, #8]
 8006686:	2200      	movs	r2, #0
 8006688:	f7ff ff32 	bl	80064f0 <gpio_pin_set.isra.0>
 800668c:	e789      	b.n	80065a2 <ssd1306_init+0x56>
	uint8_t cmd_buf[] = {
 800668e:	4b33      	ldr	r3, [pc, #204]	; (800675c <ssd1306_init+0x210>)
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	889b      	ldrh	r3, [r3, #4]
 8006694:	60b8      	str	r0, [r7, #8]
 8006696:	81bb      	strh	r3, [r7, #12]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 8006698:	6860      	ldr	r0, [r4, #4]
 800669a:	2301      	movs	r3, #1
 800669c:	2206      	movs	r2, #6
 800669e:	f107 0108 	add.w	r1, r7, #8
 80066a2:	f005 fe2e 	bl	800c302 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_timing_setting(dev)) {
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d180      	bne.n	80065ac <ssd1306_init+0x60>
	uint8_t cmd_buf[] = {
 80066aa:	4b2d      	ldr	r3, [pc, #180]	; (8006760 <ssd1306_init+0x214>)
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	889a      	ldrh	r2, [r3, #4]
 80066b0:	799b      	ldrb	r3, [r3, #6]
 80066b2:	60b8      	str	r0, [r7, #8]
 80066b4:	81ba      	strh	r2, [r7, #12]
 80066b6:	73bb      	strb	r3, [r7, #14]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 80066b8:	6860      	ldr	r0, [r4, #4]
 80066ba:	2301      	movs	r3, #1
 80066bc:	2207      	movs	r2, #7
 80066be:	f107 0108 	add.w	r1, r7, #8
 80066c2:	f005 fe1e 	bl	800c302 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_hardware_config(dev)) {
 80066c6:	2800      	cmp	r0, #0
 80066c8:	f47f af70 	bne.w	80065ac <ssd1306_init+0x60>
	uint8_t cmd_buf[] = {
 80066cc:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
 80066d0:	813b      	strh	r3, [r7, #8]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 80066d2:	6860      	ldr	r0, [r4, #4]
 80066d4:	2301      	movs	r3, #1
 80066d6:	2202      	movs	r2, #2
 80066d8:	f107 0108 	add.w	r1, r7, #8
 80066dc:	f005 fe11 	bl	800c302 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_panel_orientation(dev)) {
 80066e0:	2800      	cmp	r0, #0
 80066e2:	f47f af63 	bne.w	80065ac <ssd1306_init+0x60>
	uint8_t cmd_buf[] = {
 80066e6:	4b1f      	ldr	r3, [pc, #124]	; (8006764 <ssd1306_init+0x218>)
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 80066e8:	6860      	ldr	r0, [r4, #4]
	uint8_t cmd_buf[] = {
 80066ea:	881a      	ldrh	r2, [r3, #0]
 80066ec:	789b      	ldrb	r3, [r3, #2]
 80066ee:	813a      	strh	r2, [r7, #8]
 80066f0:	72bb      	strb	r3, [r7, #10]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 80066f2:	2203      	movs	r2, #3
 80066f4:	2301      	movs	r3, #1
 80066f6:	f107 0108 	add.w	r1, r7, #8
 80066fa:	f005 fe02 	bl	800c302 <ssd1306_write_bus.isra.0>
	if (ssd1306_set_charge_pump(dev)) {
 80066fe:	2800      	cmp	r0, #0
 8006700:	f47f af54 	bne.w	80065ac <ssd1306_init+0x60>
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
 8006704:	6860      	ldr	r0, [r4, #4]
 8006706:	2301      	movs	r3, #1
 8006708:	2202      	movs	r2, #2
 800670a:	1d39      	adds	r1, r7, #4
 800670c:	f005 fdf9 	bl	800c302 <ssd1306_write_bus.isra.0>
 8006710:	2800      	cmp	r0, #0
 8006712:	f47f af4b 	bne.w	80065ac <ssd1306_init+0x60>
	if (ssd1306_set_contrast(dev, CONFIG_SSD1306_DEFAULT_CONTRAST)) {
 8006716:	2180      	movs	r1, #128	; 0x80
 8006718:	4620      	mov	r0, r4
 800671a:	f005 fe10 	bl	800c33e <ssd1306_set_contrast>
 800671e:	4605      	mov	r5, r0
 8006720:	2800      	cmp	r0, #0
 8006722:	f47f af43 	bne.w	80065ac <ssd1306_init+0x60>
	ssd1306_resume(dev);
 8006726:	4620      	mov	r0, r4
 8006728:	f005 fe25 	bl	800c376 <ssd1306_resume>
	return 0;
 800672c:	e72c      	b.n	8006588 <ssd1306_init+0x3c>
 800672e:	bf00      	nop
 8006730:	08013751 	.word	0x08013751
 8006734:	0800db8c 	.word	0x0800db8c
 8006738:	01000003 	.word	0x01000003
 800673c:	0801376a 	.word	0x0801376a
 8006740:	0800e1d9 	.word	0x0800e1d9
 8006744:	0800e10a 	.word	0x0800e10a
 8006748:	0800e198 	.word	0x0800e198
 800674c:	0800e212 	.word	0x0800e212
 8006750:	0800e2d6 	.word	0x0800e2d6
 8006754:	0800e3f7 	.word	0x0800e3f7
 8006758:	0800e435 	.word	0x0800e435
 800675c:	08013787 	.word	0x08013787
 8006760:	0800dbd0 	.word	0x0800dbd0
 8006764:	0801378e 	.word	0x0801378e

08006768 <gpio_stm32_manage_callback>:
}

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 8006768:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 800676a:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
 800676c:	b961      	cbnz	r1, 8006788 <gpio_stm32_manage_callback+0x20>
 800676e:	4921      	ldr	r1, [pc, #132]	; (80067f4 <gpio_stm32_manage_callback+0x8c>)
 8006770:	4a21      	ldr	r2, [pc, #132]	; (80067f8 <gpio_stm32_manage_callback+0x90>)
 8006772:	4822      	ldr	r0, [pc, #136]	; (80067fc <gpio_stm32_manage_callback+0x94>)
 8006774:	232d      	movs	r3, #45	; 0x2d
 8006776:	f005 fb00 	bl	800bd7a <assert_print>
 800677a:	4821      	ldr	r0, [pc, #132]	; (8006800 <gpio_stm32_manage_callback+0x98>)
 800677c:	f005 fafd 	bl	800bd7a <assert_print>
 8006780:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(callback->handler, "No callback handler!");
 8006782:	481d      	ldr	r0, [pc, #116]	; (80067f8 <gpio_stm32_manage_callback+0x90>)
 8006784:	f005 faf2 	bl	800bd6c <assert_post_action>
 8006788:	6848      	ldr	r0, [r1, #4]
 800678a:	b950      	cbnz	r0, 80067a2 <gpio_stm32_manage_callback+0x3a>
 800678c:	491d      	ldr	r1, [pc, #116]	; (8006804 <gpio_stm32_manage_callback+0x9c>)
 800678e:	4a1a      	ldr	r2, [pc, #104]	; (80067f8 <gpio_stm32_manage_callback+0x90>)
 8006790:	481a      	ldr	r0, [pc, #104]	; (80067fc <gpio_stm32_manage_callback+0x94>)
 8006792:	232e      	movs	r3, #46	; 0x2e
 8006794:	f005 faf1 	bl	800bd7a <assert_print>
 8006798:	481b      	ldr	r0, [pc, #108]	; (8006808 <gpio_stm32_manage_callback+0xa0>)
 800679a:	f005 faee 	bl	800bd7a <assert_print>
 800679e:	212e      	movs	r1, #46	; 0x2e
 80067a0:	e7ef      	b.n	8006782 <gpio_stm32_manage_callback+0x1a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 80067a2:	6898      	ldr	r0, [r3, #8]

	if (!sys_slist_is_empty(callbacks)) {
 80067a4:	b148      	cbz	r0, 80067ba <gpio_stm32_manage_callback+0x52>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80067a6:	4288      	cmp	r0, r1
 80067a8:	d113      	bne.n	80067d2 <gpio_stm32_manage_callback+0x6a>
Z_GENLIST_REMOVE(slist, snode)
 80067aa:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 80067ac:	6808      	ldr	r0, [r1, #0]
	list->head = node;
 80067ae:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 80067b0:	42a1      	cmp	r1, r4
 80067b2:	d100      	bne.n	80067b6 <gpio_stm32_manage_callback+0x4e>
	list->tail = node;
 80067b4:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 80067b6:	2000      	movs	r0, #0
 80067b8:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 80067ba:	b97a      	cbnz	r2, 80067dc <gpio_stm32_manage_callback+0x74>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 80067bc:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 80067be:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80067c0:	4281      	cmp	r1, r0
 80067c2:	d106      	bne.n	80067d2 <gpio_stm32_manage_callback+0x6a>
	return node->next;
 80067c4:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 80067c6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 80067c8:	68d8      	ldr	r0, [r3, #12]
 80067ca:	4281      	cmp	r1, r0
 80067cc:	d1f3      	bne.n	80067b6 <gpio_stm32_manage_callback+0x4e>
	list->tail = node;
 80067ce:	60dc      	str	r4, [r3, #12]
}
 80067d0:	e7f1      	b.n	80067b6 <gpio_stm32_manage_callback+0x4e>
	return node->next;
 80067d2:	4604      	mov	r4, r0
 80067d4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d1f2      	bne.n	80067c0 <gpio_stm32_manage_callback+0x58>
			if (!set) {
 80067da:	b13a      	cbz	r2, 80067ec <gpio_stm32_manage_callback+0x84>
	return list->head;
 80067dc:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 80067de:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 80067e0:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 80067e2:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 80067e4:	2a00      	cmp	r2, #0
 80067e6:	d1e9      	bne.n	80067bc <gpio_stm32_manage_callback+0x54>
	list->tail = node;
 80067e8:	60d9      	str	r1, [r3, #12]
}
 80067ea:	e7e7      	b.n	80067bc <gpio_stm32_manage_callback+0x54>
				return -EINVAL;
 80067ec:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 80067f0:	e7e5      	b.n	80067be <gpio_stm32_manage_callback+0x56>
 80067f2:	bf00      	nop
 80067f4:	080137d2 	.word	0x080137d2
 80067f8:	080137a5 	.word	0x080137a5
 80067fc:	0800e198 	.word	0x0800e198
 8006800:	080137db 	.word	0x080137db
 8006804:	080137ea 	.word	0x080137ea
 8006808:	080137fc 	.word	0x080137fc

0800680c <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800680c:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 800680e:	6903      	ldr	r3, [r0, #16]
{
 8006810:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8006812:	6058      	str	r0, [r3, #4]
 8006814:	4d08      	ldr	r5, [pc, #32]	; (8006838 <gpio_stm32_init+0x2c>)
 8006816:	4628      	mov	r0, r5
 8006818:	f006 f964 	bl	800cae4 <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 800681c:	b140      	cbz	r0, 8006830 <gpio_stm32_init+0x24>
					(clock_control_subsys_t *)&cfg->pclken);
 800681e:	6861      	ldr	r1, [r4, #4]
	return api->on(dev, sys);
 8006820:	68ab      	ldr	r3, [r5, #8]
 8006822:	310c      	adds	r1, #12
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4628      	mov	r0, r5
 8006828:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 800682a:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 800682e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8006830:	f06f 0012 	mvn.w	r0, #18
 8006834:	e7fb      	b.n	800682e <gpio_stm32_init+0x22>
 8006836:	bf00      	nop
 8006838:	0800d6e0 	.word	0x0800d6e0

0800683c <gpio_stm32_isr>:
{
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	e9d1 6101 	ldrd	r6, r1, [r1, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8006842:	b119      	cbz	r1, 800684c <gpio_stm32_isr+0x10>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8006844:	2501      	movs	r5, #1
	return node->next;
 8006846:	680c      	ldr	r4, [r1, #0]
 8006848:	4085      	lsls	r5, r0
 800684a:	b901      	cbnz	r1, 800684e <gpio_stm32_isr+0x12>
}
 800684c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 800684e:	688a      	ldr	r2, [r1, #8]
 8006850:	402a      	ands	r2, r5
 8006852:	d010      	beq.n	8006876 <gpio_stm32_isr+0x3a>
			__ASSERT(cb->handler, "No callback handler!");
 8006854:	684b      	ldr	r3, [r1, #4]
 8006856:	b963      	cbnz	r3, 8006872 <gpio_stm32_isr+0x36>
 8006858:	490a      	ldr	r1, [pc, #40]	; (8006884 <gpio_stm32_isr+0x48>)
 800685a:	4a0b      	ldr	r2, [pc, #44]	; (8006888 <gpio_stm32_isr+0x4c>)
 800685c:	480b      	ldr	r0, [pc, #44]	; (800688c <gpio_stm32_isr+0x50>)
 800685e:	234e      	movs	r3, #78	; 0x4e
 8006860:	f005 fa8b 	bl	800bd7a <assert_print>
 8006864:	480a      	ldr	r0, [pc, #40]	; (8006890 <gpio_stm32_isr+0x54>)
 8006866:	f005 fa88 	bl	800bd7a <assert_print>
 800686a:	4807      	ldr	r0, [pc, #28]	; (8006888 <gpio_stm32_isr+0x4c>)
 800686c:	214e      	movs	r1, #78	; 0x4e
 800686e:	f005 fa7d 	bl	800bd6c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
 8006872:	4630      	mov	r0, r6
 8006874:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8006876:	b11c      	cbz	r4, 8006880 <gpio_stm32_isr+0x44>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	4621      	mov	r1, r4
 800687c:	461c      	mov	r4, r3
 800687e:	e7e4      	b.n	800684a <gpio_stm32_isr+0xe>
 8006880:	4623      	mov	r3, r4
 8006882:	e7fa      	b.n	800687a <gpio_stm32_isr+0x3e>
 8006884:	08013813 	.word	0x08013813
 8006888:	080137a5 	.word	0x080137a5
 800688c:	0800e198 	.word	0x0800e198
 8006890:	080137fc 	.word	0x080137fc

08006894 <gpio_stm32_pin_interrupt_configure>:
{
 8006894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006896:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8006898:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 800689c:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800689e:	6902      	ldr	r2, [r0, #16]
{
 80068a0:	460c      	mov	r4, r1
 80068a2:	461d      	mov	r5, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 80068a4:	d124      	bne.n	80068f0 <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80068a6:	f001 0203 	and.w	r2, r1, #3
 80068aa:	3204      	adds	r2, #4
 80068ac:	0092      	lsls	r2, r2, #2
 80068ae:	230f      	movs	r3, #15
 80068b0:	4093      	lsls	r3, r2
 80068b2:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	4933      	ldr	r1, [pc, #204]	; (8006988 <gpio_stm32_pin_interrupt_configure+0xf4>)
 80068ba:	3202      	adds	r2, #2
 80068bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80068c0:	0c19      	lsrs	r1, r3, #16
 80068c2:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068c6:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 80068ca:	fab2 f282 	clz	r2, r2
 80068ce:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80068d0:	68b2      	ldr	r2, [r6, #8]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d109      	bne.n	80068ea <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 80068d6:	4620      	mov	r0, r4
 80068d8:	f7ff f8d8 	bl	8005a8c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80068dc:	4620      	mov	r0, r4
 80068de:	f7ff f923 	bl	8005b28 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80068e2:	2100      	movs	r1, #0
 80068e4:	4620      	mov	r0, r4
 80068e6:	f7ff f8dd 	bl	8005aa4 <stm32_exti_trigger>
	int err = 0;
 80068ea:	2000      	movs	r0, #0
}
 80068ec:	b003      	add	sp, #12
 80068ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 80068f0:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 80068f4:	d041      	beq.n	800697a <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80068f6:	4925      	ldr	r1, [pc, #148]	; (800698c <gpio_stm32_pin_interrupt_configure+0xf8>)
 80068f8:	4620      	mov	r0, r4
 80068fa:	f7ff f903 	bl	8005b04 <stm32_exti_set_callback>
 80068fe:	2800      	cmp	r0, #0
 8006900:	d13e      	bne.n	8006980 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 8006902:	4a23      	ldr	r2, [pc, #140]	; (8006990 <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 8006904:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 8006906:	e892 0003 	ldmia.w	r2, {r0, r1}
 800690a:	466b      	mov	r3, sp
 800690c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006910:	4820      	ldr	r0, [pc, #128]	; (8006994 <gpio_stm32_pin_interrupt_configure+0x100>)
 8006912:	6882      	ldr	r2, [r0, #8]
 8006914:	4619      	mov	r1, r3
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	4790      	blx	r2
	if (ret != 0) {
 800691a:	b9c0      	cbnz	r0, 800694e <gpio_stm32_pin_interrupt_configure+0xba>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800691c:	f004 0303 	and.w	r3, r4, #3
 8006920:	3304      	adds	r3, #4
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	220f      	movs	r2, #15
 8006926:	409a      	lsls	r2, r3
 8006928:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800692c:	b2d3      	uxtb	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006934:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006938:	0c11      	lsrs	r1, r2, #16
 800693a:	6898      	ldr	r0, [r3, #8]
 800693c:	ea20 4012 	bic.w	r0, r0, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006940:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8006944:	fab2 f282 	clz	r2, r2
 8006948:	4096      	lsls	r6, r2
 800694a:	4306      	orrs	r6, r0
 800694c:	609e      	str	r6, [r3, #8]
	switch (trig) {
 800694e:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8006952:	d00e      	beq.n	8006972 <gpio_stm32_pin_interrupt_configure+0xde>
 8006954:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8006958:	d00d      	beq.n	8006976 <gpio_stm32_pin_interrupt_configure+0xe2>
 800695a:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 800695e:	4259      	negs	r1, r3
 8006960:	4159      	adcs	r1, r3
 8006962:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8006964:	4620      	mov	r0, r4
 8006966:	f7ff f89d 	bl	8005aa4 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 800696a:	4620      	mov	r0, r4
 800696c:	f7ff f880 	bl	8005a70 <stm32_exti_enable>
 8006970:	e7bb      	b.n	80068ea <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 8006972:	2101      	movs	r1, #1
 8006974:	e7f6      	b.n	8006964 <gpio_stm32_pin_interrupt_configure+0xd0>
		edge = STM32_EXTI_TRIG_BOTH;
 8006976:	2103      	movs	r1, #3
 8006978:	e7f4      	b.n	8006964 <gpio_stm32_pin_interrupt_configure+0xd0>
		err = -ENOTSUP;
 800697a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800697e:	e7b5      	b.n	80068ec <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 8006980:	f06f 000f 	mvn.w	r0, #15
	return err;
 8006984:	e7b2      	b.n	80068ec <gpio_stm32_pin_interrupt_configure+0x58>
 8006986:	bf00      	nop
 8006988:	40010000 	.word	0x40010000
 800698c:	0800683d 	.word	0x0800683d
 8006990:	0800dbc8 	.word	0x0800dbc8
 8006994:	0800d6e0 	.word	0x0800d6e0

08006998 <msg_init>:
#define STM32_I2C_TRANSFER_TIMEOUT_MSEC  500

static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
			    uint8_t *next_msg_flags, uint16_t slave,
			    uint32_t transfer)
{
 8006998:	b530      	push	{r4, r5, lr}
	const struct i2c_stm32_config *cfg = dev->config;
	struct i2c_stm32_data *data = dev->data;
 800699a:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800699c:	6840      	ldr	r0, [r0, #4]
 800699e:	68c0      	ldr	r0, [r0, #12]
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabledReloadMode(I2C_TypeDef *I2Cx)
{
  return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
 80069a0:	6845      	ldr	r5, [r0, #4]
 80069a2:	01ed      	lsls	r5, r5, #7
 80069a4:	d507      	bpl.n	80069b6 <msg_init+0x1e>
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 80069a6:	6843      	ldr	r3, [r0, #4]
 80069a8:	684a      	ldr	r2, [r1, #4]
 80069aa:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80069ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 80069b2:	6043      	str	r3, [r0, #4]
#endif
		LL_I2C_Enable(i2c);

		LL_I2C_GenerateStartCondition(i2c);
	}
}
 80069b4:	bd30      	pop	{r4, r5, pc}
		if (I2C_ADDR_10_BITS & data->dev_config) {
 80069b6:	6a24      	ldr	r4, [r4, #32]
 80069b8:	4d1d      	ldr	r5, [pc, #116]	; (8006a30 <msg_init+0x98>)
 80069ba:	f014 0f01 	tst.w	r4, #1
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 80069be:	6844      	ldr	r4, [r0, #4]
 80069c0:	d02a      	beq.n	8006a18 <msg_init+0x80>
 80069c2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80069c6:	6044      	str	r4, [r0, #4]
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 80069c8:	6844      	ldr	r4, [r0, #4]
 80069ca:	402c      	ands	r4, r5
 80069cc:	4323      	orrs	r3, r4
 80069ce:	6043      	str	r3, [r0, #4]
		if (!(msg->flags & I2C_MSG_STOP) && next_msg_flags &&
 80069d0:	7a0b      	ldrb	r3, [r1, #8]
 80069d2:	079c      	lsls	r4, r3, #30
 80069d4:	d428      	bmi.n	8006a28 <msg_init+0x90>
 80069d6:	b33a      	cbz	r2, 8006a28 <msg_init+0x90>
 80069d8:	7813      	ldrb	r3, [r2, #0]
 80069da:	075b      	lsls	r3, r3, #29
 80069dc:	d424      	bmi.n	8006a28 <msg_init+0x90>
  SET_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 80069de:	6843      	ldr	r3, [r0, #4]
 80069e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 80069e4:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80069e6:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 80069e8:	9a03      	ldr	r2, [sp, #12]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80069ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80069ee:	6043      	str	r3, [r0, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 80069f0:	6843      	ldr	r3, [r0, #4]
 80069f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069f6:	4313      	orrs	r3, r2
 80069f8:	6043      	str	r3, [r0, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 80069fa:	6843      	ldr	r3, [r0, #4]
 80069fc:	684a      	ldr	r2, [r1, #4]
 80069fe:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8006a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a06:	6043      	str	r3, [r0, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006a08:	6803      	ldr	r3, [r0, #0]
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	6003      	str	r3, [r0, #0]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 8006a10:	6843      	ldr	r3, [r0, #4]
 8006a12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a16:	e7cc      	b.n	80069b2 <msg_init+0x1a>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 8006a18:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8006a1c:	6044      	str	r4, [r0, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 8006a1e:	6844      	ldr	r4, [r0, #4]
 8006a20:	402c      	ands	r4, r5
 8006a22:	ea44 0343 	orr.w	r3, r4, r3, lsl #1
 8006a26:	e7d2      	b.n	80069ce <msg_init+0x36>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 8006a28:	6843      	ldr	r3, [r0, #4]
 8006a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a2e:	e7d9      	b.n	80069e4 <msg_init+0x4c>
 8006a30:	fffffc00 	.word	0xfffffc00

08006a34 <stm32_i2c_configure_timing>:
	return msg_done(dev, msg->flags);
}
#endif

int stm32_i2c_configure_timing(const struct device *dev, uint32_t clock)
{
 8006a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_stm32_config *cfg = dev->config;
 8006a38:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8006a3a:	f8d0 9010 	ldr.w	r9, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8006a3e:	f8d7 800c 	ldr.w	r8, [r7, #12]
{
 8006a42:	b087      	sub	sp, #28
 8006a44:	460c      	mov	r4, r1
	uint32_t i2c_h_min_time, i2c_l_min_time;
	uint32_t presc = 1U;
	uint32_t timing = 0U;

	/*  Look for an adequate preset timing value */
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 8006a46:	2500      	movs	r5, #0
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	42ab      	cmp	r3, r5
 8006a4c:	d837      	bhi.n	8006abe <stm32_i2c_configure_timing+0x8a>
			return 0;
		}
	}

	/* No preset timing was provided, let's dynamically configure */
	switch (I2C_SPEED_GET(data->dev_config)) {
 8006a4e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8006a52:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d077      	beq.n	8006b4a <stm32_i2c_configure_timing+0x116>
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	f040 8081 	bne.w	8006b62 <stm32_i2c_configure_timing+0x12e>
 8006a60:	f240 5614 	movw	r6, #1300	; 0x514
 8006a64:	f44f 7516 	mov.w	r5, #600	; 0x258
 8006a68:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 8006a6c:	f240 1c77 	movw	ip, #375	; 0x177
	}

	/* Calculate period until prescaler matches */
	do {
		uint32_t t_presc = clock / presc;
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 8006a70:	4b3d      	ldr	r3, [pc, #244]	; (8006b68 <stm32_i2c_configure_timing+0x134>)
	switch (I2C_SPEED_GET(data->dev_config)) {
 8006a72:	2102      	movs	r1, #2
		uint32_t t_presc = clock / presc;
 8006a74:	1e4a      	subs	r2, r1, #1
 8006a76:	fbb4 f2f2 	udiv	r2, r4, r2
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 8006a7a:	fbb3 f2f2 	udiv	r2, r3, r2
		uint32_t sclh = i2c_h_min_time / ns_presc;
 8006a7e:	fbb5 f0f2 	udiv	r0, r5, r2
		uint32_t scll = i2c_l_min_time / ns_presc;
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
		uint32_t scldel = i2c_setup_time_min / ns_presc;

		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 8006a82:	3801      	subs	r0, #1
 8006a84:	28ff      	cmp	r0, #255	; 0xff
 8006a86:	d869      	bhi.n	8006b5c <stm32_i2c_configure_timing+0x128>
		uint32_t scll = i2c_l_min_time / ns_presc;
 8006a88:	fbb6 fef2 	udiv	lr, r6, r2
		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 8006a8c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006a90:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8006a94:	d862      	bhi.n	8006b5c <stm32_i2c_configure_timing+0x128>
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
 8006a96:	fbbc f9f2 	udiv	r9, ip, r2
			++presc;
			continue;
		}

		if (sdadel > 15 || (scldel - 1) > 15) {
 8006a9a:	f1b9 0f0f 	cmp.w	r9, #15
 8006a9e:	d85d      	bhi.n	8006b5c <stm32_i2c_configure_timing+0x128>
		uint32_t scldel = i2c_setup_time_min / ns_presc;
 8006aa0:	fbb7 f2f2 	udiv	r2, r7, r2
		if (sdadel > 15 || (scldel - 1) > 15) {
 8006aa4:	3a01      	subs	r2, #1
 8006aa6:	2a0f      	cmp	r2, #15
 8006aa8:	d858      	bhi.n	8006b5c <stm32_i2c_configure_timing+0x128>
			++presc;
			continue;
		}

		timing = __LL_I2C_CONVERT_TIMINGS(presc - 1,
 8006aaa:	3902      	subs	r1, #2
 8006aac:	ea4e 4309 	orr.w	r3, lr, r9, lsl #16
 8006ab0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006ab4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006ab8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006abc:	e02a      	b.n	8006b14 <stm32_i2c_configure_timing+0xe0>
		const struct i2c_config_timing *preset = &cfg->timings[i];
 8006abe:	f8d7 b018 	ldr.w	fp, [r7, #24]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
 8006ac2:	4a2a      	ldr	r2, [pc, #168]	; (8006b6c <stm32_i2c_configure_timing+0x138>)
 8006ac4:	260c      	movs	r6, #12
 8006ac6:	436e      	muls	r6, r5
 8006ac8:	eb0b 0a06 	add.w	sl, fp, r6
		uint32_t speed = i2c_map_dt_bitrate(preset->i2c_speed);
 8006acc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d030      	beq.n	8006b36 <stm32_i2c_configure_timing+0x102>
 8006ad4:	d824      	bhi.n	8006b20 <stm32_i2c_configure_timing+0xec>
 8006ad6:	4a26      	ldr	r2, [pc, #152]	; (8006b70 <stm32_i2c_configure_timing+0x13c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d02e      	beq.n	8006b3a <stm32_i2c_configure_timing+0x106>
 8006adc:	4a25      	ldr	r2, [pc, #148]	; (8006b74 <stm32_i2c_configure_timing+0x140>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d02d      	beq.n	8006b3e <stm32_i2c_configure_timing+0x10a>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");
 8006ae2:	4b25      	ldr	r3, [pc, #148]	; (8006b78 <stm32_i2c_configure_timing+0x144>)
 8006ae4:	9305      	str	r3, [sp, #20]
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	9304      	str	r3, [sp, #16]
 8006aea:	2300      	movs	r3, #0
 8006aec:	4823      	ldr	r0, [pc, #140]	; (8006b7c <stm32_i2c_configure_timing+0x148>)
 8006aee:	aa04      	add	r2, sp, #16
 8006af0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006af4:	f7fd fbac 	bl	8004250 <z_impl_z_log_msg_static_create>

	return 0;
 8006af8:	2300      	movs	r3, #0
		if ((I2C_SPEED_GET(speed) == I2C_SPEED_GET(data->dev_config))
 8006afa:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8006afe:	f3c2 0242 	ubfx	r2, r2, #1, #3
 8006b02:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 8006b06:	d11e      	bne.n	8006b46 <stm32_i2c_configure_timing+0x112>
		   && (preset->periph_clock == clock)) {
 8006b08:	f85b 3006 	ldr.w	r3, [fp, r6]
 8006b0c:	42a3      	cmp	r3, r4
 8006b0e:	d11a      	bne.n	8006b46 <stm32_i2c_configure_timing+0x112>
			LL_I2C_SetTiming(i2c, preset->timing_setting);
 8006b10:	f8da 3008 	ldr.w	r3, [sl, #8]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8006b14:	f8c8 3010 	str.w	r3, [r8, #16]
			return 0;
 8006b18:	2000      	movs	r0, #0
	}

	LL_I2C_SetTiming(i2c, timing);

	return 0;
}
 8006b1a:	b007      	add	sp, #28
 8006b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (bitrate) {
 8006b20:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <stm32_i2c_configure_timing+0x14c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00d      	beq.n	8006b42 <stm32_i2c_configure_timing+0x10e>
 8006b26:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 8006b2a:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d1d7      	bne.n	8006ae2 <stm32_i2c_configure_timing+0xae>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 8006b32:	230a      	movs	r3, #10
 8006b34:	e7e1      	b.n	8006afa <stm32_i2c_configure_timing+0xc6>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 8006b36:	2306      	movs	r3, #6
 8006b38:	e7df      	b.n	8006afa <stm32_i2c_configure_timing+0xc6>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e7dd      	b.n	8006afa <stm32_i2c_configure_timing+0xc6>
	switch (bitrate) {
 8006b3e:	2304      	movs	r3, #4
 8006b40:	e7db      	b.n	8006afa <stm32_i2c_configure_timing+0xc6>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 8006b42:	2308      	movs	r3, #8
 8006b44:	e7d9      	b.n	8006afa <stm32_i2c_configure_timing+0xc6>
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 8006b46:	3501      	adds	r5, #1
 8006b48:	e77e      	b.n	8006a48 <stm32_i2c_configure_timing+0x14>
		i2c_l_min_time = 4700U;
 8006b4a:	f241 265c 	movw	r6, #4700	; 0x125c
		i2c_h_min_time = 4000U;
 8006b4e:	f44f 657a 	mov.w	r5, #4000	; 0xfa0
		i2c_setup_time_min = 1250U;
 8006b52:	f240 47e2 	movw	r7, #1250	; 0x4e2
		i2c_hold_time_min = 500U;
 8006b56:	f44f 7cfa 	mov.w	ip, #500	; 0x1f4
 8006b5a:	e789      	b.n	8006a70 <stm32_i2c_configure_timing+0x3c>
	} while (presc < 16);
 8006b5c:	3101      	adds	r1, #1
 8006b5e:	2911      	cmp	r1, #17
 8006b60:	d188      	bne.n	8006a74 <stm32_i2c_configure_timing+0x40>
	switch (I2C_SPEED_GET(data->dev_config)) {
 8006b62:	f06f 0015 	mvn.w	r0, #21
 8006b66:	e7d8      	b.n	8006b1a <stm32_i2c_configure_timing+0xe6>
 8006b68:	3b9aca00 	.word	0x3b9aca00
 8006b6c:	000f4240 	.word	0x000f4240
 8006b70:	000186a0 	.word	0x000186a0
 8006b74:	00061a80 	.word	0x00061a80
 8006b78:	08013877 	.word	0x08013877
 8006b7c:	0800db5c 	.word	0x0800db5c
 8006b80:	0033e140 	.word	0x0033e140

08006b84 <i2c_stm32_init>:
	.target_unregister = i2c_stm32_target_unregister,
#endif
};

static int i2c_stm32_init(const struct device *dev)
{
 8006b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b88:	b086      	sub	sp, #24
	const struct device *const clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct i2c_stm32_config *cfg = dev->config;
 8006b8a:	6846      	ldr	r6, [r0, #4]
	uint32_t bitrate_cfg;
	int ret;
	struct i2c_stm32_data *data = dev->data;
 8006b8c:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4605      	mov	r5, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	f005 ffd5 	bl	800cb4a <z_impl_k_sem_init>
#ifdef CONFIG_I2C_STM32_INTERRUPT
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	cfg->irq_config_func(dev);
 8006ba0:	6833      	ldr	r3, [r6, #0]
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	4798      	blx	r3
	ret = pinctrl_lookup_state(config, id, &state);
 8006ba6:	6970      	ldr	r0, [r6, #20]
 8006ba8:	463a      	mov	r2, r7
 8006baa:	2100      	movs	r1, #0
 8006bac:	f005 ff72 	bl	800ca94 <pinctrl_lookup_state>
	if (ret < 0) {
 8006bb0:	1e04      	subs	r4, r0, #0
 8006bb2:	db07      	blt.n	8006bc4 <i2c_stm32_init+0x40>
	return pinctrl_apply_state_direct(config, state);
 8006bb4:	683b      	ldr	r3, [r7, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	7919      	ldrb	r1, [r3, #4]
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	f000 fc32 	bl	8007424 <pinctrl_configure_pins>
#endif

	/* Configure dt provided device signals when available */
	ret = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret < 0) {
 8006bc0:	1e04      	subs	r4, r0, #0
 8006bc2:	da14      	bge.n	8006bee <i2c_stm32_init+0x6a>
		LOG_ERR("I2C pinctrl setup failed (%d)", ret);
 8006bc4:	466d      	mov	r5, sp
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	466a      	mov	r2, sp
 8006bca:	4b45      	ldr	r3, [pc, #276]	; (8006ce0 <i2c_stm32_init+0x15c>)
 8006bcc:	e9c2 3405 	strd	r3, r4, [r2, #20]
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	f842 3f10 	str.w	r3, [r2, #16]!
 8006bd6:	4843      	ldr	r0, [pc, #268]	; (8006ce4 <i2c_stm32_init+0x160>)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8006bde:	f7fd fb37 	bl	8004250 <z_impl_z_log_msg_static_create>
 8006be2:	46ad      	mov	sp, r5
		LOG_ERR("i2c: failure initializing");
		return ret;
	}

	return 0;
}
 8006be4:	4620      	mov	r0, r4
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bee:	2201      	movs	r2, #1
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	f108 0010 	add.w	r0, r8, #16
 8006bf6:	f005 ffa8 	bl	800cb4a <z_impl_k_sem_init>
 8006bfa:	4c3b      	ldr	r4, [pc, #236]	; (8006ce8 <i2c_stm32_init+0x164>)
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f005 ff71 	bl	800cae4 <z_device_is_ready>
	if (!device_is_ready(clk)) {
 8006c02:	4603      	mov	r3, r0
 8006c04:	b968      	cbnz	r0, 8006c22 <i2c_stm32_init+0x9e>
		LOG_ERR("clock control device not ready");
 8006c06:	4a39      	ldr	r2, [pc, #228]	; (8006cec <i2c_stm32_init+0x168>)
 8006c08:	617a      	str	r2, [r7, #20]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	613a      	str	r2, [r7, #16]
 8006c0e:	4835      	ldr	r0, [pc, #212]	; (8006ce4 <i2c_stm32_init+0x160>)
 8006c10:	f107 0210 	add.w	r2, r7, #16
 8006c14:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006c18:	f7fd fb1a 	bl	8004250 <z_impl_z_log_msg_static_create>
		return -ENODEV;
 8006c1c:	f06f 0412 	mvn.w	r4, #18
 8006c20:	e7e0      	b.n	8006be4 <i2c_stm32_init+0x60>
 8006c22:	68a3      	ldr	r3, [r4, #8]
 8006c24:	4620      	mov	r0, r4
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	1d31      	adds	r1, r6, #4
 8006c2a:	4798      	blx	r3
	if (clock_control_on(clk,
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	b170      	cbz	r0, 8006c4e <i2c_stm32_init+0xca>
		LOG_ERR("i2c: failure enabling clock");
 8006c30:	4b2f      	ldr	r3, [pc, #188]	; (8006cf0 <i2c_stm32_init+0x16c>)
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	2302      	movs	r3, #2
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	482a      	ldr	r0, [pc, #168]	; (8006ce4 <i2c_stm32_init+0x160>)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f107 0210 	add.w	r2, r7, #16
 8006c40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006c44:	f7fd fb04 	bl	8004250 <z_impl_z_log_msg_static_create>
		return -EIO;
 8006c48:	f06f 0404 	mvn.w	r4, #4
 8006c4c:	e7ca      	b.n	8006be4 <i2c_stm32_init+0x60>
	switch ((uint32_t)cfg->i2c) {
 8006c4e:	68f2      	ldr	r2, [r6, #12]
 8006c50:	4b28      	ldr	r3, [pc, #160]	; (8006cf4 <i2c_stm32_init+0x170>)
 8006c52:	429a      	cmp	r2, r3
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8006c54:	bf01      	itttt	eq
 8006c56:	4a28      	ldreq	r2, [pc, #160]	; (8006cf8 <i2c_stm32_init+0x174>)
 8006c58:	6b13      	ldreq	r3, [r2, #48]	; 0x30
 8006c5a:	f043 0310 	orreq.w	r3, r3, #16
 8006c5e:	6313      	streq	r3, [r2, #48]	; 0x30
	bitrate_cfg = i2c_map_dt_bitrate(cfg->bitrate);
 8006c60:	6933      	ldr	r3, [r6, #16]
	switch (bitrate) {
 8006c62:	4a26      	ldr	r2, [pc, #152]	; (8006cfc <i2c_stm32_init+0x178>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d033      	beq.n	8006cd0 <i2c_stm32_init+0x14c>
 8006c68:	d827      	bhi.n	8006cba <i2c_stm32_init+0x136>
 8006c6a:	4a25      	ldr	r2, [pc, #148]	; (8006d00 <i2c_stm32_init+0x17c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d031      	beq.n	8006cd4 <i2c_stm32_init+0x150>
 8006c70:	4a24      	ldr	r2, [pc, #144]	; (8006d04 <i2c_stm32_init+0x180>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d030      	beq.n	8006cd8 <i2c_stm32_init+0x154>
	LOG_ERR("Invalid I2C bit rate value");
 8006c76:	4b24      	ldr	r3, [pc, #144]	; (8006d08 <i2c_stm32_init+0x184>)
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006c82:	4818      	ldr	r0, [pc, #96]	; (8006ce4 <i2c_stm32_init+0x160>)
 8006c84:	2300      	movs	r3, #0
 8006c86:	f107 0210 	add.w	r2, r7, #16
 8006c8a:	f7fd fae1 	bl	8004250 <z_impl_z_log_msg_static_create>
	return 0;
 8006c8e:	2100      	movs	r1, #0
	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_CONTROLLER | bitrate_cfg);
 8006c90:	4628      	mov	r0, r5
 8006c92:	f041 0110 	orr.w	r1, r1, #16
 8006c96:	f005 fe2b 	bl	800c8f0 <i2c_stm32_runtime_configure>
	if (ret < 0) {
 8006c9a:	1e05      	subs	r5, r0, #0
 8006c9c:	daa2      	bge.n	8006be4 <i2c_stm32_init+0x60>
		LOG_ERR("i2c: failure initializing");
 8006c9e:	4b1b      	ldr	r3, [pc, #108]	; (8006d0c <i2c_stm32_init+0x188>)
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	480f      	ldr	r0, [pc, #60]	; (8006ce4 <i2c_stm32_init+0x160>)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f107 0210 	add.w	r2, r7, #16
 8006cae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006cb2:	f7fd facd 	bl	8004250 <z_impl_z_log_msg_static_create>
		return ret;
 8006cb6:	462c      	mov	r4, r5
 8006cb8:	e794      	b.n	8006be4 <i2c_stm32_init+0x60>
	switch (bitrate) {
 8006cba:	4a15      	ldr	r2, [pc, #84]	; (8006d10 <i2c_stm32_init+0x18c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00d      	beq.n	8006cdc <i2c_stm32_init+0x158>
 8006cc0:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 8006cc4:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d1d4      	bne.n	8006c76 <i2c_stm32_init+0xf2>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 8006ccc:	210a      	movs	r1, #10
 8006cce:	e7df      	b.n	8006c90 <i2c_stm32_init+0x10c>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 8006cd0:	2106      	movs	r1, #6
 8006cd2:	e7dd      	b.n	8006c90 <i2c_stm32_init+0x10c>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	e7db      	b.n	8006c90 <i2c_stm32_init+0x10c>
	switch (bitrate) {
 8006cd8:	2104      	movs	r1, #4
 8006cda:	e7d9      	b.n	8006c90 <i2c_stm32_init+0x10c>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 8006cdc:	2108      	movs	r1, #8
 8006cde:	e7d7      	b.n	8006c90 <i2c_stm32_init+0x10c>
 8006ce0:	080138a2 	.word	0x080138a2
 8006ce4:	0800db54 	.word	0x0800db54
 8006ce8:	0800d6e0 	.word	0x0800d6e0
 8006cec:	08013653 	.word	0x08013653
 8006cf0:	080138c0 	.word	0x080138c0
 8006cf4:	40005400 	.word	0x40005400
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	000f4240 	.word	0x000f4240
 8006d00:	000186a0 	.word	0x000186a0
 8006d04:	00061a80 	.word	0x00061a80
 8006d08:	08013877 	.word	0x08013877
 8006d0c:	080138dc 	.word	0x080138dc
 8006d10:	0033e140 	.word	0x0033e140

08006d14 <uart_stm32_set_baudrate.part.0>:
#ifdef USART_CR1_OVER8
				     LL_USART_OVERSAMPLING_16,
#endif
				     baud_rate);
		/* Check BRR is greater than or equal to 16d */
		__ASSERT(LL_USART_ReadReg(config->usart, BRR) > 16,
 8006d14:	4c07      	ldr	r4, [pc, #28]	; (8006d34 <uart_stm32_set_baudrate.part.0+0x20>)
 8006d16:	4908      	ldr	r1, [pc, #32]	; (8006d38 <uart_stm32_set_baudrate.part.0+0x24>)
 8006d18:	4808      	ldr	r0, [pc, #32]	; (8006d3c <uart_stm32_set_baudrate.part.0+0x28>)
static inline void uart_stm32_set_baudrate(const struct device *dev, uint32_t baud_rate)
 8006d1a:	b508      	push	{r3, lr}
		__ASSERT(LL_USART_ReadReg(config->usart, BRR) > 16,
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	23bc      	movs	r3, #188	; 0xbc
 8006d20:	f005 f82b 	bl	800bd7a <assert_print>
 8006d24:	4806      	ldr	r0, [pc, #24]	; (8006d40 <uart_stm32_set_baudrate.part.0+0x2c>)
 8006d26:	f005 f828 	bl	800bd7a <assert_print>
 8006d2a:	21bc      	movs	r1, #188	; 0xbc
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f005 f81d 	bl	800bd6c <assert_post_action>
 8006d32:	bf00      	nop
 8006d34:	08013910 	.word	0x08013910
 8006d38:	0801393f 	.word	0x0801393f
 8006d3c:	0800e198 	.word	0x0800e198
 8006d40:	0801395b 	.word	0x0801395b

08006d44 <uart_stm32_set_baudrate>:
{
 8006d44:	b530      	push	{r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 8006d46:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8006d48:	6844      	ldr	r4, [r0, #4]
		if (clock_control_get_rate(data->clock,
 8006d4a:	6858      	ldr	r0, [r3, #4]
	if (api->get_rate == NULL) {
 8006d4c:	6883      	ldr	r3, [r0, #8]
 8006d4e:	68db      	ldr	r3, [r3, #12]
{
 8006d50:	460d      	mov	r5, r1
 8006d52:	b089      	sub	sp, #36	; 0x24
					   (clock_control_subsys_t)&config->pclken[0],
 8006d54:	6861      	ldr	r1, [r4, #4]
 8006d56:	b963      	cbnz	r3, 8006d72 <uart_stm32_set_baudrate+0x2e>
			LOG_ERR("Failed call clock_control_get_rate(pclken[0])");
 8006d58:	4b11      	ldr	r3, [pc, #68]	; (8006da0 <uart_stm32_set_baudrate+0x5c>)
 8006d5a:	9307      	str	r3, [sp, #28]
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	9306      	str	r3, [sp, #24]
 8006d60:	4810      	ldr	r0, [pc, #64]	; (8006da4 <uart_stm32_set_baudrate+0x60>)
 8006d62:	2300      	movs	r3, #0
 8006d64:	aa06      	add	r2, sp, #24
 8006d66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006d6a:	f7fd fa71 	bl	8004250 <z_impl_z_log_msg_static_create>
			 "BaudRateReg >= 16");

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 8006d6e:	b009      	add	sp, #36	; 0x24
 8006d70:	bd30      	pop	{r4, r5, pc}
	return api->get_rate(dev, sys, rate);
 8006d72:	aa01      	add	r2, sp, #4
 8006d74:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8006d76:	2800      	cmp	r0, #0
 8006d78:	dbee      	blt.n	8006d58 <uart_stm32_set_baudrate+0x14>
		LL_USART_SetOverSampling(config->usart,
 8006d7a:	6822      	ldr	r2, [r4, #0]
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8006d7c:	6813      	ldr	r3, [r2, #0]
 8006d7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d82:	6013      	str	r3, [r2, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006d84:	9b01      	ldr	r3, [sp, #4]
		LL_USART_SetBaudRate(config->usart,
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 8006d8c:	fbb3 f3f5 	udiv	r3, r3, r5
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	60d3      	str	r3, [r2, #12]
		__ASSERT(LL_USART_ReadReg(config->usart, BRR) > 16,
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	2b10      	cmp	r3, #16
 8006d9a:	d8e8      	bhi.n	8006d6e <uart_stm32_set_baudrate+0x2a>
 8006d9c:	f7ff ffba 	bl	8006d14 <uart_stm32_set_baudrate.part.0>
 8006da0:	0801396f 	.word	0x0801396f
 8006da4:	0800db94 	.word	0x0800db94

08006da8 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 8006da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8006dac:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 8006dae:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8006db0:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8006db2:	2b01      	cmp	r3, #1
{
 8006db4:	460c      	mov	r4, r1
	switch (parity) {
 8006db6:	f000 8085 	beq.w	8006ec4 <uart_stm32_configure+0x11c>
 8006dba:	1e9a      	subs	r2, r3, #2
 8006dbc:	4251      	negs	r1, r2
 8006dbe:	4151      	adcs	r1, r2
 8006dc0:	0289      	lsls	r1, r1, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8006dc2:	f894 c005 	ldrb.w	ip, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8006dc6:	f894 8006 	ldrb.w	r8, [r4, #6]
 8006dca:	f1bc 0f02 	cmp.w	ip, #2
 8006dce:	bf96      	itet	ls
 8006dd0:	4a62      	ldrls	r2, [pc, #392]	; (8006f5c <uart_stm32_configure+0x1b4>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8006dd2:	f44f 5700 	movhi.w	r7, #8192	; 0x2000
 8006dd6:	f832 701c 	ldrhls.w	r7, [r2, ip, lsl #1]
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8006dda:	79e2      	ldrb	r2, [r4, #7]
	switch (db) {
 8006ddc:	f1b8 0f02 	cmp.w	r8, #2
 8006de0:	d073      	beq.n	8006eca <uart_stm32_configure+0x122>
 8006de2:	f1b8 0f04 	cmp.w	r8, #4
 8006de6:	f000 8099 	beq.w	8006f1c <uart_stm32_configure+0x174>
		if (p == UART_CFG_PARITY_NONE) {
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d17a      	bne.n	8006ee4 <uart_stm32_configure+0x13c>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8006dee:	2a01      	cmp	r2, #1
 8006df0:	f02c 0c02 	bic.w	ip, ip, #2
 8006df4:	f040 80a3 	bne.w	8006f3e <uart_stm32_configure+0x196>
	if (IS_LPUART_INSTANCE(config->usart) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006df8:	f1bc 0f00 	cmp.w	ip, #0
 8006dfc:	f000 808e 	beq.w	8006f1c <uart_stm32_configure+0x174>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8006e00:	f1b8 0f01 	cmp.w	r8, #1
 8006e04:	f240 808a 	bls.w	8006f1c <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8006e08:	f44f 7e40 	mov.w	lr, #768	; 0x300
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8006e0c:	f8d5 c000 	ldr.w	ip, [r5]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8006e10:	b16a      	cbz	r2, 8006e2e <uart_stm32_configure+0x86>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8006e12:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8006f60 <uart_stm32_configure+0x1b8>
 8006e16:	45c4      	cmp	ip, r8
 8006e18:	d007      	beq.n	8006e2a <uart_stm32_configure+0x82>
 8006e1a:	f5a8 4874 	sub.w	r8, r8, #62464	; 0xf400
 8006e1e:	45c4      	cmp	ip, r8
 8006e20:	d003      	beq.n	8006e2a <uart_stm32_configure+0x82>
 8006e22:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8006e26:	45c4      	cmp	ip, r8
 8006e28:	d178      	bne.n	8006f1c <uart_stm32_configure+0x174>
 8006e2a:	2a01      	cmp	r2, #1
 8006e2c:	d176      	bne.n	8006f1c <uart_stm32_configure+0x174>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8006e2e:	f8dc 2000 	ldr.w	r2, [ip]
 8006e32:	f022 0201 	bic.w	r2, r2, #1
 8006e36:	f8cc 2000 	str.w	r2, [ip]
	return LL_USART_GetParity(config->usart);
 8006e3a:	6842      	ldr	r2, [r0, #4]
 8006e3c:	f8d2 c000 	ldr.w	ip, [r2]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8006e40:	f8dc 2000 	ldr.w	r2, [ip]
 8006e44:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(config->usart);

	if (parity != uart_stm32_get_parity(dev)) {
 8006e48:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8006e4a:	bf1f      	itttt	ne
 8006e4c:	f8dc 2000 	ldrne.w	r2, [ip]
 8006e50:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8006e54:	430a      	orrne	r2, r1
 8006e56:	f8cc 2000 	strne.w	r2, [ip]
	return LL_USART_GetStopBitsLength(config->usart);
 8006e5a:	6842      	ldr	r2, [r0, #4]
 8006e5c:	6811      	ldr	r1, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8006e5e:	684a      	ldr	r2, [r1, #4]
 8006e60:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8006e64:	4297      	cmp	r7, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006e66:	bf1f      	itttt	ne
 8006e68:	684a      	ldrne	r2, [r1, #4]
 8006e6a:	f422 5240 	bicne.w	r2, r2, #12288	; 0x3000
 8006e6e:	433a      	orrne	r2, r7
 8006e70:	604a      	strne	r2, [r1, #4]
	return LL_USART_GetDataWidth(config->usart);
 8006e72:	6842      	ldr	r2, [r0, #4]
 8006e74:	6811      	ldr	r1, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8006e76:	680a      	ldr	r2, [r1, #0]
 8006e78:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 8006e7c:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8006e7e:	bf1f      	itttt	ne
 8006e80:	680a      	ldrne	r2, [r1, #0]
 8006e82:	f022 2210 	bicne.w	r2, r2, #268439552	; 0x10001000
 8006e86:	4313      	orrne	r3, r2
 8006e88:	600b      	strne	r3, [r1, #0]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8006e8a:	6843      	ldr	r3, [r0, #4]
 8006e8c:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8006e8e:	6893      	ldr	r3, [r2, #8]
 8006e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8006e94:	459e      	cmp	lr, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006e96:	bf1f      	itttt	ne
 8006e98:	6893      	ldrne	r3, [r2, #8]
 8006e9a:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8006e9e:	ea43 030e 	orrne.w	r3, r3, lr
 8006ea2:	6093      	strne	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8006ea4:	6821      	ldr	r1, [r4, #0]
 8006ea6:	6833      	ldr	r3, [r6, #0]
 8006ea8:	4299      	cmp	r1, r3
 8006eaa:	d003      	beq.n	8006eb4 <uart_stm32_configure+0x10c>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8006eac:	f7ff ff4a 	bl	8006d44 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	6033      	str	r3, [r6, #0]
	}

	LL_USART_Enable(config->usart);
 8006eb4:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	f043 0301 	orr.w	r3, r3, #1
 8006ebc:	6013      	str	r3, [r2, #0]
	return 0;
 8006ebe:	2000      	movs	r0, #0
};
 8006ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (parity) {
 8006ec4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ec8:	e77b      	b.n	8006dc2 <uart_stm32_configure+0x1a>
		if (p == UART_CFG_PARITY_NONE) {
 8006eca:	bb0b      	cbnz	r3, 8006f10 <uart_stm32_configure+0x168>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8006ecc:	2a01      	cmp	r2, #1
 8006ece:	f02c 0c02 	bic.w	ip, ip, #2
 8006ed2:	d12f      	bne.n	8006f34 <uart_stm32_configure+0x18c>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006ed4:	f1bc 0f00 	cmp.w	ip, #0
 8006ed8:	d020      	beq.n	8006f1c <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8006eda:	f44f 7e40 	mov.w	lr, #768	; 0x300
			return LL_USART_DATAWIDTH_7B;
 8006ede:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ee2:	e793      	b.n	8006e0c <uart_stm32_configure+0x64>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8006ee4:	3b03      	subs	r3, #3
 8006ee6:	2a01      	cmp	r2, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006ee8:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8006eea:	d10c      	bne.n	8006f06 <uart_stm32_configure+0x15e>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d915      	bls.n	8006f1c <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8006ef0:	f44f 7e40 	mov.w	lr, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006ef4:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 8006ef8:	d010      	beq.n	8006f1c <uart_stm32_configure+0x174>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8006efa:	f1b8 0f01 	cmp.w	r8, #1
 8006efe:	d90d      	bls.n	8006f1c <uart_stm32_configure+0x174>
 8006f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f04:	e782      	b.n	8006e0c <uart_stm32_configure+0x64>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d908      	bls.n	8006f1c <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 8006f0a:	f04f 0e00 	mov.w	lr, #0
 8006f0e:	e7f1      	b.n	8006ef4 <uart_stm32_configure+0x14c>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8006f10:	3b03      	subs	r3, #3
 8006f12:	2a01      	cmp	r2, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006f14:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8006f16:	d004      	beq.n	8006f22 <uart_stm32_configure+0x17a>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d819      	bhi.n	8006f50 <uart_stm32_configure+0x1a8>
		return -ENOTSUP;
 8006f1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006f20:	e7ce      	b.n	8006ec0 <uart_stm32_configure+0x118>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d9fa      	bls.n	8006f1c <uart_stm32_configure+0x174>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006f26:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 8006f2a:	d0f7      	beq.n	8006f1c <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8006f2c:	f44f 7e40 	mov.w	lr, #768	; 0x300
			return LL_USART_DATAWIDTH_8B;
 8006f30:	2300      	movs	r3, #0
 8006f32:	e76b      	b.n	8006e0c <uart_stm32_configure+0x64>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006f34:	f1bc 0f00 	cmp.w	ip, #0
 8006f38:	d0f0      	beq.n	8006f1c <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 8006f3a:	469e      	mov	lr, r3
 8006f3c:	e7cf      	b.n	8006ede <uart_stm32_configure+0x136>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006f3e:	f1bc 0f00 	cmp.w	ip, #0
 8006f42:	d0eb      	beq.n	8006f1c <uart_stm32_configure+0x174>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8006f44:	f1b8 0f01 	cmp.w	r8, #1
 8006f48:	d9e8      	bls.n	8006f1c <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 8006f4a:	469e      	mov	lr, r3
			return LL_USART_DATAWIDTH_8B;
 8006f4c:	4673      	mov	r3, lr
 8006f4e:	e75d      	b.n	8006e0c <uart_stm32_configure+0x64>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006f50:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 8006f54:	d0e2      	beq.n	8006f1c <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 8006f56:	f04f 0e00 	mov.w	lr, #0
 8006f5a:	e7f7      	b.n	8006f4c <uart_stm32_configure+0x1a4>
 8006f5c:	0800e104 	.word	0x0800e104
 8006f60:	40013800 	.word	0x40013800

08006f64 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8006f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f68:	b086      	sub	sp, #24
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
 8006f6a:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8006f6e:	6844      	ldr	r4, [r0, #4]
{
 8006f70:	4606      	mov	r6, r0
	data->clock = clk;
 8006f72:	485b      	ldr	r0, [pc, #364]	; (80070e0 <uart_stm32_init+0x17c>)
 8006f74:	f8c8 0004 	str.w	r0, [r8, #4]
{
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	f005 fdb3 	bl	800cae4 <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8006f7e:	4603      	mov	r3, r0
 8006f80:	b988      	cbnz	r0, 8006fa6 <uart_stm32_init+0x42>
		LOG_ERR("clock control device not ready");
 8006f82:	4a58      	ldr	r2, [pc, #352]	; (80070e4 <uart_stm32_init+0x180>)
 8006f84:	617a      	str	r2, [r7, #20]
 8006f86:	2202      	movs	r2, #2
 8006f88:	613a      	str	r2, [r7, #16]
 8006f8a:	4857      	ldr	r0, [pc, #348]	; (80070e8 <uart_stm32_init+0x184>)
 8006f8c:	f107 0210 	add.w	r2, r7, #16
 8006f90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
 8006f94:	f06f 0512 	mvn.w	r5, #18
 8006f98:	f7fd f95a 	bl	8004250 <z_impl_z_log_msg_static_create>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8006fa6:	f8d8 0004 	ldr.w	r0, [r8, #4]
	return api->on(dev, sys);
 8006faa:	6861      	ldr	r1, [r4, #4]
 8006fac:	6883      	ldr	r3, [r0, #8]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4798      	blx	r3
	if (err != 0) {
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	b160      	cbz	r0, 8006fd0 <uart_stm32_init+0x6c>
		LOG_ERR("Could not enable (LP)UART clock");
 8006fb6:	4b4d      	ldr	r3, [pc, #308]	; (80070ec <uart_stm32_init+0x188>)
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	2302      	movs	r3, #2
 8006fbc:	613b      	str	r3, [r7, #16]
 8006fbe:	484a      	ldr	r0, [pc, #296]	; (80070e8 <uart_stm32_init+0x184>)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f107 0210 	add.w	r2, r7, #16
 8006fc6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006fca:	f7fd f941 	bl	8004250 <z_impl_z_log_msg_static_create>
		return err;
 8006fce:	e7e5      	b.n	8006f9c <uart_stm32_init+0x38>
	ret = pinctrl_lookup_state(config, id, &state);
 8006fd0:	4601      	mov	r1, r0
 8006fd2:	463a      	mov	r2, r7
 8006fd4:	69a0      	ldr	r0, [r4, #24]
 8006fd6:	f005 fd5d 	bl	800ca94 <pinctrl_lookup_state>
	if (ret < 0) {
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	da01      	bge.n	8006fe2 <uart_stm32_init+0x7e>
 8006fde:	4605      	mov	r5, r0
 8006fe0:	e7dc      	b.n	8006f9c <uart_stm32_init+0x38>
	return pinctrl_apply_state_direct(config, state);
 8006fe2:	683b      	ldr	r3, [r7, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8006fe4:	462a      	mov	r2, r5
 8006fe6:	7919      	ldrb	r1, [r3, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	f000 fa1b 	bl	8007424 <pinctrl_configure_pins>
	if (err < 0) {
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	dbf5      	blt.n	8006fde <uart_stm32_init+0x7a>
	LL_USART_Disable(config->usart);
 8006ff2:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8006ff4:	6813      	ldr	r3, [r2, #0]
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	6013      	str	r3, [r2, #0]
	LL_USART_SetTransferDirection(config->usart,
 8006ffc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8007002:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	e842 3900 	strex	r9, r3, [r2]
 800700a:	f1b9 0f00 	cmp.w	r9, #0
 800700e:	d1f6      	bne.n	8006ffe <uart_stm32_init+0x9a>
	if (config->parity == 2) {
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d059      	beq.n	80070ca <uart_stm32_init+0x166>
	} else if (config->parity == 1) {
 8007016:	2b01      	cmp	r3, #1
 8007018:	d05c      	beq.n	80070d4 <uart_stm32_init+0x170>
		if (config->parity != 0) {
 800701a:	2b00      	cmp	r3, #0
 800701c:	d144      	bne.n	80070a8 <uart_stm32_init+0x144>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800701e:	2300      	movs	r3, #0
	LL_USART_ConfigCharacter(config->usart,
 8007020:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8007022:	680a      	ldr	r2, [r1, #0]
 8007024:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007028:	ea43 0309 	orr.w	r3, r3, r9
 800702c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8007030:	431a      	orrs	r2, r3
 8007032:	600a      	str	r2, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007034:	684b      	ldr	r3, [r1, #4]
 8007036:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800703a:	604b      	str	r3, [r1, #4]
	if (config->hw_flow_control) {
 800703c:	7b23      	ldrb	r3, [r4, #12]
 800703e:	b12b      	cbz	r3, 800704c <uart_stm32_init+0xe8>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8007040:	6873      	ldr	r3, [r6, #4]
 8007042:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007044:	6893      	ldr	r3, [r2, #8]
 8007046:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800704a:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800704c:	f8d8 1000 	ldr.w	r1, [r8]
 8007050:	4630      	mov	r0, r6
 8007052:	f7ff fe77 	bl	8006d44 <uart_stm32_set_baudrate>
	if (config->single_wire) {
 8007056:	7d23      	ldrb	r3, [r4, #20]
 8007058:	b123      	cbz	r3, 8007064 <uart_stm32_init+0x100>
		LL_USART_EnableHalfDuplex(config->usart);
 800705a:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800705c:	6893      	ldr	r3, [r2, #8]
 800705e:	f043 0308 	orr.w	r3, r3, #8
 8007062:	6093      	str	r3, [r2, #8]
	if (config->tx_rx_swap) {
 8007064:	7d63      	ldrb	r3, [r4, #21]
 8007066:	b123      	cbz	r3, 8007072 <uart_stm32_init+0x10e>
		LL_USART_SetTXRXSwap(config->usart, LL_USART_TXRX_SWAPPED);
 8007068:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 800706a:	6853      	ldr	r3, [r2, #4]
 800706c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007070:	6053      	str	r3, [r2, #4]
	if (config->rx_invert) {
 8007072:	7da3      	ldrb	r3, [r4, #22]
 8007074:	b123      	cbz	r3, 8007080 <uart_stm32_init+0x11c>
		LL_USART_SetRXPinLevel(config->usart, LL_USART_RXPIN_LEVEL_INVERTED);
 8007076:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 8007078:	6853      	ldr	r3, [r2, #4]
 800707a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800707e:	6053      	str	r3, [r2, #4]
	if (config->tx_invert) {
 8007080:	7de3      	ldrb	r3, [r4, #23]
 8007082:	b123      	cbz	r3, 800708e <uart_stm32_init+0x12a>
		LL_USART_SetTXPinLevel(config->usart, LL_USART_TXPIN_LEVEL_INVERTED);
 8007084:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 8007086:	6853      	ldr	r3, [r2, #4]
 8007088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800708c:	6053      	str	r3, [r2, #4]
	LL_USART_Enable(config->usart);
 800708e:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007090:	6813      	ldr	r3, [r2, #0]
 8007092:	f043 0301 	orr.w	r3, r3, #1
 8007096:	6013      	str	r3, [r2, #0]
	while (!(LL_USART_IsActiveFlag_TEACK(config->usart))) {
 8007098:	6823      	ldr	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800709a:	69da      	ldr	r2, [r3, #28]
 800709c:	0291      	lsls	r1, r2, #10
 800709e:	d5fc      	bpl.n	800709a <uart_stm32_init+0x136>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80070a0:	69da      	ldr	r2, [r3, #28]
 80070a2:	0252      	lsls	r2, r2, #9
 80070a4:	d5fc      	bpl.n	80070a0 <uart_stm32_init+0x13c>
 80070a6:	e779      	b.n	8006f9c <uart_stm32_init+0x38>
			LOG_WRN("Invalid parity setting '%d'."
 80070a8:	46ea      	mov	sl, sp
 80070aa:	b088      	sub	sp, #32
 80070ac:	466a      	mov	r2, sp
 80070ae:	4910      	ldr	r1, [pc, #64]	; (80070f0 <uart_stm32_init+0x18c>)
 80070b0:	e9c2 1305 	strd	r1, r3, [r2, #20]
 80070b4:	2303      	movs	r3, #3
 80070b6:	f842 3f10 	str.w	r3, [r2, #16]!
 80070ba:	480b      	ldr	r0, [pc, #44]	; (80070e8 <uart_stm32_init+0x184>)
 80070bc:	464b      	mov	r3, r9
 80070be:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 80070c2:	f7fd f8c5 	bl	8004250 <z_impl_z_log_msg_static_create>
 80070c6:	46d5      	mov	sp, sl
 80070c8:	e7a9      	b.n	800701e <uart_stm32_init+0xba>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80070ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80070ce:	f44f 6980 	mov.w	r9, #1024	; 0x400
 80070d2:	e7a5      	b.n	8007020 <uart_stm32_init+0xbc>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80070d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 80070d8:	f44f 69c0 	mov.w	r9, #1536	; 0x600
 80070dc:	e7a0      	b.n	8007020 <uart_stm32_init+0xbc>
 80070de:	bf00      	nop
 80070e0:	0800d6e0 	.word	0x0800d6e0
 80070e4:	08013653 	.word	0x08013653
 80070e8:	0800db94 	.word	0x0800db94
 80070ec:	0801399d 	.word	0x0801399d
 80070f0:	080139bd 	.word	0x080139bd

080070f4 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
 80070f4:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 80070f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80070fa:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 80070fc:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 80070fe:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8007100:	4b09      	ldr	r3, [pc, #36]	; (8007128 <elapsed+0x34>)
 8007102:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8007106:	4909      	ldr	r1, [pc, #36]	; (800712c <elapsed+0x38>)
 8007108:	d101      	bne.n	800710e <elapsed+0x1a>
	    || (val1 < val2)) {
 800710a:	4282      	cmp	r2, r0
 800710c:	d206      	bcs.n	800711c <elapsed+0x28>
		overflow_cyc += last_load;
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	680c      	ldr	r4, [r1, #0]
 8007112:	4422      	add	r2, r4
 8007114:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8007116:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800711a:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	680a      	ldr	r2, [r1, #0]
 8007120:	4413      	add	r3, r2
}
 8007122:	1a18      	subs	r0, r3, r0
 8007124:	bd10      	pop	{r4, pc}
 8007126:	bf00      	nop
 8007128:	20000c88 	.word	0x20000c88
 800712c:	20000c94 	.word	0x20000c94

08007130 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007130:	4b09      	ldr	r3, [pc, #36]	; (8007158 <sys_clock_driver_init+0x28>)
 8007132:	2210      	movs	r2, #16
 8007134:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8007138:	4b08      	ldr	r3, [pc, #32]	; (800715c <sys_clock_driver_init+0x2c>)
 800713a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800713e:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8007140:	4b07      	ldr	r3, [pc, #28]	; (8007160 <sys_clock_driver_init+0x30>)
 8007142:	2000      	movs	r0, #0
 8007144:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8007146:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800714a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800714c:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	f042 0207 	orr.w	r2, r2, #7
 8007154:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8007156:	4770      	bx	lr
 8007158:	e000ed00 	.word	0xe000ed00
 800715c:	20000c94 	.word	0x20000c94
 8007160:	20000c88 	.word	0x20000c88

08007164 <sys_clock_isr>:
{
 8007164:	b508      	push	{r3, lr}
	elapsed();
 8007166:	f7ff ffc5 	bl	80070f4 <elapsed>
	cycle_count += overflow_cyc;
 800716a:	4b0c      	ldr	r3, [pc, #48]	; (800719c <sys_clock_isr+0x38>)
 800716c:	4a0c      	ldr	r2, [pc, #48]	; (80071a0 <sys_clock_isr+0x3c>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	6811      	ldr	r1, [r2, #0]
 8007172:	4408      	add	r0, r1
 8007174:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8007176:	2200      	movs	r2, #0
 8007178:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800717a:	4a0a      	ldr	r2, [pc, #40]	; (80071a4 <sys_clock_isr+0x40>)
 800717c:	6813      	ldr	r3, [r2, #0]
 800717e:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8007182:	1ac0      	subs	r0, r0, r3
 8007184:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8007188:	fb01 3300 	mla	r3, r1, r0, r3
 800718c:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800718e:	f002 fcbb 	bl	8009b08 <sys_clock_announce>
}
 8007192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8007196:	f7fd be55 	b.w	8004e44 <z_arm_exc_exit>
 800719a:	bf00      	nop
 800719c:	20000c88 	.word	0x20000c88
 80071a0:	20000c90 	.word	0x20000c90
 80071a4:	20000c8c 	.word	0x20000c8c

080071a8 <sys_clock_set_timeout>:
{
 80071a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ac:	4e43      	ldr	r6, [pc, #268]	; (80072bc <sys_clock_set_timeout+0x114>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 80071ae:	b379      	cbz	r1, 8007210 <sys_clock_set_timeout+0x68>
 80071b0:	1c42      	adds	r2, r0, #1
 80071b2:	d10a      	bne.n	80071ca <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80071b4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80071b8:	6913      	ldr	r3, [r2, #16]
 80071ba:	f023 0301 	bic.w	r3, r3, #1
 80071be:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 80071c0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80071c4:	6033      	str	r3, [r6, #0]
}
 80071c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 80071ca:	6834      	ldr	r4, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80071cc:	2801      	cmp	r0, #1
 80071ce:	dd25      	ble.n	800721c <sys_clock_set_timeout+0x74>
 80071d0:	f640 1819 	movw	r8, #2329	; 0x919
 80071d4:	4540      	cmp	r0, r8
 80071d6:	dc01      	bgt.n	80071dc <sys_clock_set_timeout+0x34>
 80071d8:	f100 38ff 	add.w	r8, r0, #4294967295
	__asm__ volatile(
 80071dc:	f04f 0310 	mov.w	r3, #16
 80071e0:	f3ef 8511 	mrs	r5, BASEPRI
 80071e4:	f383 8812 	msr	BASEPRI_MAX, r3
 80071e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80071ec:	4834      	ldr	r0, [pc, #208]	; (80072c0 <sys_clock_set_timeout+0x118>)
 80071ee:	f000 fcb9 	bl	8007b64 <z_spin_lock_valid>
 80071f2:	b9b0      	cbnz	r0, 8007222 <sys_clock_set_timeout+0x7a>
 80071f4:	4a33      	ldr	r2, [pc, #204]	; (80072c4 <sys_clock_set_timeout+0x11c>)
 80071f6:	4934      	ldr	r1, [pc, #208]	; (80072c8 <sys_clock_set_timeout+0x120>)
 80071f8:	4834      	ldr	r0, [pc, #208]	; (80072cc <sys_clock_set_timeout+0x124>)
 80071fa:	238e      	movs	r3, #142	; 0x8e
 80071fc:	f004 fdbd 	bl	800bd7a <assert_print>
 8007200:	492f      	ldr	r1, [pc, #188]	; (80072c0 <sys_clock_set_timeout+0x118>)
 8007202:	4833      	ldr	r0, [pc, #204]	; (80072d0 <sys_clock_set_timeout+0x128>)
 8007204:	f004 fdb9 	bl	800bd7a <assert_print>
 8007208:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800720a:	482e      	ldr	r0, [pc, #184]	; (80072c4 <sys_clock_set_timeout+0x11c>)
 800720c:	f004 fdae 	bl	800bd6c <assert_post_action>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8007210:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8007212:	6834      	ldr	r4, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8007214:	d1da      	bne.n	80071cc <sys_clock_set_timeout+0x24>
 8007216:	f640 1019 	movw	r0, #2329	; 0x919
 800721a:	e7dd      	b.n	80071d8 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800721c:	f04f 0800 	mov.w	r8, #0
 8007220:	e7dc      	b.n	80071dc <sys_clock_set_timeout+0x34>
	z_spin_lock_set_owner(l);
 8007222:	4827      	ldr	r0, [pc, #156]	; (80072c0 <sys_clock_set_timeout+0x118>)
	cycle_count += pending;
 8007224:	4f2b      	ldr	r7, [pc, #172]	; (80072d4 <sys_clock_set_timeout+0x12c>)
 8007226:	f000 fcbb 	bl	8007ba0 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
 800722a:	f7ff ff63 	bl	80070f4 <elapsed>
	val1 = SysTick->VAL;
 800722e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8007232:	2100      	movs	r1, #0
	val1 = SysTick->VAL;
 8007234:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	18c2      	adds	r2, r0, r3
	overflow_cyc = 0U;
 800723c:	4b26      	ldr	r3, [pc, #152]	; (80072d8 <sys_clock_set_timeout+0x130>)
 800723e:	6019      	str	r1, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8007240:	4b26      	ldr	r3, [pc, #152]	; (80072dc <sys_clock_set_timeout+0x134>)
 8007242:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8007244:	1ad1      	subs	r1, r2, r3
 8007246:	d431      	bmi.n	80072ac <sys_clock_set_timeout+0x104>
		delay = ticks * CYC_PER_TICK;
 8007248:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800724c:	fb00 1108 	mla	r1, r0, r8, r1
 8007250:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
		delay -= unannounced;
 8007254:	1a9b      	subs	r3, r3, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8007256:	311f      	adds	r1, #31
 8007258:	fbb1 f1f0 	udiv	r1, r1, r0
		delay -= unannounced;
 800725c:	fb00 3301 	mla	r3, r0, r1, r3
		delay = MAX(delay, MIN_DELAY);
 8007260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007264:	d922      	bls.n	80072ac <sys_clock_set_timeout+0x104>
		if (delay > MAX_CYCLES) {
 8007266:	491e      	ldr	r1, [pc, #120]	; (80072e0 <sys_clock_set_timeout+0x138>)
 8007268:	428b      	cmp	r3, r1
 800726a:	bf28      	it	cs
 800726c:	460b      	movcs	r3, r1
	val2 = SysTick->VAL;
 800726e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 8007272:	6033      	str	r3, [r6, #0]
	val2 = SysTick->VAL;
 8007274:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
 8007276:	3b01      	subs	r3, #1
 8007278:	614b      	str	r3, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800727a:	2300      	movs	r3, #0
	if (val1 < val2) {
 800727c:	4584      	cmp	ip, r0
	SysTick->VAL = 0; /* resets timer to last_load */
 800727e:	618b      	str	r3, [r1, #24]
	if (val1 < val2) {
 8007280:	ebac 0300 	sub.w	r3, ip, r0
		cycle_count += (val1 + (last_load_ - val2));
 8007284:	bf38      	it	cc
 8007286:	191b      	addcc	r3, r3, r4
		cycle_count += (val1 - val2);
 8007288:	441a      	add	r2, r3
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800728a:	480d      	ldr	r0, [pc, #52]	; (80072c0 <sys_clock_set_timeout+0x118>)
 800728c:	603a      	str	r2, [r7, #0]
 800728e:	f000 fc77 	bl	8007b80 <z_spin_unlock_valid>
 8007292:	b970      	cbnz	r0, 80072b2 <sys_clock_set_timeout+0x10a>
 8007294:	4a0b      	ldr	r2, [pc, #44]	; (80072c4 <sys_clock_set_timeout+0x11c>)
 8007296:	4913      	ldr	r1, [pc, #76]	; (80072e4 <sys_clock_set_timeout+0x13c>)
 8007298:	480c      	ldr	r0, [pc, #48]	; (80072cc <sys_clock_set_timeout+0x124>)
 800729a:	23b9      	movs	r3, #185	; 0xb9
 800729c:	f004 fd6d 	bl	800bd7a <assert_print>
 80072a0:	4907      	ldr	r1, [pc, #28]	; (80072c0 <sys_clock_set_timeout+0x118>)
 80072a2:	4811      	ldr	r0, [pc, #68]	; (80072e8 <sys_clock_set_timeout+0x140>)
 80072a4:	f004 fd69 	bl	800bd7a <assert_print>
 80072a8:	21b9      	movs	r1, #185	; 0xb9
 80072aa:	e7ae      	b.n	800720a <sys_clock_set_timeout+0x62>
 80072ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072b0:	e7dd      	b.n	800726e <sys_clock_set_timeout+0xc6>
	__asm__ volatile(
 80072b2:	f385 8811 	msr	BASEPRI, r5
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	e784      	b.n	80071c6 <sys_clock_set_timeout+0x1e>
 80072bc:	20000c94 	.word	0x20000c94
 80072c0:	20000c98 	.word	0x20000c98
 80072c4:	08012877 	.word	0x08012877
 80072c8:	080128a4 	.word	0x080128a4
 80072cc:	0800e198 	.word	0x0800e198
 80072d0:	080128b9 	.word	0x080128b9
 80072d4:	20000c90 	.word	0x20000c90
 80072d8:	20000c88 	.word	0x20000c88
 80072dc:	20000c8c 	.word	0x20000c8c
 80072e0:	00ffdf20 	.word	0x00ffdf20
 80072e4:	080128d1 	.word	0x080128d1
 80072e8:	080128e8 	.word	0x080128e8

080072ec <sys_clock_elapsed>:
{
 80072ec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80072ee:	f04f 0310 	mov.w	r3, #16
 80072f2:	f3ef 8511 	mrs	r5, BASEPRI
 80072f6:	f383 8812 	msr	BASEPRI_MAX, r3
 80072fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80072fe:	481b      	ldr	r0, [pc, #108]	; (800736c <sys_clock_elapsed+0x80>)
 8007300:	f000 fc30 	bl	8007b64 <z_spin_lock_valid>
 8007304:	b968      	cbnz	r0, 8007322 <sys_clock_elapsed+0x36>
 8007306:	4a1a      	ldr	r2, [pc, #104]	; (8007370 <sys_clock_elapsed+0x84>)
 8007308:	491a      	ldr	r1, [pc, #104]	; (8007374 <sys_clock_elapsed+0x88>)
 800730a:	481b      	ldr	r0, [pc, #108]	; (8007378 <sys_clock_elapsed+0x8c>)
 800730c:	238e      	movs	r3, #142	; 0x8e
 800730e:	f004 fd34 	bl	800bd7a <assert_print>
 8007312:	4916      	ldr	r1, [pc, #88]	; (800736c <sys_clock_elapsed+0x80>)
 8007314:	4819      	ldr	r0, [pc, #100]	; (800737c <sys_clock_elapsed+0x90>)
 8007316:	f004 fd30 	bl	800bd7a <assert_print>
 800731a:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800731c:	4814      	ldr	r0, [pc, #80]	; (8007370 <sys_clock_elapsed+0x84>)
 800731e:	f004 fd25 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8007322:	4812      	ldr	r0, [pc, #72]	; (800736c <sys_clock_elapsed+0x80>)
 8007324:	f000 fc3c 	bl	8007ba0 <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8007328:	f7ff fee4 	bl	80070f4 <elapsed>
 800732c:	4b14      	ldr	r3, [pc, #80]	; (8007380 <sys_clock_elapsed+0x94>)
 800732e:	681c      	ldr	r4, [r3, #0]
 8007330:	4b14      	ldr	r3, [pc, #80]	; (8007384 <sys_clock_elapsed+0x98>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	1ae4      	subs	r4, r4, r3
 8007336:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007338:	480c      	ldr	r0, [pc, #48]	; (800736c <sys_clock_elapsed+0x80>)
 800733a:	f000 fc21 	bl	8007b80 <z_spin_unlock_valid>
 800733e:	b958      	cbnz	r0, 8007358 <sys_clock_elapsed+0x6c>
 8007340:	4a0b      	ldr	r2, [pc, #44]	; (8007370 <sys_clock_elapsed+0x84>)
 8007342:	4911      	ldr	r1, [pc, #68]	; (8007388 <sys_clock_elapsed+0x9c>)
 8007344:	480c      	ldr	r0, [pc, #48]	; (8007378 <sys_clock_elapsed+0x8c>)
 8007346:	23b9      	movs	r3, #185	; 0xb9
 8007348:	f004 fd17 	bl	800bd7a <assert_print>
 800734c:	4907      	ldr	r1, [pc, #28]	; (800736c <sys_clock_elapsed+0x80>)
 800734e:	480f      	ldr	r0, [pc, #60]	; (800738c <sys_clock_elapsed+0xa0>)
 8007350:	f004 fd13 	bl	800bd7a <assert_print>
 8007354:	21b9      	movs	r1, #185	; 0xb9
 8007356:	e7e1      	b.n	800731c <sys_clock_elapsed+0x30>
	__asm__ volatile(
 8007358:	f385 8811 	msr	BASEPRI, r5
 800735c:	f3bf 8f6f 	isb	sy
}
 8007360:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 8007364:	fbb4 f0f0 	udiv	r0, r4, r0
 8007368:	bd38      	pop	{r3, r4, r5, pc}
 800736a:	bf00      	nop
 800736c:	20000c98 	.word	0x20000c98
 8007370:	08012877 	.word	0x08012877
 8007374:	080128a4 	.word	0x080128a4
 8007378:	0800e198 	.word	0x0800e198
 800737c:	080128b9 	.word	0x080128b9
 8007380:	20000c90 	.word	0x20000c90
 8007384:	20000c8c 	.word	0x20000c8c
 8007388:	080128d1 	.word	0x080128d1
 800738c:	080128e8 	.word	0x080128e8

08007390 <sys_clock_cycle_get_32>:
{
 8007390:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8007392:	f04f 0310 	mov.w	r3, #16
 8007396:	f3ef 8511 	mrs	r5, BASEPRI
 800739a:	f383 8812 	msr	BASEPRI_MAX, r3
 800739e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80073a2:	4818      	ldr	r0, [pc, #96]	; (8007404 <sys_clock_cycle_get_32+0x74>)
 80073a4:	f000 fbde 	bl	8007b64 <z_spin_lock_valid>
 80073a8:	b968      	cbnz	r0, 80073c6 <sys_clock_cycle_get_32+0x36>
 80073aa:	4a17      	ldr	r2, [pc, #92]	; (8007408 <sys_clock_cycle_get_32+0x78>)
 80073ac:	4917      	ldr	r1, [pc, #92]	; (800740c <sys_clock_cycle_get_32+0x7c>)
 80073ae:	4818      	ldr	r0, [pc, #96]	; (8007410 <sys_clock_cycle_get_32+0x80>)
 80073b0:	238e      	movs	r3, #142	; 0x8e
 80073b2:	f004 fce2 	bl	800bd7a <assert_print>
 80073b6:	4913      	ldr	r1, [pc, #76]	; (8007404 <sys_clock_cycle_get_32+0x74>)
 80073b8:	4816      	ldr	r0, [pc, #88]	; (8007414 <sys_clock_cycle_get_32+0x84>)
 80073ba:	f004 fcde 	bl	800bd7a <assert_print>
 80073be:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80073c0:	4811      	ldr	r0, [pc, #68]	; (8007408 <sys_clock_cycle_get_32+0x78>)
 80073c2:	f004 fcd3 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 80073c6:	480f      	ldr	r0, [pc, #60]	; (8007404 <sys_clock_cycle_get_32+0x74>)
 80073c8:	f000 fbea 	bl	8007ba0 <z_spin_lock_set_owner>
	uint32_t ret = elapsed() + cycle_count;
 80073cc:	f7ff fe92 	bl	80070f4 <elapsed>
 80073d0:	4b11      	ldr	r3, [pc, #68]	; (8007418 <sys_clock_cycle_get_32+0x88>)
 80073d2:	681c      	ldr	r4, [r3, #0]
 80073d4:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80073d6:	480b      	ldr	r0, [pc, #44]	; (8007404 <sys_clock_cycle_get_32+0x74>)
 80073d8:	f000 fbd2 	bl	8007b80 <z_spin_unlock_valid>
 80073dc:	b958      	cbnz	r0, 80073f6 <sys_clock_cycle_get_32+0x66>
 80073de:	4a0a      	ldr	r2, [pc, #40]	; (8007408 <sys_clock_cycle_get_32+0x78>)
 80073e0:	490e      	ldr	r1, [pc, #56]	; (800741c <sys_clock_cycle_get_32+0x8c>)
 80073e2:	480b      	ldr	r0, [pc, #44]	; (8007410 <sys_clock_cycle_get_32+0x80>)
 80073e4:	23b9      	movs	r3, #185	; 0xb9
 80073e6:	f004 fcc8 	bl	800bd7a <assert_print>
 80073ea:	4906      	ldr	r1, [pc, #24]	; (8007404 <sys_clock_cycle_get_32+0x74>)
 80073ec:	480c      	ldr	r0, [pc, #48]	; (8007420 <sys_clock_cycle_get_32+0x90>)
 80073ee:	f004 fcc4 	bl	800bd7a <assert_print>
 80073f2:	21b9      	movs	r1, #185	; 0xb9
 80073f4:	e7e4      	b.n	80073c0 <sys_clock_cycle_get_32+0x30>
	__asm__ volatile(
 80073f6:	f385 8811 	msr	BASEPRI, r5
 80073fa:	f3bf 8f6f 	isb	sy
}
 80073fe:	4620      	mov	r0, r4
 8007400:	bd38      	pop	{r3, r4, r5, pc}
 8007402:	bf00      	nop
 8007404:	20000c98 	.word	0x20000c98
 8007408:	08012877 	.word	0x08012877
 800740c:	080128a4 	.word	0x080128a4
 8007410:	0800e198 	.word	0x0800e198
 8007414:	080128b9 	.word	0x080128b9
 8007418:	20000c90 	.word	0x20000c90
 800741c:	080128d1 	.word	0x080128d1
 8007420:	080128e8 	.word	0x080128e8

08007424 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8007424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8007428:	4f27      	ldr	r7, [pc, #156]	; (80074c8 <pinctrl_configure_pins+0xa4>)
 800742a:	4604      	mov	r4, r0
 800742c:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 8007430:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8007432:	42b4      	cmp	r4, r6
 8007434:	d101      	bne.n	800743a <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8007436:	2000      	movs	r0, #0
 8007438:	e014      	b.n	8007464 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 800743a:	6822      	ldr	r2, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800743c:	06d1      	lsls	r1, r2, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800743e:	f002 081f 	and.w	r8, r2, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8007442:	d411      	bmi.n	8007468 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8007444:	6865      	ldr	r5, [r4, #4]
 8007446:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800744a:	f3c2 1a47 	ubfx	sl, r2, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800744e:	f3c2 2243 	ubfx	r2, r2, #9, #4
 8007452:	2a0a      	cmp	r2, #10
 8007454:	d834      	bhi.n	80074c0 <pinctrl_configure_pins+0x9c>
	port_device = gpio_ports[STM32_PORT(pin)];
 8007456:	f857 9022 	ldr.w	r9, [r7, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800745a:	f1b9 0f00 	cmp.w	r9, #0
 800745e:	d11e      	bne.n	800749e <pinctrl_configure_pins+0x7a>
		return -ENODEV;
 8007460:	f06f 0012 	mvn.w	r0, #18
}
 8007464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8007468:	f1b8 0f10 	cmp.w	r8, #16
 800746c:	d015      	beq.n	800749a <pinctrl_configure_pins+0x76>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 800746e:	f1b8 0f11 	cmp.w	r8, #17
 8007472:	d105      	bne.n	8007480 <pinctrl_configure_pins+0x5c>
			uint32_t gpio_out = pins[i].pincfg &
 8007474:	6865      	ldr	r5, [r4, #4]
			if (gpio_out != 0) {
 8007476:	052b      	lsls	r3, r5, #20
 8007478:	d5e7      	bpl.n	800744a <pinctrl_configure_pins+0x26>
				pin_cgf = pins[i].pincfg | STM32_MODER_OUTPUT_MODE;
 800747a:	f045 0510 	orr.w	r5, r5, #16
 800747e:	e7e4      	b.n	800744a <pinctrl_configure_pins+0x26>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
 8007480:	f1b8 0f00 	cmp.w	r8, #0
 8007484:	d1e1      	bne.n	800744a <pinctrl_configure_pins+0x26>
 8007486:	4911      	ldr	r1, [pc, #68]	; (80074cc <pinctrl_configure_pins+0xa8>)
 8007488:	4811      	ldr	r0, [pc, #68]	; (80074d0 <pinctrl_configure_pins+0xac>)
 800748a:	4a12      	ldr	r2, [pc, #72]	; (80074d4 <pinctrl_configure_pins+0xb0>)
 800748c:	23f8      	movs	r3, #248	; 0xf8
 800748e:	f004 fc74 	bl	800bd7a <assert_print>
 8007492:	4810      	ldr	r0, [pc, #64]	; (80074d4 <pinctrl_configure_pins+0xb0>)
 8007494:	21f8      	movs	r1, #248	; 0xf8
 8007496:	f004 fc69 	bl	800bd6c <assert_post_action>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 800749a:	2530      	movs	r5, #48	; 0x30
 800749c:	e7d5      	b.n	800744a <pinctrl_configure_pins+0x26>
 800749e:	4648      	mov	r0, r9
 80074a0:	f005 fb20 	bl	800cae4 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d0db      	beq.n	8007460 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 80074a8:	4643      	mov	r3, r8
 80074aa:	462a      	mov	r2, r5
 80074ac:	f00a 010f 	and.w	r1, sl, #15
 80074b0:	4648      	mov	r0, r9
 80074b2:	f005 f849 	bl	800c548 <gpio_stm32_configure>
		if (ret < 0) {
 80074b6:	2800      	cmp	r0, #0
 80074b8:	f104 0408 	add.w	r4, r4, #8
 80074bc:	dab9      	bge.n	8007432 <pinctrl_configure_pins+0xe>
 80074be:	e7d1      	b.n	8007464 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 80074c0:	f06f 0015 	mvn.w	r0, #21
 80074c4:	e7ce      	b.n	8007464 <pinctrl_configure_pins+0x40>
 80074c6:	bf00      	nop
 80074c8:	0800e02c 	.word	0x0800e02c
 80074cc:	08013a4d 	.word	0x08013a4d
 80074d0:	0800e198 	.word	0x0800e198
 80074d4:	08013a1a 	.word	0x08013a1a

080074d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074d8:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;

  tmpreg = RCC->CFGR;
 80074da:	4911      	ldr	r1, [pc, #68]	; (8007520 <HAL_RCC_GetSysClockFreq+0x48>)
 80074dc:	684b      	ldr	r3, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80074de:	f003 020c 	and.w	r2, r3, #12
 80074e2:	2a08      	cmp	r2, #8
 80074e4:	d11a      	bne.n	800751c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80074e6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ea:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80074ee:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80074f2:	fab2 f282 	clz	r2, r2
 80074f6:	40d3      	lsrs	r3, r2
 80074f8:	4a0a      	ldr	r2, [pc, #40]	; (8007524 <HAL_RCC_GetSysClockFreq+0x4c>)
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80074fa:	480b      	ldr	r0, [pc, #44]	; (8007528 <HAL_RCC_GetSysClockFreq+0x50>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80074fc:	5cd4      	ldrb	r4, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80074fe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007500:	220f      	movs	r2, #15
 8007502:	f003 030f 	and.w	r3, r3, #15
 8007506:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800750a:	fab2 f282 	clz	r2, r2
 800750e:	40d3      	lsrs	r3, r2
 8007510:	4a06      	ldr	r2, [pc, #24]	; (800752c <HAL_RCC_GetSysClockFreq+0x54>)
 8007512:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007514:	fbb0 f0f3 	udiv	r0, r0, r3
 8007518:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800751a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800751c:	4802      	ldr	r0, [pc, #8]	; (8007528 <HAL_RCC_GetSysClockFreq+0x50>)
  return sysclockfreq;
 800751e:	e7fc      	b.n	800751a <HAL_RCC_GetSysClockFreq+0x42>
 8007520:	40021000 	.word	0x40021000
 8007524:	08013a8d 	.word	0x08013a8d
 8007528:	007a1200 	.word	0x007a1200
 800752c:	08013a7d 	.word	0x08013a7d

08007530 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007530:	4b03      	ldr	r3, [pc, #12]	; (8007540 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007532:	4a04      	ldr	r2, [pc, #16]	; (8007544 <RCC_GetHCLKClockFreq+0x14>)
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800753a:	5cd3      	ldrb	r3, [r2, r3]
}
 800753c:	40d8      	lsrs	r0, r3
 800753e:	4770      	bx	lr
 8007540:	40021000 	.word	0x40021000
 8007544:	08013a6d 	.word	0x08013a6d

08007548 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007548:	4b03      	ldr	r3, [pc, #12]	; (8007558 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800754a:	4a04      	ldr	r2, [pc, #16]	; (800755c <RCC_GetPCLK1ClockFreq+0x14>)
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007552:	5cd3      	ldrb	r3, [r2, r3]
}
 8007554:	40d8      	lsrs	r0, r3
 8007556:	4770      	bx	lr
 8007558:	40021000 	.word	0x40021000
 800755c:	08013a65 	.word	0x08013a65

08007560 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007560:	4b03      	ldr	r3, [pc, #12]	; (8007570 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007562:	4a04      	ldr	r2, [pc, #16]	; (8007574 <RCC_GetPCLK2ClockFreq+0x14>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800756a:	5cd3      	ldrb	r3, [r2, r3]
}
 800756c:	40d8      	lsrs	r0, r3
 800756e:	4770      	bx	lr
 8007570:	40021000 	.word	0x40021000
 8007574:	08013a65 	.word	0x08013a65

08007578 <RCC_PLL_GetFreqDomain_SYS>:
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8007578:	4a0a      	ldr	r2, [pc, #40]	; (80075a4 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 800757a:	480b      	ldr	r0, [pc, #44]	; (80075a8 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 800757c:	6853      	ldr	r3, [r2, #4]
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800757e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	3301      	adds	r3, #1
 8007586:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800758a:	6853      	ldr	r3, [r2, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800758c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007590:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007594:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8007598:	fab2 f282 	clz	r2, r2
 800759c:	40d3      	lsrs	r3, r2
 800759e:	3302      	adds	r3, #2
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80075a0:	4358      	muls	r0, r3
 80075a2:	4770      	bx	lr
 80075a4:	40021000 	.word	0x40021000
 80075a8:	007a1200 	.word	0x007a1200

080075ac <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80075ac:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <RCC_GetSystemClockFreq+0x14>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d101      	bne.n	80075bc <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80075b8:	f7ff bfde 	b.w	8007578 <RCC_PLL_GetFreqDomain_SYS>
}
 80075bc:	4801      	ldr	r0, [pc, #4]	; (80075c4 <RCC_GetSystemClockFreq+0x18>)
 80075be:	4770      	bx	lr
 80075c0:	40021000 	.word	0x40021000
 80075c4:	007a1200 	.word	0x007a1200

080075c8 <LL_SetFlashLatency>:
  uint32_t getlatency;
  uint32_t latency;
  ErrorStatus status = SUCCESS;

  /* Frequency cannot be equal to 0 */
  if (Frequency == 0U)
 80075c8:	b1d8      	cbz	r0, 8007602 <LL_SetFlashLatency+0x3a>
  {
    status = ERROR;
  }
  else
  {
    if (Frequency > UTILS_LATENCY2_FREQ)
 80075ca:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <LL_SetFlashLatency+0x40>)
 80075cc:	4298      	cmp	r0, r3
 80075ce:	d816      	bhi.n	80075fe <LL_SetFlashLatency+0x36>
      /* 48 < SYSCLK <= 72 => 2WS (3 CPU cycles) */
      latency = LL_FLASH_LATENCY_2;
    }
    else
    {
      if (Frequency > UTILS_LATENCY1_FREQ)
 80075d0:	4b0e      	ldr	r3, [pc, #56]	; (800760c <LL_SetFlashLatency+0x44>)
 80075d2:	4298      	cmp	r0, r3
 80075d4:	bf94      	ite	ls
 80075d6:	2000      	movls	r0, #0
 80075d8:	2001      	movhi	r0, #1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80075da:	4a0d      	ldr	r2, [pc, #52]	; (8007610 <LL_SetFlashLatency+0x48>)
 80075dc:	6813      	ldr	r3, [r2, #0]
 80075de:	f023 0307 	bic.w	r3, r3, #7
 80075e2:	4303      	orrs	r3, r0
 80075e4:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80075e6:	6813      	ldr	r3, [r2, #0]
 80075e8:	f003 0307 	and.w	r3, r3, #7
      do
      {
      /* Wait for Flash latency to be updated */
      getlatency = LL_FLASH_GetLatency();
      timeout--;
      } while ((getlatency != latency) && (timeout > 0));
 80075ec:	4298      	cmp	r0, r3
 80075ee:	bf1c      	itt	ne
 80075f0:	6813      	ldrne	r3, [r2, #0]
 80075f2:	f003 0307 	andne.w	r3, r3, #7

      if(getlatency != latency)
 80075f6:	1ac0      	subs	r0, r0, r3
 80075f8:	bf18      	it	ne
 80075fa:	2001      	movne	r0, #1
 80075fc:	4770      	bx	lr
      latency = LL_FLASH_LATENCY_2;
 80075fe:	2002      	movs	r0, #2
 8007600:	e7eb      	b.n	80075da <LL_SetFlashLatency+0x12>
    status = ERROR;
 8007602:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	02dc6c00 	.word	0x02dc6c00
 800760c:	016e3600 	.word	0x016e3600
 8007610:	40022000 	.word	0x40022000

08007614 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007614:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <z_sys_init_run_level+0x40>)
{
 8007616:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007618:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800761c:	3001      	adds	r0, #1
 800761e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8007622:	42a6      	cmp	r6, r4
 8007624:	d800      	bhi.n	8007628 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8007626:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8007628:	e9d4 3500 	ldrd	r3, r5, [r4]
 800762c:	4628      	mov	r0, r5
 800762e:	4798      	blx	r3
		if (dev != NULL) {
 8007630:	b16d      	cbz	r5, 800764e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 8007632:	b138      	cbz	r0, 8007644 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8007634:	2800      	cmp	r0, #0
 8007636:	bfb8      	it	lt
 8007638:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 800763a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
 800763c:	28ff      	cmp	r0, #255	; 0xff
 800763e:	bfa8      	it	ge
 8007640:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 8007642:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8007644:	68ea      	ldr	r2, [r5, #12]
 8007646:	7853      	ldrb	r3, [r2, #1]
 8007648:	f043 0301 	orr.w	r3, r3, #1
 800764c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800764e:	3408      	adds	r4, #8
 8007650:	e7e7      	b.n	8007622 <z_sys_init_run_level+0xe>
 8007652:	bf00      	nop
 8007654:	0800e058 	.word	0x0800e058

08007658 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8007658:	b510      	push	{r4, lr}
 800765a:	4604      	mov	r4, r0
 800765c:	b086      	sub	sp, #24
	z_impl_log_panic();
 800765e:	f7fc fcb1 	bl	8003fc4 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 8007662:	4b07      	ldr	r3, [pc, #28]	; (8007680 <k_sys_fatal_error_handler+0x28>)
 8007664:	9305      	str	r3, [sp, #20]
 8007666:	2302      	movs	r3, #2
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	4806      	ldr	r0, [pc, #24]	; (8007684 <k_sys_fatal_error_handler+0x2c>)
 800766c:	2300      	movs	r3, #0
 800766e:	aa04      	add	r2, sp, #16
 8007670:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8007674:	f7fc fdec 	bl	8004250 <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
 8007678:	4620      	mov	r0, r4
 800767a:	f005 fa3d 	bl	800caf8 <arch_system_halt>
 800767e:	bf00      	nop
 8007680:	08013a9d 	.word	0x08013a9d
 8007684:	0800db7c 	.word	0x0800db7c

08007688 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8007688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	4604      	mov	r4, r0
 8007690:	af00      	add	r7, sp, #0
 8007692:	460e      	mov	r6, r1
	__asm__ volatile(
 8007694:	f04f 0310 	mov.w	r3, #16
 8007698:	f3ef 8811 	mrs	r8, BASEPRI
 800769c:	f383 8812 	msr	BASEPRI_MAX, r3
 80076a0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 80076a4:	f001 ff28 	bl	80094f8 <z_impl_z_current_get>
 80076a8:	2c04      	cmp	r4, #4
 80076aa:	bf96      	itet	ls
 80076ac:	4b33      	ldrls	r3, [pc, #204]	; (800777c <z_fatal_error+0xf4>)
 80076ae:	4b34      	ldrhi	r3, [pc, #208]	; (8007780 <z_fatal_error+0xf8>)
 80076b0:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 80076b4:	46e9      	mov	r9, sp
 80076b6:	b08a      	sub	sp, #40	; 0x28
 80076b8:	4605      	mov	r5, r0
 80076ba:	466a      	mov	r2, sp
 80076bc:	4931      	ldr	r1, [pc, #196]	; (8007784 <z_fatal_error+0xfc>)
 80076be:	61d3      	str	r3, [r2, #28]
 80076c0:	2303      	movs	r3, #3
 80076c2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80076c6:	f04f 0a00 	mov.w	sl, #0
 80076ca:	4b2f      	ldr	r3, [pc, #188]	; (8007788 <z_fatal_error+0x100>)
 80076cc:	f8c2 a020 	str.w	sl, [r2, #32]
 80076d0:	e9c2 1405 	strd	r1, r4, [r2, #20]
 80076d4:	f842 3f10 	str.w	r3, [r2, #16]!
 80076d8:	482c      	ldr	r0, [pc, #176]	; (800778c <z_fatal_error+0x104>)
 80076da:	4653      	mov	r3, sl
 80076dc:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
 80076e0:	f7fc fdb6 	bl	8004250 <z_impl_z_log_msg_static_create>
 80076e4:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 80076e6:	b17e      	cbz	r6, 8007708 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 80076e8:	69f3      	ldr	r3, [r6, #28]
 80076ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ee:	b15b      	cbz	r3, 8007708 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
 80076f0:	4b27      	ldr	r3, [pc, #156]	; (8007790 <z_fatal_error+0x108>)
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	2302      	movs	r3, #2
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	4824      	ldr	r0, [pc, #144]	; (800778c <z_fatal_error+0x104>)
 80076fa:	4653      	mov	r3, sl
 80076fc:	f107 0210 	add.w	r2, r7, #16
 8007700:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8007704:	f7fc fda4 	bl	8004250 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8007708:	b12d      	cbz	r5, 8007716 <z_fatal_error+0x8e>
 800770a:	4628      	mov	r0, r5
 800770c:	f005 fa0a 	bl	800cb24 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 8007710:	b108      	cbz	r0, 8007716 <z_fatal_error+0x8e>
 8007712:	7803      	ldrb	r3, [r0, #0]
 8007714:	b903      	cbnz	r3, 8007718 <z_fatal_error+0x90>
		thread_name = "unknown";
 8007716:	481f      	ldr	r0, [pc, #124]	; (8007794 <z_fatal_error+0x10c>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8007718:	46e9      	mov	r9, sp
 800771a:	b08a      	sub	sp, #40	; 0x28
 800771c:	466a      	mov	r2, sp
 800771e:	4b1e      	ldr	r3, [pc, #120]	; (8007798 <z_fatal_error+0x110>)
 8007720:	61d0      	str	r0, [r2, #28]
 8007722:	e9c2 3505 	strd	r3, r5, [r2, #20]
 8007726:	2303      	movs	r3, #3
 8007728:	f882 3020 	strb.w	r3, [r2, #32]
 800772c:	4b1b      	ldr	r3, [pc, #108]	; (800779c <z_fatal_error+0x114>)
 800772e:	f842 3f10 	str.w	r3, [r2, #16]!
 8007732:	4816      	ldr	r0, [pc, #88]	; (800778c <z_fatal_error+0x104>)
 8007734:	2300      	movs	r3, #0
 8007736:	f44f 5109 	mov.w	r1, #8768	; 0x2240
 800773a:	f7fc fd89 	bl	8004250 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 800773e:	4631      	mov	r1, r6
 8007740:	46cd      	mov	sp, r9
 8007742:	4620      	mov	r0, r4
 8007744:	f7ff ff88 	bl	8007658 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
 8007748:	2c04      	cmp	r4, #4
 800774a:	d10c      	bne.n	8007766 <z_fatal_error+0xde>
 800774c:	4914      	ldr	r1, [pc, #80]	; (80077a0 <z_fatal_error+0x118>)
 800774e:	4a15      	ldr	r2, [pc, #84]	; (80077a4 <z_fatal_error+0x11c>)
 8007750:	4815      	ldr	r0, [pc, #84]	; (80077a8 <z_fatal_error+0x120>)
 8007752:	2393      	movs	r3, #147	; 0x93
 8007754:	f004 fb11 	bl	800bd7a <assert_print>
 8007758:	4814      	ldr	r0, [pc, #80]	; (80077ac <z_fatal_error+0x124>)
 800775a:	f004 fb0e 	bl	800bd7a <assert_print>
 800775e:	4811      	ldr	r0, [pc, #68]	; (80077a4 <z_fatal_error+0x11c>)
 8007760:	2193      	movs	r1, #147	; 0x93
 8007762:	f004 fb03 	bl	800bd6c <assert_post_action>
	__asm__ volatile(
 8007766:	f388 8811 	msr	BASEPRI, r8
 800776a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800776e:	4628      	mov	r0, r5
 8007770:	f7fd fedc 	bl	800552c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777c:	0800e070 	.word	0x0800e070
 8007780:	08013aac 	.word	0x08013aac
 8007784:	08013ac2 	.word	0x08013ac2
 8007788:	01000005 	.word	0x01000005
 800778c:	0800db7c 	.word	0x0800db7c
 8007790:	08013aea 	.word	0x08013aea
 8007794:	08013aba 	.word	0x08013aba
 8007798:	08013b0b 	.word	0x08013b0b
 800779c:	01000004 	.word	0x01000004
 80077a0:	08013b45 	.word	0x08013b45
 80077a4:	08013b23 	.word	0x08013b23
 80077a8:	0800e198 	.word	0x0800e198
 80077ac:	08013b62 	.word	0x08013b62

080077b0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 80077b0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 80077b2:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <bg_thread_main+0x2c>)
 80077b4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80077b6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 80077b8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80077ba:	f7ff ff2b 	bl	8007614 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 80077be:	f002 fc13 	bl	8009fe8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 80077c2:	2003      	movs	r0, #3
 80077c4:	f7ff ff26 	bl	8007614 <z_sys_init_run_level>

	z_init_static_threads();
 80077c8:	f000 f95a 	bl	8007a80 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 80077cc:	f7fa fdf0 	bl	80023b0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 80077d0:	4a03      	ldr	r2, [pc, #12]	; (80077e0 <bg_thread_main+0x30>)
 80077d2:	7b13      	ldrb	r3, [r2, #12]
 80077d4:	f023 0301 	bic.w	r3, r3, #1
 80077d8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 80077da:	bd08      	pop	{r3, pc}
 80077dc:	20000d04 	.word	0x20000d04
 80077e0:	20000978 	.word	0x20000978

080077e4 <z_bss_zero>:
{
 80077e4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 80077e6:	4803      	ldr	r0, [pc, #12]	; (80077f4 <z_bss_zero+0x10>)
 80077e8:	4a03      	ldr	r2, [pc, #12]	; (80077f8 <z_bss_zero+0x14>)
 80077ea:	2100      	movs	r1, #0
 80077ec:	1a12      	subs	r2, r2, r0
 80077ee:	f005 f98c 	bl	800cb0a <z_early_memset>
}
 80077f2:	bd08      	pop	{r3, pc}
 80077f4:	200003c0 	.word	0x200003c0
 80077f8:	20000d08 	.word	0x20000d08

080077fc <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 80077fc:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 80077fe:	2300      	movs	r3, #0
{
 8007800:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 8007802:	2201      	movs	r2, #1
 8007804:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 8007808:	4e13      	ldr	r6, [pc, #76]	; (8007858 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800780a:	4d14      	ldr	r5, [pc, #80]	; (800785c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	220f      	movs	r2, #15
 8007810:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8007814:	4912      	ldr	r1, [pc, #72]	; (8007860 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8007816:	2318      	movs	r3, #24
 8007818:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 800781c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 8007820:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8007822:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8007826:	fb00 1104 	mla	r1, r0, r4, r1
 800782a:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <z_init_cpu+0x68>)
 800782c:	9500      	str	r5, [sp, #0]
 800782e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007832:	4630      	mov	r0, r6
 8007834:	f000 f886 	bl	8007944 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8007838:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800783a:	4a0b      	ldr	r2, [pc, #44]	; (8007868 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 800783c:	60ee      	str	r6, [r5, #12]
 800783e:	f023 0304 	bic.w	r3, r3, #4
 8007842:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8007844:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8007848:	fb04 3303 	mla	r3, r4, r3, r3
 800784c:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
 800784e:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
 8007850:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 8007852:	b006      	add	sp, #24
 8007854:	bd70      	pop	{r4, r5, r6, pc}
 8007856:	bf00      	nop
 8007858:	200008f8 	.word	0x200008f8
 800785c:	20000c9c 	.word	0x20000c9c
 8007860:	20002200 	.word	0x20002200
 8007864:	08007bb1 	.word	0x08007bb1
 8007868:	200019c0 	.word	0x200019c0

0800786c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800786c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800786e:	4b2e      	ldr	r3, [pc, #184]	; (8007928 <z_cstart+0xbc>)
 8007870:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8007872:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8007876:	4d2d      	ldr	r5, [pc, #180]	; (800792c <z_cstart+0xc0>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8007878:	4e2d      	ldr	r6, [pc, #180]	; (8007930 <z_cstart+0xc4>)
 800787a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800787c:	4f2d      	ldr	r7, [pc, #180]	; (8007934 <z_cstart+0xc8>)
 800787e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007882:	616b      	str	r3, [r5, #20]
 8007884:	2400      	movs	r4, #0
 8007886:	23f0      	movs	r3, #240	; 0xf0
 8007888:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800788c:	77ec      	strb	r4, [r5, #31]
 800788e:	762c      	strb	r4, [r5, #24]
 8007890:	766c      	strb	r4, [r5, #25]
 8007892:	76ac      	strb	r4, [r5, #26]
 8007894:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8007898:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800789a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800789e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 80078a0:	f7fd fe10 	bl	80054c4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 80078a4:	f7fd f93a 	bl	8004b1c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80078a8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ac:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80078ae:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
 80078b0:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 80078b2:	f7fd ff41 	bl	8005738 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 80078b6:	f7fd fe4f 	bl	8005558 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 80078ba:	f7fc fb11 	bl	8003ee0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
 80078be:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
 80078c2:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
 80078c4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
 80078c8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
 80078cc:	f002 fb86 	bl	8009fdc <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
 80078d0:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 80078d2:	f005 f906 	bl	800cae2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80078d6:	4620      	mov	r0, r4
 80078d8:	f7ff fe9c 	bl	8007614 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80078dc:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 80078de:	4d16      	ldr	r5, [pc, #88]	; (8007938 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80078e0:	f7ff fe98 	bl	8007614 <z_sys_init_run_level>
	z_sched_init();
 80078e4:	f001 fc90 	bl	8009208 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80078e8:	4b14      	ldr	r3, [pc, #80]	; (800793c <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
 80078ea:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80078ec:	9305      	str	r3, [sp, #20]
 80078ee:	2301      	movs	r3, #1
 80078f0:	4913      	ldr	r1, [pc, #76]	; (8007940 <z_cstart+0xd4>)
 80078f2:	9400      	str	r4, [sp, #0]
 80078f4:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80078f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078fc:	463b      	mov	r3, r7
 80078fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007902:	4628      	mov	r0, r5
 8007904:	f000 f81e 	bl	8007944 <z_setup_new_thread>
 8007908:	7b6a      	ldrb	r2, [r5, #13]
 800790a:	4606      	mov	r6, r0
 800790c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 8007910:	4628      	mov	r0, r5
 8007912:	736a      	strb	r2, [r5, #13]
 8007914:	f000 fe9c 	bl	8008650 <z_ready_thread>
	z_init_cpu(0);
 8007918:	4620      	mov	r0, r4
 800791a:	f7ff ff6f 	bl	80077fc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800791e:	463a      	mov	r2, r7
 8007920:	4631      	mov	r1, r6
 8007922:	4628      	mov	r0, r5
 8007924:	f7fd fa64 	bl	8004df0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8007928:	20002200 	.word	0x20002200
 800792c:	e000ed00 	.word	0xe000ed00
 8007930:	20000c9c 	.word	0x20000c9c
 8007934:	080077b1 	.word	0x080077b1
 8007938:	20000978 	.word	0x20000978
 800793c:	08013be1 	.word	0x08013be1
 8007940:	20002380 	.word	0x20002380

08007944 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8007944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007946:	b085      	sub	sp, #20
 8007948:	4604      	mov	r4, r0
 800794a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
 800794c:	2d0f      	cmp	r5, #15
 800794e:	d12e      	bne.n	80079ae <z_setup_new_thread+0x6a>
 8007950:	4822      	ldr	r0, [pc, #136]	; (80079dc <z_setup_new_thread+0x98>)
 8007952:	4283      	cmp	r3, r0
 8007954:	d12f      	bne.n	80079b6 <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8007956:	f104 0058 	add.w	r0, r4, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800795a:	3207      	adds	r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 800795c:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
 8007960:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
 8007962:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007964:	7320      	strb	r0, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8007966:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800796a:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
 800796e:	e9c4 2519 	strd	r2, r5, [r4, #100]	; 0x64
	thread_base->pended_on = NULL;
 8007972:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007974:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8007976:	60a6      	str	r6, [r4, #8]
	thread_base->thread_state = (uint8_t)initial_state;
 8007978:	2004      	movs	r0, #4
 800797a:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 800797c:	e9c4 6606 	strd	r6, r6, [r4, #24]

	thread_base->sched_locked = 0U;
 8007980:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
 8007982:	66e6      	str	r6, [r4, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8007984:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007988:	9202      	str	r2, [sp, #8]
 800798a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800798c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 800798e:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007992:	9200      	str	r2, [sp, #0]
 8007994:	4620      	mov	r0, r4
 8007996:	463a      	mov	r2, r7
 8007998:	f7fd f9f8 	bl	8004d8c <arch_new_thread>
	if (!_current) {
 800799c:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
 800799e:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	b103      	cbz	r3, 80079a6 <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 80079a6:	6723      	str	r3, [r4, #112]	; 0x70
}
 80079a8:	4638      	mov	r0, r7
 80079aa:	b005      	add	sp, #20
 80079ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
 80079ae:	f105 0010 	add.w	r0, r5, #16
 80079b2:	281e      	cmp	r0, #30
 80079b4:	d9cf      	bls.n	8007956 <z_setup_new_thread+0x12>
 80079b6:	4a0b      	ldr	r2, [pc, #44]	; (80079e4 <z_setup_new_thread+0xa0>)
 80079b8:	490b      	ldr	r1, [pc, #44]	; (80079e8 <z_setup_new_thread+0xa4>)
 80079ba:	480c      	ldr	r0, [pc, #48]	; (80079ec <z_setup_new_thread+0xa8>)
 80079bc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80079c0:	f004 f9db 	bl	800bd7a <assert_print>
 80079c4:	480a      	ldr	r0, [pc, #40]	; (80079f0 <z_setup_new_thread+0xac>)
 80079c6:	4629      	mov	r1, r5
 80079c8:	f06f 030f 	mvn.w	r3, #15
 80079cc:	220e      	movs	r2, #14
 80079ce:	f004 f9d4 	bl	800bd7a <assert_print>
 80079d2:	4804      	ldr	r0, [pc, #16]	; (80079e4 <z_setup_new_thread+0xa0>)
 80079d4:	f44f 7106 	mov.w	r1, #536	; 0x218
 80079d8:	f004 f9c8 	bl	800bd6c <assert_post_action>
 80079dc:	08007bb1 	.word	0x08007bb1
 80079e0:	20000c9c 	.word	0x20000c9c
 80079e4:	08013be9 	.word	0x08013be9
 80079e8:	08013c0c 	.word	0x08013c0c
 80079ec:	0800e198 	.word	0x0800e198
 80079f0:	08013c8c 	.word	0x08013c8c

080079f4 <z_impl_k_thread_create>:
{
 80079f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079f6:	b087      	sub	sp, #28
 80079f8:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
 80079fc:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079fe:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
 8007a02:	b175      	cbz	r5, 8007a22 <z_impl_k_thread_create+0x2e>
 8007a04:	4919      	ldr	r1, [pc, #100]	; (8007a6c <z_impl_k_thread_create+0x78>)
 8007a06:	4a1a      	ldr	r2, [pc, #104]	; (8007a70 <z_impl_k_thread_create+0x7c>)
 8007a08:	481a      	ldr	r0, [pc, #104]	; (8007a74 <z_impl_k_thread_create+0x80>)
 8007a0a:	f240 2387 	movw	r3, #647	; 0x287
 8007a0e:	f004 f9b4 	bl	800bd7a <assert_print>
 8007a12:	4819      	ldr	r0, [pc, #100]	; (8007a78 <z_impl_k_thread_create+0x84>)
 8007a14:	f004 f9b1 	bl	800bd7a <assert_print>
 8007a18:	4815      	ldr	r0, [pc, #84]	; (8007a70 <z_impl_k_thread_create+0x7c>)
 8007a1a:	f240 2187 	movw	r1, #647	; 0x287
 8007a1e:	f004 f9a5 	bl	800bd6c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8007a22:	9505      	str	r5, [sp, #20]
 8007a24:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007a26:	9504      	str	r5, [sp, #16]
 8007a28:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a2a:	9503      	str	r5, [sp, #12]
 8007a2c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007a2e:	9502      	str	r5, [sp, #8]
 8007a30:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007a32:	9501      	str	r5, [sp, #4]
 8007a34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a36:	9500      	str	r5, [sp, #0]
 8007a38:	f7ff ff84 	bl	8007944 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8007a3c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007a40:	bf08      	it	eq
 8007a42:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 8007a46:	d005      	beq.n	8007a54 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007a48:	ea56 0307 	orrs.w	r3, r6, r7
 8007a4c:	d105      	bne.n	8007a5a <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f000 fecc 	bl	80087ec <z_sched_start>
}
 8007a54:	4620      	mov	r0, r4
 8007a56:	b007      	add	sp, #28
 8007a58:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8007a5a:	4908      	ldr	r1, [pc, #32]	; (8007a7c <z_impl_k_thread_create+0x88>)
 8007a5c:	463a      	mov	r2, r7
 8007a5e:	4633      	mov	r3, r6
 8007a60:	f104 0018 	add.w	r0, r4, #24
 8007a64:	f001 feee 	bl	8009844 <z_add_timeout>
 8007a68:	e7f4      	b.n	8007a54 <z_impl_k_thread_create+0x60>
 8007a6a:	bf00      	nop
 8007a6c:	08013cbd 	.word	0x08013cbd
 8007a70:	08013be9 	.word	0x08013be9
 8007a74:	0800e198 	.word	0x0800e198
 8007a78:	08013ccf 	.word	0x08013ccf
 8007a7c:	08009021 	.word	0x08009021

08007a80 <z_init_static_threads>:
{
 8007a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a82:	4c31      	ldr	r4, [pc, #196]	; (8007b48 <z_init_static_threads+0xc8>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8007a84:	4d31      	ldr	r5, [pc, #196]	; (8007b4c <z_init_static_threads+0xcc>)
{
 8007a86:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 8007a88:	42ac      	cmp	r4, r5
 8007a8a:	4626      	mov	r6, r4
 8007a8c:	d92a      	bls.n	8007ae4 <z_init_static_threads+0x64>
 8007a8e:	4930      	ldr	r1, [pc, #192]	; (8007b50 <z_init_static_threads+0xd0>)
 8007a90:	4a30      	ldr	r2, [pc, #192]	; (8007b54 <z_init_static_threads+0xd4>)
 8007a92:	4831      	ldr	r0, [pc, #196]	; (8007b58 <z_init_static_threads+0xd8>)
 8007a94:	f240 23ee 	movw	r3, #750	; 0x2ee
 8007a98:	f004 f96f 	bl	800bd7a <assert_print>
 8007a9c:	482f      	ldr	r0, [pc, #188]	; (8007b5c <z_init_static_threads+0xdc>)
 8007a9e:	f004 f96c 	bl	800bd7a <assert_print>
 8007aa2:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
 8007aa6:	482b      	ldr	r0, [pc, #172]	; (8007b54 <z_init_static_threads+0xd4>)
 8007aa8:	f004 f960 	bl	800bd6c <assert_post_action>
		z_setup_new_thread(
 8007aac:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007ab0:	9305      	str	r3, [sp, #20]
 8007ab2:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8007ab6:	9304      	str	r3, [sp, #16]
 8007ab8:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8007abc:	9303      	str	r3, [sp, #12]
 8007abe:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8007ac2:	9302      	str	r3, [sp, #8]
 8007ac4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8007ad4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8007ad8:	f7ff ff34 	bl	8007944 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8007adc:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8007ae0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8007ae2:	e7d1      	b.n	8007a88 <z_init_static_threads+0x8>
 8007ae4:	42ae      	cmp	r6, r5
 8007ae6:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8007aea:	d3df      	bcc.n	8007aac <z_init_static_threads+0x2c>
	k_sched_lock();
 8007aec:	f000 fed0 	bl	8008890 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8007af0:	4c15      	ldr	r4, [pc, #84]	; (8007b48 <z_init_static_threads+0xc8>)
 8007af2:	4f1b      	ldr	r7, [pc, #108]	; (8007b60 <z_init_static_threads+0xe0>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8007af4:	260a      	movs	r6, #10
 8007af6:	42ac      	cmp	r4, r5
 8007af8:	d920      	bls.n	8007b3c <z_init_static_threads+0xbc>
 8007afa:	4915      	ldr	r1, [pc, #84]	; (8007b50 <z_init_static_threads+0xd0>)
 8007afc:	4a15      	ldr	r2, [pc, #84]	; (8007b54 <z_init_static_threads+0xd4>)
 8007afe:	4816      	ldr	r0, [pc, #88]	; (8007b58 <z_init_static_threads+0xd8>)
 8007b00:	f240 330d 	movw	r3, #781	; 0x30d
 8007b04:	f004 f939 	bl	800bd7a <assert_print>
 8007b08:	4814      	ldr	r0, [pc, #80]	; (8007b5c <z_init_static_threads+0xdc>)
 8007b0a:	f004 f936 	bl	800bd7a <assert_print>
 8007b0e:	f240 310d 	movw	r1, #781	; 0x30d
 8007b12:	e7c8      	b.n	8007aa6 <z_init_static_threads+0x26>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8007b14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007b16:	1c53      	adds	r3, r2, #1
 8007b18:	d009      	beq.n	8007b2e <z_init_static_threads+0xae>
					    K_MSEC(thread_data->init_delay));
 8007b1a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007b1e:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007b22:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8007b26:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007b28:	d103      	bne.n	8007b32 <z_init_static_threads+0xb2>
	z_sched_start(thread);
 8007b2a:	f000 fe5f 	bl	80087ec <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8007b2e:	3430      	adds	r4, #48	; 0x30
 8007b30:	e7e1      	b.n	8007af6 <z_init_static_threads+0x76>
 8007b32:	4639      	mov	r1, r7
 8007b34:	3018      	adds	r0, #24
 8007b36:	f001 fe85 	bl	8009844 <z_add_timeout>
 8007b3a:	e7f8      	b.n	8007b2e <z_init_static_threads+0xae>
 8007b3c:	d3ea      	bcc.n	8007b14 <z_init_static_threads+0x94>
}
 8007b3e:	b007      	add	sp, #28
 8007b40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8007b44:	f000 bf10 	b.w	8008968 <k_sched_unlock>
 8007b48:	20000328 	.word	0x20000328
 8007b4c:	20000358 	.word	0x20000358
 8007b50:	08013cf4 	.word	0x08013cf4
 8007b54:	08013be9 	.word	0x08013be9
 8007b58:	0800e198 	.word	0x0800e198
 8007b5c:	08013d21 	.word	0x08013d21
 8007b60:	08009021 	.word	0x08009021

08007b64 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
 8007b64:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
 8007b66:	b138      	cbz	r0, 8007b78 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
 8007b68:	4b04      	ldr	r3, [pc, #16]	; (8007b7c <z_spin_lock_valid+0x18>)
 8007b6a:	7d1b      	ldrb	r3, [r3, #20]
 8007b6c:	f000 0003 	and.w	r0, r0, #3
 8007b70:	1ac0      	subs	r0, r0, r3
 8007b72:	bf18      	it	ne
 8007b74:	2001      	movne	r0, #1
 8007b76:	4770      	bx	lr
			return false;
		}
	}
	return true;
 8007b78:	2001      	movs	r0, #1
}
 8007b7a:	4770      	bx	lr
 8007b7c:	20000c9c 	.word	0x20000c9c

08007b80 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
 8007b80:	4a06      	ldr	r2, [pc, #24]	; (8007b9c <z_spin_unlock_valid+0x1c>)
 8007b82:	7d11      	ldrb	r1, [r2, #20]
 8007b84:	6892      	ldr	r2, [r2, #8]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	6801      	ldr	r1, [r0, #0]
{
 8007b8a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
 8007b8c:	4291      	cmp	r1, r2
 8007b8e:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
 8007b92:	bf04      	itt	eq
 8007b94:	6018      	streq	r0, [r3, #0]
	return true;
 8007b96:	2001      	moveq	r0, #1
}
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	20000c9c 	.word	0x20000c9c

08007ba0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
 8007ba0:	4b02      	ldr	r3, [pc, #8]	; (8007bac <z_spin_lock_set_owner+0xc>)
 8007ba2:	7d1a      	ldrb	r2, [r3, #20]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	6003      	str	r3, [r0, #0]
}
 8007baa:	4770      	bx	lr
 8007bac:	20000c9c 	.word	0x20000c9c

08007bb0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8007bb0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
 8007bb2:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <idle+0x38>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da09      	bge.n	8007bd2 <idle+0x22>
 8007bbe:	490b      	ldr	r1, [pc, #44]	; (8007bec <idle+0x3c>)
 8007bc0:	480b      	ldr	r0, [pc, #44]	; (8007bf0 <idle+0x40>)
 8007bc2:	4a0c      	ldr	r2, [pc, #48]	; (8007bf4 <idle+0x44>)
 8007bc4:	2327      	movs	r3, #39	; 0x27
 8007bc6:	f004 f8d8 	bl	800bd7a <assert_print>
 8007bca:	480a      	ldr	r0, [pc, #40]	; (8007bf4 <idle+0x44>)
 8007bcc:	2127      	movs	r1, #39	; 0x27
 8007bce:	f004 f8cd 	bl	800bd6c <assert_post_action>
	__asm__ volatile(
 8007bd2:	f04f 0210 	mov.w	r2, #16
 8007bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8007bda:	f382 8812 	msr	BASEPRI_MAX, r2
 8007bde:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8007be2:	f7fc ffa1 	bl	8004b28 <arch_cpu_idle>
 8007be6:	e7f4      	b.n	8007bd2 <idle+0x22>
 8007be8:	20000c9c 	.word	0x20000c9c
 8007bec:	08013d61 	.word	0x08013d61
 8007bf0:	0800e198 	.word	0x0800e198
 8007bf4:	08013d40 	.word	0x08013d40

08007bf8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8007bf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	4617      	mov	r7, r2
 8007c00:	461e      	mov	r6, r3
 8007c02:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
 8007c06:	b165      	cbz	r5, 8007c22 <z_impl_k_mutex_lock+0x2a>
 8007c08:	4958      	ldr	r1, [pc, #352]	; (8007d6c <z_impl_k_mutex_lock+0x174>)
 8007c0a:	4a59      	ldr	r2, [pc, #356]	; (8007d70 <z_impl_k_mutex_lock+0x178>)
 8007c0c:	4859      	ldr	r0, [pc, #356]	; (8007d74 <z_impl_k_mutex_lock+0x17c>)
 8007c0e:	2365      	movs	r3, #101	; 0x65
 8007c10:	f004 f8b3 	bl	800bd7a <assert_print>
 8007c14:	4858      	ldr	r0, [pc, #352]	; (8007d78 <z_impl_k_mutex_lock+0x180>)
 8007c16:	f004 f8b0 	bl	800bd7a <assert_print>
 8007c1a:	4855      	ldr	r0, [pc, #340]	; (8007d70 <z_impl_k_mutex_lock+0x178>)
 8007c1c:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8007c1e:	f004 f8a5 	bl	800bd6c <assert_post_action>
 8007c22:	f04f 0310 	mov.w	r3, #16
 8007c26:	f3ef 8811 	mrs	r8, BASEPRI
 8007c2a:	f383 8812 	msr	BASEPRI_MAX, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	4852      	ldr	r0, [pc, #328]	; (8007d7c <z_impl_k_mutex_lock+0x184>)
 8007c34:	f7ff ff96 	bl	8007b64 <z_spin_lock_valid>
 8007c38:	b960      	cbnz	r0, 8007c54 <z_impl_k_mutex_lock+0x5c>
 8007c3a:	4a51      	ldr	r2, [pc, #324]	; (8007d80 <z_impl_k_mutex_lock+0x188>)
 8007c3c:	4951      	ldr	r1, [pc, #324]	; (8007d84 <z_impl_k_mutex_lock+0x18c>)
 8007c3e:	484d      	ldr	r0, [pc, #308]	; (8007d74 <z_impl_k_mutex_lock+0x17c>)
 8007c40:	238e      	movs	r3, #142	; 0x8e
 8007c42:	f004 f89a 	bl	800bd7a <assert_print>
 8007c46:	494d      	ldr	r1, [pc, #308]	; (8007d7c <z_impl_k_mutex_lock+0x184>)
 8007c48:	484f      	ldr	r0, [pc, #316]	; (8007d88 <z_impl_k_mutex_lock+0x190>)
 8007c4a:	f004 f896 	bl	800bd7a <assert_print>
 8007c4e:	218e      	movs	r1, #142	; 0x8e
 8007c50:	484b      	ldr	r0, [pc, #300]	; (8007d80 <z_impl_k_mutex_lock+0x188>)
 8007c52:	e7e4      	b.n	8007c1e <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
 8007c54:	4849      	ldr	r0, [pc, #292]	; (8007d7c <z_impl_k_mutex_lock+0x184>)
 8007c56:	f7ff ffa3 	bl	8007ba0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8007c5a:	68e3      	ldr	r3, [r4, #12]
 8007c5c:	4a4b      	ldr	r2, [pc, #300]	; (8007d8c <z_impl_k_mutex_lock+0x194>)
 8007c5e:	b19b      	cbz	r3, 8007c88 <z_impl_k_mutex_lock+0x90>
 8007c60:	68a0      	ldr	r0, [r4, #8]
 8007c62:	6891      	ldr	r1, [r2, #8]
 8007c64:	4288      	cmp	r0, r1
 8007c66:	d027      	beq.n	8007cb8 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8007c68:	ea57 0306 	orrs.w	r3, r7, r6
 8007c6c:	d12c      	bne.n	8007cc8 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007c6e:	4843      	ldr	r0, [pc, #268]	; (8007d7c <z_impl_k_mutex_lock+0x184>)
 8007c70:	f7ff ff86 	bl	8007b80 <z_spin_unlock_valid>
 8007c74:	b1a0      	cbz	r0, 8007ca0 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
 8007c76:	f388 8811 	msr	BASEPRI, r8
 8007c7a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 8007c7e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 8007c82:	b002      	add	sp, #8
 8007c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 8007c88:	6891      	ldr	r1, [r2, #8]
 8007c8a:	f991 100e 	ldrsb.w	r1, [r1, #14]
 8007c8e:	483b      	ldr	r0, [pc, #236]	; (8007d7c <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8007c90:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 8007c92:	3301      	adds	r3, #1
 8007c94:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 8007c96:	6893      	ldr	r3, [r2, #8]
 8007c98:	60a3      	str	r3, [r4, #8]
 8007c9a:	f7ff ff71 	bl	8007b80 <z_spin_unlock_valid>
 8007c9e:	b968      	cbnz	r0, 8007cbc <z_impl_k_mutex_lock+0xc4>
 8007ca0:	4a37      	ldr	r2, [pc, #220]	; (8007d80 <z_impl_k_mutex_lock+0x188>)
 8007ca2:	493b      	ldr	r1, [pc, #236]	; (8007d90 <z_impl_k_mutex_lock+0x198>)
 8007ca4:	4833      	ldr	r0, [pc, #204]	; (8007d74 <z_impl_k_mutex_lock+0x17c>)
 8007ca6:	23b9      	movs	r3, #185	; 0xb9
 8007ca8:	f004 f867 	bl	800bd7a <assert_print>
 8007cac:	4933      	ldr	r1, [pc, #204]	; (8007d7c <z_impl_k_mutex_lock+0x184>)
 8007cae:	4839      	ldr	r0, [pc, #228]	; (8007d94 <z_impl_k_mutex_lock+0x19c>)
 8007cb0:	f004 f863 	bl	800bd7a <assert_print>
 8007cb4:	21b9      	movs	r1, #185	; 0xb9
 8007cb6:	e7cb      	b.n	8007c50 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
 8007cb8:	6921      	ldr	r1, [r4, #16]
 8007cba:	e7e8      	b.n	8007c8e <z_impl_k_mutex_lock+0x96>
 8007cbc:	f388 8811 	msr	BASEPRI, r8
 8007cc0:	f3bf 8f6f 	isb	sy
		return 0;
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	e7dc      	b.n	8007c82 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8007cc8:	f991 100e 	ldrsb.w	r1, [r1, #14]
 8007ccc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	bfa8      	it	ge
 8007cd4:	4619      	movge	r1, r3
 8007cd6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 8007cda:	4291      	cmp	r1, r2
 8007cdc:	bfb8      	it	lt
 8007cde:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8007ce0:	428b      	cmp	r3, r1
 8007ce2:	dd02      	ble.n	8007cea <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
 8007ce4:	f004 ff22 	bl	800cb2c <adjust_owner_prio.isra.0>
 8007ce8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8007cea:	e9cd 7600 	strd	r7, r6, [sp]
 8007cee:	4823      	ldr	r0, [pc, #140]	; (8007d7c <z_impl_k_mutex_lock+0x184>)
 8007cf0:	4622      	mov	r2, r4
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	f001 f84a 	bl	8008d8c <z_pend_curr>
	if (got_mutex == 0) {
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d0e3      	beq.n	8007cc4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
 8007cfc:	f04f 0310 	mov.w	r3, #16
 8007d00:	f3ef 8611 	mrs	r6, BASEPRI
 8007d04:	f383 8812 	msr	BASEPRI_MAX, r3
 8007d08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8007d0c:	481b      	ldr	r0, [pc, #108]	; (8007d7c <z_impl_k_mutex_lock+0x184>)
 8007d0e:	f7ff ff29 	bl	8007b64 <z_spin_lock_valid>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	d091      	beq.n	8007c3a <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
 8007d16:	4819      	ldr	r0, [pc, #100]	; (8007d7c <z_impl_k_mutex_lock+0x184>)
 8007d18:	f7ff ff42 	bl	8007ba0 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
 8007d1c:	68a0      	ldr	r0, [r4, #8]
 8007d1e:	b1c0      	cbz	r0, 8007d52 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8007d20:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8007d22:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007d24:	429c      	cmp	r4, r3
 8007d26:	d00a      	beq.n	8007d3e <z_impl_k_mutex_lock+0x146>
 8007d28:	b14b      	cbz	r3, 8007d3e <z_impl_k_mutex_lock+0x146>
 8007d2a:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8007d2e:	4299      	cmp	r1, r3
 8007d30:	bfa8      	it	ge
 8007d32:	4619      	movge	r1, r3
 8007d34:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8007d38:	4299      	cmp	r1, r3
 8007d3a:	bfb8      	it	lt
 8007d3c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
 8007d3e:	f004 fef5 	bl	800cb2c <adjust_owner_prio.isra.0>
 8007d42:	b130      	cbz	r0, 8007d52 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
 8007d44:	480d      	ldr	r0, [pc, #52]	; (8007d7c <z_impl_k_mutex_lock+0x184>)
 8007d46:	4631      	mov	r1, r6
 8007d48:	f000 fd0e 	bl	8008768 <z_reschedule>
	return -EAGAIN;
 8007d4c:	f06f 000a 	mvn.w	r0, #10
 8007d50:	e797      	b.n	8007c82 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
 8007d52:	2d00      	cmp	r5, #0
 8007d54:	d1f6      	bne.n	8007d44 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007d56:	4809      	ldr	r0, [pc, #36]	; (8007d7c <z_impl_k_mutex_lock+0x184>)
 8007d58:	f7ff ff12 	bl	8007b80 <z_spin_unlock_valid>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d09f      	beq.n	8007ca0 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
 8007d60:	f386 8811 	msr	BASEPRI, r6
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	e7f0      	b.n	8007d4c <z_impl_k_mutex_lock+0x154>
 8007d6a:	bf00      	nop
 8007d6c:	08013cbd 	.word	0x08013cbd
 8007d70:	08013d89 	.word	0x08013d89
 8007d74:	0800e198 	.word	0x0800e198
 8007d78:	08013dab 	.word	0x08013dab
 8007d7c:	20000cc0 	.word	0x20000cc0
 8007d80:	08012877 	.word	0x08012877
 8007d84:	080128a4 	.word	0x080128a4
 8007d88:	080128b9 	.word	0x080128b9
 8007d8c:	20000c9c 	.word	0x20000c9c
 8007d90:	080128d1 	.word	0x080128d1
 8007d94:	080128e8 	.word	0x080128e8

08007d98 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
 8007da0:	b166      	cbz	r6, 8007dbc <z_impl_k_mutex_unlock+0x24>
 8007da2:	4938      	ldr	r1, [pc, #224]	; (8007e84 <z_impl_k_mutex_unlock+0xec>)
 8007da4:	4a38      	ldr	r2, [pc, #224]	; (8007e88 <z_impl_k_mutex_unlock+0xf0>)
 8007da6:	4839      	ldr	r0, [pc, #228]	; (8007e8c <z_impl_k_mutex_unlock+0xf4>)
 8007da8:	23cd      	movs	r3, #205	; 0xcd
 8007daa:	f003 ffe6 	bl	800bd7a <assert_print>
 8007dae:	4838      	ldr	r0, [pc, #224]	; (8007e90 <z_impl_k_mutex_unlock+0xf8>)
 8007db0:	f003 ffe3 	bl	800bd7a <assert_print>
 8007db4:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
 8007db6:	4834      	ldr	r0, [pc, #208]	; (8007e88 <z_impl_k_mutex_unlock+0xf0>)
 8007db8:	f003 ffd8 	bl	800bd6c <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
 8007dbc:	6883      	ldr	r3, [r0, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d059      	beq.n	8007e76 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
 8007dc2:	4a34      	ldr	r2, [pc, #208]	; (8007e94 <z_impl_k_mutex_unlock+0xfc>)
 8007dc4:	6892      	ldr	r2, [r2, #8]
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d158      	bne.n	8007e7c <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
 8007dca:	68c3      	ldr	r3, [r0, #12]
 8007dcc:	b93b      	cbnz	r3, 8007dde <z_impl_k_mutex_unlock+0x46>
 8007dce:	4932      	ldr	r1, [pc, #200]	; (8007e98 <z_impl_k_mutex_unlock+0x100>)
 8007dd0:	4a2d      	ldr	r2, [pc, #180]	; (8007e88 <z_impl_k_mutex_unlock+0xf0>)
 8007dd2:	482e      	ldr	r0, [pc, #184]	; (8007e8c <z_impl_k_mutex_unlock+0xf4>)
 8007dd4:	23e5      	movs	r3, #229	; 0xe5
 8007dd6:	f003 ffd0 	bl	800bd7a <assert_print>
 8007dda:	21e5      	movs	r1, #229	; 0xe5
 8007ddc:	e7eb      	b.n	8007db6 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d003      	beq.n	8007dea <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
 8007de2:	3b01      	subs	r3, #1
 8007de4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 8007de6:	2000      	movs	r0, #0
}
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
 8007dea:	f04f 0310 	mov.w	r3, #16
 8007dee:	f3ef 8511 	mrs	r5, BASEPRI
 8007df2:	f383 8812 	msr	BASEPRI_MAX, r3
 8007df6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8007dfa:	4828      	ldr	r0, [pc, #160]	; (8007e9c <z_impl_k_mutex_unlock+0x104>)
 8007dfc:	f7ff feb2 	bl	8007b64 <z_spin_lock_valid>
 8007e00:	b960      	cbnz	r0, 8007e1c <z_impl_k_mutex_unlock+0x84>
 8007e02:	4a27      	ldr	r2, [pc, #156]	; (8007ea0 <z_impl_k_mutex_unlock+0x108>)
 8007e04:	4927      	ldr	r1, [pc, #156]	; (8007ea4 <z_impl_k_mutex_unlock+0x10c>)
 8007e06:	4821      	ldr	r0, [pc, #132]	; (8007e8c <z_impl_k_mutex_unlock+0xf4>)
 8007e08:	238e      	movs	r3, #142	; 0x8e
 8007e0a:	f003 ffb6 	bl	800bd7a <assert_print>
 8007e0e:	4923      	ldr	r1, [pc, #140]	; (8007e9c <z_impl_k_mutex_unlock+0x104>)
 8007e10:	4825      	ldr	r0, [pc, #148]	; (8007ea8 <z_impl_k_mutex_unlock+0x110>)
 8007e12:	f003 ffb2 	bl	800bd7a <assert_print>
 8007e16:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007e18:	4821      	ldr	r0, [pc, #132]	; (8007ea0 <z_impl_k_mutex_unlock+0x108>)
 8007e1a:	e7cd      	b.n	8007db8 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
 8007e1c:	481f      	ldr	r0, [pc, #124]	; (8007e9c <z_impl_k_mutex_unlock+0x104>)
 8007e1e:	f7ff febf 	bl	8007ba0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8007e22:	6921      	ldr	r1, [r4, #16]
 8007e24:	68a0      	ldr	r0, [r4, #8]
 8007e26:	f004 fe81 	bl	800cb2c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f001 f99c 	bl	8009168 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8007e30:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8007e32:	b150      	cbz	r0, 8007e4a <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
 8007e34:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8007e38:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8007e3a:	6786      	str	r6, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
 8007e3c:	f000 fc08 	bl	8008650 <z_ready_thread>
		z_reschedule(&lock, key);
 8007e40:	4816      	ldr	r0, [pc, #88]	; (8007e9c <z_impl_k_mutex_unlock+0x104>)
 8007e42:	4629      	mov	r1, r5
 8007e44:	f000 fc90 	bl	8008768 <z_reschedule>
 8007e48:	e7cd      	b.n	8007de6 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
 8007e4a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007e4c:	4813      	ldr	r0, [pc, #76]	; (8007e9c <z_impl_k_mutex_unlock+0x104>)
 8007e4e:	f7ff fe97 	bl	8007b80 <z_spin_unlock_valid>
 8007e52:	b958      	cbnz	r0, 8007e6c <z_impl_k_mutex_unlock+0xd4>
 8007e54:	4a12      	ldr	r2, [pc, #72]	; (8007ea0 <z_impl_k_mutex_unlock+0x108>)
 8007e56:	4915      	ldr	r1, [pc, #84]	; (8007eac <z_impl_k_mutex_unlock+0x114>)
 8007e58:	480c      	ldr	r0, [pc, #48]	; (8007e8c <z_impl_k_mutex_unlock+0xf4>)
 8007e5a:	23b9      	movs	r3, #185	; 0xb9
 8007e5c:	f003 ff8d 	bl	800bd7a <assert_print>
 8007e60:	490e      	ldr	r1, [pc, #56]	; (8007e9c <z_impl_k_mutex_unlock+0x104>)
 8007e62:	4813      	ldr	r0, [pc, #76]	; (8007eb0 <z_impl_k_mutex_unlock+0x118>)
 8007e64:	f003 ff89 	bl	800bd7a <assert_print>
 8007e68:	21b9      	movs	r1, #185	; 0xb9
 8007e6a:	e7d5      	b.n	8007e18 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
 8007e6c:	f385 8811 	msr	BASEPRI, r5
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	e7b7      	b.n	8007de6 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
 8007e76:	f06f 0015 	mvn.w	r0, #21
 8007e7a:	e7b5      	b.n	8007de8 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e80:	e7b2      	b.n	8007de8 <z_impl_k_mutex_unlock+0x50>
 8007e82:	bf00      	nop
 8007e84:	08013cbd 	.word	0x08013cbd
 8007e88:	08013d89 	.word	0x08013d89
 8007e8c:	0800e198 	.word	0x0800e198
 8007e90:	08013dab 	.word	0x08013dab
 8007e94:	20000c9c 	.word	0x20000c9c
 8007e98:	08013dd0 	.word	0x08013dd0
 8007e9c:	20000cc0 	.word	0x20000cc0
 8007ea0:	08012877 	.word	0x08012877
 8007ea4:	080128a4 	.word	0x080128a4
 8007ea8:	080128b9 	.word	0x080128b9
 8007eac:	080128d1 	.word	0x080128d1
 8007eb0:	080128e8 	.word	0x080128e8

08007eb4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4604      	mov	r4, r0
	__asm__ volatile(
 8007eb8:	f04f 0310 	mov.w	r3, #16
 8007ebc:	f3ef 8511 	mrs	r5, BASEPRI
 8007ec0:	f383 8812 	msr	BASEPRI_MAX, r3
 8007ec4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8007ec8:	4814      	ldr	r0, [pc, #80]	; (8007f1c <z_impl_k_sem_give+0x68>)
 8007eca:	f7ff fe4b 	bl	8007b64 <z_spin_lock_valid>
 8007ece:	b968      	cbnz	r0, 8007eec <z_impl_k_sem_give+0x38>
 8007ed0:	4a13      	ldr	r2, [pc, #76]	; (8007f20 <z_impl_k_sem_give+0x6c>)
 8007ed2:	4914      	ldr	r1, [pc, #80]	; (8007f24 <z_impl_k_sem_give+0x70>)
 8007ed4:	4814      	ldr	r0, [pc, #80]	; (8007f28 <z_impl_k_sem_give+0x74>)
 8007ed6:	238e      	movs	r3, #142	; 0x8e
 8007ed8:	f003 ff4f 	bl	800bd7a <assert_print>
 8007edc:	490f      	ldr	r1, [pc, #60]	; (8007f1c <z_impl_k_sem_give+0x68>)
 8007ede:	4813      	ldr	r0, [pc, #76]	; (8007f2c <z_impl_k_sem_give+0x78>)
 8007ee0:	f003 ff4b 	bl	800bd7a <assert_print>
 8007ee4:	480e      	ldr	r0, [pc, #56]	; (8007f20 <z_impl_k_sem_give+0x6c>)
 8007ee6:	218e      	movs	r1, #142	; 0x8e
 8007ee8:	f003 ff40 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8007eec:	480b      	ldr	r0, [pc, #44]	; (8007f1c <z_impl_k_sem_give+0x68>)
 8007eee:	f7ff fe57 	bl	8007ba0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f001 f938 	bl	8009168 <z_unpend_first_thread>

	if (thread != NULL) {
 8007ef8:	b148      	cbz	r0, 8007f0e <z_impl_k_sem_give+0x5a>
 8007efa:	2200      	movs	r2, #0
 8007efc:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8007efe:	f000 fba7 	bl	8008650 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8007f02:	4629      	mov	r1, r5
 8007f04:	4805      	ldr	r0, [pc, #20]	; (8007f1c <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8007f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8007f0a:	f000 bc2d 	b.w	8008768 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8007f0e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	bf18      	it	ne
 8007f16:	3301      	addne	r3, #1
 8007f18:	60a3      	str	r3, [r4, #8]
}
 8007f1a:	e7f2      	b.n	8007f02 <z_impl_k_sem_give+0x4e>
 8007f1c:	20000cc4 	.word	0x20000cc4
 8007f20:	08012877 	.word	0x08012877
 8007f24:	080128a4 	.word	0x080128a4
 8007f28:	0800e198 	.word	0x0800e198
 8007f2c:	080128b9 	.word	0x080128b9

08007f30 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8007f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f32:	4604      	mov	r4, r0
 8007f34:	4616      	mov	r6, r2
 8007f36:	461d      	mov	r5, r3
 8007f38:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
 8007f3c:	b17b      	cbz	r3, 8007f5e <z_impl_k_sem_take+0x2e>
 8007f3e:	ea52 0305 	orrs.w	r3, r2, r5
 8007f42:	d00c      	beq.n	8007f5e <z_impl_k_sem_take+0x2e>
 8007f44:	492d      	ldr	r1, [pc, #180]	; (8007ffc <z_impl_k_sem_take+0xcc>)
 8007f46:	4a2e      	ldr	r2, [pc, #184]	; (8008000 <z_impl_k_sem_take+0xd0>)
 8007f48:	482e      	ldr	r0, [pc, #184]	; (8008004 <z_impl_k_sem_take+0xd4>)
 8007f4a:	2379      	movs	r3, #121	; 0x79
 8007f4c:	f003 ff15 	bl	800bd7a <assert_print>
 8007f50:	482d      	ldr	r0, [pc, #180]	; (8008008 <z_impl_k_sem_take+0xd8>)
 8007f52:	f003 ff12 	bl	800bd7a <assert_print>
 8007f56:	482a      	ldr	r0, [pc, #168]	; (8008000 <z_impl_k_sem_take+0xd0>)
 8007f58:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8007f5a:	f003 ff07 	bl	800bd6c <assert_post_action>
 8007f5e:	f04f 0310 	mov.w	r3, #16
 8007f62:	f3ef 8711 	mrs	r7, BASEPRI
 8007f66:	f383 8812 	msr	BASEPRI_MAX, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	4827      	ldr	r0, [pc, #156]	; (800800c <z_impl_k_sem_take+0xdc>)
 8007f70:	f7ff fdf8 	bl	8007b64 <z_spin_lock_valid>
 8007f74:	b960      	cbnz	r0, 8007f90 <z_impl_k_sem_take+0x60>
 8007f76:	4a26      	ldr	r2, [pc, #152]	; (8008010 <z_impl_k_sem_take+0xe0>)
 8007f78:	4926      	ldr	r1, [pc, #152]	; (8008014 <z_impl_k_sem_take+0xe4>)
 8007f7a:	4822      	ldr	r0, [pc, #136]	; (8008004 <z_impl_k_sem_take+0xd4>)
 8007f7c:	238e      	movs	r3, #142	; 0x8e
 8007f7e:	f003 fefc 	bl	800bd7a <assert_print>
 8007f82:	4922      	ldr	r1, [pc, #136]	; (800800c <z_impl_k_sem_take+0xdc>)
 8007f84:	4824      	ldr	r0, [pc, #144]	; (8008018 <z_impl_k_sem_take+0xe8>)
 8007f86:	f003 fef8 	bl	800bd7a <assert_print>
 8007f8a:	218e      	movs	r1, #142	; 0x8e
 8007f8c:	4820      	ldr	r0, [pc, #128]	; (8008010 <z_impl_k_sem_take+0xe0>)
 8007f8e:	e7e4      	b.n	8007f5a <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
 8007f90:	481e      	ldr	r0, [pc, #120]	; (800800c <z_impl_k_sem_take+0xdc>)
 8007f92:	f7ff fe05 	bl	8007ba0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8007f96:	68a3      	ldr	r3, [r4, #8]
 8007f98:	b1c3      	cbz	r3, 8007fcc <z_impl_k_sem_take+0x9c>
		sem->count--;
 8007f9a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007f9c:	481b      	ldr	r0, [pc, #108]	; (800800c <z_impl_k_sem_take+0xdc>)
 8007f9e:	60a3      	str	r3, [r4, #8]
 8007fa0:	f7ff fdee 	bl	8007b80 <z_spin_unlock_valid>
 8007fa4:	b958      	cbnz	r0, 8007fbe <z_impl_k_sem_take+0x8e>
 8007fa6:	4a1a      	ldr	r2, [pc, #104]	; (8008010 <z_impl_k_sem_take+0xe0>)
 8007fa8:	491c      	ldr	r1, [pc, #112]	; (800801c <z_impl_k_sem_take+0xec>)
 8007faa:	4816      	ldr	r0, [pc, #88]	; (8008004 <z_impl_k_sem_take+0xd4>)
 8007fac:	23b9      	movs	r3, #185	; 0xb9
 8007fae:	f003 fee4 	bl	800bd7a <assert_print>
 8007fb2:	4916      	ldr	r1, [pc, #88]	; (800800c <z_impl_k_sem_take+0xdc>)
 8007fb4:	481a      	ldr	r0, [pc, #104]	; (8008020 <z_impl_k_sem_take+0xf0>)
 8007fb6:	f003 fee0 	bl	800bd7a <assert_print>
 8007fba:	21b9      	movs	r1, #185	; 0xb9
 8007fbc:	e7e6      	b.n	8007f8c <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
 8007fbe:	f387 8811 	msr	BASEPRI, r7
 8007fc2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8007fc6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8007fc8:	b003      	add	sp, #12
 8007fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8007fcc:	ea56 0305 	orrs.w	r3, r6, r5
 8007fd0:	d10b      	bne.n	8007fea <z_impl_k_sem_take+0xba>
 8007fd2:	480e      	ldr	r0, [pc, #56]	; (800800c <z_impl_k_sem_take+0xdc>)
 8007fd4:	f7ff fdd4 	bl	8007b80 <z_spin_unlock_valid>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d0e4      	beq.n	8007fa6 <z_impl_k_sem_take+0x76>
 8007fdc:	f387 8811 	msr	BASEPRI, r7
 8007fe0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8007fe4:	f06f 000f 	mvn.w	r0, #15
 8007fe8:	e7ee      	b.n	8007fc8 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8007fea:	e9cd 6500 	strd	r6, r5, [sp]
 8007fee:	4622      	mov	r2, r4
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	4806      	ldr	r0, [pc, #24]	; (800800c <z_impl_k_sem_take+0xdc>)
 8007ff4:	f000 feca 	bl	8008d8c <z_pend_curr>
	return ret;
 8007ff8:	e7e6      	b.n	8007fc8 <z_impl_k_sem_take+0x98>
 8007ffa:	bf00      	nop
 8007ffc:	08013e07 	.word	0x08013e07
 8008000:	08013de7 	.word	0x08013de7
 8008004:	0800e198 	.word	0x0800e198
 8008008:	08013e55 	.word	0x08013e55
 800800c:	20000cc4 	.word	0x20000cc4
 8008010:	08012877 	.word	0x08012877
 8008014:	080128a4 	.word	0x080128a4
 8008018:	080128b9 	.word	0x080128b9
 800801c:	080128d1 	.word	0x080128d1
 8008020:	080128e8 	.word	0x080128e8

08008024 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8008024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008028:	4e6e      	ldr	r6, [pc, #440]	; (80081e4 <work_queue_main+0x1c0>)
	return list->head;
 800802a:	4f6f      	ldr	r7, [pc, #444]	; (80081e8 <work_queue_main+0x1c4>)
 800802c:	b085      	sub	sp, #20
 800802e:	4604      	mov	r4, r0
	__asm__ volatile(
 8008030:	f04f 0310 	mov.w	r3, #16
 8008034:	f3ef 8811 	mrs	r8, BASEPRI
 8008038:	f383 8812 	msr	BASEPRI_MAX, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	4630      	mov	r0, r6
 8008042:	f7ff fd8f 	bl	8007b64 <z_spin_lock_valid>
 8008046:	b968      	cbnz	r0, 8008064 <work_queue_main+0x40>
 8008048:	4a68      	ldr	r2, [pc, #416]	; (80081ec <work_queue_main+0x1c8>)
 800804a:	4969      	ldr	r1, [pc, #420]	; (80081f0 <work_queue_main+0x1cc>)
 800804c:	4869      	ldr	r0, [pc, #420]	; (80081f4 <work_queue_main+0x1d0>)
 800804e:	238e      	movs	r3, #142	; 0x8e
 8008050:	f003 fe93 	bl	800bd7a <assert_print>
 8008054:	4963      	ldr	r1, [pc, #396]	; (80081e4 <work_queue_main+0x1c0>)
 8008056:	4868      	ldr	r0, [pc, #416]	; (80081f8 <work_queue_main+0x1d4>)
 8008058:	f003 fe8f 	bl	800bd7a <assert_print>
 800805c:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800805e:	4863      	ldr	r0, [pc, #396]	; (80081ec <work_queue_main+0x1c8>)
 8008060:	f003 fe84 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8008064:	4630      	mov	r0, r6
 8008066:	f7ff fd9b 	bl	8007ba0 <z_spin_lock_set_owner>
 800806a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 800806e:	b9ad      	cbnz	r5, 800809c <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
 8008070:	2102      	movs	r1, #2
 8008072:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8008076:	f004 fd74 	bl	800cb62 <flag_test_and_clear>
 800807a:	2800      	cmp	r0, #0
 800807c:	d135      	bne.n	80080ea <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800807e:	2300      	movs	r3, #0
 8008080:	9302      	str	r3, [sp, #8]
 8008082:	f04f 32ff 	mov.w	r2, #4294967295
 8008086:	f04f 33ff 	mov.w	r3, #4294967295
 800808a:	e9cd 2300 	strd	r2, r3, [sp]
 800808e:	4641      	mov	r1, r8
 8008090:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8008094:	4630      	mov	r0, r6
 8008096:	f001 fb5b 	bl	8009750 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
 800809a:	e7c9      	b.n	8008030 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800809c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
 80080a0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
 80080a2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80080a6:	4295      	cmp	r5, r2
	list->tail = node;
 80080a8:	bf08      	it	eq
 80080aa:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
 80080ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80080b2:	f043 0302 	orr.w	r3, r3, #2
 80080b6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
 80080ba:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
 80080bc:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
 80080c0:	f023 0304 	bic.w	r3, r3, #4
 80080c4:	f043 0301 	orr.w	r3, r3, #1
 80080c8:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80080ca:	4630      	mov	r0, r6
 80080cc:	f7ff fd58 	bl	8007b80 <z_spin_unlock_valid>
 80080d0:	b9a8      	cbnz	r0, 80080fe <work_queue_main+0xda>
 80080d2:	4a46      	ldr	r2, [pc, #280]	; (80081ec <work_queue_main+0x1c8>)
 80080d4:	4949      	ldr	r1, [pc, #292]	; (80081fc <work_queue_main+0x1d8>)
 80080d6:	4847      	ldr	r0, [pc, #284]	; (80081f4 <work_queue_main+0x1d0>)
 80080d8:	23b9      	movs	r3, #185	; 0xb9
 80080da:	f003 fe4e 	bl	800bd7a <assert_print>
 80080de:	4941      	ldr	r1, [pc, #260]	; (80081e4 <work_queue_main+0x1c0>)
 80080e0:	4847      	ldr	r0, [pc, #284]	; (8008200 <work_queue_main+0x1dc>)
 80080e2:	f003 fe4a 	bl	800bd7a <assert_print>
 80080e6:	21b9      	movs	r1, #185	; 0xb9
 80080e8:	e7b9      	b.n	800805e <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 80080ea:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 80080ee:	2200      	movs	r2, #0
 80080f0:	2101      	movs	r1, #1
 80080f2:	4628      	mov	r0, r5
 80080f4:	f001 face 	bl	8009694 <z_sched_wake>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d1f8      	bne.n	80080ee <work_queue_main+0xca>
 80080fc:	e7bf      	b.n	800807e <work_queue_main+0x5a>
	__asm__ volatile(
 80080fe:	f388 8811 	msr	BASEPRI, r8
 8008102:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
 8008106:	f1b9 0f00 	cmp.w	r9, #0
 800810a:	d10a      	bne.n	8008122 <work_queue_main+0xfe>
 800810c:	493d      	ldr	r1, [pc, #244]	; (8008204 <work_queue_main+0x1e0>)
 800810e:	4839      	ldr	r0, [pc, #228]	; (80081f4 <work_queue_main+0x1d0>)
 8008110:	4a3d      	ldr	r2, [pc, #244]	; (8008208 <work_queue_main+0x1e4>)
 8008112:	f240 239b 	movw	r3, #667	; 0x29b
 8008116:	f003 fe30 	bl	800bd7a <assert_print>
 800811a:	483b      	ldr	r0, [pc, #236]	; (8008208 <work_queue_main+0x1e4>)
 800811c:	f240 219b 	movw	r1, #667	; 0x29b
 8008120:	e79e      	b.n	8008060 <work_queue_main+0x3c>
		handler(work);
 8008122:	4628      	mov	r0, r5
 8008124:	47c8      	blx	r9
	__asm__ volatile(
 8008126:	f04f 0310 	mov.w	r3, #16
 800812a:	f3ef 8a11 	mrs	sl, BASEPRI
 800812e:	f383 8812 	msr	BASEPRI_MAX, r3
 8008132:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008136:	4630      	mov	r0, r6
 8008138:	f7ff fd14 	bl	8007b64 <z_spin_lock_valid>
 800813c:	2800      	cmp	r0, #0
 800813e:	d083      	beq.n	8008048 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
 8008140:	4630      	mov	r0, r6
 8008142:	f7ff fd2d 	bl	8007ba0 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
 8008146:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8008148:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 800814a:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800814e:	d417      	bmi.n	8008180 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
 8008150:	60ea      	str	r2, [r5, #12]
 8008152:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008156:	f023 0302 	bic.w	r3, r3, #2
 800815a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800815e:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
 8008160:	f3c3 2500 	ubfx	r5, r3, #8, #1
 8008164:	f7ff fd0c 	bl	8007b80 <z_spin_unlock_valid>
 8008168:	2800      	cmp	r0, #0
 800816a:	d0b2      	beq.n	80080d2 <work_queue_main+0xae>
	__asm__ volatile(
 800816c:	f38a 8811 	msr	BASEPRI, sl
 8008170:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 8008174:	2d00      	cmp	r5, #0
 8008176:	f47f af5b 	bne.w	8008030 <work_queue_main+0xc>
	z_impl_k_yield();
 800817a:	f001 f851 	bl	8009220 <z_impl_k_yield>
}
 800817e:	e757      	b.n	8008030 <work_queue_main+0xc>
	return list->head;
 8008180:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
 8008182:	f023 0303 	bic.w	r3, r3, #3
 8008186:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8008188:	2800      	cmp	r0, #0
 800818a:	d0e2      	beq.n	8008152 <work_queue_main+0x12e>
	return node->next;
 800818c:	f04f 0800 	mov.w	r8, #0
 8008190:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
 8008194:	46c3      	mov	fp, r8
 8008196:	2800      	cmp	r0, #0
 8008198:	d0db      	beq.n	8008152 <work_queue_main+0x12e>
		if (wc->work == work) {
 800819a:	6843      	ldr	r3, [r0, #4]
 800819c:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 800819e:	4602      	mov	r2, r0
		if (wc->work == work) {
 80081a0:	d10d      	bne.n	80081be <work_queue_main+0x19a>
	return node->next;
 80081a2:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 80081a4:	f1b8 0f00 	cmp.w	r8, #0
 80081a8:	d112      	bne.n	80081d0 <work_queue_main+0x1ac>
 80081aa:	687b      	ldr	r3, [r7, #4]
	list->head = node;
 80081ac:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 80081ae:	4283      	cmp	r3, r0
 80081b0:	d100      	bne.n	80081b4 <work_queue_main+0x190>
	list->tail = node;
 80081b2:	607a      	str	r2, [r7, #4]
	parent->next = child;
 80081b4:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
 80081b8:	f7ff fe7c 	bl	8007eb4 <z_impl_k_sem_give>
}
 80081bc:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80081be:	f1b9 0f00 	cmp.w	r9, #0
 80081c2:	d00d      	beq.n	80081e0 <work_queue_main+0x1bc>
	return node->next;
 80081c4:	f8d9 3000 	ldr.w	r3, [r9]
 80081c8:	4648      	mov	r0, r9
 80081ca:	4690      	mov	r8, r2
 80081cc:	4699      	mov	r9, r3
 80081ce:	e7e2      	b.n	8008196 <work_queue_main+0x172>
	parent->next = child;
 80081d0:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4283      	cmp	r3, r0
	list->tail = node;
 80081d8:	bf08      	it	eq
 80081da:	f8c7 8004 	streq.w	r8, [r7, #4]
}
 80081de:	e7e9      	b.n	80081b4 <work_queue_main+0x190>
 80081e0:	464b      	mov	r3, r9
 80081e2:	e7f1      	b.n	80081c8 <work_queue_main+0x1a4>
 80081e4:	20000cd0 	.word	0x20000cd0
 80081e8:	20000cc8 	.word	0x20000cc8
 80081ec:	08012877 	.word	0x08012877
 80081f0:	080128a4 	.word	0x080128a4
 80081f4:	0800e198 	.word	0x0800e198
 80081f8:	080128b9 	.word	0x080128b9
 80081fc:	080128d1 	.word	0x080128d1
 8008200:	080128e8 	.word	0x080128e8
 8008204:	08013e79 	.word	0x08013e79
 8008208:	08013e58 	.word	0x08013e58

0800820c <submit_to_queue_locked>:
{
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 800820e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8008210:	079a      	lsls	r2, r3, #30
{
 8008212:	4604      	mov	r4, r0
 8008214:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8008216:	f3c3 0640 	ubfx	r6, r3, #1, #1
 800821a:	d439      	bmi.n	8008290 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800821c:	075b      	lsls	r3, r3, #29
 800821e:	d425      	bmi.n	800826c <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
 8008220:	680b      	ldr	r3, [r1, #0]
 8008222:	b90b      	cbnz	r3, 8008228 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 8008224:	6883      	ldr	r3, [r0, #8]
 8008226:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
 8008228:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800822a:	07dd      	lsls	r5, r3, #31
 800822c:	d521      	bpl.n	8008272 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
 800822e:	68a3      	ldr	r3, [r4, #8]
 8008230:	b95b      	cbnz	r3, 800824a <submit_to_queue_locked+0x3e>
 8008232:	4928      	ldr	r1, [pc, #160]	; (80082d4 <submit_to_queue_locked+0xc8>)
 8008234:	4828      	ldr	r0, [pc, #160]	; (80082d8 <submit_to_queue_locked+0xcc>)
 8008236:	4a29      	ldr	r2, [pc, #164]	; (80082dc <submit_to_queue_locked+0xd0>)
 8008238:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800823c:	f003 fd9d 	bl	800bd7a <assert_print>
 8008240:	4826      	ldr	r0, [pc, #152]	; (80082dc <submit_to_queue_locked+0xd0>)
 8008242:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8008246:	f003 fd91 	bl	800bd6c <assert_post_action>
			*queuep = work->queue;
 800824a:	603b      	str	r3, [r7, #0]
			ret = 2;
 800824c:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
 800824e:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
 8008250:	2d00      	cmp	r5, #0
 8008252:	d03c      	beq.n	80082ce <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8008254:	4b22      	ldr	r3, [pc, #136]	; (80082e0 <submit_to_queue_locked+0xd4>)
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	42ab      	cmp	r3, r5
 800825a:	d00c      	beq.n	8008276 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
 800825c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8008260:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 8008262:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8008266:	d416      	bmi.n	8008296 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
 8008268:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
 800826c:	2300      	movs	r3, #0
 800826e:	603b      	str	r3, [r7, #0]
	return ret;
 8008270:	e027      	b.n	80082c2 <submit_to_queue_locked+0xb6>
		ret = 1;
 8008272:	2601      	movs	r6, #1
 8008274:	e7eb      	b.n	800824e <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8008276:	f004 fc4c 	bl	800cb12 <k_is_in_isr>
 800827a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800827e:	2800      	cmp	r0, #0
 8008280:	d1ee      	bne.n	8008260 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8008282:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 8008284:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8008288:	d5ee      	bpl.n	8008268 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
 800828a:	b152      	cbz	r2, 80082a2 <submit_to_queue_locked+0x96>
 800828c:	075b      	lsls	r3, r3, #29
 800828e:	d408      	bmi.n	80082a2 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
 8008290:	f06f 060f 	mvn.w	r6, #15
 8008294:	e7ea      	b.n	800826c <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
 8008296:	2a00      	cmp	r2, #0
 8008298:	d1fa      	bne.n	8008290 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
 800829a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1f6      	bne.n	8008290 <submit_to_queue_locked+0x84>
	parent->next = child;
 80082a2:	2300      	movs	r3, #0
 80082a4:	6023      	str	r3, [r4, #0]
	return list->tail;
 80082a6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
 80082aa:	b963      	cbnz	r3, 80082c6 <submit_to_queue_locked+0xba>
	list->head = node;
 80082ac:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
 80082b0:	4628      	mov	r0, r5
 80082b2:	f004 fc61 	bl	800cb78 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 80082b6:	68e3      	ldr	r3, [r4, #12]
 80082b8:	f043 0304 	orr.w	r3, r3, #4
 80082bc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	60a3      	str	r3, [r4, #8]
}
 80082c2:	4630      	mov	r0, r6
 80082c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 80082c6:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80082c8:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
 80082cc:	e7f0      	b.n	80082b0 <submit_to_queue_locked+0xa4>
		return -EINVAL;
 80082ce:	f06f 0615 	mvn.w	r6, #21
 80082d2:	e7cb      	b.n	800826c <submit_to_queue_locked+0x60>
 80082d4:	08013e90 	.word	0x08013e90
 80082d8:	0800e198 	.word	0x0800e198
 80082dc:	08013e58 	.word	0x08013e58
 80082e0:	20000c9c 	.word	0x20000c9c

080082e4 <z_work_submit_to_queue>:
{
 80082e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
 80082e6:	460c      	mov	r4, r1
{
 80082e8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
 80082ea:	b959      	cbnz	r1, 8008304 <z_work_submit_to_queue+0x20>
 80082ec:	4921      	ldr	r1, [pc, #132]	; (8008374 <z_work_submit_to_queue+0x90>)
 80082ee:	4822      	ldr	r0, [pc, #136]	; (8008378 <z_work_submit_to_queue+0x94>)
 80082f0:	4a22      	ldr	r2, [pc, #136]	; (800837c <z_work_submit_to_queue+0x98>)
 80082f2:	f44f 73ba 	mov.w	r3, #372	; 0x174
 80082f6:	f003 fd40 	bl	800bd7a <assert_print>
 80082fa:	4820      	ldr	r0, [pc, #128]	; (800837c <z_work_submit_to_queue+0x98>)
 80082fc:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008300:	f003 fd34 	bl	800bd6c <assert_post_action>
	__asm__ volatile(
 8008304:	f04f 0310 	mov.w	r3, #16
 8008308:	f3ef 8511 	mrs	r5, BASEPRI
 800830c:	f383 8812 	msr	BASEPRI_MAX, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	481a      	ldr	r0, [pc, #104]	; (8008380 <z_work_submit_to_queue+0x9c>)
 8008316:	f7ff fc25 	bl	8007b64 <z_spin_lock_valid>
 800831a:	b960      	cbnz	r0, 8008336 <z_work_submit_to_queue+0x52>
 800831c:	4a19      	ldr	r2, [pc, #100]	; (8008384 <z_work_submit_to_queue+0xa0>)
 800831e:	491a      	ldr	r1, [pc, #104]	; (8008388 <z_work_submit_to_queue+0xa4>)
 8008320:	4815      	ldr	r0, [pc, #84]	; (8008378 <z_work_submit_to_queue+0x94>)
 8008322:	238e      	movs	r3, #142	; 0x8e
 8008324:	f003 fd29 	bl	800bd7a <assert_print>
 8008328:	4915      	ldr	r1, [pc, #84]	; (8008380 <z_work_submit_to_queue+0x9c>)
 800832a:	4818      	ldr	r0, [pc, #96]	; (800838c <z_work_submit_to_queue+0xa8>)
 800832c:	f003 fd25 	bl	800bd7a <assert_print>
 8008330:	218e      	movs	r1, #142	; 0x8e
 8008332:	4814      	ldr	r0, [pc, #80]	; (8008384 <z_work_submit_to_queue+0xa0>)
 8008334:	e7e4      	b.n	8008300 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
 8008336:	4812      	ldr	r0, [pc, #72]	; (8008380 <z_work_submit_to_queue+0x9c>)
 8008338:	f7ff fc32 	bl	8007ba0 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
 800833c:	4620      	mov	r0, r4
 800833e:	a901      	add	r1, sp, #4
 8008340:	f7ff ff64 	bl	800820c <submit_to_queue_locked>
 8008344:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008346:	480e      	ldr	r0, [pc, #56]	; (8008380 <z_work_submit_to_queue+0x9c>)
 8008348:	f7ff fc1a 	bl	8007b80 <z_spin_unlock_valid>
 800834c:	b958      	cbnz	r0, 8008366 <z_work_submit_to_queue+0x82>
 800834e:	4a0d      	ldr	r2, [pc, #52]	; (8008384 <z_work_submit_to_queue+0xa0>)
 8008350:	490f      	ldr	r1, [pc, #60]	; (8008390 <z_work_submit_to_queue+0xac>)
 8008352:	4809      	ldr	r0, [pc, #36]	; (8008378 <z_work_submit_to_queue+0x94>)
 8008354:	23b9      	movs	r3, #185	; 0xb9
 8008356:	f003 fd10 	bl	800bd7a <assert_print>
 800835a:	4909      	ldr	r1, [pc, #36]	; (8008380 <z_work_submit_to_queue+0x9c>)
 800835c:	480d      	ldr	r0, [pc, #52]	; (8008394 <z_work_submit_to_queue+0xb0>)
 800835e:	f003 fd0c 	bl	800bd7a <assert_print>
 8008362:	21b9      	movs	r1, #185	; 0xb9
 8008364:	e7e5      	b.n	8008332 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
 8008366:	f385 8811 	msr	BASEPRI, r5
 800836a:	f3bf 8f6f 	isb	sy
}
 800836e:	4620      	mov	r0, r4
 8008370:	b003      	add	sp, #12
 8008372:	bd30      	pop	{r4, r5, pc}
 8008374:	08013eab 	.word	0x08013eab
 8008378:	0800e198 	.word	0x0800e198
 800837c:	08013e58 	.word	0x08013e58
 8008380:	20000cd0 	.word	0x20000cd0
 8008384:	08012877 	.word	0x08012877
 8008388:	080128a4 	.word	0x080128a4
 800838c:	080128b9 	.word	0x080128b9
 8008390:	080128d1 	.word	0x080128d1
 8008394:	080128e8 	.word	0x080128e8

08008398 <k_work_submit>:
{
 8008398:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 800839a:	4801      	ldr	r0, [pc, #4]	; (80083a0 <k_work_submit+0x8>)
 800839c:	f004 bbf3 	b.w	800cb86 <k_work_submit_to_queue>
 80083a0:	20000a00 	.word	0x20000a00

080083a4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 80083a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a6:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
 80083a8:	4604      	mov	r4, r0
{
 80083aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
 80083ac:	b958      	cbnz	r0, 80083c6 <k_work_queue_start+0x22>
 80083ae:	492b      	ldr	r1, [pc, #172]	; (800845c <k_work_queue_start+0xb8>)
 80083b0:	4a2b      	ldr	r2, [pc, #172]	; (8008460 <k_work_queue_start+0xbc>)
 80083b2:	482c      	ldr	r0, [pc, #176]	; (8008464 <k_work_queue_start+0xc0>)
 80083b4:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 80083b8:	f003 fcdf 	bl	800bd7a <assert_print>
 80083bc:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
 80083c0:	4827      	ldr	r0, [pc, #156]	; (8008460 <k_work_queue_start+0xbc>)
 80083c2:	f003 fcd3 	bl	800bd6c <assert_post_action>
 80083c6:	b949      	cbnz	r1, 80083dc <k_work_queue_start+0x38>
 80083c8:	4927      	ldr	r1, [pc, #156]	; (8008468 <k_work_queue_start+0xc4>)
 80083ca:	4a25      	ldr	r2, [pc, #148]	; (8008460 <k_work_queue_start+0xbc>)
 80083cc:	4825      	ldr	r0, [pc, #148]	; (8008464 <k_work_queue_start+0xc0>)
 80083ce:	f240 23c9 	movw	r3, #713	; 0x2c9
 80083d2:	f003 fcd2 	bl	800bd7a <assert_print>
 80083d6:	f240 21c9 	movw	r1, #713	; 0x2c9
 80083da:	e7f1      	b.n	80083c0 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
 80083dc:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
 80083e0:	f010 0001 	ands.w	r0, r0, #1
 80083e4:	d009      	beq.n	80083fa <k_work_queue_start+0x56>
 80083e6:	4921      	ldr	r1, [pc, #132]	; (800846c <k_work_queue_start+0xc8>)
 80083e8:	4a1d      	ldr	r2, [pc, #116]	; (8008460 <k_work_queue_start+0xbc>)
 80083ea:	481e      	ldr	r0, [pc, #120]	; (8008464 <k_work_queue_start+0xc0>)
 80083ec:	f240 23ca 	movw	r3, #714	; 0x2ca
 80083f0:	f003 fcc3 	bl	800bd7a <assert_print>
 80083f4:	f240 21ca 	movw	r1, #714	; 0x2ca
 80083f8:	e7e2      	b.n	80083c0 <k_work_queue_start+0x1c>
	list->tail = NULL;
 80083fa:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
 80083fe:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
 8008402:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
 8008406:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800840a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 800840e:	b31d      	cbz	r5, 8008458 <k_work_queue_start+0xb4>
 8008410:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 8008412:	2800      	cmp	r0, #0
 8008414:	f240 1001 	movw	r0, #257	; 0x101
 8008418:	bf08      	it	eq
 800841a:	2001      	moveq	r0, #1
	*flagp = flags;
 800841c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8008420:	2000      	movs	r0, #0
 8008422:	f04f 36ff 	mov.w	r6, #4294967295
 8008426:	f04f 37ff 	mov.w	r7, #4294967295
 800842a:	e9cd 3003 	strd	r3, r0, [sp, #12]
 800842e:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8008432:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008436:	4b0e      	ldr	r3, [pc, #56]	; (8008470 <k_work_queue_start+0xcc>)
 8008438:	9400      	str	r4, [sp, #0]
 800843a:	4620      	mov	r0, r4
 800843c:	f7ff fada 	bl	80079f4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 8008440:	b125      	cbz	r5, 800844c <k_work_queue_start+0xa8>
 8008442:	6829      	ldr	r1, [r5, #0]
 8008444:	b111      	cbz	r1, 800844c <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
 8008446:	4620      	mov	r0, r4
 8008448:	f004 fb69 	bl	800cb1e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800844c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 800844e:	b009      	add	sp, #36	; 0x24
 8008450:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008454:	f004 bb68 	b.w	800cb28 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8008458:	2001      	movs	r0, #1
 800845a:	e7df      	b.n	800841c <k_work_queue_start+0x78>
 800845c:	08013ebf 	.word	0x08013ebf
 8008460:	08013e58 	.word	0x08013e58
 8008464:	0800e198 	.word	0x0800e198
 8008468:	08013ec5 	.word	0x08013ec5
 800846c:	08013ecb 	.word	0x08013ecb
 8008470:	08008025 	.word	0x08008025

08008474 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 8008474:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 8008476:	4d07      	ldr	r5, [pc, #28]	; (8008494 <z_reset_time_slice+0x20>)
 8008478:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 800847a:	b154      	cbz	r4, 8008492 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 800847c:	f7fe ff36 	bl	80072ec <sys_clock_elapsed>
 8008480:	4b05      	ldr	r3, [pc, #20]	; (8008498 <z_reset_time_slice+0x24>)
 8008482:	4404      	add	r4, r0
 8008484:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 8008486:	6828      	ldr	r0, [r5, #0]
 8008488:	2100      	movs	r1, #0
	}
}
 800848a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 800848e:	f001 baeb 	b.w	8009a68 <z_set_timeout_expiry>
}
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20000cdc 	.word	0x20000cdc
 8008498:	20000c9c 	.word	0x20000c9c

0800849c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 800849c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 800849e:	4d14      	ldr	r5, [pc, #80]	; (80084f0 <update_cache+0x54>)
 80084a0:	462b      	mov	r3, r5
 80084a2:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80084a6:	429c      	cmp	r4, r3
 80084a8:	d000      	beq.n	80084ac <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80084aa:	b904      	cbnz	r4, 80084ae <update_cache+0x12>
 80084ac:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
 80084ae:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 80084b0:	b9a8      	cbnz	r0, 80084de <update_cache+0x42>
	__ASSERT(_current != NULL, "");
 80084b2:	b963      	cbnz	r3, 80084ce <update_cache+0x32>
 80084b4:	490f      	ldr	r1, [pc, #60]	; (80084f4 <update_cache+0x58>)
 80084b6:	4a10      	ldr	r2, [pc, #64]	; (80084f8 <update_cache+0x5c>)
 80084b8:	4810      	ldr	r0, [pc, #64]	; (80084fc <update_cache+0x60>)
 80084ba:	2389      	movs	r3, #137	; 0x89
 80084bc:	f003 fc5d 	bl	800bd7a <assert_print>
 80084c0:	480f      	ldr	r0, [pc, #60]	; (8008500 <update_cache+0x64>)
 80084c2:	f003 fc5a 	bl	800bd7a <assert_print>
 80084c6:	480c      	ldr	r0, [pc, #48]	; (80084f8 <update_cache+0x5c>)
 80084c8:	2189      	movs	r1, #137	; 0x89
 80084ca:	f003 fc4f 	bl	800bd6c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
 80084ce:	7b5a      	ldrb	r2, [r3, #13]
 80084d0:	06d2      	lsls	r2, r2, #27
 80084d2:	d104      	bne.n	80084de <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80084d4:	69a2      	ldr	r2, [r4, #24]
 80084d6:	b912      	cbnz	r2, 80084de <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
 80084d8:	89da      	ldrh	r2, [r3, #14]
 80084da:	2a7f      	cmp	r2, #127	; 0x7f
 80084dc:	d805      	bhi.n	80084ea <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 80084de:	429c      	cmp	r4, r3
 80084e0:	d002      	beq.n	80084e8 <update_cache+0x4c>
			z_reset_time_slice(thread);
 80084e2:	4620      	mov	r0, r4
 80084e4:	f7ff ffc6 	bl	8008474 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 80084e8:	4623      	mov	r3, r4
 80084ea:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 80084ec:	bd38      	pop	{r3, r4, r5, pc}
 80084ee:	bf00      	nop
 80084f0:	20000c9c 	.word	0x20000c9c
 80084f4:	08013f21 	.word	0x08013f21
 80084f8:	08013eff 	.word	0x08013eff
 80084fc:	0800e198 	.word	0x0800e198
 8008500:	08013e55 	.word	0x08013e55

08008504 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
 8008504:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8008506:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800850a:	7b42      	ldrb	r2, [r0, #13]
 800850c:	2b00      	cmp	r3, #0
 800850e:	db38      	blt.n	8008582 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8008510:	06d3      	lsls	r3, r2, #27
 8008512:	d136      	bne.n	8008582 <ready_thread+0x7e>
	return node->next != NULL;
 8008514:	6983      	ldr	r3, [r0, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d133      	bne.n	8008582 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
 800851a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800851e:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8008520:	4a18      	ldr	r2, [pc, #96]	; (8008584 <ready_thread+0x80>)
 8008522:	4290      	cmp	r0, r2
 8008524:	d109      	bne.n	800853a <ready_thread+0x36>
 8008526:	4918      	ldr	r1, [pc, #96]	; (8008588 <ready_thread+0x84>)
 8008528:	4818      	ldr	r0, [pc, #96]	; (800858c <ready_thread+0x88>)
 800852a:	4a19      	ldr	r2, [pc, #100]	; (8008590 <ready_thread+0x8c>)
 800852c:	23ba      	movs	r3, #186	; 0xba
 800852e:	f003 fc24 	bl	800bd7a <assert_print>
 8008532:	4817      	ldr	r0, [pc, #92]	; (8008590 <ready_thread+0x8c>)
 8008534:	21ba      	movs	r1, #186	; 0xba
 8008536:	f003 fc19 	bl	800bd6c <assert_post_action>
	return list->head == list;
 800853a:	4916      	ldr	r1, [pc, #88]	; (8008594 <ready_thread+0x90>)
 800853c:	460a      	mov	r2, r1
 800853e:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008542:	4294      	cmp	r4, r2
 8008544:	bf18      	it	ne
 8008546:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8008548:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800854a:	b923      	cbnz	r3, 8008556 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 800854c:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
 8008550:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8008552:	6208      	str	r0, [r1, #32]
}
 8008554:	e00c      	b.n	8008570 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
 8008556:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800855a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 800855e:	42b5      	cmp	r5, r6
 8008560:	d00b      	beq.n	800857a <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008562:	42ae      	cmp	r6, r5
 8008564:	dd09      	ble.n	800857a <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8008566:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8008568:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800856c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800856e:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
 8008570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
 8008574:	2000      	movs	r0, #0
 8008576:	f7ff bf91 	b.w	800849c <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800857a:	42a3      	cmp	r3, r4
 800857c:	d0e6      	beq.n	800854c <ready_thread+0x48>
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	e7e3      	b.n	800854a <ready_thread+0x46>
}
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	200008f8 	.word	0x200008f8
 8008588:	08013f48 	.word	0x08013f48
 800858c:	0800e198 	.word	0x0800e198
 8008590:	08013eff 	.word	0x08013eff
 8008594:	20000c9c 	.word	0x20000c9c

08008598 <k_sched_time_slice_set>:
{
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	4604      	mov	r4, r0
 800859c:	460d      	mov	r5, r1
	__asm__ volatile(
 800859e:	f04f 0310 	mov.w	r3, #16
 80085a2:	f3ef 8611 	mrs	r6, BASEPRI
 80085a6:	f383 8812 	msr	BASEPRI_MAX, r3
 80085aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80085ae:	481e      	ldr	r0, [pc, #120]	; (8008628 <k_sched_time_slice_set+0x90>)
 80085b0:	f7ff fad8 	bl	8007b64 <z_spin_lock_valid>
 80085b4:	b968      	cbnz	r0, 80085d2 <k_sched_time_slice_set+0x3a>
 80085b6:	4a1d      	ldr	r2, [pc, #116]	; (800862c <k_sched_time_slice_set+0x94>)
 80085b8:	491d      	ldr	r1, [pc, #116]	; (8008630 <k_sched_time_slice_set+0x98>)
 80085ba:	481e      	ldr	r0, [pc, #120]	; (8008634 <k_sched_time_slice_set+0x9c>)
 80085bc:	238e      	movs	r3, #142	; 0x8e
 80085be:	f003 fbdc 	bl	800bd7a <assert_print>
 80085c2:	4919      	ldr	r1, [pc, #100]	; (8008628 <k_sched_time_slice_set+0x90>)
 80085c4:	481c      	ldr	r0, [pc, #112]	; (8008638 <k_sched_time_slice_set+0xa0>)
 80085c6:	f003 fbd8 	bl	800bd7a <assert_print>
 80085ca:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80085cc:	4817      	ldr	r0, [pc, #92]	; (800862c <k_sched_time_slice_set+0x94>)
 80085ce:	f003 fbcd 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 80085d2:	4815      	ldr	r0, [pc, #84]	; (8008628 <k_sched_time_slice_set+0x90>)
 80085d4:	f7ff fae4 	bl	8007ba0 <z_spin_lock_set_owner>
			return ((uint32_t)t) * (to_hz / from_hz);
 80085d8:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 80085da:	2c00      	cmp	r4, #0
 80085dc:	fb04 f303 	mul.w	r3, r4, r3
 80085e0:	dd02      	ble.n	80085e8 <k_sched_time_slice_set+0x50>
			slice_ticks = MAX(2, slice_ticks);
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	bfb8      	it	lt
 80085e6:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
 80085e8:	4a14      	ldr	r2, [pc, #80]	; (800863c <k_sched_time_slice_set+0xa4>)
 80085ea:	2100      	movs	r1, #0
 80085ec:	6111      	str	r1, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 80085ee:	4914      	ldr	r1, [pc, #80]	; (8008640 <k_sched_time_slice_set+0xa8>)
		z_reset_time_slice(_current);
 80085f0:	6890      	ldr	r0, [r2, #8]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 80085f2:	600b      	str	r3, [r1, #0]
		slice_max_prio = prio;
 80085f4:	4b13      	ldr	r3, [pc, #76]	; (8008644 <k_sched_time_slice_set+0xac>)
 80085f6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
 80085f8:	f7ff ff3c 	bl	8008474 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80085fc:	480a      	ldr	r0, [pc, #40]	; (8008628 <k_sched_time_slice_set+0x90>)
 80085fe:	f7ff fabf 	bl	8007b80 <z_spin_unlock_valid>
 8008602:	b958      	cbnz	r0, 800861c <k_sched_time_slice_set+0x84>
 8008604:	4a09      	ldr	r2, [pc, #36]	; (800862c <k_sched_time_slice_set+0x94>)
 8008606:	4910      	ldr	r1, [pc, #64]	; (8008648 <k_sched_time_slice_set+0xb0>)
 8008608:	480a      	ldr	r0, [pc, #40]	; (8008634 <k_sched_time_slice_set+0x9c>)
 800860a:	23b9      	movs	r3, #185	; 0xb9
 800860c:	f003 fbb5 	bl	800bd7a <assert_print>
 8008610:	4905      	ldr	r1, [pc, #20]	; (8008628 <k_sched_time_slice_set+0x90>)
 8008612:	480e      	ldr	r0, [pc, #56]	; (800864c <k_sched_time_slice_set+0xb4>)
 8008614:	f003 fbb1 	bl	800bd7a <assert_print>
 8008618:	21b9      	movs	r1, #185	; 0xb9
 800861a:	e7d7      	b.n	80085cc <k_sched_time_slice_set+0x34>
	__asm__ volatile(
 800861c:	f386 8811 	msr	BASEPRI, r6
 8008620:	f3bf 8f6f 	isb	sy
}
 8008624:	bd70      	pop	{r4, r5, r6, pc}
 8008626:	bf00      	nop
 8008628:	20000ce0 	.word	0x20000ce0
 800862c:	08012877 	.word	0x08012877
 8008630:	080128a4 	.word	0x080128a4
 8008634:	0800e198 	.word	0x0800e198
 8008638:	080128b9 	.word	0x080128b9
 800863c:	20000c9c 	.word	0x20000c9c
 8008640:	20000cdc 	.word	0x20000cdc
 8008644:	20000cd8 	.word	0x20000cd8
 8008648:	080128d1 	.word	0x080128d1
 800864c:	080128e8 	.word	0x080128e8

08008650 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4604      	mov	r4, r0
	__asm__ volatile(
 8008654:	f04f 0310 	mov.w	r3, #16
 8008658:	f3ef 8511 	mrs	r5, BASEPRI
 800865c:	f383 8812 	msr	BASEPRI_MAX, r3
 8008660:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008664:	4816      	ldr	r0, [pc, #88]	; (80086c0 <z_ready_thread+0x70>)
 8008666:	f7ff fa7d 	bl	8007b64 <z_spin_lock_valid>
 800866a:	b968      	cbnz	r0, 8008688 <z_ready_thread+0x38>
 800866c:	4a15      	ldr	r2, [pc, #84]	; (80086c4 <z_ready_thread+0x74>)
 800866e:	4916      	ldr	r1, [pc, #88]	; (80086c8 <z_ready_thread+0x78>)
 8008670:	4816      	ldr	r0, [pc, #88]	; (80086cc <z_ready_thread+0x7c>)
 8008672:	238e      	movs	r3, #142	; 0x8e
 8008674:	f003 fb81 	bl	800bd7a <assert_print>
 8008678:	4911      	ldr	r1, [pc, #68]	; (80086c0 <z_ready_thread+0x70>)
 800867a:	4815      	ldr	r0, [pc, #84]	; (80086d0 <z_ready_thread+0x80>)
 800867c:	f003 fb7d 	bl	800bd7a <assert_print>
 8008680:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008682:	4810      	ldr	r0, [pc, #64]	; (80086c4 <z_ready_thread+0x74>)
 8008684:	f003 fb72 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8008688:	480d      	ldr	r0, [pc, #52]	; (80086c0 <z_ready_thread+0x70>)
 800868a:	f7ff fa89 	bl	8007ba0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
 800868e:	4620      	mov	r0, r4
 8008690:	f7ff ff38 	bl	8008504 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008694:	480a      	ldr	r0, [pc, #40]	; (80086c0 <z_ready_thread+0x70>)
 8008696:	f7ff fa73 	bl	8007b80 <z_spin_unlock_valid>
 800869a:	b958      	cbnz	r0, 80086b4 <z_ready_thread+0x64>
 800869c:	4a09      	ldr	r2, [pc, #36]	; (80086c4 <z_ready_thread+0x74>)
 800869e:	490d      	ldr	r1, [pc, #52]	; (80086d4 <z_ready_thread+0x84>)
 80086a0:	480a      	ldr	r0, [pc, #40]	; (80086cc <z_ready_thread+0x7c>)
 80086a2:	23b9      	movs	r3, #185	; 0xb9
 80086a4:	f003 fb69 	bl	800bd7a <assert_print>
 80086a8:	4905      	ldr	r1, [pc, #20]	; (80086c0 <z_ready_thread+0x70>)
 80086aa:	480b      	ldr	r0, [pc, #44]	; (80086d8 <z_ready_thread+0x88>)
 80086ac:	f003 fb65 	bl	800bd7a <assert_print>
 80086b0:	21b9      	movs	r1, #185	; 0xb9
 80086b2:	e7e6      	b.n	8008682 <z_ready_thread+0x32>
	__asm__ volatile(
 80086b4:	f385 8811 	msr	BASEPRI, r5
 80086b8:	f3bf 8f6f 	isb	sy
		}
	}
}
 80086bc:	bd38      	pop	{r3, r4, r5, pc}
 80086be:	bf00      	nop
 80086c0:	20000ce0 	.word	0x20000ce0
 80086c4:	08012877 	.word	0x08012877
 80086c8:	080128a4 	.word	0x080128a4
 80086cc:	0800e198 	.word	0x0800e198
 80086d0:	080128b9 	.word	0x080128b9
 80086d4:	080128d1 	.word	0x080128d1
 80086d8:	080128e8 	.word	0x080128e8

080086dc <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4604      	mov	r4, r0
	__asm__ volatile(
 80086e0:	f04f 0310 	mov.w	r3, #16
 80086e4:	f3ef 8511 	mrs	r5, BASEPRI
 80086e8:	f383 8812 	msr	BASEPRI_MAX, r3
 80086ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80086f0:	4816      	ldr	r0, [pc, #88]	; (800874c <z_unpend_thread_no_timeout+0x70>)
 80086f2:	f7ff fa37 	bl	8007b64 <z_spin_lock_valid>
 80086f6:	b968      	cbnz	r0, 8008714 <z_unpend_thread_no_timeout+0x38>
 80086f8:	4a15      	ldr	r2, [pc, #84]	; (8008750 <z_unpend_thread_no_timeout+0x74>)
 80086fa:	4916      	ldr	r1, [pc, #88]	; (8008754 <z_unpend_thread_no_timeout+0x78>)
 80086fc:	4816      	ldr	r0, [pc, #88]	; (8008758 <z_unpend_thread_no_timeout+0x7c>)
 80086fe:	238e      	movs	r3, #142	; 0x8e
 8008700:	f003 fb3b 	bl	800bd7a <assert_print>
 8008704:	4911      	ldr	r1, [pc, #68]	; (800874c <z_unpend_thread_no_timeout+0x70>)
 8008706:	4815      	ldr	r0, [pc, #84]	; (800875c <z_unpend_thread_no_timeout+0x80>)
 8008708:	f003 fb37 	bl	800bd7a <assert_print>
 800870c:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800870e:	4810      	ldr	r0, [pc, #64]	; (8008750 <z_unpend_thread_no_timeout+0x74>)
 8008710:	f003 fb2c 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8008714:	480d      	ldr	r0, [pc, #52]	; (800874c <z_unpend_thread_no_timeout+0x70>)
 8008716:	f7ff fa43 	bl	8007ba0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
 800871a:	4620      	mov	r0, r4
 800871c:	f000 fc60 	bl	8008fe0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008720:	480a      	ldr	r0, [pc, #40]	; (800874c <z_unpend_thread_no_timeout+0x70>)
 8008722:	f7ff fa2d 	bl	8007b80 <z_spin_unlock_valid>
 8008726:	b958      	cbnz	r0, 8008740 <z_unpend_thread_no_timeout+0x64>
 8008728:	4a09      	ldr	r2, [pc, #36]	; (8008750 <z_unpend_thread_no_timeout+0x74>)
 800872a:	490d      	ldr	r1, [pc, #52]	; (8008760 <z_unpend_thread_no_timeout+0x84>)
 800872c:	480a      	ldr	r0, [pc, #40]	; (8008758 <z_unpend_thread_no_timeout+0x7c>)
 800872e:	23b9      	movs	r3, #185	; 0xb9
 8008730:	f003 fb23 	bl	800bd7a <assert_print>
 8008734:	4905      	ldr	r1, [pc, #20]	; (800874c <z_unpend_thread_no_timeout+0x70>)
 8008736:	480b      	ldr	r0, [pc, #44]	; (8008764 <z_unpend_thread_no_timeout+0x88>)
 8008738:	f003 fb1f 	bl	800bd7a <assert_print>
 800873c:	21b9      	movs	r1, #185	; 0xb9
 800873e:	e7e6      	b.n	800870e <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
 8008740:	f385 8811 	msr	BASEPRI, r5
 8008744:	f3bf 8f6f 	isb	sy
	}
}
 8008748:	bd38      	pop	{r3, r4, r5, pc}
 800874a:	bf00      	nop
 800874c:	20000ce0 	.word	0x20000ce0
 8008750:	08012877 	.word	0x08012877
 8008754:	080128a4 	.word	0x080128a4
 8008758:	0800e198 	.word	0x0800e198
 800875c:	080128b9 	.word	0x080128b9
 8008760:	080128d1 	.word	0x080128d1
 8008764:	080128e8 	.word	0x080128e8

08008768 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800876c:	460d      	mov	r5, r1
 800876e:	b9e9      	cbnz	r1, 80087ac <z_reschedule+0x44>
 8008770:	f3ef 8605 	mrs	r6, IPSR
 8008774:	b9d6      	cbnz	r6, 80087ac <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
 8008776:	4b18      	ldr	r3, [pc, #96]	; (80087d8 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
 8008778:	699a      	ldr	r2, [r3, #24]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	429a      	cmp	r2, r3
 800877e:	d015      	beq.n	80087ac <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008780:	f7ff f9fe 	bl	8007b80 <z_spin_unlock_valid>
 8008784:	b968      	cbnz	r0, 80087a2 <z_reschedule+0x3a>
 8008786:	4a15      	ldr	r2, [pc, #84]	; (80087dc <z_reschedule+0x74>)
 8008788:	4915      	ldr	r1, [pc, #84]	; (80087e0 <z_reschedule+0x78>)
 800878a:	4816      	ldr	r0, [pc, #88]	; (80087e4 <z_reschedule+0x7c>)
 800878c:	23d0      	movs	r3, #208	; 0xd0
 800878e:	f003 faf4 	bl	800bd7a <assert_print>
 8008792:	4621      	mov	r1, r4
 8008794:	4814      	ldr	r0, [pc, #80]	; (80087e8 <z_reschedule+0x80>)
 8008796:	f003 faf0 	bl	800bd7a <assert_print>
 800879a:	21d0      	movs	r1, #208	; 0xd0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800879c:	480f      	ldr	r0, [pc, #60]	; (80087dc <z_reschedule+0x74>)
 800879e:	f003 fae5 	bl	800bd6c <assert_post_action>
	ret = arch_swap(key);
 80087a2:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
 80087a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087a8:	f7fc ba9c 	b.w	8004ce4 <arch_swap>
 80087ac:	4620      	mov	r0, r4
 80087ae:	f7ff f9e7 	bl	8007b80 <z_spin_unlock_valid>
 80087b2:	b958      	cbnz	r0, 80087cc <z_reschedule+0x64>
 80087b4:	4a09      	ldr	r2, [pc, #36]	; (80087dc <z_reschedule+0x74>)
 80087b6:	490a      	ldr	r1, [pc, #40]	; (80087e0 <z_reschedule+0x78>)
 80087b8:	480a      	ldr	r0, [pc, #40]	; (80087e4 <z_reschedule+0x7c>)
 80087ba:	23b9      	movs	r3, #185	; 0xb9
 80087bc:	f003 fadd 	bl	800bd7a <assert_print>
 80087c0:	4621      	mov	r1, r4
 80087c2:	4809      	ldr	r0, [pc, #36]	; (80087e8 <z_reschedule+0x80>)
 80087c4:	f003 fad9 	bl	800bd7a <assert_print>
 80087c8:	21b9      	movs	r1, #185	; 0xb9
 80087ca:	e7e7      	b.n	800879c <z_reschedule+0x34>
 80087cc:	f385 8811 	msr	BASEPRI, r5
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	bd70      	pop	{r4, r5, r6, pc}
 80087d6:	bf00      	nop
 80087d8:	20000c9c 	.word	0x20000c9c
 80087dc:	08012877 	.word	0x08012877
 80087e0:	080128d1 	.word	0x080128d1
 80087e4:	0800e198 	.word	0x0800e198
 80087e8:	080128e8 	.word	0x080128e8

080087ec <z_sched_start>:
{
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4604      	mov	r4, r0
	__asm__ volatile(
 80087f0:	f04f 0310 	mov.w	r3, #16
 80087f4:	f3ef 8511 	mrs	r5, BASEPRI
 80087f8:	f383 8812 	msr	BASEPRI_MAX, r3
 80087fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008800:	481c      	ldr	r0, [pc, #112]	; (8008874 <z_sched_start+0x88>)
 8008802:	f7ff f9af 	bl	8007b64 <z_spin_lock_valid>
 8008806:	b968      	cbnz	r0, 8008824 <z_sched_start+0x38>
 8008808:	4a1b      	ldr	r2, [pc, #108]	; (8008878 <z_sched_start+0x8c>)
 800880a:	491c      	ldr	r1, [pc, #112]	; (800887c <z_sched_start+0x90>)
 800880c:	481c      	ldr	r0, [pc, #112]	; (8008880 <z_sched_start+0x94>)
 800880e:	238e      	movs	r3, #142	; 0x8e
 8008810:	f003 fab3 	bl	800bd7a <assert_print>
 8008814:	4917      	ldr	r1, [pc, #92]	; (8008874 <z_sched_start+0x88>)
 8008816:	481b      	ldr	r0, [pc, #108]	; (8008884 <z_sched_start+0x98>)
 8008818:	f003 faaf 	bl	800bd7a <assert_print>
 800881c:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800881e:	4816      	ldr	r0, [pc, #88]	; (8008878 <z_sched_start+0x8c>)
 8008820:	f003 faa4 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8008824:	4813      	ldr	r0, [pc, #76]	; (8008874 <z_sched_start+0x88>)
 8008826:	f7ff f9bb 	bl	8007ba0 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800882a:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
 800882c:	075a      	lsls	r2, r3, #29
 800882e:	d414      	bmi.n	800885a <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008830:	4810      	ldr	r0, [pc, #64]	; (8008874 <z_sched_start+0x88>)
 8008832:	f7ff f9a5 	bl	8007b80 <z_spin_unlock_valid>
 8008836:	b958      	cbnz	r0, 8008850 <z_sched_start+0x64>
 8008838:	4a0f      	ldr	r2, [pc, #60]	; (8008878 <z_sched_start+0x8c>)
 800883a:	4913      	ldr	r1, [pc, #76]	; (8008888 <z_sched_start+0x9c>)
 800883c:	4810      	ldr	r0, [pc, #64]	; (8008880 <z_sched_start+0x94>)
 800883e:	23b9      	movs	r3, #185	; 0xb9
 8008840:	f003 fa9b 	bl	800bd7a <assert_print>
 8008844:	490b      	ldr	r1, [pc, #44]	; (8008874 <z_sched_start+0x88>)
 8008846:	4811      	ldr	r0, [pc, #68]	; (800888c <z_sched_start+0xa0>)
 8008848:	f003 fa97 	bl	800bd7a <assert_print>
 800884c:	21b9      	movs	r1, #185	; 0xb9
 800884e:	e7e6      	b.n	800881e <z_sched_start+0x32>
	__asm__ volatile(
 8008850:	f385 8811 	msr	BASEPRI, r5
 8008854:	f3bf 8f6f 	isb	sy
}
 8008858:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800885a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
 800885e:	4620      	mov	r0, r4
 8008860:	7363      	strb	r3, [r4, #13]
 8008862:	f7ff fe4f 	bl	8008504 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8008866:	4629      	mov	r1, r5
 8008868:	4802      	ldr	r0, [pc, #8]	; (8008874 <z_sched_start+0x88>)
}
 800886a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
 800886e:	f7ff bf7b 	b.w	8008768 <z_reschedule>
 8008872:	bf00      	nop
 8008874:	20000ce0 	.word	0x20000ce0
 8008878:	08012877 	.word	0x08012877
 800887c:	080128a4 	.word	0x080128a4
 8008880:	0800e198 	.word	0x0800e198
 8008884:	080128b9 	.word	0x080128b9
 8008888:	080128d1 	.word	0x080128d1
 800888c:	080128e8 	.word	0x080128e8

08008890 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
 8008890:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008892:	f04f 0310 	mov.w	r3, #16
 8008896:	f3ef 8411 	mrs	r4, BASEPRI
 800889a:	f383 8812 	msr	BASEPRI_MAX, r3
 800889e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80088a2:	4825      	ldr	r0, [pc, #148]	; (8008938 <k_sched_lock+0xa8>)
 80088a4:	f7ff f95e 	bl	8007b64 <z_spin_lock_valid>
 80088a8:	b960      	cbnz	r0, 80088c4 <k_sched_lock+0x34>
 80088aa:	4a24      	ldr	r2, [pc, #144]	; (800893c <k_sched_lock+0xac>)
 80088ac:	4924      	ldr	r1, [pc, #144]	; (8008940 <k_sched_lock+0xb0>)
 80088ae:	4825      	ldr	r0, [pc, #148]	; (8008944 <k_sched_lock+0xb4>)
 80088b0:	238e      	movs	r3, #142	; 0x8e
 80088b2:	f003 fa62 	bl	800bd7a <assert_print>
 80088b6:	4920      	ldr	r1, [pc, #128]	; (8008938 <k_sched_lock+0xa8>)
 80088b8:	4823      	ldr	r0, [pc, #140]	; (8008948 <k_sched_lock+0xb8>)
 80088ba:	f003 fa5e 	bl	800bd7a <assert_print>
 80088be:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80088c0:	481e      	ldr	r0, [pc, #120]	; (800893c <k_sched_lock+0xac>)
 80088c2:	e010      	b.n	80088e6 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
 80088c4:	481c      	ldr	r0, [pc, #112]	; (8008938 <k_sched_lock+0xa8>)
 80088c6:	f7ff f96b 	bl	8007ba0 <z_spin_lock_set_owner>
 80088ca:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
 80088ce:	b163      	cbz	r3, 80088ea <k_sched_lock+0x5a>
 80088d0:	491e      	ldr	r1, [pc, #120]	; (800894c <k_sched_lock+0xbc>)
 80088d2:	4a1f      	ldr	r2, [pc, #124]	; (8008950 <k_sched_lock+0xc0>)
 80088d4:	481b      	ldr	r0, [pc, #108]	; (8008944 <k_sched_lock+0xb4>)
 80088d6:	23fd      	movs	r3, #253	; 0xfd
 80088d8:	f003 fa4f 	bl	800bd7a <assert_print>
 80088dc:	481d      	ldr	r0, [pc, #116]	; (8008954 <k_sched_lock+0xc4>)
 80088de:	f003 fa4c 	bl	800bd7a <assert_print>
 80088e2:	21fd      	movs	r1, #253	; 0xfd
 80088e4:	481a      	ldr	r0, [pc, #104]	; (8008950 <k_sched_lock+0xc0>)
 80088e6:	f003 fa41 	bl	800bd6c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
 80088ea:	4b1b      	ldr	r3, [pc, #108]	; (8008958 <k_sched_lock+0xc8>)
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	7bd3      	ldrb	r3, [r2, #15]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d10a      	bne.n	800890a <k_sched_lock+0x7a>
 80088f4:	4919      	ldr	r1, [pc, #100]	; (800895c <k_sched_lock+0xcc>)
 80088f6:	4a16      	ldr	r2, [pc, #88]	; (8008950 <k_sched_lock+0xc0>)
 80088f8:	4812      	ldr	r0, [pc, #72]	; (8008944 <k_sched_lock+0xb4>)
 80088fa:	23fe      	movs	r3, #254	; 0xfe
 80088fc:	f003 fa3d 	bl	800bd7a <assert_print>
 8008900:	4814      	ldr	r0, [pc, #80]	; (8008954 <k_sched_lock+0xc4>)
 8008902:	f003 fa3a 	bl	800bd7a <assert_print>
 8008906:	21fe      	movs	r1, #254	; 0xfe
 8008908:	e7ec      	b.n	80088e4 <k_sched_lock+0x54>
	--_current->base.sched_locked;
 800890a:	3b01      	subs	r3, #1
 800890c:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800890e:	480a      	ldr	r0, [pc, #40]	; (8008938 <k_sched_lock+0xa8>)
 8008910:	f7ff f936 	bl	8007b80 <z_spin_unlock_valid>
 8008914:	b958      	cbnz	r0, 800892e <k_sched_lock+0x9e>
 8008916:	4a09      	ldr	r2, [pc, #36]	; (800893c <k_sched_lock+0xac>)
 8008918:	4911      	ldr	r1, [pc, #68]	; (8008960 <k_sched_lock+0xd0>)
 800891a:	480a      	ldr	r0, [pc, #40]	; (8008944 <k_sched_lock+0xb4>)
 800891c:	23b9      	movs	r3, #185	; 0xb9
 800891e:	f003 fa2c 	bl	800bd7a <assert_print>
 8008922:	4905      	ldr	r1, [pc, #20]	; (8008938 <k_sched_lock+0xa8>)
 8008924:	480f      	ldr	r0, [pc, #60]	; (8008964 <k_sched_lock+0xd4>)
 8008926:	f003 fa28 	bl	800bd7a <assert_print>
 800892a:	21b9      	movs	r1, #185	; 0xb9
 800892c:	e7c8      	b.n	80088c0 <k_sched_lock+0x30>
	__asm__ volatile(
 800892e:	f384 8811 	msr	BASEPRI, r4
 8008932:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8008936:	bd10      	pop	{r4, pc}
 8008938:	20000ce0 	.word	0x20000ce0
 800893c:	08012877 	.word	0x08012877
 8008940:	080128a4 	.word	0x080128a4
 8008944:	0800e198 	.word	0x0800e198
 8008948:	080128b9 	.word	0x080128b9
 800894c:	08013cbd 	.word	0x08013cbd
 8008950:	08013f69 	.word	0x08013f69
 8008954:	08013e55 	.word	0x08013e55
 8008958:	20000c9c 	.word	0x20000c9c
 800895c:	08013f94 	.word	0x08013f94
 8008960:	080128d1 	.word	0x080128d1
 8008964:	080128e8 	.word	0x080128e8

08008968 <k_sched_unlock>:

void k_sched_unlock(void)
{
 8008968:	b510      	push	{r4, lr}
	__asm__ volatile(
 800896a:	f04f 0310 	mov.w	r3, #16
 800896e:	f3ef 8411 	mrs	r4, BASEPRI
 8008972:	f383 8812 	msr	BASEPRI_MAX, r3
 8008976:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800897a:	4829      	ldr	r0, [pc, #164]	; (8008a20 <k_sched_unlock+0xb8>)
 800897c:	f7ff f8f2 	bl	8007b64 <z_spin_lock_valid>
 8008980:	b960      	cbnz	r0, 800899c <k_sched_unlock+0x34>
 8008982:	4a28      	ldr	r2, [pc, #160]	; (8008a24 <k_sched_unlock+0xbc>)
 8008984:	4928      	ldr	r1, [pc, #160]	; (8008a28 <k_sched_unlock+0xc0>)
 8008986:	4829      	ldr	r0, [pc, #164]	; (8008a2c <k_sched_unlock+0xc4>)
 8008988:	238e      	movs	r3, #142	; 0x8e
 800898a:	f003 f9f6 	bl	800bd7a <assert_print>
 800898e:	4924      	ldr	r1, [pc, #144]	; (8008a20 <k_sched_unlock+0xb8>)
 8008990:	4827      	ldr	r0, [pc, #156]	; (8008a30 <k_sched_unlock+0xc8>)
 8008992:	f003 f9f2 	bl	800bd7a <assert_print>
 8008996:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008998:	4822      	ldr	r0, [pc, #136]	; (8008a24 <k_sched_unlock+0xbc>)
 800899a:	e013      	b.n	80089c4 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
 800899c:	4820      	ldr	r0, [pc, #128]	; (8008a20 <k_sched_unlock+0xb8>)
 800899e:	f7ff f8ff 	bl	8007ba0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
 80089a2:	4b24      	ldr	r3, [pc, #144]	; (8008a34 <k_sched_unlock+0xcc>)
 80089a4:	689a      	ldr	r2, [r3, #8]
 80089a6:	7bd3      	ldrb	r3, [r2, #15]
 80089a8:	b973      	cbnz	r3, 80089c8 <k_sched_unlock+0x60>
 80089aa:	4923      	ldr	r1, [pc, #140]	; (8008a38 <k_sched_unlock+0xd0>)
 80089ac:	4a23      	ldr	r2, [pc, #140]	; (8008a3c <k_sched_unlock+0xd4>)
 80089ae:	481f      	ldr	r0, [pc, #124]	; (8008a2c <k_sched_unlock+0xc4>)
 80089b0:	f240 33d6 	movw	r3, #982	; 0x3d6
 80089b4:	f003 f9e1 	bl	800bd7a <assert_print>
 80089b8:	4821      	ldr	r0, [pc, #132]	; (8008a40 <k_sched_unlock+0xd8>)
 80089ba:	f003 f9de 	bl	800bd7a <assert_print>
 80089be:	f240 31d6 	movw	r1, #982	; 0x3d6
 80089c2:	481e      	ldr	r0, [pc, #120]	; (8008a3c <k_sched_unlock+0xd4>)
 80089c4:	f003 f9d2 	bl	800bd6c <assert_post_action>
 80089c8:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
 80089cc:	b160      	cbz	r0, 80089e8 <k_sched_unlock+0x80>
 80089ce:	491d      	ldr	r1, [pc, #116]	; (8008a44 <k_sched_unlock+0xdc>)
 80089d0:	4a1a      	ldr	r2, [pc, #104]	; (8008a3c <k_sched_unlock+0xd4>)
 80089d2:	4816      	ldr	r0, [pc, #88]	; (8008a2c <k_sched_unlock+0xc4>)
 80089d4:	f240 33d7 	movw	r3, #983	; 0x3d7
 80089d8:	f003 f9cf 	bl	800bd7a <assert_print>
 80089dc:	4818      	ldr	r0, [pc, #96]	; (8008a40 <k_sched_unlock+0xd8>)
 80089de:	f003 f9cc 	bl	800bd7a <assert_print>
 80089e2:	f240 31d7 	movw	r1, #983	; 0x3d7
 80089e6:	e7ec      	b.n	80089c2 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
 80089e8:	3301      	adds	r3, #1
 80089ea:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80089ec:	f7ff fd56 	bl	800849c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80089f0:	480b      	ldr	r0, [pc, #44]	; (8008a20 <k_sched_unlock+0xb8>)
 80089f2:	f7ff f8c5 	bl	8007b80 <z_spin_unlock_valid>
 80089f6:	b958      	cbnz	r0, 8008a10 <k_sched_unlock+0xa8>
 80089f8:	4a0a      	ldr	r2, [pc, #40]	; (8008a24 <k_sched_unlock+0xbc>)
 80089fa:	4913      	ldr	r1, [pc, #76]	; (8008a48 <k_sched_unlock+0xe0>)
 80089fc:	480b      	ldr	r0, [pc, #44]	; (8008a2c <k_sched_unlock+0xc4>)
 80089fe:	23b9      	movs	r3, #185	; 0xb9
 8008a00:	f003 f9bb 	bl	800bd7a <assert_print>
 8008a04:	4906      	ldr	r1, [pc, #24]	; (8008a20 <k_sched_unlock+0xb8>)
 8008a06:	4811      	ldr	r0, [pc, #68]	; (8008a4c <k_sched_unlock+0xe4>)
 8008a08:	f003 f9b7 	bl	800bd7a <assert_print>
 8008a0c:	21b9      	movs	r1, #185	; 0xb9
 8008a0e:	e7c3      	b.n	8008998 <k_sched_unlock+0x30>
	__asm__ volatile(
 8008a10:	f384 8811 	msr	BASEPRI, r4
 8008a14:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 8008a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8008a1c:	f004 b8d0 	b.w	800cbc0 <z_reschedule_unlocked>
 8008a20:	20000ce0 	.word	0x20000ce0
 8008a24:	08012877 	.word	0x08012877
 8008a28:	080128a4 	.word	0x080128a4
 8008a2c:	0800e198 	.word	0x0800e198
 8008a30:	080128b9 	.word	0x080128b9
 8008a34:	20000c9c 	.word	0x20000c9c
 8008a38:	08013fc5 	.word	0x08013fc5
 8008a3c:	08013eff 	.word	0x08013eff
 8008a40:	08013e55 	.word	0x08013e55
 8008a44:	08013cbd 	.word	0x08013cbd
 8008a48:	080128d1 	.word	0x080128d1
 8008a4c:	080128e8 	.word	0x080128e8

08008a50 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
 8008a50:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8008a52:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <z_priq_dumb_remove+0x30>)
 8008a54:	4299      	cmp	r1, r3
 8008a56:	d10b      	bne.n	8008a70 <z_priq_dumb_remove+0x20>
 8008a58:	490a      	ldr	r1, [pc, #40]	; (8008a84 <z_priq_dumb_remove+0x34>)
 8008a5a:	480b      	ldr	r0, [pc, #44]	; (8008a88 <z_priq_dumb_remove+0x38>)
 8008a5c:	4a0b      	ldr	r2, [pc, #44]	; (8008a8c <z_priq_dumb_remove+0x3c>)
 8008a5e:	f240 4362 	movw	r3, #1122	; 0x462
 8008a62:	f003 f98a 	bl	800bd7a <assert_print>
 8008a66:	4809      	ldr	r0, [pc, #36]	; (8008a8c <z_priq_dumb_remove+0x3c>)
 8008a68:	f240 4162 	movw	r1, #1122	; 0x462
 8008a6c:	f003 f97e 	bl	800bd6c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 8008a70:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
 8008a74:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8008a76:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8008a78:	2300      	movs	r3, #0
	node->prev = NULL;
 8008a7a:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8008a7e:	bd08      	pop	{r3, pc}
 8008a80:	200008f8 	.word	0x200008f8
 8008a84:	08013f48 	.word	0x08013f48
 8008a88:	0800e198 	.word	0x0800e198
 8008a8c:	08013eff 	.word	0x08013eff

08008a90 <move_thread_to_end_of_prio_q>:
{
 8008a90:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8008a92:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8008a96:	7b43      	ldrb	r3, [r0, #13]
 8008a98:	2a00      	cmp	r2, #0
{
 8008a9a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
 8008a9c:	da06      	bge.n	8008aac <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8008aa4:	4601      	mov	r1, r0
 8008aa6:	481d      	ldr	r0, [pc, #116]	; (8008b1c <move_thread_to_end_of_prio_q+0x8c>)
 8008aa8:	f7ff ffd2 	bl	8008a50 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8008aac:	7b63      	ldrb	r3, [r4, #13]
 8008aae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ab2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8008ab4:	4b1a      	ldr	r3, [pc, #104]	; (8008b20 <move_thread_to_end_of_prio_q+0x90>)
 8008ab6:	429c      	cmp	r4, r3
 8008ab8:	d109      	bne.n	8008ace <move_thread_to_end_of_prio_q+0x3e>
 8008aba:	491a      	ldr	r1, [pc, #104]	; (8008b24 <move_thread_to_end_of_prio_q+0x94>)
 8008abc:	481a      	ldr	r0, [pc, #104]	; (8008b28 <move_thread_to_end_of_prio_q+0x98>)
 8008abe:	4a1b      	ldr	r2, [pc, #108]	; (8008b2c <move_thread_to_end_of_prio_q+0x9c>)
 8008ac0:	23ba      	movs	r3, #186	; 0xba
 8008ac2:	f003 f95a 	bl	800bd7a <assert_print>
 8008ac6:	4819      	ldr	r0, [pc, #100]	; (8008b2c <move_thread_to_end_of_prio_q+0x9c>)
 8008ac8:	21ba      	movs	r1, #186	; 0xba
 8008aca:	f003 f94f 	bl	800bd6c <assert_post_action>
	return list->head == list;
 8008ace:	4a18      	ldr	r2, [pc, #96]	; (8008b30 <move_thread_to_end_of_prio_q+0xa0>)
 8008ad0:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
 8008ad2:	6a10      	ldr	r0, [r2, #32]
	return list->head == list;
 8008ad4:	f851 3f1c 	ldr.w	r3, [r1, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008ad8:	428b      	cmp	r3, r1
 8008ada:	bf08      	it	eq
 8008adc:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008ade:	b923      	cbnz	r3, 8008aea <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
 8008ae0:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
 8008ae4:	6004      	str	r4, [r0, #0]
	list->tail = node;
 8008ae6:	6214      	str	r4, [r2, #32]
}
 8008ae8:	e00c      	b.n	8008b04 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
 8008aea:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8008aee:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8008af2:	42b5      	cmp	r5, r6
 8008af4:	d00e      	beq.n	8008b14 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008af6:	42ae      	cmp	r6, r5
 8008af8:	dd0c      	ble.n	8008b14 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
 8008afa:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8008afc:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
 8008b00:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 8008b02:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
 8008b04:	6890      	ldr	r0, [r2, #8]
 8008b06:	1b03      	subs	r3, r0, r4
 8008b08:	4258      	negs	r0, r3
}
 8008b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8008b0e:	4158      	adcs	r0, r3
 8008b10:	f7ff bcc4 	b.w	800849c <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8008b14:	4298      	cmp	r0, r3
 8008b16:	d0e3      	beq.n	8008ae0 <move_thread_to_end_of_prio_q+0x50>
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	e7e0      	b.n	8008ade <move_thread_to_end_of_prio_q+0x4e>
 8008b1c:	20000cb8 	.word	0x20000cb8
 8008b20:	200008f8 	.word	0x200008f8
 8008b24:	08013f48 	.word	0x08013f48
 8008b28:	0800e198 	.word	0x0800e198
 8008b2c:	08013eff 	.word	0x08013eff
 8008b30:	20000c9c 	.word	0x20000c9c

08008b34 <z_time_slice>:
{
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	4605      	mov	r5, r0
	__asm__ volatile(
 8008b38:	f04f 0310 	mov.w	r3, #16
 8008b3c:	f3ef 8611 	mrs	r6, BASEPRI
 8008b40:	f383 8812 	msr	BASEPRI_MAX, r3
 8008b44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008b48:	4829      	ldr	r0, [pc, #164]	; (8008bf0 <z_time_slice+0xbc>)
 8008b4a:	f7ff f80b 	bl	8007b64 <z_spin_lock_valid>
 8008b4e:	b968      	cbnz	r0, 8008b6c <z_time_slice+0x38>
 8008b50:	4a28      	ldr	r2, [pc, #160]	; (8008bf4 <z_time_slice+0xc0>)
 8008b52:	4929      	ldr	r1, [pc, #164]	; (8008bf8 <z_time_slice+0xc4>)
 8008b54:	4829      	ldr	r0, [pc, #164]	; (8008bfc <z_time_slice+0xc8>)
 8008b56:	238e      	movs	r3, #142	; 0x8e
 8008b58:	f003 f90f 	bl	800bd7a <assert_print>
 8008b5c:	4924      	ldr	r1, [pc, #144]	; (8008bf0 <z_time_slice+0xbc>)
 8008b5e:	4828      	ldr	r0, [pc, #160]	; (8008c00 <z_time_slice+0xcc>)
 8008b60:	f003 f90b 	bl	800bd7a <assert_print>
 8008b64:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008b66:	4823      	ldr	r0, [pc, #140]	; (8008bf4 <z_time_slice+0xc0>)
 8008b68:	f003 f900 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8008b6c:	4820      	ldr	r0, [pc, #128]	; (8008bf0 <z_time_slice+0xbc>)
 8008b6e:	f7ff f817 	bl	8007ba0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
 8008b72:	4b24      	ldr	r3, [pc, #144]	; (8008c04 <z_time_slice+0xd0>)
 8008b74:	4a24      	ldr	r2, [pc, #144]	; (8008c08 <z_time_slice+0xd4>)
 8008b76:	689c      	ldr	r4, [r3, #8]
 8008b78:	6811      	ldr	r1, [r2, #0]
 8008b7a:	428c      	cmp	r4, r1
 8008b7c:	d112      	bne.n	8008ba4 <z_time_slice+0x70>
		z_reset_time_slice(_current);
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f7ff fc78 	bl	8008474 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008b84:	481a      	ldr	r0, [pc, #104]	; (8008bf0 <z_time_slice+0xbc>)
 8008b86:	f7fe fffb 	bl	8007b80 <z_spin_unlock_valid>
 8008b8a:	bb58      	cbnz	r0, 8008be4 <z_time_slice+0xb0>
 8008b8c:	4a19      	ldr	r2, [pc, #100]	; (8008bf4 <z_time_slice+0xc0>)
 8008b8e:	491f      	ldr	r1, [pc, #124]	; (8008c0c <z_time_slice+0xd8>)
 8008b90:	481a      	ldr	r0, [pc, #104]	; (8008bfc <z_time_slice+0xc8>)
 8008b92:	23b9      	movs	r3, #185	; 0xb9
 8008b94:	f003 f8f1 	bl	800bd7a <assert_print>
 8008b98:	4915      	ldr	r1, [pc, #84]	; (8008bf0 <z_time_slice+0xbc>)
 8008b9a:	481d      	ldr	r0, [pc, #116]	; (8008c10 <z_time_slice+0xdc>)
 8008b9c:	f003 f8ed 	bl	800bd7a <assert_print>
 8008ba0:	21b9      	movs	r1, #185	; 0xb9
 8008ba2:	e7e0      	b.n	8008b66 <z_time_slice+0x32>
	pending_current = NULL;
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 8008ba8:	4a1a      	ldr	r2, [pc, #104]	; (8008c14 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
 8008baa:	6812      	ldr	r2, [r2, #0]
 8008bac:	b1c2      	cbz	r2, 8008be0 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
 8008bae:	89e2      	ldrh	r2, [r4, #14]
 8008bb0:	2a7f      	cmp	r2, #127	; 0x7f
 8008bb2:	d815      	bhi.n	8008be0 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
 8008bb4:	7b62      	ldrb	r2, [r4, #13]
 8008bb6:	06d2      	lsls	r2, r2, #27
 8008bb8:	d112      	bne.n	8008be0 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8008bba:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <z_time_slice+0xe4>)
 8008bbc:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8008bc0:	6812      	ldr	r2, [r2, #0]
 8008bc2:	4291      	cmp	r1, r2
 8008bc4:	db0c      	blt.n	8008be0 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
 8008bc6:	4a15      	ldr	r2, [pc, #84]	; (8008c1c <z_time_slice+0xe8>)
 8008bc8:	4294      	cmp	r4, r2
 8008bca:	d009      	beq.n	8008be0 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
 8008bcc:	691a      	ldr	r2, [r3, #16]
 8008bce:	42aa      	cmp	r2, r5
 8008bd0:	dc03      	bgt.n	8008bda <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f7ff ff5c 	bl	8008a90 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
 8008bd8:	e7d1      	b.n	8008b7e <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
 8008bda:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
 8008bdc:	611a      	str	r2, [r3, #16]
 8008bde:	e7d1      	b.n	8008b84 <z_time_slice+0x50>
 8008be0:	2200      	movs	r2, #0
 8008be2:	e7fb      	b.n	8008bdc <z_time_slice+0xa8>
	__asm__ volatile(
 8008be4:	f386 8811 	msr	BASEPRI, r6
 8008be8:	f3bf 8f6f 	isb	sy
}
 8008bec:	bd70      	pop	{r4, r5, r6, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000ce0 	.word	0x20000ce0
 8008bf4:	08012877 	.word	0x08012877
 8008bf8:	080128a4 	.word	0x080128a4
 8008bfc:	0800e198 	.word	0x0800e198
 8008c00:	080128b9 	.word	0x080128b9
 8008c04:	20000c9c 	.word	0x20000c9c
 8008c08:	20000cd4 	.word	0x20000cd4
 8008c0c:	080128d1 	.word	0x080128d1
 8008c10:	080128e8 	.word	0x080128e8
 8008c14:	20000cdc 	.word	0x20000cdc
 8008c18:	20000cd8 	.word	0x20000cd8
 8008c1c:	200008f8 	.word	0x200008f8

08008c20 <unready_thread>:
{
 8008c20:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
 8008c22:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8008c26:	7b43      	ldrb	r3, [r0, #13]
 8008c28:	2a00      	cmp	r2, #0
{
 8008c2a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
 8008c2c:	da06      	bge.n	8008c3c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c32:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8008c34:	4601      	mov	r1, r0
 8008c36:	4806      	ldr	r0, [pc, #24]	; (8008c50 <unready_thread+0x30>)
 8008c38:	f7ff ff0a 	bl	8008a50 <z_priq_dumb_remove>
	update_cache(thread == _current);
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <unready_thread+0x34>)
 8008c3e:	6898      	ldr	r0, [r3, #8]
 8008c40:	1b03      	subs	r3, r0, r4
 8008c42:	4258      	negs	r0, r3
}
 8008c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
 8008c48:	4158      	adcs	r0, r3
 8008c4a:	f7ff bc27 	b.w	800849c <update_cache>
 8008c4e:	bf00      	nop
 8008c50:	20000cb8 	.word	0x20000cb8
 8008c54:	20000c9c 	.word	0x20000c9c

08008c58 <add_to_waitq_locked>:
{
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	460d      	mov	r5, r1
	unready_thread(thread);
 8008c5e:	f7ff ffdf 	bl	8008c20 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8008c62:	7b63      	ldrb	r3, [r4, #13]
 8008c64:	f043 0302 	orr.w	r3, r3, #2
 8008c68:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8008c6a:	b34d      	cbz	r5, 8008cc0 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8008c6c:	4b15      	ldr	r3, [pc, #84]	; (8008cc4 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
 8008c6e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8008c70:	429c      	cmp	r4, r3
 8008c72:	d109      	bne.n	8008c88 <add_to_waitq_locked+0x30>
 8008c74:	4914      	ldr	r1, [pc, #80]	; (8008cc8 <add_to_waitq_locked+0x70>)
 8008c76:	4815      	ldr	r0, [pc, #84]	; (8008ccc <add_to_waitq_locked+0x74>)
 8008c78:	4a15      	ldr	r2, [pc, #84]	; (8008cd0 <add_to_waitq_locked+0x78>)
 8008c7a:	23ba      	movs	r3, #186	; 0xba
 8008c7c:	f003 f87d 	bl	800bd7a <assert_print>
 8008c80:	4813      	ldr	r0, [pc, #76]	; (8008cd0 <add_to_waitq_locked+0x78>)
 8008c82:	21ba      	movs	r1, #186	; 0xba
 8008c84:	f003 f872 	bl	800bd6c <assert_post_action>
	return list->head == list;
 8008c88:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008c8a:	429d      	cmp	r5, r3
 8008c8c:	d109      	bne.n	8008ca2 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
 8008c8e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8008c90:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8008c94:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8008c96:	606c      	str	r4, [r5, #4]
}
 8008c98:	e012      	b.n	8008cc0 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
 8008c9a:	686a      	ldr	r2, [r5, #4]
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d0f6      	beq.n	8008c8e <add_to_waitq_locked+0x36>
 8008ca0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0f3      	beq.n	8008c8e <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
 8008ca6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8008caa:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8008cae:	428a      	cmp	r2, r1
 8008cb0:	d0f3      	beq.n	8008c9a <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008cb2:	4291      	cmp	r1, r2
 8008cb4:	ddf1      	ble.n	8008c9a <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
 8008cb6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8008cb8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8008cbc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8008cbe:	605c      	str	r4, [r3, #4]
}
 8008cc0:	bd38      	pop	{r3, r4, r5, pc}
 8008cc2:	bf00      	nop
 8008cc4:	200008f8 	.word	0x200008f8
 8008cc8:	08013f48 	.word	0x08013f48
 8008ccc:	0800e198 	.word	0x0800e198
 8008cd0:	08013eff 	.word	0x08013eff

08008cd4 <pend>:
{
 8008cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd8:	4604      	mov	r4, r0
 8008cda:	4688      	mov	r8, r1
 8008cdc:	4616      	mov	r6, r2
 8008cde:	461d      	mov	r5, r3
	__asm__ volatile(
 8008ce0:	f04f 0310 	mov.w	r3, #16
 8008ce4:	f3ef 8711 	mrs	r7, BASEPRI
 8008ce8:	f383 8812 	msr	BASEPRI_MAX, r3
 8008cec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008cf0:	481e      	ldr	r0, [pc, #120]	; (8008d6c <pend+0x98>)
 8008cf2:	f7fe ff37 	bl	8007b64 <z_spin_lock_valid>
 8008cf6:	b968      	cbnz	r0, 8008d14 <pend+0x40>
 8008cf8:	4a1d      	ldr	r2, [pc, #116]	; (8008d70 <pend+0x9c>)
 8008cfa:	491e      	ldr	r1, [pc, #120]	; (8008d74 <pend+0xa0>)
 8008cfc:	481e      	ldr	r0, [pc, #120]	; (8008d78 <pend+0xa4>)
 8008cfe:	238e      	movs	r3, #142	; 0x8e
 8008d00:	f003 f83b 	bl	800bd7a <assert_print>
 8008d04:	4919      	ldr	r1, [pc, #100]	; (8008d6c <pend+0x98>)
 8008d06:	481d      	ldr	r0, [pc, #116]	; (8008d7c <pend+0xa8>)
 8008d08:	f003 f837 	bl	800bd7a <assert_print>
 8008d0c:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008d0e:	4818      	ldr	r0, [pc, #96]	; (8008d70 <pend+0x9c>)
 8008d10:	f003 f82c 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8008d14:	4815      	ldr	r0, [pc, #84]	; (8008d6c <pend+0x98>)
 8008d16:	f7fe ff43 	bl	8007ba0 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	4641      	mov	r1, r8
 8008d1e:	f7ff ff9b 	bl	8008c58 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008d22:	4812      	ldr	r0, [pc, #72]	; (8008d6c <pend+0x98>)
 8008d24:	f7fe ff2c 	bl	8007b80 <z_spin_unlock_valid>
 8008d28:	b958      	cbnz	r0, 8008d42 <pend+0x6e>
 8008d2a:	4a11      	ldr	r2, [pc, #68]	; (8008d70 <pend+0x9c>)
 8008d2c:	4914      	ldr	r1, [pc, #80]	; (8008d80 <pend+0xac>)
 8008d2e:	4812      	ldr	r0, [pc, #72]	; (8008d78 <pend+0xa4>)
 8008d30:	23b9      	movs	r3, #185	; 0xb9
 8008d32:	f003 f822 	bl	800bd7a <assert_print>
 8008d36:	490d      	ldr	r1, [pc, #52]	; (8008d6c <pend+0x98>)
 8008d38:	4812      	ldr	r0, [pc, #72]	; (8008d84 <pend+0xb0>)
 8008d3a:	f003 f81e 	bl	800bd7a <assert_print>
 8008d3e:	21b9      	movs	r1, #185	; 0xb9
 8008d40:	e7e5      	b.n	8008d0e <pend+0x3a>
	__asm__ volatile(
 8008d42:	f387 8811 	msr	BASEPRI, r7
 8008d46:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8008d4a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008d4e:	bf08      	it	eq
 8008d50:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 8008d54:	d008      	beq.n	8008d68 <pend+0x94>
 8008d56:	4632      	mov	r2, r6
 8008d58:	462b      	mov	r3, r5
 8008d5a:	f104 0018 	add.w	r0, r4, #24
 8008d5e:	490a      	ldr	r1, [pc, #40]	; (8008d88 <pend+0xb4>)
}
 8008d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d64:	f000 bd6e 	b.w	8009844 <z_add_timeout>
 8008d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6c:	20000ce0 	.word	0x20000ce0
 8008d70:	08012877 	.word	0x08012877
 8008d74:	080128a4 	.word	0x080128a4
 8008d78:	0800e198 	.word	0x0800e198
 8008d7c:	080128b9 	.word	0x080128b9
 8008d80:	080128d1 	.word	0x080128d1
 8008d84:	080128e8 	.word	0x080128e8
 8008d88:	08009021 	.word	0x08009021

08008d8c <z_pend_curr>:
{
 8008d8c:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
 8008d8e:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <z_pend_curr+0x48>)
{
 8008d90:	4604      	mov	r4, r0
	pending_current = _current;
 8008d92:	6898      	ldr	r0, [r3, #8]
 8008d94:	4b10      	ldr	r3, [pc, #64]	; (8008dd8 <z_pend_curr+0x4c>)
{
 8008d96:	460d      	mov	r5, r1
	pending_current = _current;
 8008d98:	6018      	str	r0, [r3, #0]
{
 8008d9a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 8008d9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008da0:	f7ff ff98 	bl	8008cd4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008da4:	4620      	mov	r0, r4
 8008da6:	f7fe feeb 	bl	8007b80 <z_spin_unlock_valid>
 8008daa:	b968      	cbnz	r0, 8008dc8 <z_pend_curr+0x3c>
 8008dac:	4a0b      	ldr	r2, [pc, #44]	; (8008ddc <z_pend_curr+0x50>)
 8008dae:	490c      	ldr	r1, [pc, #48]	; (8008de0 <z_pend_curr+0x54>)
 8008db0:	480c      	ldr	r0, [pc, #48]	; (8008de4 <z_pend_curr+0x58>)
 8008db2:	23d0      	movs	r3, #208	; 0xd0
 8008db4:	f002 ffe1 	bl	800bd7a <assert_print>
 8008db8:	480b      	ldr	r0, [pc, #44]	; (8008de8 <z_pend_curr+0x5c>)
 8008dba:	4621      	mov	r1, r4
 8008dbc:	f002 ffdd 	bl	800bd7a <assert_print>
 8008dc0:	4806      	ldr	r0, [pc, #24]	; (8008ddc <z_pend_curr+0x50>)
 8008dc2:	21d0      	movs	r1, #208	; 0xd0
 8008dc4:	f002 ffd2 	bl	800bd6c <assert_post_action>
 8008dc8:	4628      	mov	r0, r5
}
 8008dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dce:	f7fb bf89 	b.w	8004ce4 <arch_swap>
 8008dd2:	bf00      	nop
 8008dd4:	20000c9c 	.word	0x20000c9c
 8008dd8:	20000cd4 	.word	0x20000cd4
 8008ddc:	08012877 	.word	0x08012877
 8008de0:	080128d1 	.word	0x080128d1
 8008de4:	0800e198 	.word	0x0800e198
 8008de8:	080128e8 	.word	0x080128e8

08008dec <z_set_prio>:
{
 8008dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df0:	4604      	mov	r4, r0
 8008df2:	460e      	mov	r6, r1
	__asm__ volatile(
 8008df4:	f04f 0310 	mov.w	r3, #16
 8008df8:	f3ef 8911 	mrs	r9, BASEPRI
 8008dfc:	f383 8812 	msr	BASEPRI_MAX, r3
 8008e00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008e04:	4837      	ldr	r0, [pc, #220]	; (8008ee4 <z_set_prio+0xf8>)
 8008e06:	f7fe fead 	bl	8007b64 <z_spin_lock_valid>
 8008e0a:	4607      	mov	r7, r0
 8008e0c:	b960      	cbnz	r0, 8008e28 <z_set_prio+0x3c>
 8008e0e:	4a36      	ldr	r2, [pc, #216]	; (8008ee8 <z_set_prio+0xfc>)
 8008e10:	4936      	ldr	r1, [pc, #216]	; (8008eec <z_set_prio+0x100>)
 8008e12:	4837      	ldr	r0, [pc, #220]	; (8008ef0 <z_set_prio+0x104>)
 8008e14:	238e      	movs	r3, #142	; 0x8e
 8008e16:	f002 ffb0 	bl	800bd7a <assert_print>
 8008e1a:	4932      	ldr	r1, [pc, #200]	; (8008ee4 <z_set_prio+0xf8>)
 8008e1c:	4835      	ldr	r0, [pc, #212]	; (8008ef4 <z_set_prio+0x108>)
 8008e1e:	f002 ffac 	bl	800bd7a <assert_print>
 8008e22:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008e24:	4830      	ldr	r0, [pc, #192]	; (8008ee8 <z_set_prio+0xfc>)
 8008e26:	e021      	b.n	8008e6c <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
 8008e28:	482e      	ldr	r0, [pc, #184]	; (8008ee4 <z_set_prio+0xf8>)
 8008e2a:	f7fe feb9 	bl	8007ba0 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
 8008e2e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8008e30:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 8008e32:	b276      	sxtb	r6, r6
 8008e34:	d11c      	bne.n	8008e70 <z_set_prio+0x84>
	return node->next != NULL;
 8008e36:	69a5      	ldr	r5, [r4, #24]
 8008e38:	b9d5      	cbnz	r5, 8008e70 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
 8008e3a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8008ef8 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e42:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8008e44:	4621      	mov	r1, r4
 8008e46:	4640      	mov	r0, r8
 8008e48:	f7ff fe02 	bl	8008a50 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8008e4c:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
 8008e4e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8008e50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e54:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8008e56:	4b29      	ldr	r3, [pc, #164]	; (8008efc <z_set_prio+0x110>)
 8008e58:	429c      	cmp	r4, r3
 8008e5a:	d11b      	bne.n	8008e94 <z_set_prio+0xa8>
 8008e5c:	4928      	ldr	r1, [pc, #160]	; (8008f00 <z_set_prio+0x114>)
 8008e5e:	4824      	ldr	r0, [pc, #144]	; (8008ef0 <z_set_prio+0x104>)
 8008e60:	4a28      	ldr	r2, [pc, #160]	; (8008f04 <z_set_prio+0x118>)
 8008e62:	23ba      	movs	r3, #186	; 0xba
 8008e64:	f002 ff89 	bl	800bd7a <assert_print>
 8008e68:	4826      	ldr	r0, [pc, #152]	; (8008f04 <z_set_prio+0x118>)
 8008e6a:	21ba      	movs	r1, #186	; 0xba
 8008e6c:	f002 ff7e 	bl	800bd6c <assert_post_action>
			thread->base.prio = prio;
 8008e70:	73a6      	strb	r6, [r4, #14]
 8008e72:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008e74:	481b      	ldr	r0, [pc, #108]	; (8008ee4 <z_set_prio+0xf8>)
 8008e76:	f7fe fe83 	bl	8007b80 <z_spin_unlock_valid>
 8008e7a:	bb58      	cbnz	r0, 8008ed4 <z_set_prio+0xe8>
 8008e7c:	4a1a      	ldr	r2, [pc, #104]	; (8008ee8 <z_set_prio+0xfc>)
 8008e7e:	4922      	ldr	r1, [pc, #136]	; (8008f08 <z_set_prio+0x11c>)
 8008e80:	481b      	ldr	r0, [pc, #108]	; (8008ef0 <z_set_prio+0x104>)
 8008e82:	23b9      	movs	r3, #185	; 0xb9
 8008e84:	f002 ff79 	bl	800bd7a <assert_print>
 8008e88:	4916      	ldr	r1, [pc, #88]	; (8008ee4 <z_set_prio+0xf8>)
 8008e8a:	4820      	ldr	r0, [pc, #128]	; (8008f0c <z_set_prio+0x120>)
 8008e8c:	f002 ff75 	bl	800bd7a <assert_print>
 8008e90:	21b9      	movs	r1, #185	; 0xb9
 8008e92:	e7c7      	b.n	8008e24 <z_set_prio+0x38>
	return list->head == list;
 8008e94:	4643      	mov	r3, r8
 8008e96:	f853 291c 	ldr.w	r2, [r3], #-28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008e9a:	4542      	cmp	r2, r8
 8008e9c:	bf18      	it	ne
 8008e9e:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
 8008ea0:	6a1a      	ldr	r2, [r3, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008ea2:	b925      	cbnz	r5, 8008eae <z_set_prio+0xc2>
	node->prev = tail;
 8008ea4:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
 8008ea8:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8008eaa:	621c      	str	r4, [r3, #32]
}
 8008eac:	e00a      	b.n	8008ec4 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
 8008eae:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
 8008eb2:	428e      	cmp	r6, r1
 8008eb4:	d00a      	beq.n	8008ecc <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008eb6:	42b1      	cmp	r1, r6
 8008eb8:	dd08      	ble.n	8008ecc <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
 8008eba:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
 8008ebc:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
 8008ec0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8008ec2:	606c      	str	r4, [r5, #4]
			update_cache(1);
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	f7ff fae9 	bl	800849c <update_cache>
 8008eca:	e7d3      	b.n	8008e74 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
 8008ecc:	42aa      	cmp	r2, r5
 8008ece:	d0e9      	beq.n	8008ea4 <z_set_prio+0xb8>
 8008ed0:	682d      	ldr	r5, [r5, #0]
 8008ed2:	e7e6      	b.n	8008ea2 <z_set_prio+0xb6>
	__asm__ volatile(
 8008ed4:	f389 8811 	msr	BASEPRI, r9
 8008ed8:	f3bf 8f6f 	isb	sy
}
 8008edc:	4638      	mov	r0, r7
 8008ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000ce0 	.word	0x20000ce0
 8008ee8:	08012877 	.word	0x08012877
 8008eec:	080128a4 	.word	0x080128a4
 8008ef0:	0800e198 	.word	0x0800e198
 8008ef4:	080128b9 	.word	0x080128b9
 8008ef8:	20000cb8 	.word	0x20000cb8
 8008efc:	200008f8 	.word	0x200008f8
 8008f00:	08013f48 	.word	0x08013f48
 8008f04:	08013eff 	.word	0x08013eff
 8008f08:	080128d1 	.word	0x080128d1
 8008f0c:	080128e8 	.word	0x080128e8

08008f10 <z_impl_k_thread_suspend>:
{
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8008f14:	3018      	adds	r0, #24
 8008f16:	f000 fd5b 	bl	80099d0 <z_abort_timeout>
	__asm__ volatile(
 8008f1a:	f04f 0310 	mov.w	r3, #16
 8008f1e:	f3ef 8611 	mrs	r6, BASEPRI
 8008f22:	f383 8812 	msr	BASEPRI_MAX, r3
 8008f26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008f2a:	4824      	ldr	r0, [pc, #144]	; (8008fbc <z_impl_k_thread_suspend+0xac>)
 8008f2c:	f7fe fe1a 	bl	8007b64 <z_spin_lock_valid>
 8008f30:	b968      	cbnz	r0, 8008f4e <z_impl_k_thread_suspend+0x3e>
 8008f32:	4a23      	ldr	r2, [pc, #140]	; (8008fc0 <z_impl_k_thread_suspend+0xb0>)
 8008f34:	4923      	ldr	r1, [pc, #140]	; (8008fc4 <z_impl_k_thread_suspend+0xb4>)
 8008f36:	4824      	ldr	r0, [pc, #144]	; (8008fc8 <z_impl_k_thread_suspend+0xb8>)
 8008f38:	238e      	movs	r3, #142	; 0x8e
 8008f3a:	f002 ff1e 	bl	800bd7a <assert_print>
 8008f3e:	491f      	ldr	r1, [pc, #124]	; (8008fbc <z_impl_k_thread_suspend+0xac>)
 8008f40:	4822      	ldr	r0, [pc, #136]	; (8008fcc <z_impl_k_thread_suspend+0xbc>)
 8008f42:	f002 ff1a 	bl	800bd7a <assert_print>
 8008f46:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008f48:	481d      	ldr	r0, [pc, #116]	; (8008fc0 <z_impl_k_thread_suspend+0xb0>)
 8008f4a:	f002 ff0f 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8008f4e:	481b      	ldr	r0, [pc, #108]	; (8008fbc <z_impl_k_thread_suspend+0xac>)
 8008f50:	f7fe fe26 	bl	8007ba0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
 8008f54:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 8008f58:	7b63      	ldrb	r3, [r4, #13]
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	da06      	bge.n	8008f6c <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
 8008f62:	481b      	ldr	r0, [pc, #108]	; (8008fd0 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008f64:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8008f66:	4621      	mov	r1, r4
 8008f68:	f7ff fd72 	bl	8008a50 <z_priq_dumb_remove>
		update_cache(thread == _current);
 8008f6c:	4d19      	ldr	r5, [pc, #100]	; (8008fd4 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8008f6e:	7b63      	ldrb	r3, [r4, #13]
 8008f70:	68a8      	ldr	r0, [r5, #8]
 8008f72:	f043 0310 	orr.w	r3, r3, #16
 8008f76:	7363      	strb	r3, [r4, #13]
 8008f78:	1b03      	subs	r3, r0, r4
 8008f7a:	4258      	negs	r0, r3
 8008f7c:	4158      	adcs	r0, r3
 8008f7e:	f7ff fa8d 	bl	800849c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008f82:	480e      	ldr	r0, [pc, #56]	; (8008fbc <z_impl_k_thread_suspend+0xac>)
 8008f84:	f7fe fdfc 	bl	8007b80 <z_spin_unlock_valid>
 8008f88:	b958      	cbnz	r0, 8008fa2 <z_impl_k_thread_suspend+0x92>
 8008f8a:	4a0d      	ldr	r2, [pc, #52]	; (8008fc0 <z_impl_k_thread_suspend+0xb0>)
 8008f8c:	4912      	ldr	r1, [pc, #72]	; (8008fd8 <z_impl_k_thread_suspend+0xc8>)
 8008f8e:	480e      	ldr	r0, [pc, #56]	; (8008fc8 <z_impl_k_thread_suspend+0xb8>)
 8008f90:	23b9      	movs	r3, #185	; 0xb9
 8008f92:	f002 fef2 	bl	800bd7a <assert_print>
 8008f96:	4909      	ldr	r1, [pc, #36]	; (8008fbc <z_impl_k_thread_suspend+0xac>)
 8008f98:	4810      	ldr	r0, [pc, #64]	; (8008fdc <z_impl_k_thread_suspend+0xcc>)
 8008f9a:	f002 feee 	bl	800bd7a <assert_print>
 8008f9e:	21b9      	movs	r1, #185	; 0xb9
 8008fa0:	e7d2      	b.n	8008f48 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
 8008fa2:	f386 8811 	msr	BASEPRI, r6
 8008fa6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8008faa:	68ab      	ldr	r3, [r5, #8]
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	d103      	bne.n	8008fb8 <z_impl_k_thread_suspend+0xa8>
}
 8008fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8008fb4:	f003 be04 	b.w	800cbc0 <z_reschedule_unlocked>
}
 8008fb8:	bd70      	pop	{r4, r5, r6, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000ce0 	.word	0x20000ce0
 8008fc0:	08012877 	.word	0x08012877
 8008fc4:	080128a4 	.word	0x080128a4
 8008fc8:	0800e198 	.word	0x0800e198
 8008fcc:	080128b9 	.word	0x080128b9
 8008fd0:	20000cb8 	.word	0x20000cb8
 8008fd4:	20000c9c 	.word	0x20000c9c
 8008fd8:	080128d1 	.word	0x080128d1
 8008fdc:	080128e8 	.word	0x080128e8

08008fe0 <unpend_thread_no_timeout>:
{
 8008fe0:	b510      	push	{r4, lr}
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
 8008fe6:	b958      	cbnz	r0, 8009000 <unpend_thread_no_timeout+0x20>
 8008fe8:	490a      	ldr	r1, [pc, #40]	; (8009014 <unpend_thread_no_timeout+0x34>)
 8008fea:	480b      	ldr	r0, [pc, #44]	; (8009018 <unpend_thread_no_timeout+0x38>)
 8008fec:	4a0b      	ldr	r2, [pc, #44]	; (800901c <unpend_thread_no_timeout+0x3c>)
 8008fee:	f44f 7335 	mov.w	r3, #724	; 0x2d4
 8008ff2:	f002 fec2 	bl	800bd7a <assert_print>
 8008ff6:	4809      	ldr	r0, [pc, #36]	; (800901c <unpend_thread_no_timeout+0x3c>)
 8008ff8:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8008ffc:	f002 feb6 	bl	800bd6c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8009000:	4621      	mov	r1, r4
 8009002:	f7ff fd25 	bl	8008a50 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8009006:	7b63      	ldrb	r3, [r4, #13]
 8009008:	f023 0302 	bic.w	r3, r3, #2
 800900c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800900e:	2300      	movs	r3, #0
 8009010:	60a3      	str	r3, [r4, #8]
}
 8009012:	bd10      	pop	{r4, pc}
 8009014:	08013ff6 	.word	0x08013ff6
 8009018:	0800e198 	.word	0x0800e198
 800901c:	08013eff 	.word	0x08013eff

08009020 <z_thread_timeout>:
{
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	4604      	mov	r4, r0
	__asm__ volatile(
 8009024:	f04f 0310 	mov.w	r3, #16
 8009028:	f3ef 8611 	mrs	r6, BASEPRI
 800902c:	f383 8812 	msr	BASEPRI_MAX, r3
 8009030:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8009034:	481f      	ldr	r0, [pc, #124]	; (80090b4 <z_thread_timeout+0x94>)
 8009036:	f7fe fd95 	bl	8007b64 <z_spin_lock_valid>
 800903a:	b968      	cbnz	r0, 8009058 <z_thread_timeout+0x38>
 800903c:	4a1e      	ldr	r2, [pc, #120]	; (80090b8 <z_thread_timeout+0x98>)
 800903e:	491f      	ldr	r1, [pc, #124]	; (80090bc <z_thread_timeout+0x9c>)
 8009040:	481f      	ldr	r0, [pc, #124]	; (80090c0 <z_thread_timeout+0xa0>)
 8009042:	238e      	movs	r3, #142	; 0x8e
 8009044:	f002 fe99 	bl	800bd7a <assert_print>
 8009048:	491a      	ldr	r1, [pc, #104]	; (80090b4 <z_thread_timeout+0x94>)
 800904a:	481e      	ldr	r0, [pc, #120]	; (80090c4 <z_thread_timeout+0xa4>)
 800904c:	f002 fe95 	bl	800bd7a <assert_print>
 8009050:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009052:	4819      	ldr	r0, [pc, #100]	; (80090b8 <z_thread_timeout+0x98>)
 8009054:	f002 fe8a 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8009058:	4816      	ldr	r0, [pc, #88]	; (80090b4 <z_thread_timeout+0x94>)
 800905a:	f7fe fda1 	bl	8007ba0 <z_spin_lock_set_owner>
		if (!killed) {
 800905e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8009062:	f013 0f28 	tst.w	r3, #40	; 0x28
 8009066:	d110      	bne.n	800908a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
 8009068:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 800906c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
 8009070:	b113      	cbz	r3, 8009078 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
 8009072:	4628      	mov	r0, r5
 8009074:	f7ff ffb4 	bl	8008fe0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8009078:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800907c:	f023 0314 	bic.w	r3, r3, #20
 8009080:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 8009084:	4628      	mov	r0, r5
 8009086:	f7ff fa3d 	bl	8008504 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800908a:	480a      	ldr	r0, [pc, #40]	; (80090b4 <z_thread_timeout+0x94>)
 800908c:	f7fe fd78 	bl	8007b80 <z_spin_unlock_valid>
 8009090:	b958      	cbnz	r0, 80090aa <z_thread_timeout+0x8a>
 8009092:	4a09      	ldr	r2, [pc, #36]	; (80090b8 <z_thread_timeout+0x98>)
 8009094:	490c      	ldr	r1, [pc, #48]	; (80090c8 <z_thread_timeout+0xa8>)
 8009096:	480a      	ldr	r0, [pc, #40]	; (80090c0 <z_thread_timeout+0xa0>)
 8009098:	23b9      	movs	r3, #185	; 0xb9
 800909a:	f002 fe6e 	bl	800bd7a <assert_print>
 800909e:	4905      	ldr	r1, [pc, #20]	; (80090b4 <z_thread_timeout+0x94>)
 80090a0:	480a      	ldr	r0, [pc, #40]	; (80090cc <z_thread_timeout+0xac>)
 80090a2:	f002 fe6a 	bl	800bd7a <assert_print>
 80090a6:	21b9      	movs	r1, #185	; 0xb9
 80090a8:	e7d3      	b.n	8009052 <z_thread_timeout+0x32>
	__asm__ volatile(
 80090aa:	f386 8811 	msr	BASEPRI, r6
 80090ae:	f3bf 8f6f 	isb	sy
}
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	20000ce0 	.word	0x20000ce0
 80090b8:	08012877 	.word	0x08012877
 80090bc:	080128a4 	.word	0x080128a4
 80090c0:	0800e198 	.word	0x0800e198
 80090c4:	080128b9 	.word	0x080128b9
 80090c8:	080128d1 	.word	0x080128d1
 80090cc:	080128e8 	.word	0x080128e8

080090d0 <z_unpend1_no_timeout>:
{
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	4605      	mov	r5, r0
	__asm__ volatile(
 80090d4:	f04f 0310 	mov.w	r3, #16
 80090d8:	f3ef 8611 	mrs	r6, BASEPRI
 80090dc:	f383 8812 	msr	BASEPRI_MAX, r3
 80090e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80090e4:	4819      	ldr	r0, [pc, #100]	; (800914c <z_unpend1_no_timeout+0x7c>)
 80090e6:	f7fe fd3d 	bl	8007b64 <z_spin_lock_valid>
 80090ea:	b968      	cbnz	r0, 8009108 <z_unpend1_no_timeout+0x38>
 80090ec:	4a18      	ldr	r2, [pc, #96]	; (8009150 <z_unpend1_no_timeout+0x80>)
 80090ee:	4919      	ldr	r1, [pc, #100]	; (8009154 <z_unpend1_no_timeout+0x84>)
 80090f0:	4819      	ldr	r0, [pc, #100]	; (8009158 <z_unpend1_no_timeout+0x88>)
 80090f2:	238e      	movs	r3, #142	; 0x8e
 80090f4:	f002 fe41 	bl	800bd7a <assert_print>
 80090f8:	4914      	ldr	r1, [pc, #80]	; (800914c <z_unpend1_no_timeout+0x7c>)
 80090fa:	4818      	ldr	r0, [pc, #96]	; (800915c <z_unpend1_no_timeout+0x8c>)
 80090fc:	f002 fe3d 	bl	800bd7a <assert_print>
 8009100:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009102:	4813      	ldr	r0, [pc, #76]	; (8009150 <z_unpend1_no_timeout+0x80>)
 8009104:	f002 fe32 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8009108:	4810      	ldr	r0, [pc, #64]	; (800914c <z_unpend1_no_timeout+0x7c>)
 800910a:	f7fe fd49 	bl	8007ba0 <z_spin_lock_set_owner>
	return list->head == list;
 800910e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009110:	42a5      	cmp	r5, r4
 8009112:	d013      	beq.n	800913c <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
 8009114:	b114      	cbz	r4, 800911c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
 8009116:	4620      	mov	r0, r4
 8009118:	f7ff ff62 	bl	8008fe0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800911c:	480b      	ldr	r0, [pc, #44]	; (800914c <z_unpend1_no_timeout+0x7c>)
 800911e:	f7fe fd2f 	bl	8007b80 <z_spin_unlock_valid>
 8009122:	b968      	cbnz	r0, 8009140 <z_unpend1_no_timeout+0x70>
 8009124:	4a0a      	ldr	r2, [pc, #40]	; (8009150 <z_unpend1_no_timeout+0x80>)
 8009126:	490e      	ldr	r1, [pc, #56]	; (8009160 <z_unpend1_no_timeout+0x90>)
 8009128:	480b      	ldr	r0, [pc, #44]	; (8009158 <z_unpend1_no_timeout+0x88>)
 800912a:	23b9      	movs	r3, #185	; 0xb9
 800912c:	f002 fe25 	bl	800bd7a <assert_print>
 8009130:	4906      	ldr	r1, [pc, #24]	; (800914c <z_unpend1_no_timeout+0x7c>)
 8009132:	480c      	ldr	r0, [pc, #48]	; (8009164 <z_unpend1_no_timeout+0x94>)
 8009134:	f002 fe21 	bl	800bd7a <assert_print>
 8009138:	21b9      	movs	r1, #185	; 0xb9
 800913a:	e7e2      	b.n	8009102 <z_unpend1_no_timeout+0x32>
 800913c:	2400      	movs	r4, #0
 800913e:	e7ed      	b.n	800911c <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
 8009140:	f386 8811 	msr	BASEPRI, r6
 8009144:	f3bf 8f6f 	isb	sy
}
 8009148:	4620      	mov	r0, r4
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	20000ce0 	.word	0x20000ce0
 8009150:	08012877 	.word	0x08012877
 8009154:	080128a4 	.word	0x080128a4
 8009158:	0800e198 	.word	0x0800e198
 800915c:	080128b9 	.word	0x080128b9
 8009160:	080128d1 	.word	0x080128d1
 8009164:	080128e8 	.word	0x080128e8

08009168 <z_unpend_first_thread>:
{
 8009168:	b570      	push	{r4, r5, r6, lr}
 800916a:	4605      	mov	r5, r0
	__asm__ volatile(
 800916c:	f04f 0310 	mov.w	r3, #16
 8009170:	f3ef 8611 	mrs	r6, BASEPRI
 8009174:	f383 8812 	msr	BASEPRI_MAX, r3
 8009178:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800917c:	481b      	ldr	r0, [pc, #108]	; (80091ec <z_unpend_first_thread+0x84>)
 800917e:	f7fe fcf1 	bl	8007b64 <z_spin_lock_valid>
 8009182:	b968      	cbnz	r0, 80091a0 <z_unpend_first_thread+0x38>
 8009184:	4a1a      	ldr	r2, [pc, #104]	; (80091f0 <z_unpend_first_thread+0x88>)
 8009186:	491b      	ldr	r1, [pc, #108]	; (80091f4 <z_unpend_first_thread+0x8c>)
 8009188:	481b      	ldr	r0, [pc, #108]	; (80091f8 <z_unpend_first_thread+0x90>)
 800918a:	238e      	movs	r3, #142	; 0x8e
 800918c:	f002 fdf5 	bl	800bd7a <assert_print>
 8009190:	4916      	ldr	r1, [pc, #88]	; (80091ec <z_unpend_first_thread+0x84>)
 8009192:	481a      	ldr	r0, [pc, #104]	; (80091fc <z_unpend_first_thread+0x94>)
 8009194:	f002 fdf1 	bl	800bd7a <assert_print>
 8009198:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800919a:	4815      	ldr	r0, [pc, #84]	; (80091f0 <z_unpend_first_thread+0x88>)
 800919c:	f002 fde6 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 80091a0:	4812      	ldr	r0, [pc, #72]	; (80091ec <z_unpend_first_thread+0x84>)
 80091a2:	f7fe fcfd 	bl	8007ba0 <z_spin_lock_set_owner>
	return list->head == list;
 80091a6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80091a8:	42a5      	cmp	r5, r4
 80091aa:	d017      	beq.n	80091dc <z_unpend_first_thread+0x74>
		if (thread != NULL) {
 80091ac:	b134      	cbz	r4, 80091bc <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
 80091ae:	4620      	mov	r0, r4
 80091b0:	f7ff ff16 	bl	8008fe0 <unpend_thread_no_timeout>
 80091b4:	f104 0018 	add.w	r0, r4, #24
 80091b8:	f000 fc0a 	bl	80099d0 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80091bc:	480b      	ldr	r0, [pc, #44]	; (80091ec <z_unpend_first_thread+0x84>)
 80091be:	f7fe fcdf 	bl	8007b80 <z_spin_unlock_valid>
 80091c2:	b968      	cbnz	r0, 80091e0 <z_unpend_first_thread+0x78>
 80091c4:	4a0a      	ldr	r2, [pc, #40]	; (80091f0 <z_unpend_first_thread+0x88>)
 80091c6:	490e      	ldr	r1, [pc, #56]	; (8009200 <z_unpend_first_thread+0x98>)
 80091c8:	480b      	ldr	r0, [pc, #44]	; (80091f8 <z_unpend_first_thread+0x90>)
 80091ca:	23b9      	movs	r3, #185	; 0xb9
 80091cc:	f002 fdd5 	bl	800bd7a <assert_print>
 80091d0:	4906      	ldr	r1, [pc, #24]	; (80091ec <z_unpend_first_thread+0x84>)
 80091d2:	480c      	ldr	r0, [pc, #48]	; (8009204 <z_unpend_first_thread+0x9c>)
 80091d4:	f002 fdd1 	bl	800bd7a <assert_print>
 80091d8:	21b9      	movs	r1, #185	; 0xb9
 80091da:	e7de      	b.n	800919a <z_unpend_first_thread+0x32>
 80091dc:	2400      	movs	r4, #0
 80091de:	e7ed      	b.n	80091bc <z_unpend_first_thread+0x54>
	__asm__ volatile(
 80091e0:	f386 8811 	msr	BASEPRI, r6
 80091e4:	f3bf 8f6f 	isb	sy
}
 80091e8:	4620      	mov	r0, r4
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	20000ce0 	.word	0x20000ce0
 80091f0:	08012877 	.word	0x08012877
 80091f4:	080128a4 	.word	0x080128a4
 80091f8:	0800e198 	.word	0x0800e198
 80091fc:	080128b9 	.word	0x080128b9
 8009200:	080128d1 	.word	0x080128d1
 8009204:	080128e8 	.word	0x080128e8

08009208 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8009208:	4b04      	ldr	r3, [pc, #16]	; (800921c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800920a:	2100      	movs	r1, #0
 800920c:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 8009210:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8009214:	4608      	mov	r0, r1
 8009216:	f7ff b9bf 	b.w	8008598 <k_sched_time_slice_set>
 800921a:	bf00      	nop
 800921c:	20000c9c 	.word	0x20000c9c

08009220 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
 8009226:	b16b      	cbz	r3, 8009244 <z_impl_k_yield+0x24>
 8009228:	493c      	ldr	r1, [pc, #240]	; (800931c <z_impl_k_yield+0xfc>)
 800922a:	4a3d      	ldr	r2, [pc, #244]	; (8009320 <z_impl_k_yield+0x100>)
 800922c:	483d      	ldr	r0, [pc, #244]	; (8009324 <z_impl_k_yield+0x104>)
 800922e:	f240 535d 	movw	r3, #1373	; 0x55d
 8009232:	f002 fda2 	bl	800bd7a <assert_print>
 8009236:	483c      	ldr	r0, [pc, #240]	; (8009328 <z_impl_k_yield+0x108>)
 8009238:	f002 fd9f 	bl	800bd7a <assert_print>
 800923c:	f240 515d 	movw	r1, #1373	; 0x55d
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8009240:	4837      	ldr	r0, [pc, #220]	; (8009320 <z_impl_k_yield+0x100>)
 8009242:	e017      	b.n	8009274 <z_impl_k_yield+0x54>
	__asm__ volatile(
 8009244:	f04f 0310 	mov.w	r3, #16
 8009248:	f3ef 8611 	mrs	r6, BASEPRI
 800924c:	f383 8812 	msr	BASEPRI_MAX, r3
 8009250:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8009254:	4835      	ldr	r0, [pc, #212]	; (800932c <z_impl_k_yield+0x10c>)
 8009256:	f7fe fc85 	bl	8007b64 <z_spin_lock_valid>
 800925a:	b968      	cbnz	r0, 8009278 <z_impl_k_yield+0x58>
 800925c:	4a34      	ldr	r2, [pc, #208]	; (8009330 <z_impl_k_yield+0x110>)
 800925e:	4935      	ldr	r1, [pc, #212]	; (8009334 <z_impl_k_yield+0x114>)
 8009260:	4830      	ldr	r0, [pc, #192]	; (8009324 <z_impl_k_yield+0x104>)
 8009262:	238e      	movs	r3, #142	; 0x8e
 8009264:	f002 fd89 	bl	800bd7a <assert_print>
 8009268:	4930      	ldr	r1, [pc, #192]	; (800932c <z_impl_k_yield+0x10c>)
 800926a:	4833      	ldr	r0, [pc, #204]	; (8009338 <z_impl_k_yield+0x118>)
 800926c:	f002 fd85 	bl	800bd7a <assert_print>
 8009270:	218e      	movs	r1, #142	; 0x8e
 8009272:	482f      	ldr	r0, [pc, #188]	; (8009330 <z_impl_k_yield+0x110>)
 8009274:	f002 fd7a 	bl	800bd6c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 8009278:	4c30      	ldr	r4, [pc, #192]	; (800933c <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
 800927a:	482c      	ldr	r0, [pc, #176]	; (800932c <z_impl_k_yield+0x10c>)
 800927c:	f7fe fc90 	bl	8007ba0 <z_spin_lock_set_owner>
 8009280:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8009282:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8009284:	f104 051c 	add.w	r5, r4, #28
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8009288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800928c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800928e:	4628      	mov	r0, r5
 8009290:	f7ff fbde 	bl	8008a50 <z_priq_dumb_remove>
	}
	queue_thread(_current);
 8009294:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8009296:	7b5a      	ldrb	r2, [r3, #13]
 8009298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800929c:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 800929e:	4a28      	ldr	r2, [pc, #160]	; (8009340 <z_impl_k_yield+0x120>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d107      	bne.n	80092b4 <z_impl_k_yield+0x94>
 80092a4:	4927      	ldr	r1, [pc, #156]	; (8009344 <z_impl_k_yield+0x124>)
 80092a6:	4a1e      	ldr	r2, [pc, #120]	; (8009320 <z_impl_k_yield+0x100>)
 80092a8:	481e      	ldr	r0, [pc, #120]	; (8009324 <z_impl_k_yield+0x104>)
 80092aa:	23ba      	movs	r3, #186	; 0xba
 80092ac:	f002 fd65 	bl	800bd7a <assert_print>
 80092b0:	21ba      	movs	r1, #186	; 0xba
 80092b2:	e7c5      	b.n	8009240 <z_impl_k_yield+0x20>
	return list->head == list;
 80092b4:	69e2      	ldr	r2, [r4, #28]
	return (node == list->tail) ? NULL : node->next;
 80092b6:	6a21      	ldr	r1, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80092b8:	42aa      	cmp	r2, r5
 80092ba:	bf08      	it	eq
 80092bc:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80092be:	b922      	cbnz	r2, 80092ca <z_impl_k_yield+0xaa>
	node->prev = tail;
 80092c0:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
 80092c4:	600b      	str	r3, [r1, #0]
	list->tail = node;
 80092c6:	6223      	str	r3, [r4, #32]
}
 80092c8:	e00c      	b.n	80092e4 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
 80092ca:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 80092ce:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 80092d2:	42b8      	cmp	r0, r7
 80092d4:	d019      	beq.n	800930a <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80092d6:	4287      	cmp	r7, r0
 80092d8:	dd17      	ble.n	800930a <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
 80092da:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80092dc:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 80092e0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 80092e2:	6053      	str	r3, [r2, #4]
	update_cache(1);
 80092e4:	2001      	movs	r0, #1
 80092e6:	f7ff f8d9 	bl	800849c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80092ea:	4810      	ldr	r0, [pc, #64]	; (800932c <z_impl_k_yield+0x10c>)
 80092ec:	f7fe fc48 	bl	8007b80 <z_spin_unlock_valid>
 80092f0:	b978      	cbnz	r0, 8009312 <z_impl_k_yield+0xf2>
 80092f2:	4a0f      	ldr	r2, [pc, #60]	; (8009330 <z_impl_k_yield+0x110>)
 80092f4:	4914      	ldr	r1, [pc, #80]	; (8009348 <z_impl_k_yield+0x128>)
 80092f6:	480b      	ldr	r0, [pc, #44]	; (8009324 <z_impl_k_yield+0x104>)
 80092f8:	23d0      	movs	r3, #208	; 0xd0
 80092fa:	f002 fd3e 	bl	800bd7a <assert_print>
 80092fe:	490b      	ldr	r1, [pc, #44]	; (800932c <z_impl_k_yield+0x10c>)
 8009300:	4812      	ldr	r0, [pc, #72]	; (800934c <z_impl_k_yield+0x12c>)
 8009302:	f002 fd3a 	bl	800bd7a <assert_print>
 8009306:	21d0      	movs	r1, #208	; 0xd0
 8009308:	e7b3      	b.n	8009272 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
 800930a:	428a      	cmp	r2, r1
 800930c:	d0d8      	beq.n	80092c0 <z_impl_k_yield+0xa0>
 800930e:	6812      	ldr	r2, [r2, #0]
 8009310:	e7d5      	b.n	80092be <z_impl_k_yield+0x9e>
 8009312:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
 8009314:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009318:	f7fb bce4 	b.w	8004ce4 <arch_swap>
 800931c:	08013cbd 	.word	0x08013cbd
 8009320:	08013eff 	.word	0x08013eff
 8009324:	0800e198 	.word	0x0800e198
 8009328:	08013e55 	.word	0x08013e55
 800932c:	20000ce0 	.word	0x20000ce0
 8009330:	08012877 	.word	0x08012877
 8009334:	080128a4 	.word	0x080128a4
 8009338:	080128b9 	.word	0x080128b9
 800933c:	20000c9c 	.word	0x20000c9c
 8009340:	200008f8 	.word	0x200008f8
 8009344:	08013f48 	.word	0x08013f48
 8009348:	080128d1 	.word	0x080128d1
 800934c:	080128e8 	.word	0x080128e8

08009350 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
 8009350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009354:	4605      	mov	r5, r0
 8009356:	460e      	mov	r6, r1
 8009358:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
 800935c:	b16b      	cbz	r3, 800937a <z_tick_sleep+0x2a>
 800935e:	493f      	ldr	r1, [pc, #252]	; (800945c <z_tick_sleep+0x10c>)
 8009360:	4a3f      	ldr	r2, [pc, #252]	; (8009460 <z_tick_sleep+0x110>)
 8009362:	4840      	ldr	r0, [pc, #256]	; (8009464 <z_tick_sleep+0x114>)
 8009364:	f240 5379 	movw	r3, #1401	; 0x579
 8009368:	f002 fd07 	bl	800bd7a <assert_print>
 800936c:	483e      	ldr	r0, [pc, #248]	; (8009468 <z_tick_sleep+0x118>)
 800936e:	f002 fd04 	bl	800bd7a <assert_print>
 8009372:	f240 5179 	movw	r1, #1401	; 0x579
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
 8009376:	483a      	ldr	r0, [pc, #232]	; (8009460 <z_tick_sleep+0x110>)
 8009378:	e025      	b.n	80093c6 <z_tick_sleep+0x76>
	if (ticks == 0) {
 800937a:	ea50 0301 	orrs.w	r3, r0, r1
 800937e:	d103      	bne.n	8009388 <z_tick_sleep+0x38>
	z_impl_k_yield();
 8009380:	f7ff ff4e 	bl	8009220 <z_impl_k_yield>
		return 0;
 8009384:	2000      	movs	r0, #0
 8009386:	e066      	b.n	8009456 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
 8009388:	1c82      	adds	r2, r0, #2
 800938a:	f171 33ff 	sbcs.w	r3, r1, #4294967295
 800938e:	db1c      	blt.n	80093ca <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8009390:	f003 fc31 	bl	800cbf6 <sys_clock_tick_get_32>
 8009394:	1944      	adds	r4, r0, r5
 8009396:	f04f 0310 	mov.w	r3, #16
 800939a:	f3ef 8811 	mrs	r8, BASEPRI
 800939e:	f383 8812 	msr	BASEPRI_MAX, r3
 80093a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80093a6:	4831      	ldr	r0, [pc, #196]	; (800946c <z_tick_sleep+0x11c>)
 80093a8:	f7fe fbdc 	bl	8007b64 <z_spin_lock_valid>
 80093ac:	b988      	cbnz	r0, 80093d2 <z_tick_sleep+0x82>
 80093ae:	4a30      	ldr	r2, [pc, #192]	; (8009470 <z_tick_sleep+0x120>)
 80093b0:	4930      	ldr	r1, [pc, #192]	; (8009474 <z_tick_sleep+0x124>)
 80093b2:	482c      	ldr	r0, [pc, #176]	; (8009464 <z_tick_sleep+0x114>)
 80093b4:	238e      	movs	r3, #142	; 0x8e
 80093b6:	f002 fce0 	bl	800bd7a <assert_print>
 80093ba:	492c      	ldr	r1, [pc, #176]	; (800946c <z_tick_sleep+0x11c>)
 80093bc:	482e      	ldr	r0, [pc, #184]	; (8009478 <z_tick_sleep+0x128>)
 80093be:	f002 fcdc 	bl	800bd7a <assert_print>
 80093c2:	218e      	movs	r1, #142	; 0x8e
 80093c4:	482a      	ldr	r0, [pc, #168]	; (8009470 <z_tick_sleep+0x120>)
 80093c6:	f002 fcd1 	bl	800bd6c <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 80093ca:	f06f 0401 	mvn.w	r4, #1
 80093ce:	1a24      	subs	r4, r4, r0
 80093d0:	e7e1      	b.n	8009396 <z_tick_sleep+0x46>
	pending_current = _current;
 80093d2:	4f2a      	ldr	r7, [pc, #168]	; (800947c <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
 80093d4:	4825      	ldr	r0, [pc, #148]	; (800946c <z_tick_sleep+0x11c>)
 80093d6:	f7fe fbe3 	bl	8007ba0 <z_spin_lock_set_owner>
 80093da:	4b29      	ldr	r3, [pc, #164]	; (8009480 <z_tick_sleep+0x130>)
 80093dc:	68b8      	ldr	r0, [r7, #8]
 80093de:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 80093e0:	f7ff fc1e 	bl	8008c20 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80093e4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80093e6:	4927      	ldr	r1, [pc, #156]	; (8009484 <z_tick_sleep+0x134>)
 80093e8:	462a      	mov	r2, r5
 80093ea:	4633      	mov	r3, r6
 80093ec:	3018      	adds	r0, #24
 80093ee:	f000 fa29 	bl	8009844 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 80093f2:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80093f4:	481d      	ldr	r0, [pc, #116]	; (800946c <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80093f6:	7b53      	ldrb	r3, [r2, #13]
 80093f8:	f043 0310 	orr.w	r3, r3, #16
 80093fc:	7353      	strb	r3, [r2, #13]
 80093fe:	f7fe fbbf 	bl	8007b80 <z_spin_unlock_valid>
 8009402:	b958      	cbnz	r0, 800941c <z_tick_sleep+0xcc>
 8009404:	4a1a      	ldr	r2, [pc, #104]	; (8009470 <z_tick_sleep+0x120>)
 8009406:	4920      	ldr	r1, [pc, #128]	; (8009488 <z_tick_sleep+0x138>)
 8009408:	4816      	ldr	r0, [pc, #88]	; (8009464 <z_tick_sleep+0x114>)
 800940a:	23d0      	movs	r3, #208	; 0xd0
 800940c:	f002 fcb5 	bl	800bd7a <assert_print>
 8009410:	4916      	ldr	r1, [pc, #88]	; (800946c <z_tick_sleep+0x11c>)
 8009412:	481e      	ldr	r0, [pc, #120]	; (800948c <z_tick_sleep+0x13c>)
 8009414:	f002 fcb1 	bl	800bd7a <assert_print>
 8009418:	21d0      	movs	r1, #208	; 0xd0
 800941a:	e7d3      	b.n	80093c4 <z_tick_sleep+0x74>
 800941c:	4640      	mov	r0, r8
 800941e:	f7fb fc61 	bl	8004ce4 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
 8009422:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
 8009424:	7b5b      	ldrb	r3, [r3, #13]
 8009426:	06db      	lsls	r3, r3, #27
 8009428:	d50c      	bpl.n	8009444 <z_tick_sleep+0xf4>
 800942a:	4919      	ldr	r1, [pc, #100]	; (8009490 <z_tick_sleep+0x140>)
 800942c:	4a0c      	ldr	r2, [pc, #48]	; (8009460 <z_tick_sleep+0x110>)
 800942e:	480d      	ldr	r0, [pc, #52]	; (8009464 <z_tick_sleep+0x114>)
 8009430:	f240 539a 	movw	r3, #1434	; 0x59a
 8009434:	f002 fca1 	bl	800bd7a <assert_print>
 8009438:	480b      	ldr	r0, [pc, #44]	; (8009468 <z_tick_sleep+0x118>)
 800943a:	f002 fc9e 	bl	800bd7a <assert_print>
 800943e:	f240 519a 	movw	r1, #1434	; 0x59a
 8009442:	e798      	b.n	8009376 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8009444:	f003 fbd7 	bl	800cbf6 <sys_clock_tick_get_32>
 8009448:	1a20      	subs	r0, r4, r0
 800944a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800944e:	2801      	cmp	r0, #1
 8009450:	f173 0300 	sbcs.w	r3, r3, #0
 8009454:	db96      	blt.n	8009384 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
 8009456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800945a:	bf00      	nop
 800945c:	08013cbd 	.word	0x08013cbd
 8009460:	08013eff 	.word	0x08013eff
 8009464:	0800e198 	.word	0x0800e198
 8009468:	08013e55 	.word	0x08013e55
 800946c:	20000ce0 	.word	0x20000ce0
 8009470:	08012877 	.word	0x08012877
 8009474:	080128a4 	.word	0x080128a4
 8009478:	080128b9 	.word	0x080128b9
 800947c:	20000c9c 	.word	0x20000c9c
 8009480:	20000cd4 	.word	0x20000cd4
 8009484:	08009021 	.word	0x08009021
 8009488:	080128d1 	.word	0x080128d1
 800948c:	080128e8 	.word	0x080128e8
 8009490:	0801400d 	.word	0x0801400d

08009494 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
 8009494:	b508      	push	{r3, lr}
 8009496:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
 800949a:	b173      	cbz	r3, 80094ba <z_impl_k_sleep+0x26>
 800949c:	4911      	ldr	r1, [pc, #68]	; (80094e4 <z_impl_k_sleep+0x50>)
 800949e:	4a12      	ldr	r2, [pc, #72]	; (80094e8 <z_impl_k_sleep+0x54>)
 80094a0:	4812      	ldr	r0, [pc, #72]	; (80094ec <z_impl_k_sleep+0x58>)
 80094a2:	f240 53a9 	movw	r3, #1449	; 0x5a9
 80094a6:	f002 fc68 	bl	800bd7a <assert_print>
 80094aa:	4811      	ldr	r0, [pc, #68]	; (80094f0 <z_impl_k_sleep+0x5c>)
 80094ac:	f002 fc65 	bl	800bd7a <assert_print>
 80094b0:	480d      	ldr	r0, [pc, #52]	; (80094e8 <z_impl_k_sleep+0x54>)
 80094b2:	f240 51a9 	movw	r1, #1449	; 0x5a9
 80094b6:	f002 fc59 	bl	800bd6c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80094ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 80094be:	bf08      	it	eq
 80094c0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
 80094c4:	d106      	bne.n	80094d4 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
 80094c6:	4b0b      	ldr	r3, [pc, #44]	; (80094f4 <z_impl_k_sleep+0x60>)
 80094c8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 80094ca:	f7ff fd21 	bl	8008f10 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 80094ce:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 80094d2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 80094d4:	f7ff ff3c 	bl	8009350 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 80094d8:	220a      	movs	r2, #10
 80094da:	2300      	movs	r3, #0
 80094dc:	17c1      	asrs	r1, r0, #31
 80094de:	f7f7 fb43 	bl	8000b68 <__aeabi_uldivmod>
	return ret;
 80094e2:	e7f6      	b.n	80094d2 <z_impl_k_sleep+0x3e>
 80094e4:	08013cbd 	.word	0x08013cbd
 80094e8:	08013eff 	.word	0x08013eff
 80094ec:	0800e198 	.word	0x0800e198
 80094f0:	08013e55 	.word	0x08013e55
 80094f4:	20000c9c 	.word	0x20000c9c

080094f8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 80094f8:	4b01      	ldr	r3, [pc, #4]	; (8009500 <z_impl_z_current_get+0x8>)
 80094fa:	6898      	ldr	r0, [r3, #8]
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	20000c9c 	.word	0x20000c9c

08009504 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8009504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009508:	4604      	mov	r4, r0
 800950a:	f04f 0310 	mov.w	r3, #16
 800950e:	f3ef 8611 	mrs	r6, BASEPRI
 8009512:	f383 8812 	msr	BASEPRI_MAX, r3
 8009516:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800951a:	4851      	ldr	r0, [pc, #324]	; (8009660 <z_thread_abort+0x15c>)
 800951c:	f7fe fb22 	bl	8007b64 <z_spin_lock_valid>
 8009520:	b968      	cbnz	r0, 800953e <z_thread_abort+0x3a>
 8009522:	4a50      	ldr	r2, [pc, #320]	; (8009664 <z_thread_abort+0x160>)
 8009524:	4950      	ldr	r1, [pc, #320]	; (8009668 <z_thread_abort+0x164>)
 8009526:	4851      	ldr	r0, [pc, #324]	; (800966c <z_thread_abort+0x168>)
 8009528:	238e      	movs	r3, #142	; 0x8e
 800952a:	f002 fc26 	bl	800bd7a <assert_print>
 800952e:	494c      	ldr	r1, [pc, #304]	; (8009660 <z_thread_abort+0x15c>)
 8009530:	484f      	ldr	r0, [pc, #316]	; (8009670 <z_thread_abort+0x16c>)
 8009532:	f002 fc22 	bl	800bd7a <assert_print>
 8009536:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009538:	484a      	ldr	r0, [pc, #296]	; (8009664 <z_thread_abort+0x160>)
 800953a:	f002 fc17 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 800953e:	4848      	ldr	r0, [pc, #288]	; (8009660 <z_thread_abort+0x15c>)
 8009540:	f7fe fb2e 	bl	8007ba0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 8009544:	7b23      	ldrb	r3, [r4, #12]
 8009546:	07d9      	lsls	r1, r3, #31
 8009548:	d522      	bpl.n	8009590 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800954a:	4845      	ldr	r0, [pc, #276]	; (8009660 <z_thread_abort+0x15c>)
 800954c:	f7fe fb18 	bl	8007b80 <z_spin_unlock_valid>
 8009550:	b958      	cbnz	r0, 800956a <z_thread_abort+0x66>
 8009552:	4a44      	ldr	r2, [pc, #272]	; (8009664 <z_thread_abort+0x160>)
 8009554:	4947      	ldr	r1, [pc, #284]	; (8009674 <z_thread_abort+0x170>)
 8009556:	4845      	ldr	r0, [pc, #276]	; (800966c <z_thread_abort+0x168>)
 8009558:	23b9      	movs	r3, #185	; 0xb9
 800955a:	f002 fc0e 	bl	800bd7a <assert_print>
 800955e:	4940      	ldr	r1, [pc, #256]	; (8009660 <z_thread_abort+0x15c>)
 8009560:	4845      	ldr	r0, [pc, #276]	; (8009678 <z_thread_abort+0x174>)
 8009562:	f002 fc0a 	bl	800bd7a <assert_print>
 8009566:	21b9      	movs	r1, #185	; 0xb9
 8009568:	e7e6      	b.n	8009538 <z_thread_abort+0x34>
	__asm__ volatile(
 800956a:	f386 8811 	msr	BASEPRI, r6
 800956e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
 8009572:	4a42      	ldr	r2, [pc, #264]	; (800967c <z_thread_abort+0x178>)
 8009574:	4942      	ldr	r1, [pc, #264]	; (8009680 <z_thread_abort+0x17c>)
 8009576:	483d      	ldr	r0, [pc, #244]	; (800966c <z_thread_abort+0x168>)
 8009578:	f240 63b5 	movw	r3, #1717	; 0x6b5
 800957c:	f002 fbfd 	bl	800bd7a <assert_print>
 8009580:	4621      	mov	r1, r4
 8009582:	4840      	ldr	r0, [pc, #256]	; (8009684 <z_thread_abort+0x180>)
 8009584:	f002 fbf9 	bl	800bd7a <assert_print>
 8009588:	f240 61b5 	movw	r1, #1717	; 0x6b5
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
 800958c:	483b      	ldr	r0, [pc, #236]	; (800967c <z_thread_abort+0x178>)
 800958e:	e7d4      	b.n	800953a <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8009590:	7b63      	ldrb	r3, [r4, #13]
 8009592:	071a      	lsls	r2, r3, #28
 8009594:	d50a      	bpl.n	80095ac <z_thread_abort+0xa8>
 8009596:	4832      	ldr	r0, [pc, #200]	; (8009660 <z_thread_abort+0x15c>)
 8009598:	f7fe faf2 	bl	8007b80 <z_spin_unlock_valid>
 800959c:	2800      	cmp	r0, #0
 800959e:	d0d8      	beq.n	8009552 <z_thread_abort+0x4e>
 80095a0:	f386 8811 	msr	BASEPRI, r6
 80095a4:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
 80095a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80095ac:	f023 0220 	bic.w	r2, r3, #32
 80095b0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 80095b4:	09d2      	lsrs	r2, r2, #7
 80095b6:	d12c      	bne.n	8009612 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80095b8:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
 80095ba:	68a3      	ldr	r3, [r4, #8]
 80095bc:	b113      	cbz	r3, 80095c4 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
 80095be:	4620      	mov	r0, r4
 80095c0:	f7ff fd0e 	bl	8008fe0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 80095c4:	f104 0018 	add.w	r0, r4, #24
 80095c8:	f000 fa02 	bl	80099d0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80095cc:	f104 0758 	add.w	r7, r4, #88	; 0x58
 80095d0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 80095d4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80095d6:	42bd      	cmp	r5, r7
 80095d8:	d000      	beq.n	80095dc <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80095da:	bb25      	cbnz	r5, 8009626 <z_thread_abort+0x122>
		update_cache(1);
 80095dc:	2001      	movs	r0, #1
 80095de:	f7fe ff5d 	bl	800849c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 80095e2:	4b29      	ldr	r3, [pc, #164]	; (8009688 <z_thread_abort+0x184>)
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	42a3      	cmp	r3, r4
 80095e8:	d1d5      	bne.n	8009596 <z_thread_abort+0x92>
 80095ea:	f3ef 8305 	mrs	r3, IPSR
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1d1      	bne.n	8009596 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80095f2:	481b      	ldr	r0, [pc, #108]	; (8009660 <z_thread_abort+0x15c>)
 80095f4:	f7fe fac4 	bl	8007b80 <z_spin_unlock_valid>
 80095f8:	bb10      	cbnz	r0, 8009640 <z_thread_abort+0x13c>
 80095fa:	4a1a      	ldr	r2, [pc, #104]	; (8009664 <z_thread_abort+0x160>)
 80095fc:	491d      	ldr	r1, [pc, #116]	; (8009674 <z_thread_abort+0x170>)
 80095fe:	481b      	ldr	r0, [pc, #108]	; (800966c <z_thread_abort+0x168>)
 8009600:	23d0      	movs	r3, #208	; 0xd0
 8009602:	f002 fbba 	bl	800bd7a <assert_print>
 8009606:	4916      	ldr	r1, [pc, #88]	; (8009660 <z_thread_abort+0x15c>)
 8009608:	481b      	ldr	r0, [pc, #108]	; (8009678 <z_thread_abort+0x174>)
 800960a:	f002 fbb6 	bl	800bd7a <assert_print>
 800960e:	21d0      	movs	r1, #208	; 0xd0
 8009610:	e792      	b.n	8009538 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8009612:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8009616:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
 800961a:	481c      	ldr	r0, [pc, #112]	; (800968c <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800961c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800961e:	4621      	mov	r1, r4
 8009620:	f7ff fa16 	bl	8008a50 <z_priq_dumb_remove>
}
 8009624:	e7c9      	b.n	80095ba <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
 8009626:	4628      	mov	r0, r5
 8009628:	f7ff fcda 	bl	8008fe0 <unpend_thread_no_timeout>
 800962c:	f105 0018 	add.w	r0, r5, #24
 8009630:	f000 f9ce 	bl	80099d0 <z_abort_timeout>
 8009634:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 8009638:	4628      	mov	r0, r5
 800963a:	f7fe ff63 	bl	8008504 <ready_thread>
 800963e:	e7c9      	b.n	80095d4 <z_thread_abort+0xd0>
 8009640:	4630      	mov	r0, r6
 8009642:	f7fb fb4f 	bl	8004ce4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
 8009646:	490e      	ldr	r1, [pc, #56]	; (8009680 <z_thread_abort+0x17c>)
 8009648:	4a0c      	ldr	r2, [pc, #48]	; (800967c <z_thread_abort+0x178>)
 800964a:	4808      	ldr	r0, [pc, #32]	; (800966c <z_thread_abort+0x168>)
 800964c:	f240 63e4 	movw	r3, #1764	; 0x6e4
 8009650:	f002 fb93 	bl	800bd7a <assert_print>
 8009654:	480e      	ldr	r0, [pc, #56]	; (8009690 <z_thread_abort+0x18c>)
 8009656:	f002 fb90 	bl	800bd7a <assert_print>
 800965a:	f240 61e4 	movw	r1, #1764	; 0x6e4
 800965e:	e795      	b.n	800958c <z_thread_abort+0x88>
 8009660:	20000ce0 	.word	0x20000ce0
 8009664:	08012877 	.word	0x08012877
 8009668:	080128a4 	.word	0x080128a4
 800966c:	0800e198 	.word	0x0800e198
 8009670:	080128b9 	.word	0x080128b9
 8009674:	080128d1 	.word	0x080128d1
 8009678:	080128e8 	.word	0x080128e8
 800967c:	08013eff 	.word	0x08013eff
 8009680:	0800e34d 	.word	0x0800e34d
 8009684:	0801404d 	.word	0x0801404d
 8009688:	20000c9c 	.word	0x20000c9c
 800968c:	20000cb8 	.word	0x20000cb8
 8009690:	0801406c 	.word	0x0801406c

08009694 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
 8009694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009698:	4606      	mov	r6, r0
 800969a:	4688      	mov	r8, r1
 800969c:	4617      	mov	r7, r2
	__asm__ volatile(
 800969e:	f04f 0310 	mov.w	r3, #16
 80096a2:	f3ef 8911 	mrs	r9, BASEPRI
 80096a6:	f383 8812 	msr	BASEPRI_MAX, r3
 80096aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80096ae:	4821      	ldr	r0, [pc, #132]	; (8009734 <z_sched_wake+0xa0>)
 80096b0:	f7fe fa58 	bl	8007b64 <z_spin_lock_valid>
 80096b4:	4605      	mov	r5, r0
 80096b6:	b968      	cbnz	r0, 80096d4 <z_sched_wake+0x40>
 80096b8:	4a1f      	ldr	r2, [pc, #124]	; (8009738 <z_sched_wake+0xa4>)
 80096ba:	4920      	ldr	r1, [pc, #128]	; (800973c <z_sched_wake+0xa8>)
 80096bc:	4820      	ldr	r0, [pc, #128]	; (8009740 <z_sched_wake+0xac>)
 80096be:	238e      	movs	r3, #142	; 0x8e
 80096c0:	f002 fb5b 	bl	800bd7a <assert_print>
 80096c4:	491b      	ldr	r1, [pc, #108]	; (8009734 <z_sched_wake+0xa0>)
 80096c6:	481f      	ldr	r0, [pc, #124]	; (8009744 <z_sched_wake+0xb0>)
 80096c8:	f002 fb57 	bl	800bd7a <assert_print>
 80096cc:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80096ce:	481a      	ldr	r0, [pc, #104]	; (8009738 <z_sched_wake+0xa4>)
 80096d0:	f002 fb4c 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 80096d4:	4817      	ldr	r0, [pc, #92]	; (8009734 <z_sched_wake+0xa0>)
 80096d6:	f7fe fa63 	bl	8007ba0 <z_spin_lock_set_owner>
	return list->head == list;
 80096da:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80096dc:	42a6      	cmp	r6, r4
 80096de:	d01d      	beq.n	800971c <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
 80096e0:	b1f4      	cbz	r4, 8009720 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
 80096e2:	4620      	mov	r0, r4
 80096e4:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 80096e8:	6167      	str	r7, [r4, #20]
 80096ea:	f7ff fc79 	bl	8008fe0 <unpend_thread_no_timeout>
 80096ee:	f104 0018 	add.w	r0, r4, #24
 80096f2:	f000 f96d 	bl	80099d0 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
 80096f6:	4620      	mov	r0, r4
 80096f8:	f7fe ff04 	bl	8008504 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80096fc:	480d      	ldr	r0, [pc, #52]	; (8009734 <z_sched_wake+0xa0>)
 80096fe:	f7fe fa3f 	bl	8007b80 <z_spin_unlock_valid>
 8009702:	b978      	cbnz	r0, 8009724 <z_sched_wake+0x90>
 8009704:	4a0c      	ldr	r2, [pc, #48]	; (8009738 <z_sched_wake+0xa4>)
 8009706:	4910      	ldr	r1, [pc, #64]	; (8009748 <z_sched_wake+0xb4>)
 8009708:	480d      	ldr	r0, [pc, #52]	; (8009740 <z_sched_wake+0xac>)
 800970a:	23b9      	movs	r3, #185	; 0xb9
 800970c:	f002 fb35 	bl	800bd7a <assert_print>
 8009710:	4908      	ldr	r1, [pc, #32]	; (8009734 <z_sched_wake+0xa0>)
 8009712:	480e      	ldr	r0, [pc, #56]	; (800974c <z_sched_wake+0xb8>)
 8009714:	f002 fb31 	bl	800bd7a <assert_print>
 8009718:	21b9      	movs	r1, #185	; 0xb9
 800971a:	e7d8      	b.n	80096ce <z_sched_wake+0x3a>
	bool ret = false;
 800971c:	2500      	movs	r5, #0
 800971e:	e7ed      	b.n	80096fc <z_sched_wake+0x68>
 8009720:	4625      	mov	r5, r4
 8009722:	e7eb      	b.n	80096fc <z_sched_wake+0x68>
	__asm__ volatile(
 8009724:	f389 8811 	msr	BASEPRI, r9
 8009728:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
 800972c:	4628      	mov	r0, r5
 800972e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009732:	bf00      	nop
 8009734:	20000ce0 	.word	0x20000ce0
 8009738:	08012877 	.word	0x08012877
 800973c:	080128a4 	.word	0x080128a4
 8009740:	0800e198 	.word	0x0800e198
 8009744:	080128b9 	.word	0x080128b9
 8009748:	080128d1 	.word	0x080128d1
 800974c:	080128e8 	.word	0x080128e8

08009750 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8009750:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8009752:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 8009756:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8009758:	e9cd 6700 	strd	r6, r7, [sp]
 800975c:	f7ff fb16 	bl	8008d8c <z_pend_curr>

	if (data != NULL) {
 8009760:	b11c      	cbz	r4, 800976a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 8009762:	4b03      	ldr	r3, [pc, #12]	; (8009770 <z_sched_wait+0x20>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 800976a:	b002      	add	sp, #8
 800976c:	bdd0      	pop	{r4, r6, r7, pc}
 800976e:	bf00      	nop
 8009770:	20000c9c 	.word	0x20000c9c

08009774 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8009774:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8009776:	4806      	ldr	r0, [pc, #24]	; (8009790 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8009778:	4a06      	ldr	r2, [pc, #24]	; (8009794 <z_data_copy+0x20>)
 800977a:	4907      	ldr	r1, [pc, #28]	; (8009798 <z_data_copy+0x24>)
 800977c:	1a12      	subs	r2, r2, r0
 800977e:	f003 f9c6 	bl	800cb0e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8009782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8009786:	4a05      	ldr	r2, [pc, #20]	; (800979c <z_data_copy+0x28>)
 8009788:	4905      	ldr	r1, [pc, #20]	; (80097a0 <z_data_copy+0x2c>)
 800978a:	4806      	ldr	r0, [pc, #24]	; (80097a4 <z_data_copy+0x30>)
 800978c:	f003 b9bf 	b.w	800cb0e <z_early_memcpy>
 8009790:	20000000 	.word	0x20000000
 8009794:	200003bc 	.word	0x200003bc
 8009798:	08014524 	.word	0x08014524
 800979c:	00000000 	.word	0x00000000
 80097a0:	08014524 	.word	0x08014524
 80097a4:	20000000 	.word	0x20000000

080097a8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 80097a8:	4b03      	ldr	r3, [pc, #12]	; (80097b8 <elapsed+0x10>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	b90b      	cbnz	r3, 80097b2 <elapsed+0xa>
 80097ae:	f7fd bd9d 	b.w	80072ec <sys_clock_elapsed>
}
 80097b2:	2000      	movs	r0, #0
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	20000ce4 	.word	0x20000ce4

080097bc <next_timeout>:

static int32_t next_timeout(void)
{
 80097bc:	b510      	push	{r4, lr}
	return list->head == list;
 80097be:	4b11      	ldr	r3, [pc, #68]	; (8009804 <next_timeout+0x48>)
 80097c0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80097c2:	429c      	cmp	r4, r3
 80097c4:	d10a      	bne.n	80097dc <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 80097c6:	f7ff ffef 	bl	80097a8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 80097ca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 80097ce:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <next_timeout+0x4c>)
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	b113      	cbz	r3, 80097da <next_timeout+0x1e>
 80097d4:	4298      	cmp	r0, r3
 80097d6:	bfa8      	it	ge
 80097d8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 80097da:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 80097dc:	f7ff ffe4 	bl	80097a8 <elapsed>
	if ((to == NULL) ||
 80097e0:	2c00      	cmp	r4, #0
 80097e2:	d0f2      	beq.n	80097ca <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 80097e4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80097e8:	1a1b      	subs	r3, r3, r0
 80097ea:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 80097ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097f2:	f172 0100 	sbcs.w	r1, r2, #0
 80097f6:	dae8      	bge.n	80097ca <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 80097f8:	2a00      	cmp	r2, #0
 80097fa:	bfac      	ite	ge
 80097fc:	4618      	movge	r0, r3
 80097fe:	2000      	movlt	r0, #0
 8009800:	e7e5      	b.n	80097ce <next_timeout+0x12>
 8009802:	bf00      	nop
 8009804:	20000118 	.word	0x20000118
 8009808:	20000c9c 	.word	0x20000c9c

0800980c <remove_timeout>:
{
 800980c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800980e:	b170      	cbz	r0, 800982e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8009810:	4b0b      	ldr	r3, [pc, #44]	; (8009840 <remove_timeout+0x34>)
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	4298      	cmp	r0, r3
 8009816:	d00a      	beq.n	800982e <remove_timeout+0x22>
 8009818:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 800981a:	b143      	cbz	r3, 800982e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 800981c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8009820:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8009824:	1912      	adds	r2, r2, r4
 8009826:	eb41 0105 	adc.w	r1, r1, r5
 800982a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
 800982e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8009832:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8009834:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8009836:	2300      	movs	r3, #0
	node->prev = NULL;
 8009838:	e9c0 3300 	strd	r3, r3, [r0]
}
 800983c:	bd30      	pop	{r4, r5, pc}
 800983e:	bf00      	nop
 8009840:	20000118 	.word	0x20000118

08009844 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8009844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009848:	bf08      	it	eq
 800984a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 800984e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009852:	4604      	mov	r4, r0
 8009854:	4692      	mov	sl, r2
 8009856:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8009858:	f000 809e 	beq.w	8009998 <z_add_timeout+0x154>
	return node->next != NULL;
 800985c:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
 800985e:	b166      	cbz	r6, 800987a <z_add_timeout+0x36>
 8009860:	494e      	ldr	r1, [pc, #312]	; (800999c <z_add_timeout+0x158>)
 8009862:	4a4f      	ldr	r2, [pc, #316]	; (80099a0 <z_add_timeout+0x15c>)
 8009864:	484f      	ldr	r0, [pc, #316]	; (80099a4 <z_add_timeout+0x160>)
 8009866:	2363      	movs	r3, #99	; 0x63
 8009868:	f002 fa87 	bl	800bd7a <assert_print>
 800986c:	484e      	ldr	r0, [pc, #312]	; (80099a8 <z_add_timeout+0x164>)
 800986e:	f002 fa84 	bl	800bd7a <assert_print>
 8009872:	484b      	ldr	r0, [pc, #300]	; (80099a0 <z_add_timeout+0x15c>)
 8009874:	2163      	movs	r1, #99	; 0x63
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8009876:	f002 fa79 	bl	800bd6c <assert_post_action>
	to->fn = fn;
 800987a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 800987c:	f04f 0310 	mov.w	r3, #16
 8009880:	f3ef 8711 	mrs	r7, BASEPRI
 8009884:	f383 8812 	msr	BASEPRI_MAX, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	4847      	ldr	r0, [pc, #284]	; (80099ac <z_add_timeout+0x168>)
 800988e:	f7fe f969 	bl	8007b64 <z_spin_lock_valid>
 8009892:	b960      	cbnz	r0, 80098ae <z_add_timeout+0x6a>
 8009894:	4a46      	ldr	r2, [pc, #280]	; (80099b0 <z_add_timeout+0x16c>)
 8009896:	4947      	ldr	r1, [pc, #284]	; (80099b4 <z_add_timeout+0x170>)
 8009898:	4842      	ldr	r0, [pc, #264]	; (80099a4 <z_add_timeout+0x160>)
 800989a:	238e      	movs	r3, #142	; 0x8e
 800989c:	f002 fa6d 	bl	800bd7a <assert_print>
 80098a0:	4942      	ldr	r1, [pc, #264]	; (80099ac <z_add_timeout+0x168>)
 80098a2:	4845      	ldr	r0, [pc, #276]	; (80099b8 <z_add_timeout+0x174>)
 80098a4:	f002 fa69 	bl	800bd7a <assert_print>
 80098a8:	218e      	movs	r1, #142	; 0x8e
 80098aa:	4841      	ldr	r0, [pc, #260]	; (80099b0 <z_add_timeout+0x16c>)
 80098ac:	e7e3      	b.n	8009876 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
 80098ae:	483f      	ldr	r0, [pc, #252]	; (80099ac <z_add_timeout+0x168>)
 80098b0:	f7fe f976 	bl	8007ba0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80098b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80098b8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
 80098bc:	da23      	bge.n	8009906 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80098be:	493f      	ldr	r1, [pc, #252]	; (80099bc <z_add_timeout+0x178>)
 80098c0:	e9d1 2000 	ldrd	r2, r0, [r1]
 80098c4:	f06f 0301 	mvn.w	r3, #1
 80098c8:	1a9b      	subs	r3, r3, r2
 80098ca:	f04f 32ff 	mov.w	r2, #4294967295
 80098ce:	eb62 0000 	sbc.w	r0, r2, r0
 80098d2:	ebb3 030a 	subs.w	r3, r3, sl
 80098d6:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 80098da:	2b01      	cmp	r3, #1
 80098dc:	f170 0200 	sbcs.w	r2, r0, #0
 80098e0:	da01      	bge.n	80098e6 <z_add_timeout+0xa2>
 80098e2:	2301      	movs	r3, #1
 80098e4:	4630      	mov	r0, r6
 80098e6:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
 80098ea:	4b35      	ldr	r3, [pc, #212]	; (80099c0 <z_add_timeout+0x17c>)
 80098ec:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
 80098ee:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80098f2:	429a      	cmp	r2, r3
 80098f4:	bf18      	it	ne
 80098f6:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 80098f8:	b986      	cbnz	r6, 800991c <z_add_timeout+0xd8>
	node->prev = tail;
 80098fa:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
 80098fe:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8009902:	605c      	str	r4, [r3, #4]
}
 8009904:	e01c      	b.n	8009940 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
 8009906:	f7ff ff4f 	bl	80097a8 <elapsed>
 800990a:	f11a 0801 	adds.w	r8, sl, #1
 800990e:	f145 0500 	adc.w	r5, r5, #0
 8009912:	eb18 0300 	adds.w	r3, r8, r0
 8009916:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 800991a:	e7e4      	b.n	80098e6 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
 800991c:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
 8009920:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
 8009924:	428a      	cmp	r2, r1
 8009926:	eb70 0e05 	sbcs.w	lr, r0, r5
 800992a:	da28      	bge.n	800997e <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
 800992c:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
 800992e:	6872      	ldr	r2, [r6, #4]
 8009930:	eb65 0500 	sbc.w	r5, r5, r0
 8009934:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
 8009938:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
 800993c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800993e:	6074      	str	r4, [r6, #4]
	return list->head == list;
 8009940:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009942:	429a      	cmp	r2, r3
 8009944:	d00b      	beq.n	800995e <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8009946:	4294      	cmp	r4, r2
 8009948:	d109      	bne.n	800995e <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800994a:	f7ff ff37 	bl	80097bc <next_timeout>

			if (next_time == 0 ||
 800994e:	b118      	cbz	r0, 8009958 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
 8009950:	4b1c      	ldr	r3, [pc, #112]	; (80099c4 <z_add_timeout+0x180>)
			if (next_time == 0 ||
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	4283      	cmp	r3, r0
 8009956:	d002      	beq.n	800995e <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
 8009958:	2100      	movs	r1, #0
 800995a:	f7fd fc25 	bl	80071a8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800995e:	4813      	ldr	r0, [pc, #76]	; (80099ac <z_add_timeout+0x168>)
 8009960:	f7fe f90e 	bl	8007b80 <z_spin_unlock_valid>
 8009964:	b9a0      	cbnz	r0, 8009990 <z_add_timeout+0x14c>
 8009966:	4a12      	ldr	r2, [pc, #72]	; (80099b0 <z_add_timeout+0x16c>)
 8009968:	4917      	ldr	r1, [pc, #92]	; (80099c8 <z_add_timeout+0x184>)
 800996a:	480e      	ldr	r0, [pc, #56]	; (80099a4 <z_add_timeout+0x160>)
 800996c:	23b9      	movs	r3, #185	; 0xb9
 800996e:	f002 fa04 	bl	800bd7a <assert_print>
 8009972:	490e      	ldr	r1, [pc, #56]	; (80099ac <z_add_timeout+0x168>)
 8009974:	4815      	ldr	r0, [pc, #84]	; (80099cc <z_add_timeout+0x188>)
 8009976:	f002 fa00 	bl	800bd7a <assert_print>
 800997a:	21b9      	movs	r1, #185	; 0xb9
 800997c:	e795      	b.n	80098aa <z_add_timeout+0x66>
			to->dticks -= t->dticks;
 800997e:	1a52      	subs	r2, r2, r1
 8009980:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
 8009984:	4566      	cmp	r6, ip
 8009986:	e9c4 2004 	strd	r2, r0, [r4, #16]
 800998a:	d0b6      	beq.n	80098fa <z_add_timeout+0xb6>
 800998c:	6836      	ldr	r6, [r6, #0]
 800998e:	e7b3      	b.n	80098f8 <z_add_timeout+0xb4>
	__asm__ volatile(
 8009990:	f387 8811 	msr	BASEPRI, r7
 8009994:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8009998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800999c:	080140b2 	.word	0x080140b2
 80099a0:	0801408e 	.word	0x0801408e
 80099a4:	0800e198 	.word	0x0800e198
 80099a8:	08013e55 	.word	0x08013e55
 80099ac:	20000ce8 	.word	0x20000ce8
 80099b0:	08012877 	.word	0x08012877
 80099b4:	080128a4 	.word	0x080128a4
 80099b8:	080128b9 	.word	0x080128b9
 80099bc:	200009f8 	.word	0x200009f8
 80099c0:	20000118 	.word	0x20000118
 80099c4:	20000c9c 	.word	0x20000c9c
 80099c8:	080128d1 	.word	0x080128d1
 80099cc:	080128e8 	.word	0x080128e8

080099d0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4604      	mov	r4, r0
	__asm__ volatile(
 80099d4:	f04f 0310 	mov.w	r3, #16
 80099d8:	f3ef 8511 	mrs	r5, BASEPRI
 80099dc:	f383 8812 	msr	BASEPRI_MAX, r3
 80099e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80099e4:	4819      	ldr	r0, [pc, #100]	; (8009a4c <z_abort_timeout+0x7c>)
 80099e6:	f7fe f8bd 	bl	8007b64 <z_spin_lock_valid>
 80099ea:	b968      	cbnz	r0, 8009a08 <z_abort_timeout+0x38>
 80099ec:	4a18      	ldr	r2, [pc, #96]	; (8009a50 <z_abort_timeout+0x80>)
 80099ee:	4919      	ldr	r1, [pc, #100]	; (8009a54 <z_abort_timeout+0x84>)
 80099f0:	4819      	ldr	r0, [pc, #100]	; (8009a58 <z_abort_timeout+0x88>)
 80099f2:	238e      	movs	r3, #142	; 0x8e
 80099f4:	f002 f9c1 	bl	800bd7a <assert_print>
 80099f8:	4914      	ldr	r1, [pc, #80]	; (8009a4c <z_abort_timeout+0x7c>)
 80099fa:	4818      	ldr	r0, [pc, #96]	; (8009a5c <z_abort_timeout+0x8c>)
 80099fc:	f002 f9bd 	bl	800bd7a <assert_print>
 8009a00:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009a02:	4813      	ldr	r0, [pc, #76]	; (8009a50 <z_abort_timeout+0x80>)
 8009a04:	f002 f9b2 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8009a08:	4810      	ldr	r0, [pc, #64]	; (8009a4c <z_abort_timeout+0x7c>)
 8009a0a:	f7fe f8c9 	bl	8007ba0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	b19b      	cbz	r3, 8009a3a <z_abort_timeout+0x6a>
			remove_timeout(to);
 8009a12:	4620      	mov	r0, r4
 8009a14:	f7ff fefa 	bl	800980c <remove_timeout>
			ret = 0;
 8009a18:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009a1a:	480c      	ldr	r0, [pc, #48]	; (8009a4c <z_abort_timeout+0x7c>)
 8009a1c:	f7fe f8b0 	bl	8007b80 <z_spin_unlock_valid>
 8009a20:	b970      	cbnz	r0, 8009a40 <z_abort_timeout+0x70>
 8009a22:	4a0b      	ldr	r2, [pc, #44]	; (8009a50 <z_abort_timeout+0x80>)
 8009a24:	490e      	ldr	r1, [pc, #56]	; (8009a60 <z_abort_timeout+0x90>)
 8009a26:	480c      	ldr	r0, [pc, #48]	; (8009a58 <z_abort_timeout+0x88>)
 8009a28:	23b9      	movs	r3, #185	; 0xb9
 8009a2a:	f002 f9a6 	bl	800bd7a <assert_print>
 8009a2e:	4907      	ldr	r1, [pc, #28]	; (8009a4c <z_abort_timeout+0x7c>)
 8009a30:	480c      	ldr	r0, [pc, #48]	; (8009a64 <z_abort_timeout+0x94>)
 8009a32:	f002 f9a2 	bl	800bd7a <assert_print>
 8009a36:	21b9      	movs	r1, #185	; 0xb9
 8009a38:	e7e3      	b.n	8009a02 <z_abort_timeout+0x32>
	int ret = -EINVAL;
 8009a3a:	f06f 0415 	mvn.w	r4, #21
 8009a3e:	e7ec      	b.n	8009a1a <z_abort_timeout+0x4a>
	__asm__ volatile(
 8009a40:	f385 8811 	msr	BASEPRI, r5
 8009a44:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
 8009a48:	4620      	mov	r0, r4
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	20000ce8 	.word	0x20000ce8
 8009a50:	08012877 	.word	0x08012877
 8009a54:	080128a4 	.word	0x080128a4
 8009a58:	0800e198 	.word	0x0800e198
 8009a5c:	080128b9 	.word	0x080128b9
 8009a60:	080128d1 	.word	0x080128d1
 8009a64:	080128e8 	.word	0x080128e8

08009a68 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	460d      	mov	r5, r1
	__asm__ volatile(
 8009a6e:	f04f 0310 	mov.w	r3, #16
 8009a72:	f3ef 8611 	mrs	r6, BASEPRI
 8009a76:	f383 8812 	msr	BASEPRI_MAX, r3
 8009a7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8009a7e:	481b      	ldr	r0, [pc, #108]	; (8009aec <z_set_timeout_expiry+0x84>)
 8009a80:	f7fe f870 	bl	8007b64 <z_spin_lock_valid>
 8009a84:	b968      	cbnz	r0, 8009aa2 <z_set_timeout_expiry+0x3a>
 8009a86:	4a1a      	ldr	r2, [pc, #104]	; (8009af0 <z_set_timeout_expiry+0x88>)
 8009a88:	491a      	ldr	r1, [pc, #104]	; (8009af4 <z_set_timeout_expiry+0x8c>)
 8009a8a:	481b      	ldr	r0, [pc, #108]	; (8009af8 <z_set_timeout_expiry+0x90>)
 8009a8c:	238e      	movs	r3, #142	; 0x8e
 8009a8e:	f002 f974 	bl	800bd7a <assert_print>
 8009a92:	4916      	ldr	r1, [pc, #88]	; (8009aec <z_set_timeout_expiry+0x84>)
 8009a94:	4819      	ldr	r0, [pc, #100]	; (8009afc <z_set_timeout_expiry+0x94>)
 8009a96:	f002 f970 	bl	800bd7a <assert_print>
 8009a9a:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009a9c:	4814      	ldr	r0, [pc, #80]	; (8009af0 <z_set_timeout_expiry+0x88>)
 8009a9e:	f002 f965 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8009aa2:	4812      	ldr	r0, [pc, #72]	; (8009aec <z_set_timeout_expiry+0x84>)
 8009aa4:	f7fe f87c 	bl	8007ba0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
 8009aa8:	f7ff fe88 	bl	80097bc <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
 8009aac:	2801      	cmp	r0, #1
 8009aae:	dd07      	ble.n	8009ac0 <z_set_timeout_expiry+0x58>
 8009ab0:	42a0      	cmp	r0, r4
 8009ab2:	db05      	blt.n	8009ac0 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8009ab4:	42a0      	cmp	r0, r4
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	bfa8      	it	ge
 8009aba:	4620      	movge	r0, r4
 8009abc:	f7fd fb74 	bl	80071a8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009ac0:	480a      	ldr	r0, [pc, #40]	; (8009aec <z_set_timeout_expiry+0x84>)
 8009ac2:	f7fe f85d 	bl	8007b80 <z_spin_unlock_valid>
 8009ac6:	b958      	cbnz	r0, 8009ae0 <z_set_timeout_expiry+0x78>
 8009ac8:	4a09      	ldr	r2, [pc, #36]	; (8009af0 <z_set_timeout_expiry+0x88>)
 8009aca:	490d      	ldr	r1, [pc, #52]	; (8009b00 <z_set_timeout_expiry+0x98>)
 8009acc:	480a      	ldr	r0, [pc, #40]	; (8009af8 <z_set_timeout_expiry+0x90>)
 8009ace:	23b9      	movs	r3, #185	; 0xb9
 8009ad0:	f002 f953 	bl	800bd7a <assert_print>
 8009ad4:	4905      	ldr	r1, [pc, #20]	; (8009aec <z_set_timeout_expiry+0x84>)
 8009ad6:	480b      	ldr	r0, [pc, #44]	; (8009b04 <z_set_timeout_expiry+0x9c>)
 8009ad8:	f002 f94f 	bl	800bd7a <assert_print>
 8009adc:	21b9      	movs	r1, #185	; 0xb9
 8009ade:	e7dd      	b.n	8009a9c <z_set_timeout_expiry+0x34>
	__asm__ volatile(
 8009ae0:	f386 8811 	msr	BASEPRI, r6
 8009ae4:	f3bf 8f6f 	isb	sy
		}
	}
}
 8009ae8:	bd70      	pop	{r4, r5, r6, pc}
 8009aea:	bf00      	nop
 8009aec:	20000ce8 	.word	0x20000ce8
 8009af0:	08012877 	.word	0x08012877
 8009af4:	080128a4 	.word	0x080128a4
 8009af8:	0800e198 	.word	0x0800e198
 8009afc:	080128b9 	.word	0x080128b9
 8009b00:	080128d1 	.word	0x080128d1
 8009b04:	080128e8 	.word	0x080128e8

08009b08 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
 8009b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b0c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8009b0e:	f7ff f811 	bl	8008b34 <z_time_slice>
	__asm__ volatile(
 8009b12:	f04f 0310 	mov.w	r3, #16
 8009b16:	f3ef 8711 	mrs	r7, BASEPRI
 8009b1a:	f383 8812 	msr	BASEPRI_MAX, r3
 8009b1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8009b22:	483f      	ldr	r0, [pc, #252]	; (8009c20 <sys_clock_announce+0x118>)
 8009b24:	f7fe f81e 	bl	8007b64 <z_spin_lock_valid>
 8009b28:	b968      	cbnz	r0, 8009b46 <sys_clock_announce+0x3e>
 8009b2a:	4a3e      	ldr	r2, [pc, #248]	; (8009c24 <sys_clock_announce+0x11c>)
 8009b2c:	493e      	ldr	r1, [pc, #248]	; (8009c28 <sys_clock_announce+0x120>)
 8009b2e:	483f      	ldr	r0, [pc, #252]	; (8009c2c <sys_clock_announce+0x124>)
 8009b30:	238e      	movs	r3, #142	; 0x8e
 8009b32:	f002 f922 	bl	800bd7a <assert_print>
 8009b36:	493a      	ldr	r1, [pc, #232]	; (8009c20 <sys_clock_announce+0x118>)
 8009b38:	483d      	ldr	r0, [pc, #244]	; (8009c30 <sys_clock_announce+0x128>)
 8009b3a:	f002 f91e 	bl	800bd7a <assert_print>
 8009b3e:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009b40:	4838      	ldr	r0, [pc, #224]	; (8009c24 <sys_clock_announce+0x11c>)
 8009b42:	f002 f913 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8009b46:	4836      	ldr	r0, [pc, #216]	; (8009c20 <sys_clock_announce+0x118>)
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8009b48:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8009c34 <sys_clock_announce+0x12c>
	return list->head == list;
 8009b4c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8009c38 <sys_clock_announce+0x130>
 8009b50:	f7fe f826 	bl	8007ba0 <z_spin_lock_set_owner>
 8009b54:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8009b58:	4a38      	ldr	r2, [pc, #224]	; (8009c3c <sys_clock_announce+0x134>)
	announce_remaining = ticks;
 8009b5a:	f8c8 4000 	str.w	r4, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009b5e:	454d      	cmp	r5, r9
		curr_tick += dt;
 8009b60:	e9d2 3c00 	ldrd	r3, ip, [r2]
 8009b64:	ea4f 71e4 	mov.w	r1, r4, asr #31
 8009b68:	d00b      	beq.n	8009b82 <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8009b6a:	b155      	cbz	r5, 8009b82 <sys_clock_announce+0x7a>
 8009b6c:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
 8009b70:	42b4      	cmp	r4, r6
 8009b72:	eb71 0e00 	sbcs.w	lr, r1, r0
 8009b76:	da1b      	bge.n	8009bb0 <sys_clock_announce+0xa8>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8009b78:	1b36      	subs	r6, r6, r4
 8009b7a:	eb60 0001 	sbc.w	r0, r0, r1
 8009b7e:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
 8009b82:	18e3      	adds	r3, r4, r3
 8009b84:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
 8009b88:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8009b8a:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
 8009b8e:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
 8009b92:	f7ff fe13 	bl	80097bc <next_timeout>
 8009b96:	4621      	mov	r1, r4
 8009b98:	f7fd fb06 	bl	80071a8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009b9c:	4820      	ldr	r0, [pc, #128]	; (8009c20 <sys_clock_announce+0x118>)
 8009b9e:	f7fd ffef 	bl	8007b80 <z_spin_unlock_valid>
 8009ba2:	b1a8      	cbz	r0, 8009bd0 <sys_clock_announce+0xc8>
	__asm__ volatile(
 8009ba4:	f387 8811 	msr	BASEPRI, r7
 8009ba8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8009bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8009bb0:	18f3      	adds	r3, r6, r3
 8009bb2:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
 8009bb6:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
 8009bba:	2200      	movs	r2, #0
 8009bbc:	2300      	movs	r3, #0
		remove_timeout(t);
 8009bbe:	4628      	mov	r0, r5
		t->dticks = 0;
 8009bc0:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
 8009bc4:	f7ff fe22 	bl	800980c <remove_timeout>
 8009bc8:	4815      	ldr	r0, [pc, #84]	; (8009c20 <sys_clock_announce+0x118>)
 8009bca:	f7fd ffd9 	bl	8007b80 <z_spin_unlock_valid>
 8009bce:	b958      	cbnz	r0, 8009be8 <sys_clock_announce+0xe0>
 8009bd0:	4a14      	ldr	r2, [pc, #80]	; (8009c24 <sys_clock_announce+0x11c>)
 8009bd2:	491b      	ldr	r1, [pc, #108]	; (8009c40 <sys_clock_announce+0x138>)
 8009bd4:	4815      	ldr	r0, [pc, #84]	; (8009c2c <sys_clock_announce+0x124>)
 8009bd6:	23b9      	movs	r3, #185	; 0xb9
 8009bd8:	f002 f8cf 	bl	800bd7a <assert_print>
 8009bdc:	4910      	ldr	r1, [pc, #64]	; (8009c20 <sys_clock_announce+0x118>)
 8009bde:	4819      	ldr	r0, [pc, #100]	; (8009c44 <sys_clock_announce+0x13c>)
 8009be0:	f002 f8cb 	bl	800bd7a <assert_print>
 8009be4:	21b9      	movs	r1, #185	; 0xb9
 8009be6:	e7ab      	b.n	8009b40 <sys_clock_announce+0x38>
 8009be8:	f387 8811 	msr	BASEPRI, r7
 8009bec:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8009bf0:	68ab      	ldr	r3, [r5, #8]
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	4798      	blx	r3
	__asm__ volatile(
 8009bf6:	f04f 0310 	mov.w	r3, #16
 8009bfa:	f3ef 8711 	mrs	r7, BASEPRI
 8009bfe:	f383 8812 	msr	BASEPRI_MAX, r3
 8009c02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8009c06:	4806      	ldr	r0, [pc, #24]	; (8009c20 <sys_clock_announce+0x118>)
 8009c08:	f7fd ffac 	bl	8007b64 <z_spin_lock_valid>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d08c      	beq.n	8009b2a <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
 8009c10:	4803      	ldr	r0, [pc, #12]	; (8009c20 <sys_clock_announce+0x118>)
 8009c12:	f7fd ffc5 	bl	8007ba0 <z_spin_lock_set_owner>
		announce_remaining -= dt;
 8009c16:	f8d8 4000 	ldr.w	r4, [r8]
 8009c1a:	1ba4      	subs	r4, r4, r6
 8009c1c:	e79a      	b.n	8009b54 <sys_clock_announce+0x4c>
 8009c1e:	bf00      	nop
 8009c20:	20000ce8 	.word	0x20000ce8
 8009c24:	08012877 	.word	0x08012877
 8009c28:	080128a4 	.word	0x080128a4
 8009c2c:	0800e198 	.word	0x0800e198
 8009c30:	080128b9 	.word	0x080128b9
 8009c34:	20000ce4 	.word	0x20000ce4
 8009c38:	20000118 	.word	0x20000118
 8009c3c:	200009f8 	.word	0x200009f8
 8009c40:	080128d1 	.word	0x080128d1
 8009c44:	080128e8 	.word	0x080128e8

08009c48 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8009c48:	b570      	push	{r4, r5, r6, lr}
 8009c4a:	f04f 0310 	mov.w	r3, #16
 8009c4e:	f3ef 8611 	mrs	r6, BASEPRI
 8009c52:	f383 8812 	msr	BASEPRI_MAX, r3
 8009c56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8009c5a:	481a      	ldr	r0, [pc, #104]	; (8009cc4 <sys_clock_tick_get+0x7c>)
 8009c5c:	f7fd ff82 	bl	8007b64 <z_spin_lock_valid>
 8009c60:	b968      	cbnz	r0, 8009c7e <sys_clock_tick_get+0x36>
 8009c62:	4a19      	ldr	r2, [pc, #100]	; (8009cc8 <sys_clock_tick_get+0x80>)
 8009c64:	4919      	ldr	r1, [pc, #100]	; (8009ccc <sys_clock_tick_get+0x84>)
 8009c66:	481a      	ldr	r0, [pc, #104]	; (8009cd0 <sys_clock_tick_get+0x88>)
 8009c68:	238e      	movs	r3, #142	; 0x8e
 8009c6a:	f002 f886 	bl	800bd7a <assert_print>
 8009c6e:	4915      	ldr	r1, [pc, #84]	; (8009cc4 <sys_clock_tick_get+0x7c>)
 8009c70:	4818      	ldr	r0, [pc, #96]	; (8009cd4 <sys_clock_tick_get+0x8c>)
 8009c72:	f002 f882 	bl	800bd7a <assert_print>
 8009c76:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009c78:	4813      	ldr	r0, [pc, #76]	; (8009cc8 <sys_clock_tick_get+0x80>)
 8009c7a:	f002 f877 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8009c7e:	4811      	ldr	r0, [pc, #68]	; (8009cc4 <sys_clock_tick_get+0x7c>)
 8009c80:	f7fd ff8e 	bl	8007ba0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 8009c84:	f7ff fd90 	bl	80097a8 <elapsed>
 8009c88:	4a13      	ldr	r2, [pc, #76]	; (8009cd8 <sys_clock_tick_get+0x90>)
 8009c8a:	e9d2 4500 	ldrd	r4, r5, [r2]
 8009c8e:	1904      	adds	r4, r0, r4
 8009c90:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009c94:	480b      	ldr	r0, [pc, #44]	; (8009cc4 <sys_clock_tick_get+0x7c>)
 8009c96:	f7fd ff73 	bl	8007b80 <z_spin_unlock_valid>
 8009c9a:	b958      	cbnz	r0, 8009cb4 <sys_clock_tick_get+0x6c>
 8009c9c:	4a0a      	ldr	r2, [pc, #40]	; (8009cc8 <sys_clock_tick_get+0x80>)
 8009c9e:	490f      	ldr	r1, [pc, #60]	; (8009cdc <sys_clock_tick_get+0x94>)
 8009ca0:	480b      	ldr	r0, [pc, #44]	; (8009cd0 <sys_clock_tick_get+0x88>)
 8009ca2:	23b9      	movs	r3, #185	; 0xb9
 8009ca4:	f002 f869 	bl	800bd7a <assert_print>
 8009ca8:	4906      	ldr	r1, [pc, #24]	; (8009cc4 <sys_clock_tick_get+0x7c>)
 8009caa:	480d      	ldr	r0, [pc, #52]	; (8009ce0 <sys_clock_tick_get+0x98>)
 8009cac:	f002 f865 	bl	800bd7a <assert_print>
 8009cb0:	21b9      	movs	r1, #185	; 0xb9
 8009cb2:	e7e1      	b.n	8009c78 <sys_clock_tick_get+0x30>
	__asm__ volatile(
 8009cb4:	f386 8811 	msr	BASEPRI, r6
 8009cb8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20000ce8 	.word	0x20000ce8
 8009cc8:	08012877 	.word	0x08012877
 8009ccc:	080128a4 	.word	0x080128a4
 8009cd0:	0800e198 	.word	0x0800e198
 8009cd4:	080128b9 	.word	0x080128b9
 8009cd8:	200009f8 	.word	0x200009f8
 8009cdc:	080128d1 	.word	0x080128d1
 8009ce0:	080128e8 	.word	0x080128e8

08009ce4 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8009ce4:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	b178      	cbz	r0, 8009d0a <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8009cea:	f7fd fb51 	bl	8007390 <sys_clock_cycle_get_32>
 8009cee:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8009cf0:	4806      	ldr	r0, [pc, #24]	; (8009d0c <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8009cf2:	4a07      	ldr	r2, [pc, #28]	; (8009d10 <z_impl_k_busy_wait+0x2c>)
 8009cf4:	fba4 0100 	umull	r0, r1, r4, r0
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f7f6 ff35 	bl	8000b68 <__aeabi_uldivmod>
 8009cfe:	4604      	mov	r4, r0
 8009d00:	f7fd fb46 	bl	8007390 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8009d04:	1b43      	subs	r3, r0, r5
 8009d06:	42a3      	cmp	r3, r4
 8009d08:	d3fa      	bcc.n	8009d00 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	044aa200 	.word	0x044aa200
 8009d10:	000f4240 	.word	0x000f4240

08009d14 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	4604      	mov	r4, r0
	__asm__ volatile(
 8009d18:	f04f 0310 	mov.w	r3, #16
 8009d1c:	f3ef 8511 	mrs	r5, BASEPRI
 8009d20:	f383 8812 	msr	BASEPRI_MAX, r3
 8009d24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8009d28:	4849      	ldr	r0, [pc, #292]	; (8009e50 <z_timer_expiration_handler+0x13c>)
 8009d2a:	f7fd ff1b 	bl	8007b64 <z_spin_lock_valid>
 8009d2e:	b968      	cbnz	r0, 8009d4c <z_timer_expiration_handler+0x38>
 8009d30:	4a48      	ldr	r2, [pc, #288]	; (8009e54 <z_timer_expiration_handler+0x140>)
 8009d32:	4949      	ldr	r1, [pc, #292]	; (8009e58 <z_timer_expiration_handler+0x144>)
 8009d34:	4849      	ldr	r0, [pc, #292]	; (8009e5c <z_timer_expiration_handler+0x148>)
 8009d36:	238e      	movs	r3, #142	; 0x8e
 8009d38:	f002 f81f 	bl	800bd7a <assert_print>
 8009d3c:	4944      	ldr	r1, [pc, #272]	; (8009e50 <z_timer_expiration_handler+0x13c>)
 8009d3e:	4848      	ldr	r0, [pc, #288]	; (8009e60 <z_timer_expiration_handler+0x14c>)
 8009d40:	f002 f81b 	bl	800bd7a <assert_print>
 8009d44:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009d46:	4843      	ldr	r0, [pc, #268]	; (8009e54 <z_timer_expiration_handler+0x140>)
 8009d48:	f002 f810 	bl	800bd6c <assert_post_action>
	z_spin_lock_set_owner(l);
 8009d4c:	4840      	ldr	r0, [pc, #256]	; (8009e50 <z_timer_expiration_handler+0x13c>)
 8009d4e:	f7fd ff27 	bl	8007ba0 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8009d52:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 8009d56:	3301      	adds	r3, #1
 8009d58:	f142 0200 	adc.w	r2, r2, #0
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	f172 0200 	sbcs.w	r2, r2, #0
 8009d62:	d322      	bcc.n	8009daa <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
 8009d64:	f002 ff4b 	bl	800cbfe <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
 8009d68:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	f141 0100 	adc.w	r1, r1, #0
 8009d72:	18c0      	adds	r0, r0, r3
 8009d74:	eb41 0102 	adc.w	r1, r1, r2
 8009d78:	2801      	cmp	r0, #1
 8009d7a:	f171 0100 	sbcs.w	r1, r1, #0
 8009d7e:	db29      	blt.n	8009dd4 <z_timer_expiration_handler+0xc0>
 8009d80:	f002 ff3d 	bl	800cbfe <z_impl_k_uptime_ticks>
 8009d84:	3001      	adds	r0, #1
 8009d86:	f141 0300 	adc.w	r3, r1, #0
 8009d8a:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8009d8e:	1880      	adds	r0, r0, r2
 8009d90:	f06f 0201 	mvn.w	r2, #1
 8009d94:	eb43 0301 	adc.w	r3, r3, r1
 8009d98:	1a12      	subs	r2, r2, r0
 8009d9a:	f04f 31ff 	mov.w	r1, #4294967295
 8009d9e:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8009da2:	4930      	ldr	r1, [pc, #192]	; (8009e64 <z_timer_expiration_handler+0x150>)
 8009da4:	4620      	mov	r0, r4
 8009da6:	f7ff fd4d 	bl	8009844 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
 8009daa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009dac:	3301      	adds	r3, #1
 8009dae:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 8009db0:	6a23      	ldr	r3, [r4, #32]
 8009db2:	b35b      	cbz	r3, 8009e0c <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009db4:	4826      	ldr	r0, [pc, #152]	; (8009e50 <z_timer_expiration_handler+0x13c>)
 8009db6:	f7fd fee3 	bl	8007b80 <z_spin_unlock_valid>
 8009dba:	b980      	cbnz	r0, 8009dde <z_timer_expiration_handler+0xca>
 8009dbc:	4a25      	ldr	r2, [pc, #148]	; (8009e54 <z_timer_expiration_handler+0x140>)
 8009dbe:	492a      	ldr	r1, [pc, #168]	; (8009e68 <z_timer_expiration_handler+0x154>)
 8009dc0:	4826      	ldr	r0, [pc, #152]	; (8009e5c <z_timer_expiration_handler+0x148>)
 8009dc2:	23b9      	movs	r3, #185	; 0xb9
 8009dc4:	f001 ffd9 	bl	800bd7a <assert_print>
 8009dc8:	4921      	ldr	r1, [pc, #132]	; (8009e50 <z_timer_expiration_handler+0x13c>)
 8009dca:	4828      	ldr	r0, [pc, #160]	; (8009e6c <z_timer_expiration_handler+0x158>)
 8009dcc:	f001 ffd5 	bl	800bd7a <assert_print>
 8009dd0:	21b9      	movs	r1, #185	; 0xb9
 8009dd2:	e7b8      	b.n	8009d46 <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
 8009dd4:	f06f 0201 	mvn.w	r2, #1
 8009dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ddc:	e7e1      	b.n	8009da2 <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
 8009dde:	f385 8811 	msr	BASEPRI, r5
 8009de2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 8009de6:	6a23      	ldr	r3, [r4, #32]
 8009de8:	4620      	mov	r0, r4
 8009dea:	4798      	blx	r3
	__asm__ volatile(
 8009dec:	f04f 0310 	mov.w	r3, #16
 8009df0:	f3ef 8511 	mrs	r5, BASEPRI
 8009df4:	f383 8812 	msr	BASEPRI_MAX, r3
 8009df8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8009dfc:	4814      	ldr	r0, [pc, #80]	; (8009e50 <z_timer_expiration_handler+0x13c>)
 8009dfe:	f7fd feb1 	bl	8007b64 <z_spin_lock_valid>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	d094      	beq.n	8009d30 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
 8009e06:	4812      	ldr	r0, [pc, #72]	; (8009e50 <z_timer_expiration_handler+0x13c>)
 8009e08:	f7fd feca 	bl	8007ba0 <z_spin_lock_set_owner>
	return list->head == list;
 8009e0c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009e10:	42a6      	cmp	r6, r4
 8009e12:	d000      	beq.n	8009e16 <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8009e14:	b94e      	cbnz	r6, 8009e2a <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009e16:	480e      	ldr	r0, [pc, #56]	; (8009e50 <z_timer_expiration_handler+0x13c>)
 8009e18:	f7fd feb2 	bl	8007b80 <z_spin_unlock_valid>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d0cd      	beq.n	8009dbc <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
 8009e20:	f385 8811 	msr	BASEPRI, r5
 8009e24:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 8009e28:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f7fe fc56 	bl	80086dc <z_unpend_thread_no_timeout>
 8009e30:	2300      	movs	r3, #0
 8009e32:	4807      	ldr	r0, [pc, #28]	; (8009e50 <z_timer_expiration_handler+0x13c>)
 8009e34:	67b3      	str	r3, [r6, #120]	; 0x78
 8009e36:	f7fd fea3 	bl	8007b80 <z_spin_unlock_valid>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d0be      	beq.n	8009dbc <z_timer_expiration_handler+0xa8>
 8009e3e:	f385 8811 	msr	BASEPRI, r5
 8009e42:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 8009e46:	4630      	mov	r0, r6
}
 8009e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
 8009e4c:	f7fe bc00 	b.w	8008650 <z_ready_thread>
 8009e50:	20000cec 	.word	0x20000cec
 8009e54:	08012877 	.word	0x08012877
 8009e58:	080128a4 	.word	0x080128a4
 8009e5c:	0800e198 	.word	0x0800e198
 8009e60:	080128b9 	.word	0x080128b9
 8009e64:	08009d15 	.word	0x08009d15
 8009e68:	080128d1 	.word	0x080128d1
 8009e6c:	080128e8 	.word	0x080128e8

08009e70 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8009e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8009e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e78:	bf08      	it	eq
 8009e7a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8009e7e:	4605      	mov	r5, r0
 8009e80:	4614      	mov	r4, r2
 8009e82:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
 8009e86:	4619      	mov	r1, r3
 8009e88:	4691      	mov	r9, r2
 8009e8a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8009e8c:	d037      	beq.n	8009efe <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8009e8e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e92:	bf08      	it	eq
 8009e94:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 8009e98:	4637      	mov	r7, r6
 8009e9a:	4682      	mov	sl, r0
 8009e9c:	d011      	beq.n	8009ec2 <z_impl_k_timer_start+0x52>
 8009e9e:	ea50 0306 	orrs.w	r3, r0, r6
 8009ea2:	d00e      	beq.n	8009ec2 <z_impl_k_timer_start+0x52>
 8009ea4:	1c72      	adds	r2, r6, #1
 8009ea6:	f170 33ff 	sbcs.w	r3, r0, #4294967295
 8009eaa:	db0a      	blt.n	8009ec2 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
 8009eac:	2e02      	cmp	r6, #2
 8009eae:	4684      	mov	ip, r0
 8009eb0:	f170 0000 	sbcs.w	r0, r0, #0
 8009eb4:	bfbc      	itt	lt
 8009eb6:	2702      	movlt	r7, #2
 8009eb8:	f04f 0c00 	movlt.w	ip, #0
 8009ebc:	3f01      	subs	r7, #1
 8009ebe:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8009ec2:	1c63      	adds	r3, r4, #1
 8009ec4:	f171 33ff 	sbcs.w	r3, r1, #4294967295
 8009ec8:	db0a      	blt.n	8009ee0 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8009eca:	2c01      	cmp	r4, #1
 8009ecc:	f171 0300 	sbcs.w	r3, r1, #0
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	bfbc      	itt	lt
 8009ed4:	2201      	movlt	r2, #1
 8009ed6:	2100      	movlt	r1, #0
 8009ed8:	f112 39ff 	adds.w	r9, r2, #4294967295
 8009edc:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f7ff fd75 	bl	80099d0 <z_abort_timeout>
	timer->period = period;
 8009ee6:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
 8009eea:	2300      	movs	r3, #0
 8009eec:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8009eee:	464a      	mov	r2, r9
 8009ef0:	4643      	mov	r3, r8
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	4903      	ldr	r1, [pc, #12]	; (8009f04 <z_impl_k_timer_start+0x94>)
		     duration);
}
 8009ef6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8009efa:	f7ff bca3 	b.w	8009844 <z_add_timeout>
}
 8009efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f02:	bf00      	nop
 8009f04:	08009d15 	.word	0x08009d15

08009f08 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 8009f08:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
 8009f0a:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009f0e:	4606      	mov	r6, r0
 8009f10:	460d      	mov	r5, r1
 8009f12:	d220      	bcs.n	8009f56 <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 8009f14:	f04f 0800 	mov.w	r8, #0
 8009f18:	f04f 0900 	mov.w	r9, #0
 8009f1c:	e9cd 8900 	strd	r8, r9, [sp]
 8009f20:	f041 0104 	orr.w	r1, r1, #4
 8009f24:	f000 f894 	bl	800a050 <k_heap_aligned_alloc>
	if (mem == NULL) {
 8009f28:	4604      	mov	r4, r0
 8009f2a:	b1a0      	cbz	r0, 8009f56 <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
 8009f2c:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
 8009f30:	b195      	cbz	r5, 8009f58 <z_heap_aligned_alloc+0x50>
 8009f32:	1e6b      	subs	r3, r5, #1
 8009f34:	421c      	tst	r4, r3
 8009f36:	d00f      	beq.n	8009f58 <z_heap_aligned_alloc+0x50>
 8009f38:	4a09      	ldr	r2, [pc, #36]	; (8009f60 <z_heap_aligned_alloc+0x58>)
 8009f3a:	490a      	ldr	r1, [pc, #40]	; (8009f64 <z_heap_aligned_alloc+0x5c>)
 8009f3c:	480a      	ldr	r0, [pc, #40]	; (8009f68 <z_heap_aligned_alloc+0x60>)
 8009f3e:	2325      	movs	r3, #37	; 0x25
 8009f40:	f001 ff1b 	bl	800bd7a <assert_print>
 8009f44:	4809      	ldr	r0, [pc, #36]	; (8009f6c <z_heap_aligned_alloc+0x64>)
 8009f46:	4621      	mov	r1, r4
 8009f48:	462a      	mov	r2, r5
 8009f4a:	f001 ff16 	bl	800bd7a <assert_print>
 8009f4e:	4804      	ldr	r0, [pc, #16]	; (8009f60 <z_heap_aligned_alloc+0x58>)
 8009f50:	2125      	movs	r1, #37	; 0x25
 8009f52:	f001 ff0b 	bl	800bd6c <assert_post_action>
		return NULL;
 8009f56:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
 8009f58:	4620      	mov	r0, r4
 8009f5a:	b002      	add	sp, #8
 8009f5c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009f60:	080140d2 	.word	0x080140d2
 8009f64:	080140f6 	.word	0x080140f6
 8009f68:	0800e198 	.word	0x0800e198
 8009f6c:	08014128 	.word	0x08014128

08009f70 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
 8009f70:	2803      	cmp	r0, #3
{
 8009f72:	b508      	push	{r3, lr}
 8009f74:	460a      	mov	r2, r1
	__ASSERT(align / sizeof(void *) >= 1
 8009f76:	d901      	bls.n	8009f7c <k_aligned_alloc+0xc>
 8009f78:	0783      	lsls	r3, r0, #30
 8009f7a:	d00c      	beq.n	8009f96 <k_aligned_alloc+0x26>
 8009f7c:	4910      	ldr	r1, [pc, #64]	; (8009fc0 <k_aligned_alloc+0x50>)
 8009f7e:	4a11      	ldr	r2, [pc, #68]	; (8009fc4 <k_aligned_alloc+0x54>)
 8009f80:	4811      	ldr	r0, [pc, #68]	; (8009fc8 <k_aligned_alloc+0x58>)
 8009f82:	2342      	movs	r3, #66	; 0x42
 8009f84:	f001 fef9 	bl	800bd7a <assert_print>
 8009f88:	4810      	ldr	r0, [pc, #64]	; (8009fcc <k_aligned_alloc+0x5c>)
 8009f8a:	f001 fef6 	bl	800bd7a <assert_print>
 8009f8e:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
 8009f90:	480c      	ldr	r0, [pc, #48]	; (8009fc4 <k_aligned_alloc+0x54>)
 8009f92:	f001 feeb 	bl	800bd6c <assert_post_action>
 8009f96:	1e43      	subs	r3, r0, #1
 8009f98:	4203      	tst	r3, r0
 8009f9a:	d00a      	beq.n	8009fb2 <k_aligned_alloc+0x42>
 8009f9c:	490c      	ldr	r1, [pc, #48]	; (8009fd0 <k_aligned_alloc+0x60>)
 8009f9e:	4a09      	ldr	r2, [pc, #36]	; (8009fc4 <k_aligned_alloc+0x54>)
 8009fa0:	4809      	ldr	r0, [pc, #36]	; (8009fc8 <k_aligned_alloc+0x58>)
 8009fa2:	2346      	movs	r3, #70	; 0x46
 8009fa4:	f001 fee9 	bl	800bd7a <assert_print>
 8009fa8:	480a      	ldr	r0, [pc, #40]	; (8009fd4 <k_aligned_alloc+0x64>)
 8009faa:	f001 fee6 	bl	800bd7a <assert_print>
 8009fae:	2146      	movs	r1, #70	; 0x46
 8009fb0:	e7ee      	b.n	8009f90 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
 8009fb2:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
 8009fb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
 8009fb8:	4807      	ldr	r0, [pc, #28]	; (8009fd8 <k_aligned_alloc+0x68>)
 8009fba:	f7ff bfa5 	b.w	8009f08 <z_heap_aligned_alloc>
 8009fbe:	bf00      	nop
 8009fc0:	08014150 	.word	0x08014150
 8009fc4:	080140d2 	.word	0x080140d2
 8009fc8:	0800e198 	.word	0x0800e198
 8009fcc:	0801418d 	.word	0x0801418d
 8009fd0:	0801274f 	.word	0x0801274f
 8009fd4:	0801276a 	.word	0x0801276a
 8009fd8:	20000358 	.word	0x20000358

08009fdc <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
 8009fdc:	4b01      	ldr	r3, [pc, #4]	; (8009fe4 <k_thread_system_pool_assign+0x8>)
 8009fde:	6703      	str	r3, [r0, #112]	; 0x70
}
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	20000358 	.word	0x20000358

08009fe8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8009fe8:	4a02      	ldr	r2, [pc, #8]	; (8009ff4 <boot_banner+0xc>)
 8009fea:	4903      	ldr	r1, [pc, #12]	; (8009ff8 <boot_banner+0x10>)
 8009fec:	4803      	ldr	r0, [pc, #12]	; (8009ffc <boot_banner+0x14>)
 8009fee:	f001 bd90 	b.w	800bb12 <printk>
 8009ff2:	bf00      	nop
 8009ff4:	08013e57 	.word	0x08013e57
 8009ff8:	080141ba 	.word	0x080141ba
 8009ffc:	080141d6 	.word	0x080141d6

0800a000 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800a000:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800a002:	4c0d      	ldr	r4, [pc, #52]	; (800a038 <statics_init+0x38>)
 800a004:	4d0d      	ldr	r5, [pc, #52]	; (800a03c <statics_init+0x3c>)
 800a006:	42ac      	cmp	r4, r5
 800a008:	d913      	bls.n	800a032 <statics_init+0x32>
 800a00a:	490d      	ldr	r1, [pc, #52]	; (800a040 <statics_init+0x40>)
 800a00c:	4a0d      	ldr	r2, [pc, #52]	; (800a044 <statics_init+0x44>)
 800a00e:	480e      	ldr	r0, [pc, #56]	; (800a048 <statics_init+0x48>)
 800a010:	2318      	movs	r3, #24
 800a012:	f001 feb2 	bl	800bd7a <assert_print>
 800a016:	480d      	ldr	r0, [pc, #52]	; (800a04c <statics_init+0x4c>)
 800a018:	f001 feaf 	bl	800bd7a <assert_print>
 800a01c:	4809      	ldr	r0, [pc, #36]	; (800a044 <statics_init+0x44>)
 800a01e:	2118      	movs	r1, #24
 800a020:	f001 fea4 	bl	800bd6c <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800a024:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800a028:	4620      	mov	r0, r4
 800a02a:	f002 fe39 	bl	800cca0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800a02e:	3418      	adds	r4, #24
 800a030:	e7e9      	b.n	800a006 <statics_init+0x6>
 800a032:	d3f7      	bcc.n	800a024 <statics_init+0x24>
		}
	}
	return 0;
}
 800a034:	2000      	movs	r0, #0
 800a036:	bd38      	pop	{r3, r4, r5, pc}
 800a038:	20000358 	.word	0x20000358
 800a03c:	20000370 	.word	0x20000370
 800a040:	0801421f 	.word	0x0801421f
 800a044:	080141fd 	.word	0x080141fd
 800a048:	0800e198 	.word	0x0800e198
 800a04c:	08013d21 	.word	0x08013d21

0800a050 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 800a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a054:	b085      	sub	sp, #20
 800a056:	e9dd b90e 	ldrd	fp, r9, [sp, #56]	; 0x38
 800a05a:	4607      	mov	r7, r0
 800a05c:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800a05e:	4658      	mov	r0, fp
 800a060:	4649      	mov	r1, r9
{
 800a062:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800a064:	f002 fdcd 	bl	800cc02 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 800a068:	f107 0414 	add.w	r4, r7, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800a06c:	4606      	mov	r6, r0
 800a06e:	4688      	mov	r8, r1
	__asm__ volatile(
 800a070:	f04f 0310 	mov.w	r3, #16
 800a074:	f3ef 8511 	mrs	r5, BASEPRI
 800a078:	f383 8812 	msr	BASEPRI_MAX, r3
 800a07c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800a080:	4620      	mov	r0, r4
 800a082:	f7fd fd6f 	bl	8007b64 <z_spin_lock_valid>
 800a086:	b960      	cbnz	r0, 800a0a2 <k_heap_aligned_alloc+0x52>
 800a088:	4a33      	ldr	r2, [pc, #204]	; (800a158 <k_heap_aligned_alloc+0x108>)
 800a08a:	4934      	ldr	r1, [pc, #208]	; (800a15c <k_heap_aligned_alloc+0x10c>)
 800a08c:	4834      	ldr	r0, [pc, #208]	; (800a160 <k_heap_aligned_alloc+0x110>)
 800a08e:	238e      	movs	r3, #142	; 0x8e
 800a090:	f001 fe73 	bl	800bd7a <assert_print>
 800a094:	4621      	mov	r1, r4
 800a096:	4833      	ldr	r0, [pc, #204]	; (800a164 <k_heap_aligned_alloc+0x114>)
 800a098:	f001 fe6f 	bl	800bd7a <assert_print>
 800a09c:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800a09e:	482e      	ldr	r0, [pc, #184]	; (800a158 <k_heap_aligned_alloc+0x108>)
 800a0a0:	e031      	b.n	800a106 <k_heap_aligned_alloc+0xb6>
	z_spin_lock_set_owner(l);
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f7fd fd7c 	bl	8007ba0 <z_spin_lock_set_owner>
 800a0a8:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
 800a0ac:	b113      	cbz	r3, 800a0b4 <k_heap_aligned_alloc+0x64>
 800a0ae:	ea5b 0909 	orrs.w	r9, fp, r9
 800a0b2:	d11d      	bne.n	800a0f0 <k_heap_aligned_alloc+0xa0>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 800a0b4:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 800a0b8:	9903      	ldr	r1, [sp, #12]
 800a0ba:	4652      	mov	r2, sl
 800a0bc:	4638      	mov	r0, r7
 800a0be:	f7f8 fbb3 	bl	8002828 <sys_heap_aligned_alloc>
 800a0c2:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
 800a0c4:	f7ff fdc0 	bl	8009c48 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 800a0c8:	f1b9 0f00 	cmp.w	r9, #0
 800a0cc:	d01d      	beq.n	800a10a <k_heap_aligned_alloc+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f7fd fd56 	bl	8007b80 <z_spin_unlock_valid>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d137      	bne.n	800a148 <k_heap_aligned_alloc+0xf8>
 800a0d8:	4a1f      	ldr	r2, [pc, #124]	; (800a158 <k_heap_aligned_alloc+0x108>)
 800a0da:	4923      	ldr	r1, [pc, #140]	; (800a168 <k_heap_aligned_alloc+0x118>)
 800a0dc:	4820      	ldr	r0, [pc, #128]	; (800a160 <k_heap_aligned_alloc+0x110>)
 800a0de:	23b9      	movs	r3, #185	; 0xb9
 800a0e0:	f001 fe4b 	bl	800bd7a <assert_print>
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	4821      	ldr	r0, [pc, #132]	; (800a16c <k_heap_aligned_alloc+0x11c>)
 800a0e8:	f001 fe47 	bl	800bd7a <assert_print>
 800a0ec:	21b9      	movs	r1, #185	; 0xb9
 800a0ee:	e7d6      	b.n	800a09e <k_heap_aligned_alloc+0x4e>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
 800a0f0:	491f      	ldr	r1, [pc, #124]	; (800a170 <k_heap_aligned_alloc+0x120>)
 800a0f2:	4a20      	ldr	r2, [pc, #128]	; (800a174 <k_heap_aligned_alloc+0x124>)
 800a0f4:	481a      	ldr	r0, [pc, #104]	; (800a160 <k_heap_aligned_alloc+0x110>)
 800a0f6:	2349      	movs	r3, #73	; 0x49
 800a0f8:	f001 fe3f 	bl	800bd7a <assert_print>
 800a0fc:	481e      	ldr	r0, [pc, #120]	; (800a178 <k_heap_aligned_alloc+0x128>)
 800a0fe:	f001 fe3c 	bl	800bd7a <assert_print>
 800a102:	481c      	ldr	r0, [pc, #112]	; (800a174 <k_heap_aligned_alloc+0x124>)
 800a104:	2149      	movs	r1, #73	; 0x49
 800a106:	f001 fe31 	bl	800bd6c <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
 800a10a:	1a30      	subs	r0, r6, r0
 800a10c:	eb68 0101 	sbc.w	r1, r8, r1
 800a110:	2801      	cmp	r0, #1
 800a112:	f171 0300 	sbcs.w	r3, r1, #0
 800a116:	dbda      	blt.n	800a0ce <k_heap_aligned_alloc+0x7e>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 800a118:	e9cd 0100 	strd	r0, r1, [sp]
 800a11c:	465a      	mov	r2, fp
 800a11e:	4629      	mov	r1, r5
 800a120:	4620      	mov	r0, r4
 800a122:	f7fe fe33 	bl	8008d8c <z_pend_curr>
 800a126:	f04f 0310 	mov.w	r3, #16
 800a12a:	f3ef 8511 	mrs	r5, BASEPRI
 800a12e:	f383 8812 	msr	BASEPRI_MAX, r3
 800a132:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800a136:	4620      	mov	r0, r4
 800a138:	f7fd fd14 	bl	8007b64 <z_spin_lock_valid>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d0a3      	beq.n	800a088 <k_heap_aligned_alloc+0x38>
	z_spin_lock_set_owner(l);
 800a140:	4620      	mov	r0, r4
 800a142:	f7fd fd2d 	bl	8007ba0 <z_spin_lock_set_owner>
	return k;
 800a146:	e7b7      	b.n	800a0b8 <k_heap_aligned_alloc+0x68>
	__asm__ volatile(
 800a148:	f385 8811 	msr	BASEPRI, r5
 800a14c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 800a150:	4648      	mov	r0, r9
 800a152:	b005      	add	sp, #20
 800a154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a158:	08012877 	.word	0x08012877
 800a15c:	080128a4 	.word	0x080128a4
 800a160:	0800e198 	.word	0x0800e198
 800a164:	080128b9 	.word	0x080128b9
 800a168:	080128d1 	.word	0x080128d1
 800a16c:	080128e8 	.word	0x080128e8
 800a170:	08014235 	.word	0x08014235
 800a174:	080141fd 	.word	0x080141fd
 800a178:	08013e55 	.word	0x08013e55

0800a17c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800a17c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800a17e:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <k_sys_work_q_init+0x28>)
 800a180:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800a182:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 800a184:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	4907      	ldr	r1, [pc, #28]	; (800a1a8 <k_sys_work_q_init+0x2c>)
 800a18a:	4808      	ldr	r0, [pc, #32]	; (800a1ac <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 800a18c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 800a190:	f04f 33ff 	mov.w	r3, #4294967295
 800a194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a198:	f7fe f904 	bl	80083a4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800a19c:	4620      	mov	r0, r4
 800a19e:	b004      	add	sp, #16
 800a1a0:	bd10      	pop	{r4, pc}
 800a1a2:	bf00      	nop
 800a1a4:	0801427b 	.word	0x0801427b
 800a1a8:	200027c0 	.word	0x200027c0
 800a1ac:	20000a00 	.word	0x20000a00

0800a1b0 <fiprintf>:
 800a1b0:	b40e      	push	{r1, r2, r3}
 800a1b2:	b503      	push	{r0, r1, lr}
 800a1b4:	4601      	mov	r1, r0
 800a1b6:	ab03      	add	r3, sp, #12
 800a1b8:	4805      	ldr	r0, [pc, #20]	; (800a1d0 <fiprintf+0x20>)
 800a1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1be:	6800      	ldr	r0, [r0, #0]
 800a1c0:	9301      	str	r3, [sp, #4]
 800a1c2:	f000 f8b3 	bl	800a32c <_vfiprintf_r>
 800a1c6:	b002      	add	sp, #8
 800a1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1cc:	b003      	add	sp, #12
 800a1ce:	4770      	bx	lr
 800a1d0:	20000120 	.word	0x20000120

0800a1d4 <malloc>:
 800a1d4:	4b02      	ldr	r3, [pc, #8]	; (800a1e0 <malloc+0xc>)
 800a1d6:	4601      	mov	r1, r0
 800a1d8:	6818      	ldr	r0, [r3, #0]
 800a1da:	f000 b84d 	b.w	800a278 <_malloc_r>
 800a1de:	bf00      	nop
 800a1e0:	20000120 	.word	0x20000120

0800a1e4 <_free_r>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	2900      	cmp	r1, #0
 800a1ea:	d041      	beq.n	800a270 <_free_r+0x8c>
 800a1ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1f0:	1f0c      	subs	r4, r1, #4
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	bfb8      	it	lt
 800a1f6:	18e4      	addlt	r4, r4, r3
 800a1f8:	f000 ff7c 	bl	800b0f4 <__malloc_lock>
 800a1fc:	4a1d      	ldr	r2, [pc, #116]	; (800a274 <_free_r+0x90>)
 800a1fe:	6813      	ldr	r3, [r2, #0]
 800a200:	b933      	cbnz	r3, 800a210 <_free_r+0x2c>
 800a202:	6063      	str	r3, [r4, #4]
 800a204:	6014      	str	r4, [r2, #0]
 800a206:	4628      	mov	r0, r5
 800a208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a20c:	f000 bf78 	b.w	800b100 <__malloc_unlock>
 800a210:	42a3      	cmp	r3, r4
 800a212:	d908      	bls.n	800a226 <_free_r+0x42>
 800a214:	6820      	ldr	r0, [r4, #0]
 800a216:	1821      	adds	r1, r4, r0
 800a218:	428b      	cmp	r3, r1
 800a21a:	bf01      	itttt	eq
 800a21c:	6819      	ldreq	r1, [r3, #0]
 800a21e:	685b      	ldreq	r3, [r3, #4]
 800a220:	1809      	addeq	r1, r1, r0
 800a222:	6021      	streq	r1, [r4, #0]
 800a224:	e7ed      	b.n	800a202 <_free_r+0x1e>
 800a226:	461a      	mov	r2, r3
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	b10b      	cbz	r3, 800a230 <_free_r+0x4c>
 800a22c:	42a3      	cmp	r3, r4
 800a22e:	d9fa      	bls.n	800a226 <_free_r+0x42>
 800a230:	6811      	ldr	r1, [r2, #0]
 800a232:	1850      	adds	r0, r2, r1
 800a234:	42a0      	cmp	r0, r4
 800a236:	d10b      	bne.n	800a250 <_free_r+0x6c>
 800a238:	6820      	ldr	r0, [r4, #0]
 800a23a:	4401      	add	r1, r0
 800a23c:	1850      	adds	r0, r2, r1
 800a23e:	4283      	cmp	r3, r0
 800a240:	6011      	str	r1, [r2, #0]
 800a242:	d1e0      	bne.n	800a206 <_free_r+0x22>
 800a244:	6818      	ldr	r0, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	6053      	str	r3, [r2, #4]
 800a24a:	4408      	add	r0, r1
 800a24c:	6010      	str	r0, [r2, #0]
 800a24e:	e7da      	b.n	800a206 <_free_r+0x22>
 800a250:	d902      	bls.n	800a258 <_free_r+0x74>
 800a252:	230c      	movs	r3, #12
 800a254:	602b      	str	r3, [r5, #0]
 800a256:	e7d6      	b.n	800a206 <_free_r+0x22>
 800a258:	6820      	ldr	r0, [r4, #0]
 800a25a:	1821      	adds	r1, r4, r0
 800a25c:	428b      	cmp	r3, r1
 800a25e:	bf04      	itt	eq
 800a260:	6819      	ldreq	r1, [r3, #0]
 800a262:	685b      	ldreq	r3, [r3, #4]
 800a264:	6063      	str	r3, [r4, #4]
 800a266:	bf04      	itt	eq
 800a268:	1809      	addeq	r1, r1, r0
 800a26a:	6021      	streq	r1, [r4, #0]
 800a26c:	6054      	str	r4, [r2, #4]
 800a26e:	e7ca      	b.n	800a206 <_free_r+0x22>
 800a270:	bd38      	pop	{r3, r4, r5, pc}
 800a272:	bf00      	nop
 800a274:	20000cf4 	.word	0x20000cf4

0800a278 <_malloc_r>:
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	1ccd      	adds	r5, r1, #3
 800a27c:	f025 0503 	bic.w	r5, r5, #3
 800a280:	3508      	adds	r5, #8
 800a282:	2d0c      	cmp	r5, #12
 800a284:	bf38      	it	cc
 800a286:	250c      	movcc	r5, #12
 800a288:	2d00      	cmp	r5, #0
 800a28a:	4606      	mov	r6, r0
 800a28c:	db01      	blt.n	800a292 <_malloc_r+0x1a>
 800a28e:	42a9      	cmp	r1, r5
 800a290:	d903      	bls.n	800a29a <_malloc_r+0x22>
 800a292:	230c      	movs	r3, #12
 800a294:	6033      	str	r3, [r6, #0]
 800a296:	2000      	movs	r0, #0
 800a298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a29a:	f000 ff2b 	bl	800b0f4 <__malloc_lock>
 800a29e:	4921      	ldr	r1, [pc, #132]	; (800a324 <_malloc_r+0xac>)
 800a2a0:	680a      	ldr	r2, [r1, #0]
 800a2a2:	4614      	mov	r4, r2
 800a2a4:	b99c      	cbnz	r4, 800a2ce <_malloc_r+0x56>
 800a2a6:	4f20      	ldr	r7, [pc, #128]	; (800a328 <_malloc_r+0xb0>)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	b923      	cbnz	r3, 800a2b6 <_malloc_r+0x3e>
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f000 fce4 	bl	800ac7c <_sbrk_r>
 800a2b4:	6038      	str	r0, [r7, #0]
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f000 fcdf 	bl	800ac7c <_sbrk_r>
 800a2be:	1c43      	adds	r3, r0, #1
 800a2c0:	d123      	bne.n	800a30a <_malloc_r+0x92>
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	6033      	str	r3, [r6, #0]
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f000 ff1a 	bl	800b100 <__malloc_unlock>
 800a2cc:	e7e3      	b.n	800a296 <_malloc_r+0x1e>
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	1b5b      	subs	r3, r3, r5
 800a2d2:	d417      	bmi.n	800a304 <_malloc_r+0x8c>
 800a2d4:	2b0b      	cmp	r3, #11
 800a2d6:	d903      	bls.n	800a2e0 <_malloc_r+0x68>
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	441c      	add	r4, r3
 800a2dc:	6025      	str	r5, [r4, #0]
 800a2de:	e004      	b.n	800a2ea <_malloc_r+0x72>
 800a2e0:	6863      	ldr	r3, [r4, #4]
 800a2e2:	42a2      	cmp	r2, r4
 800a2e4:	bf0c      	ite	eq
 800a2e6:	600b      	streq	r3, [r1, #0]
 800a2e8:	6053      	strne	r3, [r2, #4]
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f000 ff08 	bl	800b100 <__malloc_unlock>
 800a2f0:	f104 000b 	add.w	r0, r4, #11
 800a2f4:	1d23      	adds	r3, r4, #4
 800a2f6:	f020 0007 	bic.w	r0, r0, #7
 800a2fa:	1ac2      	subs	r2, r0, r3
 800a2fc:	bf1c      	itt	ne
 800a2fe:	1a1b      	subne	r3, r3, r0
 800a300:	50a3      	strne	r3, [r4, r2]
 800a302:	e7c9      	b.n	800a298 <_malloc_r+0x20>
 800a304:	4622      	mov	r2, r4
 800a306:	6864      	ldr	r4, [r4, #4]
 800a308:	e7cc      	b.n	800a2a4 <_malloc_r+0x2c>
 800a30a:	1cc4      	adds	r4, r0, #3
 800a30c:	f024 0403 	bic.w	r4, r4, #3
 800a310:	42a0      	cmp	r0, r4
 800a312:	d0e3      	beq.n	800a2dc <_malloc_r+0x64>
 800a314:	1a21      	subs	r1, r4, r0
 800a316:	4630      	mov	r0, r6
 800a318:	f000 fcb0 	bl	800ac7c <_sbrk_r>
 800a31c:	3001      	adds	r0, #1
 800a31e:	d1dd      	bne.n	800a2dc <_malloc_r+0x64>
 800a320:	e7cf      	b.n	800a2c2 <_malloc_r+0x4a>
 800a322:	bf00      	nop
 800a324:	20000cf4 	.word	0x20000cf4
 800a328:	20000cf0 	.word	0x20000cf0

0800a32c <_vfiprintf_r>:
 800a32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a330:	460d      	mov	r5, r1
 800a332:	b09d      	sub	sp, #116	; 0x74
 800a334:	4614      	mov	r4, r2
 800a336:	4698      	mov	r8, r3
 800a338:	4606      	mov	r6, r0
 800a33a:	b118      	cbz	r0, 800a344 <_vfiprintf_r+0x18>
 800a33c:	6983      	ldr	r3, [r0, #24]
 800a33e:	b90b      	cbnz	r3, 800a344 <_vfiprintf_r+0x18>
 800a340:	f000 fe16 	bl	800af70 <__sinit>
 800a344:	4b87      	ldr	r3, [pc, #540]	; (800a564 <_vfiprintf_r+0x238>)
 800a346:	429d      	cmp	r5, r3
 800a348:	d11b      	bne.n	800a382 <_vfiprintf_r+0x56>
 800a34a:	6875      	ldr	r5, [r6, #4]
 800a34c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a34e:	07d9      	lsls	r1, r3, #31
 800a350:	d405      	bmi.n	800a35e <_vfiprintf_r+0x32>
 800a352:	89ab      	ldrh	r3, [r5, #12]
 800a354:	059a      	lsls	r2, r3, #22
 800a356:	d402      	bmi.n	800a35e <_vfiprintf_r+0x32>
 800a358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a35a:	f7fb faeb 	bl	8005934 <__retarget_lock_acquire_recursive>
 800a35e:	89ab      	ldrh	r3, [r5, #12]
 800a360:	071b      	lsls	r3, r3, #28
 800a362:	d501      	bpl.n	800a368 <_vfiprintf_r+0x3c>
 800a364:	692b      	ldr	r3, [r5, #16]
 800a366:	b9eb      	cbnz	r3, 800a3a4 <_vfiprintf_r+0x78>
 800a368:	4629      	mov	r1, r5
 800a36a:	4630      	mov	r0, r6
 800a36c:	f000 fd16 	bl	800ad9c <__swsetup_r>
 800a370:	b1c0      	cbz	r0, 800a3a4 <_vfiprintf_r+0x78>
 800a372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a374:	07dc      	lsls	r4, r3, #31
 800a376:	d50e      	bpl.n	800a396 <_vfiprintf_r+0x6a>
 800a378:	f04f 30ff 	mov.w	r0, #4294967295
 800a37c:	b01d      	add	sp, #116	; 0x74
 800a37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a382:	4b79      	ldr	r3, [pc, #484]	; (800a568 <_vfiprintf_r+0x23c>)
 800a384:	429d      	cmp	r5, r3
 800a386:	d101      	bne.n	800a38c <_vfiprintf_r+0x60>
 800a388:	68b5      	ldr	r5, [r6, #8]
 800a38a:	e7df      	b.n	800a34c <_vfiprintf_r+0x20>
 800a38c:	4b77      	ldr	r3, [pc, #476]	; (800a56c <_vfiprintf_r+0x240>)
 800a38e:	429d      	cmp	r5, r3
 800a390:	bf08      	it	eq
 800a392:	68f5      	ldreq	r5, [r6, #12]
 800a394:	e7da      	b.n	800a34c <_vfiprintf_r+0x20>
 800a396:	89ab      	ldrh	r3, [r5, #12]
 800a398:	0598      	lsls	r0, r3, #22
 800a39a:	d4ed      	bmi.n	800a378 <_vfiprintf_r+0x4c>
 800a39c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a39e:	f7fb fae5 	bl	800596c <__retarget_lock_release_recursive>
 800a3a2:	e7e9      	b.n	800a378 <_vfiprintf_r+0x4c>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a8:	2320      	movs	r3, #32
 800a3aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3b2:	2330      	movs	r3, #48	; 0x30
 800a3b4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800a570 <_vfiprintf_r+0x244>
 800a3b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3bc:	f04f 0901 	mov.w	r9, #1
 800a3c0:	4623      	mov	r3, r4
 800a3c2:	469a      	mov	sl, r3
 800a3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c8:	b10a      	cbz	r2, 800a3ce <_vfiprintf_r+0xa2>
 800a3ca:	2a25      	cmp	r2, #37	; 0x25
 800a3cc:	d1f9      	bne.n	800a3c2 <_vfiprintf_r+0x96>
 800a3ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a3d2:	d00b      	beq.n	800a3ec <_vfiprintf_r+0xc0>
 800a3d4:	465b      	mov	r3, fp
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	4629      	mov	r1, r5
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f002 fc93 	bl	800cd06 <__sfputs_r>
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	f000 80a6 	beq.w	800a532 <_vfiprintf_r+0x206>
 800a3e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3e8:	445a      	add	r2, fp
 800a3ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 809e 	beq.w	800a532 <_vfiprintf_r+0x206>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a400:	f10a 0a01 	add.w	sl, sl, #1
 800a404:	9304      	str	r3, [sp, #16]
 800a406:	9307      	str	r3, [sp, #28]
 800a408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a40c:	931a      	str	r3, [sp, #104]	; 0x68
 800a40e:	4654      	mov	r4, sl
 800a410:	4857      	ldr	r0, [pc, #348]	; (800a570 <_vfiprintf_r+0x244>)
 800a412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a416:	2205      	movs	r2, #5
 800a418:	f7f5 fec2 	bl	80001a0 <memchr>
 800a41c:	9b04      	ldr	r3, [sp, #16]
 800a41e:	b9d0      	cbnz	r0, 800a456 <_vfiprintf_r+0x12a>
 800a420:	06d9      	lsls	r1, r3, #27
 800a422:	bf44      	itt	mi
 800a424:	2220      	movmi	r2, #32
 800a426:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a42a:	071a      	lsls	r2, r3, #28
 800a42c:	bf44      	itt	mi
 800a42e:	222b      	movmi	r2, #43	; 0x2b
 800a430:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a434:	f89a 2000 	ldrb.w	r2, [sl]
 800a438:	2a2a      	cmp	r2, #42	; 0x2a
 800a43a:	d014      	beq.n	800a466 <_vfiprintf_r+0x13a>
 800a43c:	9a07      	ldr	r2, [sp, #28]
 800a43e:	4654      	mov	r4, sl
 800a440:	2000      	movs	r0, #0
 800a442:	f04f 0c0a 	mov.w	ip, #10
 800a446:	4621      	mov	r1, r4
 800a448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a44c:	3b30      	subs	r3, #48	; 0x30
 800a44e:	2b09      	cmp	r3, #9
 800a450:	d94a      	bls.n	800a4e8 <_vfiprintf_r+0x1bc>
 800a452:	b970      	cbnz	r0, 800a472 <_vfiprintf_r+0x146>
 800a454:	e014      	b.n	800a480 <_vfiprintf_r+0x154>
 800a456:	eba0 0008 	sub.w	r0, r0, r8
 800a45a:	fa09 f000 	lsl.w	r0, r9, r0
 800a45e:	4318      	orrs	r0, r3
 800a460:	9004      	str	r0, [sp, #16]
 800a462:	46a2      	mov	sl, r4
 800a464:	e7d3      	b.n	800a40e <_vfiprintf_r+0xe2>
 800a466:	9a03      	ldr	r2, [sp, #12]
 800a468:	1d11      	adds	r1, r2, #4
 800a46a:	6812      	ldr	r2, [r2, #0]
 800a46c:	9103      	str	r1, [sp, #12]
 800a46e:	2a00      	cmp	r2, #0
 800a470:	db01      	blt.n	800a476 <_vfiprintf_r+0x14a>
 800a472:	9207      	str	r2, [sp, #28]
 800a474:	e004      	b.n	800a480 <_vfiprintf_r+0x154>
 800a476:	4252      	negs	r2, r2
 800a478:	f043 0302 	orr.w	r3, r3, #2
 800a47c:	9207      	str	r2, [sp, #28]
 800a47e:	9304      	str	r3, [sp, #16]
 800a480:	7823      	ldrb	r3, [r4, #0]
 800a482:	2b2e      	cmp	r3, #46	; 0x2e
 800a484:	d10a      	bne.n	800a49c <_vfiprintf_r+0x170>
 800a486:	7863      	ldrb	r3, [r4, #1]
 800a488:	2b2a      	cmp	r3, #42	; 0x2a
 800a48a:	d132      	bne.n	800a4f2 <_vfiprintf_r+0x1c6>
 800a48c:	9b03      	ldr	r3, [sp, #12]
 800a48e:	1d1a      	adds	r2, r3, #4
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	9203      	str	r2, [sp, #12]
 800a494:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a498:	3402      	adds	r4, #2
 800a49a:	9305      	str	r3, [sp, #20]
 800a49c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a574 <_vfiprintf_r+0x248>
 800a4a0:	7821      	ldrb	r1, [r4, #0]
 800a4a2:	2203      	movs	r2, #3
 800a4a4:	4650      	mov	r0, sl
 800a4a6:	f7f5 fe7b 	bl	80001a0 <memchr>
 800a4aa:	b138      	cbz	r0, 800a4bc <_vfiprintf_r+0x190>
 800a4ac:	9b04      	ldr	r3, [sp, #16]
 800a4ae:	eba0 000a 	sub.w	r0, r0, sl
 800a4b2:	2240      	movs	r2, #64	; 0x40
 800a4b4:	4082      	lsls	r2, r0
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	3401      	adds	r4, #1
 800a4ba:	9304      	str	r3, [sp, #16]
 800a4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c0:	482d      	ldr	r0, [pc, #180]	; (800a578 <_vfiprintf_r+0x24c>)
 800a4c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4c6:	2206      	movs	r2, #6
 800a4c8:	f7f5 fe6a 	bl	80001a0 <memchr>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d03f      	beq.n	800a550 <_vfiprintf_r+0x224>
 800a4d0:	4b2a      	ldr	r3, [pc, #168]	; (800a57c <_vfiprintf_r+0x250>)
 800a4d2:	bb1b      	cbnz	r3, 800a51c <_vfiprintf_r+0x1f0>
 800a4d4:	9b03      	ldr	r3, [sp, #12]
 800a4d6:	3307      	adds	r3, #7
 800a4d8:	f023 0307 	bic.w	r3, r3, #7
 800a4dc:	3308      	adds	r3, #8
 800a4de:	9303      	str	r3, [sp, #12]
 800a4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e2:	443b      	add	r3, r7
 800a4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e6:	e76b      	b.n	800a3c0 <_vfiprintf_r+0x94>
 800a4e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	2001      	movs	r0, #1
 800a4f0:	e7a9      	b.n	800a446 <_vfiprintf_r+0x11a>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	3401      	adds	r4, #1
 800a4f6:	9305      	str	r3, [sp, #20]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f04f 0c0a 	mov.w	ip, #10
 800a4fe:	4620      	mov	r0, r4
 800a500:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a504:	3a30      	subs	r2, #48	; 0x30
 800a506:	2a09      	cmp	r2, #9
 800a508:	d903      	bls.n	800a512 <_vfiprintf_r+0x1e6>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d0c6      	beq.n	800a49c <_vfiprintf_r+0x170>
 800a50e:	9105      	str	r1, [sp, #20]
 800a510:	e7c4      	b.n	800a49c <_vfiprintf_r+0x170>
 800a512:	fb0c 2101 	mla	r1, ip, r1, r2
 800a516:	4604      	mov	r4, r0
 800a518:	2301      	movs	r3, #1
 800a51a:	e7f0      	b.n	800a4fe <_vfiprintf_r+0x1d2>
 800a51c:	ab03      	add	r3, sp, #12
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	462a      	mov	r2, r5
 800a522:	4b17      	ldr	r3, [pc, #92]	; (800a580 <_vfiprintf_r+0x254>)
 800a524:	a904      	add	r1, sp, #16
 800a526:	4630      	mov	r0, r6
 800a528:	f000 f82c 	bl	800a584 <_printf_float>
 800a52c:	4607      	mov	r7, r0
 800a52e:	1c78      	adds	r0, r7, #1
 800a530:	d1d6      	bne.n	800a4e0 <_vfiprintf_r+0x1b4>
 800a532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a534:	07d9      	lsls	r1, r3, #31
 800a536:	d405      	bmi.n	800a544 <_vfiprintf_r+0x218>
 800a538:	89ab      	ldrh	r3, [r5, #12]
 800a53a:	059a      	lsls	r2, r3, #22
 800a53c:	d402      	bmi.n	800a544 <_vfiprintf_r+0x218>
 800a53e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a540:	f7fb fa14 	bl	800596c <__retarget_lock_release_recursive>
 800a544:	89ab      	ldrh	r3, [r5, #12]
 800a546:	065b      	lsls	r3, r3, #25
 800a548:	f53f af16 	bmi.w	800a378 <_vfiprintf_r+0x4c>
 800a54c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a54e:	e715      	b.n	800a37c <_vfiprintf_r+0x50>
 800a550:	ab03      	add	r3, sp, #12
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	462a      	mov	r2, r5
 800a556:	4b0a      	ldr	r3, [pc, #40]	; (800a580 <_vfiprintf_r+0x254>)
 800a558:	a904      	add	r1, sp, #16
 800a55a:	4630      	mov	r0, r6
 800a55c:	f000 fa48 	bl	800a9f0 <_printf_i>
 800a560:	e7e4      	b.n	800a52c <_vfiprintf_r+0x200>
 800a562:	bf00      	nop
 800a564:	0800e0c8 	.word	0x0800e0c8
 800a568:	0800e0a8 	.word	0x0800e0a8
 800a56c:	0800e088 	.word	0x0800e088
 800a570:	08014385 	.word	0x08014385
 800a574:	0801438b 	.word	0x0801438b
 800a578:	0801438f 	.word	0x0801438f
 800a57c:	0800a585 	.word	0x0800a585
 800a580:	0800cd07 	.word	0x0800cd07

0800a584 <_printf_float>:
 800a584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a588:	b091      	sub	sp, #68	; 0x44
 800a58a:	460c      	mov	r4, r1
 800a58c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a590:	4616      	mov	r6, r2
 800a592:	461f      	mov	r7, r3
 800a594:	4605      	mov	r5, r0
 800a596:	f000 fd69 	bl	800b06c <_localeconv_r>
 800a59a:	6803      	ldr	r3, [r0, #0]
 800a59c:	9308      	str	r3, [sp, #32]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7f6 fd12 	bl	8000fc8 <strlen>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	930e      	str	r3, [sp, #56]	; 0x38
 800a5a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ac:	9009      	str	r0, [sp, #36]	; 0x24
 800a5ae:	3307      	adds	r3, #7
 800a5b0:	f023 0307 	bic.w	r3, r3, #7
 800a5b4:	f103 0208 	add.w	r2, r3, #8
 800a5b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a5bc:	f8d4 b000 	ldr.w	fp, [r4]
 800a5c0:	f8c8 2000 	str.w	r2, [r8]
 800a5c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5ce:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800a5d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a5d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5da:	4b9c      	ldr	r3, [pc, #624]	; (800a84c <_printf_float+0x2c8>)
 800a5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e0:	f7f6 fb64 	bl	8000cac <__aeabi_dcmpun>
 800a5e4:	bb70      	cbnz	r0, 800a644 <_printf_float+0xc0>
 800a5e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5ea:	4b98      	ldr	r3, [pc, #608]	; (800a84c <_printf_float+0x2c8>)
 800a5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f0:	f7f6 fb3e 	bl	8000c70 <__aeabi_dcmple>
 800a5f4:	bb30      	cbnz	r0, 800a644 <_printf_float+0xc0>
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	f7f6 fb2d 	bl	8000c5c <__aeabi_dcmplt>
 800a602:	b110      	cbz	r0, 800a60a <_printf_float+0x86>
 800a604:	232d      	movs	r3, #45	; 0x2d
 800a606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a60a:	4a91      	ldr	r2, [pc, #580]	; (800a850 <_printf_float+0x2cc>)
 800a60c:	4b91      	ldr	r3, [pc, #580]	; (800a854 <_printf_float+0x2d0>)
 800a60e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a612:	bf94      	ite	ls
 800a614:	4690      	movls	r8, r2
 800a616:	4698      	movhi	r8, r3
 800a618:	2303      	movs	r3, #3
 800a61a:	6123      	str	r3, [r4, #16]
 800a61c:	f02b 0304 	bic.w	r3, fp, #4
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	f04f 0900 	mov.w	r9, #0
 800a626:	9700      	str	r7, [sp, #0]
 800a628:	4633      	mov	r3, r6
 800a62a:	aa0f      	add	r2, sp, #60	; 0x3c
 800a62c:	4621      	mov	r1, r4
 800a62e:	4628      	mov	r0, r5
 800a630:	f002 fc1c 	bl	800ce6c <_printf_common>
 800a634:	3001      	adds	r0, #1
 800a636:	f040 8099 	bne.w	800a76c <_printf_float+0x1e8>
 800a63a:	f04f 30ff 	mov.w	r0, #4294967295
 800a63e:	b011      	add	sp, #68	; 0x44
 800a640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a644:	4642      	mov	r2, r8
 800a646:	464b      	mov	r3, r9
 800a648:	4640      	mov	r0, r8
 800a64a:	4649      	mov	r1, r9
 800a64c:	f7f6 fb2e 	bl	8000cac <__aeabi_dcmpun>
 800a650:	b140      	cbz	r0, 800a664 <_printf_float+0xe0>
 800a652:	464b      	mov	r3, r9
 800a654:	2b00      	cmp	r3, #0
 800a656:	bfbc      	itt	lt
 800a658:	232d      	movlt	r3, #45	; 0x2d
 800a65a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a65e:	4a7e      	ldr	r2, [pc, #504]	; (800a858 <_printf_float+0x2d4>)
 800a660:	4b7e      	ldr	r3, [pc, #504]	; (800a85c <_printf_float+0x2d8>)
 800a662:	e7d4      	b.n	800a60e <_printf_float+0x8a>
 800a664:	6863      	ldr	r3, [r4, #4]
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	d129      	bne.n	800a6be <_printf_float+0x13a>
 800a66a:	2306      	movs	r3, #6
 800a66c:	6063      	str	r3, [r4, #4]
 800a66e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a672:	2200      	movs	r2, #0
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	9206      	str	r2, [sp, #24]
 800a678:	aa0e      	add	r2, sp, #56	; 0x38
 800a67a:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a67e:	aa0d      	add	r2, sp, #52	; 0x34
 800a680:	9203      	str	r2, [sp, #12]
 800a682:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a686:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a68a:	6863      	ldr	r3, [r4, #4]
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	4642      	mov	r2, r8
 800a690:	464b      	mov	r3, r9
 800a692:	4628      	mov	r0, r5
 800a694:	f002 fb49 	bl	800cd2a <__cvt>
 800a698:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a69c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a69e:	4680      	mov	r8, r0
 800a6a0:	d115      	bne.n	800a6ce <_printf_float+0x14a>
 800a6a2:	1ccb      	adds	r3, r1, #3
 800a6a4:	db3b      	blt.n	800a71e <_printf_float+0x19a>
 800a6a6:	6863      	ldr	r3, [r4, #4]
 800a6a8:	4299      	cmp	r1, r3
 800a6aa:	dc38      	bgt.n	800a71e <_printf_float+0x19a>
 800a6ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6ae:	4299      	cmp	r1, r3
 800a6b0:	db55      	blt.n	800a75e <_printf_float+0x1da>
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	6121      	str	r1, [r4, #16]
 800a6b6:	07d8      	lsls	r0, r3, #31
 800a6b8:	d545      	bpl.n	800a746 <_printf_float+0x1c2>
 800a6ba:	1c4b      	adds	r3, r1, #1
 800a6bc:	e042      	b.n	800a744 <_printf_float+0x1c0>
 800a6be:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
 800a6c2:	2a47      	cmp	r2, #71	; 0x47
 800a6c4:	d1d3      	bne.n	800a66e <_printf_float+0xea>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1d1      	bne.n	800a66e <_printf_float+0xea>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e7ce      	b.n	800a66c <_printf_float+0xe8>
 800a6ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a6d2:	d107      	bne.n	800a6e4 <_printf_float+0x160>
 800a6d4:	1cc8      	adds	r0, r1, #3
 800a6d6:	db25      	blt.n	800a724 <_printf_float+0x1a0>
 800a6d8:	6863      	ldr	r3, [r4, #4]
 800a6da:	428b      	cmp	r3, r1
 800a6dc:	db22      	blt.n	800a724 <_printf_float+0x1a0>
 800a6de:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a6e2:	e7e3      	b.n	800a6ac <_printf_float+0x128>
 800a6e4:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a6e8:	d81f      	bhi.n	800a72a <_printf_float+0x1a6>
 800a6ea:	3901      	subs	r1, #1
 800a6ec:	4652      	mov	r2, sl
 800a6ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6f2:	910d      	str	r1, [sp, #52]	; 0x34
 800a6f4:	f002 fb80 	bl	800cdf8 <__exponent>
 800a6f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6fa:	1813      	adds	r3, r2, r0
 800a6fc:	2a01      	cmp	r2, #1
 800a6fe:	4681      	mov	r9, r0
 800a700:	6123      	str	r3, [r4, #16]
 800a702:	dc02      	bgt.n	800a70a <_printf_float+0x186>
 800a704:	6822      	ldr	r2, [r4, #0]
 800a706:	07d2      	lsls	r2, r2, #31
 800a708:	d501      	bpl.n	800a70e <_printf_float+0x18a>
 800a70a:	3301      	adds	r3, #1
 800a70c:	6123      	str	r3, [r4, #16]
 800a70e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a712:	2b00      	cmp	r3, #0
 800a714:	d087      	beq.n	800a626 <_printf_float+0xa2>
 800a716:	232d      	movs	r3, #45	; 0x2d
 800a718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a71c:	e783      	b.n	800a626 <_printf_float+0xa2>
 800a71e:	f04f 0a65 	mov.w	sl, #101	; 0x65
 800a722:	e7e2      	b.n	800a6ea <_printf_float+0x166>
 800a724:	f04f 0a45 	mov.w	sl, #69	; 0x45
 800a728:	e7df      	b.n	800a6ea <_printf_float+0x166>
 800a72a:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a72e:	d1bd      	bne.n	800a6ac <_printf_float+0x128>
 800a730:	2900      	cmp	r1, #0
 800a732:	6863      	ldr	r3, [r4, #4]
 800a734:	dd0b      	ble.n	800a74e <_printf_float+0x1ca>
 800a736:	6121      	str	r1, [r4, #16]
 800a738:	b913      	cbnz	r3, 800a740 <_printf_float+0x1bc>
 800a73a:	6822      	ldr	r2, [r4, #0]
 800a73c:	07d0      	lsls	r0, r2, #31
 800a73e:	d502      	bpl.n	800a746 <_printf_float+0x1c2>
 800a740:	3301      	adds	r3, #1
 800a742:	440b      	add	r3, r1
 800a744:	6123      	str	r3, [r4, #16]
 800a746:	65a1      	str	r1, [r4, #88]	; 0x58
 800a748:	f04f 0900 	mov.w	r9, #0
 800a74c:	e7df      	b.n	800a70e <_printf_float+0x18a>
 800a74e:	b913      	cbnz	r3, 800a756 <_printf_float+0x1d2>
 800a750:	6822      	ldr	r2, [r4, #0]
 800a752:	07d2      	lsls	r2, r2, #31
 800a754:	d501      	bpl.n	800a75a <_printf_float+0x1d6>
 800a756:	3302      	adds	r3, #2
 800a758:	e7f4      	b.n	800a744 <_printf_float+0x1c0>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e7f2      	b.n	800a744 <_printf_float+0x1c0>
 800a75e:	2900      	cmp	r1, #0
 800a760:	bfd4      	ite	le
 800a762:	f1c1 0202 	rsble	r2, r1, #2
 800a766:	2201      	movgt	r2, #1
 800a768:	4413      	add	r3, r2
 800a76a:	e7eb      	b.n	800a744 <_printf_float+0x1c0>
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	055a      	lsls	r2, r3, #21
 800a770:	d407      	bmi.n	800a782 <_printf_float+0x1fe>
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	4642      	mov	r2, r8
 800a776:	4631      	mov	r1, r6
 800a778:	4628      	mov	r0, r5
 800a77a:	47b8      	blx	r7
 800a77c:	3001      	adds	r0, #1
 800a77e:	d12b      	bne.n	800a7d8 <_printf_float+0x254>
 800a780:	e75b      	b.n	800a63a <_printf_float+0xb6>
 800a782:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a786:	f240 80dc 	bls.w	800a942 <_printf_float+0x3be>
 800a78a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a78e:	2200      	movs	r2, #0
 800a790:	2300      	movs	r3, #0
 800a792:	f7f6 fa59 	bl	8000c48 <__aeabi_dcmpeq>
 800a796:	2800      	cmp	r0, #0
 800a798:	d033      	beq.n	800a802 <_printf_float+0x27e>
 800a79a:	4a31      	ldr	r2, [pc, #196]	; (800a860 <_printf_float+0x2dc>)
 800a79c:	2301      	movs	r3, #1
 800a79e:	4631      	mov	r1, r6
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	47b8      	blx	r7
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	f43f af48 	beq.w	800a63a <_printf_float+0xb6>
 800a7aa:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
 800a7ae:	4543      	cmp	r3, r8
 800a7b0:	db02      	blt.n	800a7b8 <_printf_float+0x234>
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	07d8      	lsls	r0, r3, #31
 800a7b6:	d50f      	bpl.n	800a7d8 <_printf_float+0x254>
 800a7b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a7bc:	4631      	mov	r1, r6
 800a7be:	4628      	mov	r0, r5
 800a7c0:	47b8      	blx	r7
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	f43f af39 	beq.w	800a63a <_printf_float+0xb6>
 800a7c8:	f04f 0900 	mov.w	r9, #0
 800a7cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7d0:	f104 0a1a 	add.w	sl, r4, #26
 800a7d4:	45c8      	cmp	r8, r9
 800a7d6:	dc09      	bgt.n	800a7ec <_printf_float+0x268>
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	079b      	lsls	r3, r3, #30
 800a7dc:	f100 8102 	bmi.w	800a9e4 <_printf_float+0x460>
 800a7e0:	68e0      	ldr	r0, [r4, #12]
 800a7e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7e4:	4298      	cmp	r0, r3
 800a7e6:	bfb8      	it	lt
 800a7e8:	4618      	movlt	r0, r3
 800a7ea:	e728      	b.n	800a63e <_printf_float+0xba>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	4652      	mov	r2, sl
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	47b8      	blx	r7
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	f43f af1f 	beq.w	800a63a <_printf_float+0xb6>
 800a7fc:	f109 0901 	add.w	r9, r9, #1
 800a800:	e7e8      	b.n	800a7d4 <_printf_float+0x250>
 800a802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a804:	2b00      	cmp	r3, #0
 800a806:	dc38      	bgt.n	800a87a <_printf_float+0x2f6>
 800a808:	4a15      	ldr	r2, [pc, #84]	; (800a860 <_printf_float+0x2dc>)
 800a80a:	2301      	movs	r3, #1
 800a80c:	4631      	mov	r1, r6
 800a80e:	4628      	mov	r0, r5
 800a810:	47b8      	blx	r7
 800a812:	3001      	adds	r0, #1
 800a814:	f43f af11 	beq.w	800a63a <_printf_float+0xb6>
 800a818:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
 800a81c:	ea59 0303 	orrs.w	r3, r9, r3
 800a820:	d102      	bne.n	800a828 <_printf_float+0x2a4>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	07d9      	lsls	r1, r3, #31
 800a826:	d5d7      	bpl.n	800a7d8 <_printf_float+0x254>
 800a828:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a82c:	4631      	mov	r1, r6
 800a82e:	4628      	mov	r0, r5
 800a830:	47b8      	blx	r7
 800a832:	3001      	adds	r0, #1
 800a834:	f43f af01 	beq.w	800a63a <_printf_float+0xb6>
 800a838:	f04f 0a00 	mov.w	sl, #0
 800a83c:	f104 0b1a 	add.w	fp, r4, #26
 800a840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a842:	425b      	negs	r3, r3
 800a844:	4553      	cmp	r3, sl
 800a846:	dc0d      	bgt.n	800a864 <_printf_float+0x2e0>
 800a848:	464b      	mov	r3, r9
 800a84a:	e793      	b.n	800a774 <_printf_float+0x1f0>
 800a84c:	7fefffff 	.word	0x7fefffff
 800a850:	08014396 	.word	0x08014396
 800a854:	08012b48 	.word	0x08012b48
 800a858:	0801439a 	.word	0x0801439a
 800a85c:	0801439e 	.word	0x0801439e
 800a860:	0800e34d 	.word	0x0800e34d
 800a864:	2301      	movs	r3, #1
 800a866:	465a      	mov	r2, fp
 800a868:	4631      	mov	r1, r6
 800a86a:	4628      	mov	r0, r5
 800a86c:	47b8      	blx	r7
 800a86e:	3001      	adds	r0, #1
 800a870:	f43f aee3 	beq.w	800a63a <_printf_float+0xb6>
 800a874:	f10a 0a01 	add.w	sl, sl, #1
 800a878:	e7e2      	b.n	800a840 <_printf_float+0x2bc>
 800a87a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a87c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800a880:	4553      	cmp	r3, sl
 800a882:	bfa8      	it	ge
 800a884:	4653      	movge	r3, sl
 800a886:	2b00      	cmp	r3, #0
 800a888:	4699      	mov	r9, r3
 800a88a:	dc36      	bgt.n	800a8fa <_printf_float+0x376>
 800a88c:	f04f 0b00 	mov.w	fp, #0
 800a890:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a894:	f104 021a 	add.w	r2, r4, #26
 800a898:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a89a:	930a      	str	r3, [sp, #40]	; 0x28
 800a89c:	eba3 0309 	sub.w	r3, r3, r9
 800a8a0:	455b      	cmp	r3, fp
 800a8a2:	dc31      	bgt.n	800a908 <_printf_float+0x384>
 800a8a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8a6:	459a      	cmp	sl, r3
 800a8a8:	dc3a      	bgt.n	800a920 <_printf_float+0x39c>
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	07da      	lsls	r2, r3, #31
 800a8ae:	d437      	bmi.n	800a920 <_printf_float+0x39c>
 800a8b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8b2:	ebaa 0903 	sub.w	r9, sl, r3
 800a8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b8:	ebaa 0303 	sub.w	r3, sl, r3
 800a8bc:	4599      	cmp	r9, r3
 800a8be:	bfa8      	it	ge
 800a8c0:	4699      	movge	r9, r3
 800a8c2:	f1b9 0f00 	cmp.w	r9, #0
 800a8c6:	dc33      	bgt.n	800a930 <_printf_float+0x3ac>
 800a8c8:	f04f 0800 	mov.w	r8, #0
 800a8cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8d0:	f104 0b1a 	add.w	fp, r4, #26
 800a8d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8d6:	ebaa 0303 	sub.w	r3, sl, r3
 800a8da:	eba3 0309 	sub.w	r3, r3, r9
 800a8de:	4543      	cmp	r3, r8
 800a8e0:	f77f af7a 	ble.w	800a7d8 <_printf_float+0x254>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	465a      	mov	r2, fp
 800a8e8:	4631      	mov	r1, r6
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	47b8      	blx	r7
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	f43f aea3 	beq.w	800a63a <_printf_float+0xb6>
 800a8f4:	f108 0801 	add.w	r8, r8, #1
 800a8f8:	e7ec      	b.n	800a8d4 <_printf_float+0x350>
 800a8fa:	4642      	mov	r2, r8
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	4628      	mov	r0, r5
 800a900:	47b8      	blx	r7
 800a902:	3001      	adds	r0, #1
 800a904:	d1c2      	bne.n	800a88c <_printf_float+0x308>
 800a906:	e698      	b.n	800a63a <_printf_float+0xb6>
 800a908:	2301      	movs	r3, #1
 800a90a:	4631      	mov	r1, r6
 800a90c:	4628      	mov	r0, r5
 800a90e:	920a      	str	r2, [sp, #40]	; 0x28
 800a910:	47b8      	blx	r7
 800a912:	3001      	adds	r0, #1
 800a914:	f43f ae91 	beq.w	800a63a <_printf_float+0xb6>
 800a918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a91a:	f10b 0b01 	add.w	fp, fp, #1
 800a91e:	e7bb      	b.n	800a898 <_printf_float+0x314>
 800a920:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a924:	4631      	mov	r1, r6
 800a926:	4628      	mov	r0, r5
 800a928:	47b8      	blx	r7
 800a92a:	3001      	adds	r0, #1
 800a92c:	d1c0      	bne.n	800a8b0 <_printf_float+0x32c>
 800a92e:	e684      	b.n	800a63a <_printf_float+0xb6>
 800a930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a932:	464b      	mov	r3, r9
 800a934:	4442      	add	r2, r8
 800a936:	4631      	mov	r1, r6
 800a938:	4628      	mov	r0, r5
 800a93a:	47b8      	blx	r7
 800a93c:	3001      	adds	r0, #1
 800a93e:	d1c3      	bne.n	800a8c8 <_printf_float+0x344>
 800a940:	e67b      	b.n	800a63a <_printf_float+0xb6>
 800a942:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800a946:	f1ba 0f01 	cmp.w	sl, #1
 800a94a:	dc01      	bgt.n	800a950 <_printf_float+0x3cc>
 800a94c:	07db      	lsls	r3, r3, #31
 800a94e:	d536      	bpl.n	800a9be <_printf_float+0x43a>
 800a950:	2301      	movs	r3, #1
 800a952:	4642      	mov	r2, r8
 800a954:	4631      	mov	r1, r6
 800a956:	4628      	mov	r0, r5
 800a958:	47b8      	blx	r7
 800a95a:	3001      	adds	r0, #1
 800a95c:	f43f ae6d 	beq.w	800a63a <_printf_float+0xb6>
 800a960:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a964:	4631      	mov	r1, r6
 800a966:	4628      	mov	r0, r5
 800a968:	47b8      	blx	r7
 800a96a:	3001      	adds	r0, #1
 800a96c:	f43f ae65 	beq.w	800a63a <_printf_float+0xb6>
 800a970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a974:	2200      	movs	r2, #0
 800a976:	2300      	movs	r3, #0
 800a978:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a97c:	f7f6 f964 	bl	8000c48 <__aeabi_dcmpeq>
 800a980:	b9c0      	cbnz	r0, 800a9b4 <_printf_float+0x430>
 800a982:	4653      	mov	r3, sl
 800a984:	f108 0201 	add.w	r2, r8, #1
 800a988:	4631      	mov	r1, r6
 800a98a:	4628      	mov	r0, r5
 800a98c:	47b8      	blx	r7
 800a98e:	3001      	adds	r0, #1
 800a990:	d10c      	bne.n	800a9ac <_printf_float+0x428>
 800a992:	e652      	b.n	800a63a <_printf_float+0xb6>
 800a994:	2301      	movs	r3, #1
 800a996:	465a      	mov	r2, fp
 800a998:	4631      	mov	r1, r6
 800a99a:	4628      	mov	r0, r5
 800a99c:	47b8      	blx	r7
 800a99e:	3001      	adds	r0, #1
 800a9a0:	f43f ae4b 	beq.w	800a63a <_printf_float+0xb6>
 800a9a4:	f108 0801 	add.w	r8, r8, #1
 800a9a8:	45d0      	cmp	r8, sl
 800a9aa:	dbf3      	blt.n	800a994 <_printf_float+0x410>
 800a9ac:	464b      	mov	r3, r9
 800a9ae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9b2:	e6e0      	b.n	800a776 <_printf_float+0x1f2>
 800a9b4:	f04f 0800 	mov.w	r8, #0
 800a9b8:	f104 0b1a 	add.w	fp, r4, #26
 800a9bc:	e7f4      	b.n	800a9a8 <_printf_float+0x424>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	4642      	mov	r2, r8
 800a9c2:	e7e1      	b.n	800a988 <_printf_float+0x404>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	464a      	mov	r2, r9
 800a9c8:	4631      	mov	r1, r6
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	47b8      	blx	r7
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	f43f ae33 	beq.w	800a63a <_printf_float+0xb6>
 800a9d4:	f108 0801 	add.w	r8, r8, #1
 800a9d8:	68e3      	ldr	r3, [r4, #12]
 800a9da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a9dc:	1a5b      	subs	r3, r3, r1
 800a9de:	4543      	cmp	r3, r8
 800a9e0:	dcf0      	bgt.n	800a9c4 <_printf_float+0x440>
 800a9e2:	e6fd      	b.n	800a7e0 <_printf_float+0x25c>
 800a9e4:	f04f 0800 	mov.w	r8, #0
 800a9e8:	f104 0919 	add.w	r9, r4, #25
 800a9ec:	e7f4      	b.n	800a9d8 <_printf_float+0x454>
 800a9ee:	bf00      	nop

0800a9f0 <_printf_i>:
 800a9f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f4:	7e0f      	ldrb	r7, [r1, #24]
 800a9f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9f8:	2f78      	cmp	r7, #120	; 0x78
 800a9fa:	4691      	mov	r9, r2
 800a9fc:	4680      	mov	r8, r0
 800a9fe:	460c      	mov	r4, r1
 800aa00:	469a      	mov	sl, r3
 800aa02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa06:	d807      	bhi.n	800aa18 <_printf_i+0x28>
 800aa08:	2f62      	cmp	r7, #98	; 0x62
 800aa0a:	d80a      	bhi.n	800aa22 <_printf_i+0x32>
 800aa0c:	2f00      	cmp	r7, #0
 800aa0e:	f000 80e0 	beq.w	800abd2 <_printf_i+0x1e2>
 800aa12:	2f58      	cmp	r7, #88	; 0x58
 800aa14:	f000 80bb 	beq.w	800ab8e <_printf_i+0x19e>
 800aa18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa20:	e03a      	b.n	800aa98 <_printf_i+0xa8>
 800aa22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa26:	2b15      	cmp	r3, #21
 800aa28:	d8f6      	bhi.n	800aa18 <_printf_i+0x28>
 800aa2a:	a101      	add	r1, pc, #4	; (adr r1, 800aa30 <_printf_i+0x40>)
 800aa2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa30:	0800aa89 	.word	0x0800aa89
 800aa34:	0800aa9d 	.word	0x0800aa9d
 800aa38:	0800aa19 	.word	0x0800aa19
 800aa3c:	0800aa19 	.word	0x0800aa19
 800aa40:	0800aa19 	.word	0x0800aa19
 800aa44:	0800aa19 	.word	0x0800aa19
 800aa48:	0800aa9d 	.word	0x0800aa9d
 800aa4c:	0800aa19 	.word	0x0800aa19
 800aa50:	0800aa19 	.word	0x0800aa19
 800aa54:	0800aa19 	.word	0x0800aa19
 800aa58:	0800aa19 	.word	0x0800aa19
 800aa5c:	0800abb9 	.word	0x0800abb9
 800aa60:	0800ab2d 	.word	0x0800ab2d
 800aa64:	0800ab6f 	.word	0x0800ab6f
 800aa68:	0800aa19 	.word	0x0800aa19
 800aa6c:	0800aa19 	.word	0x0800aa19
 800aa70:	0800abdb 	.word	0x0800abdb
 800aa74:	0800aa19 	.word	0x0800aa19
 800aa78:	0800ab2d 	.word	0x0800ab2d
 800aa7c:	0800aa19 	.word	0x0800aa19
 800aa80:	0800aa19 	.word	0x0800aa19
 800aa84:	0800ab77 	.word	0x0800ab77
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	1d1a      	adds	r2, r3, #4
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	602a      	str	r2, [r5, #0]
 800aa90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e0ab      	b.n	800abf4 <_printf_i+0x204>
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	6829      	ldr	r1, [r5, #0]
 800aaa0:	061f      	lsls	r7, r3, #24
 800aaa2:	f101 0004 	add.w	r0, r1, #4
 800aaa6:	6028      	str	r0, [r5, #0]
 800aaa8:	d501      	bpl.n	800aaae <_printf_i+0xbe>
 800aaaa:	680d      	ldr	r5, [r1, #0]
 800aaac:	e003      	b.n	800aab6 <_printf_i+0xc6>
 800aaae:	065e      	lsls	r6, r3, #25
 800aab0:	d5fb      	bpl.n	800aaaa <_printf_i+0xba>
 800aab2:	f9b1 5000 	ldrsh.w	r5, [r1]
 800aab6:	6861      	ldr	r1, [r4, #4]
 800aab8:	2d00      	cmp	r5, #0
 800aaba:	da7a      	bge.n	800abb2 <_printf_i+0x1c2>
 800aabc:	202d      	movs	r0, #45	; 0x2d
 800aabe:	2900      	cmp	r1, #0
 800aac0:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800aac4:	60a1      	str	r1, [r4, #8]
 800aac6:	da2d      	bge.n	800ab24 <_printf_i+0x134>
 800aac8:	485e      	ldr	r0, [pc, #376]	; (800ac44 <_printf_i+0x254>)
 800aaca:	426d      	negs	r5, r5
 800aacc:	230a      	movs	r3, #10
 800aace:	4616      	mov	r6, r2
 800aad0:	fbb5 f1f3 	udiv	r1, r5, r3
 800aad4:	fb03 5711 	mls	r7, r3, r1, r5
 800aad8:	5dc7      	ldrb	r7, [r0, r7]
 800aada:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aade:	462f      	mov	r7, r5
 800aae0:	42bb      	cmp	r3, r7
 800aae2:	460d      	mov	r5, r1
 800aae4:	d9f4      	bls.n	800aad0 <_printf_i+0xe0>
 800aae6:	2b08      	cmp	r3, #8
 800aae8:	d10b      	bne.n	800ab02 <_printf_i+0x112>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	07df      	lsls	r7, r3, #31
 800aaee:	d508      	bpl.n	800ab02 <_printf_i+0x112>
 800aaf0:	6923      	ldr	r3, [r4, #16]
 800aaf2:	6861      	ldr	r1, [r4, #4]
 800aaf4:	4299      	cmp	r1, r3
 800aaf6:	bfde      	ittt	le
 800aaf8:	2330      	movle	r3, #48	; 0x30
 800aafa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aafe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab02:	1b92      	subs	r2, r2, r6
 800ab04:	6122      	str	r2, [r4, #16]
 800ab06:	f8cd a000 	str.w	sl, [sp]
 800ab0a:	464b      	mov	r3, r9
 800ab0c:	aa03      	add	r2, sp, #12
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4640      	mov	r0, r8
 800ab12:	f002 f9ab 	bl	800ce6c <_printf_common>
 800ab16:	3001      	adds	r0, #1
 800ab18:	d171      	bne.n	800abfe <_printf_i+0x20e>
 800ab1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab1e:	b004      	add	sp, #16
 800ab20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab24:	f023 0304 	bic.w	r3, r3, #4
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	e7cd      	b.n	800aac8 <_printf_i+0xd8>
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	6820      	ldr	r0, [r4, #0]
 800ab30:	1d19      	adds	r1, r3, #4
 800ab32:	6029      	str	r1, [r5, #0]
 800ab34:	0605      	lsls	r5, r0, #24
 800ab36:	d501      	bpl.n	800ab3c <_printf_i+0x14c>
 800ab38:	681d      	ldr	r5, [r3, #0]
 800ab3a:	e002      	b.n	800ab42 <_printf_i+0x152>
 800ab3c:	0641      	lsls	r1, r0, #25
 800ab3e:	d5fb      	bpl.n	800ab38 <_printf_i+0x148>
 800ab40:	881d      	ldrh	r5, [r3, #0]
 800ab42:	4840      	ldr	r0, [pc, #256]	; (800ac44 <_printf_i+0x254>)
 800ab44:	2f6f      	cmp	r7, #111	; 0x6f
 800ab46:	bf14      	ite	ne
 800ab48:	230a      	movne	r3, #10
 800ab4a:	2308      	moveq	r3, #8
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab52:	6866      	ldr	r6, [r4, #4]
 800ab54:	60a6      	str	r6, [r4, #8]
 800ab56:	2e00      	cmp	r6, #0
 800ab58:	dbb9      	blt.n	800aace <_printf_i+0xde>
 800ab5a:	6821      	ldr	r1, [r4, #0]
 800ab5c:	f021 0104 	bic.w	r1, r1, #4
 800ab60:	6021      	str	r1, [r4, #0]
 800ab62:	2d00      	cmp	r5, #0
 800ab64:	d1b3      	bne.n	800aace <_printf_i+0xde>
 800ab66:	2e00      	cmp	r6, #0
 800ab68:	d1b1      	bne.n	800aace <_printf_i+0xde>
 800ab6a:	4616      	mov	r6, r2
 800ab6c:	e7bb      	b.n	800aae6 <_printf_i+0xf6>
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	f043 0320 	orr.w	r3, r3, #32
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	4834      	ldr	r0, [pc, #208]	; (800ac48 <_printf_i+0x258>)
 800ab78:	2778      	movs	r7, #120	; 0x78
 800ab7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab7e:	6829      	ldr	r1, [r5, #0]
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	1d0e      	adds	r6, r1, #4
 800ab84:	602e      	str	r6, [r5, #0]
 800ab86:	061e      	lsls	r6, r3, #24
 800ab88:	d503      	bpl.n	800ab92 <_printf_i+0x1a2>
 800ab8a:	680d      	ldr	r5, [r1, #0]
 800ab8c:	e004      	b.n	800ab98 <_printf_i+0x1a8>
 800ab8e:	482d      	ldr	r0, [pc, #180]	; (800ac44 <_printf_i+0x254>)
 800ab90:	e7f3      	b.n	800ab7a <_printf_i+0x18a>
 800ab92:	065d      	lsls	r5, r3, #25
 800ab94:	d5f9      	bpl.n	800ab8a <_printf_i+0x19a>
 800ab96:	880d      	ldrh	r5, [r1, #0]
 800ab98:	07d9      	lsls	r1, r3, #31
 800ab9a:	bf44      	itt	mi
 800ab9c:	f043 0320 	orrmi.w	r3, r3, #32
 800aba0:	6023      	strmi	r3, [r4, #0]
 800aba2:	b10d      	cbz	r5, 800aba8 <_printf_i+0x1b8>
 800aba4:	2310      	movs	r3, #16
 800aba6:	e7d1      	b.n	800ab4c <_printf_i+0x15c>
 800aba8:	6823      	ldr	r3, [r4, #0]
 800abaa:	f023 0320 	bic.w	r3, r3, #32
 800abae:	6023      	str	r3, [r4, #0]
 800abb0:	e7f8      	b.n	800aba4 <_printf_i+0x1b4>
 800abb2:	4824      	ldr	r0, [pc, #144]	; (800ac44 <_printf_i+0x254>)
 800abb4:	230a      	movs	r3, #10
 800abb6:	e7cc      	b.n	800ab52 <_printf_i+0x162>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	6826      	ldr	r6, [r4, #0]
 800abbc:	6961      	ldr	r1, [r4, #20]
 800abbe:	1d18      	adds	r0, r3, #4
 800abc0:	6028      	str	r0, [r5, #0]
 800abc2:	0635      	lsls	r5, r6, #24
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	d501      	bpl.n	800abcc <_printf_i+0x1dc>
 800abc8:	6019      	str	r1, [r3, #0]
 800abca:	e002      	b.n	800abd2 <_printf_i+0x1e2>
 800abcc:	0670      	lsls	r0, r6, #25
 800abce:	d5fb      	bpl.n	800abc8 <_printf_i+0x1d8>
 800abd0:	8019      	strh	r1, [r3, #0]
 800abd2:	2300      	movs	r3, #0
 800abd4:	6123      	str	r3, [r4, #16]
 800abd6:	4616      	mov	r6, r2
 800abd8:	e795      	b.n	800ab06 <_printf_i+0x116>
 800abda:	682b      	ldr	r3, [r5, #0]
 800abdc:	1d1a      	adds	r2, r3, #4
 800abde:	602a      	str	r2, [r5, #0]
 800abe0:	681e      	ldr	r6, [r3, #0]
 800abe2:	6862      	ldr	r2, [r4, #4]
 800abe4:	2100      	movs	r1, #0
 800abe6:	4630      	mov	r0, r6
 800abe8:	f7f5 fada 	bl	80001a0 <memchr>
 800abec:	b108      	cbz	r0, 800abf2 <_printf_i+0x202>
 800abee:	1b80      	subs	r0, r0, r6
 800abf0:	6060      	str	r0, [r4, #4]
 800abf2:	6863      	ldr	r3, [r4, #4]
 800abf4:	6123      	str	r3, [r4, #16]
 800abf6:	2300      	movs	r3, #0
 800abf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abfc:	e783      	b.n	800ab06 <_printf_i+0x116>
 800abfe:	6923      	ldr	r3, [r4, #16]
 800ac00:	4632      	mov	r2, r6
 800ac02:	4649      	mov	r1, r9
 800ac04:	4640      	mov	r0, r8
 800ac06:	47d0      	blx	sl
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d086      	beq.n	800ab1a <_printf_i+0x12a>
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	079b      	lsls	r3, r3, #30
 800ac10:	d414      	bmi.n	800ac3c <_printf_i+0x24c>
 800ac12:	68e0      	ldr	r0, [r4, #12]
 800ac14:	9b03      	ldr	r3, [sp, #12]
 800ac16:	4298      	cmp	r0, r3
 800ac18:	bfb8      	it	lt
 800ac1a:	4618      	movlt	r0, r3
 800ac1c:	e77f      	b.n	800ab1e <_printf_i+0x12e>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	4632      	mov	r2, r6
 800ac22:	4649      	mov	r1, r9
 800ac24:	4640      	mov	r0, r8
 800ac26:	47d0      	blx	sl
 800ac28:	3001      	adds	r0, #1
 800ac2a:	f43f af76 	beq.w	800ab1a <_printf_i+0x12a>
 800ac2e:	3501      	adds	r5, #1
 800ac30:	68e3      	ldr	r3, [r4, #12]
 800ac32:	9903      	ldr	r1, [sp, #12]
 800ac34:	1a5b      	subs	r3, r3, r1
 800ac36:	42ab      	cmp	r3, r5
 800ac38:	dcf1      	bgt.n	800ac1e <_printf_i+0x22e>
 800ac3a:	e7ea      	b.n	800ac12 <_printf_i+0x222>
 800ac3c:	2500      	movs	r5, #0
 800ac3e:	f104 0619 	add.w	r6, r4, #25
 800ac42:	e7f5      	b.n	800ac30 <_printf_i+0x240>
 800ac44:	080143a2 	.word	0x080143a2
 800ac48:	080143b3 	.word	0x080143b3

0800ac4c <iprintf>:
 800ac4c:	b40f      	push	{r0, r1, r2, r3}
 800ac4e:	4b0a      	ldr	r3, [pc, #40]	; (800ac78 <iprintf+0x2c>)
 800ac50:	b513      	push	{r0, r1, r4, lr}
 800ac52:	681c      	ldr	r4, [r3, #0]
 800ac54:	b124      	cbz	r4, 800ac60 <iprintf+0x14>
 800ac56:	69a3      	ldr	r3, [r4, #24]
 800ac58:	b913      	cbnz	r3, 800ac60 <iprintf+0x14>
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f000 f988 	bl	800af70 <__sinit>
 800ac60:	ab05      	add	r3, sp, #20
 800ac62:	9a04      	ldr	r2, [sp, #16]
 800ac64:	68a1      	ldr	r1, [r4, #8]
 800ac66:	9301      	str	r3, [sp, #4]
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f7ff fb5f 	bl	800a32c <_vfiprintf_r>
 800ac6e:	b002      	add	sp, #8
 800ac70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac74:	b004      	add	sp, #16
 800ac76:	4770      	bx	lr
 800ac78:	20000120 	.word	0x20000120

0800ac7c <_sbrk_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	4d06      	ldr	r5, [pc, #24]	; (800ac98 <_sbrk_r+0x1c>)
 800ac80:	2300      	movs	r3, #0
 800ac82:	4604      	mov	r4, r0
 800ac84:	4608      	mov	r0, r1
 800ac86:	602b      	str	r3, [r5, #0]
 800ac88:	f7fa fe10 	bl	80058ac <_sbrk>
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	d102      	bne.n	800ac96 <_sbrk_r+0x1a>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	b103      	cbz	r3, 800ac96 <_sbrk_r+0x1a>
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	bd38      	pop	{r3, r4, r5, pc}
 800ac98:	20000cf8 	.word	0x20000cf8

0800ac9c <vsniprintf>:
 800ac9c:	b507      	push	{r0, r1, r2, lr}
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	4613      	mov	r3, r2
 800aca2:	460a      	mov	r2, r1
 800aca4:	4601      	mov	r1, r0
 800aca6:	4803      	ldr	r0, [pc, #12]	; (800acb4 <vsniprintf+0x18>)
 800aca8:	6800      	ldr	r0, [r0, #0]
 800acaa:	f002 f985 	bl	800cfb8 <_vsniprintf_r>
 800acae:	b003      	add	sp, #12
 800acb0:	f85d fb04 	ldr.w	pc, [sp], #4
 800acb4:	20000120 	.word	0x20000120

0800acb8 <_vsiprintf_r>:
 800acb8:	b500      	push	{lr}
 800acba:	b09b      	sub	sp, #108	; 0x6c
 800acbc:	9100      	str	r1, [sp, #0]
 800acbe:	9104      	str	r1, [sp, #16]
 800acc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acc4:	9105      	str	r1, [sp, #20]
 800acc6:	9102      	str	r1, [sp, #8]
 800acc8:	4905      	ldr	r1, [pc, #20]	; (800ace0 <_vsiprintf_r+0x28>)
 800acca:	9103      	str	r1, [sp, #12]
 800accc:	4669      	mov	r1, sp
 800acce:	f000 fd35 	bl	800b73c <_svfiprintf_r>
 800acd2:	9b00      	ldr	r3, [sp, #0]
 800acd4:	2200      	movs	r2, #0
 800acd6:	701a      	strb	r2, [r3, #0]
 800acd8:	b01b      	add	sp, #108	; 0x6c
 800acda:	f85d fb04 	ldr.w	pc, [sp], #4
 800acde:	bf00      	nop
 800ace0:	ffff0208 	.word	0xffff0208

0800ace4 <vsiprintf>:
 800ace4:	4613      	mov	r3, r2
 800ace6:	460a      	mov	r2, r1
 800ace8:	4601      	mov	r1, r0
 800acea:	4802      	ldr	r0, [pc, #8]	; (800acf4 <vsiprintf+0x10>)
 800acec:	6800      	ldr	r0, [r0, #0]
 800acee:	f7ff bfe3 	b.w	800acb8 <_vsiprintf_r>
 800acf2:	bf00      	nop
 800acf4:	20000120 	.word	0x20000120

0800acf8 <__swbuf_r>:
 800acf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfa:	460e      	mov	r6, r1
 800acfc:	4614      	mov	r4, r2
 800acfe:	4605      	mov	r5, r0
 800ad00:	b118      	cbz	r0, 800ad0a <__swbuf_r+0x12>
 800ad02:	6983      	ldr	r3, [r0, #24]
 800ad04:	b90b      	cbnz	r3, 800ad0a <__swbuf_r+0x12>
 800ad06:	f000 f933 	bl	800af70 <__sinit>
 800ad0a:	4b21      	ldr	r3, [pc, #132]	; (800ad90 <__swbuf_r+0x98>)
 800ad0c:	429c      	cmp	r4, r3
 800ad0e:	d110      	bne.n	800ad32 <__swbuf_r+0x3a>
 800ad10:	686c      	ldr	r4, [r5, #4]
 800ad12:	69a3      	ldr	r3, [r4, #24]
 800ad14:	60a3      	str	r3, [r4, #8]
 800ad16:	89a3      	ldrh	r3, [r4, #12]
 800ad18:	071a      	lsls	r2, r3, #28
 800ad1a:	d501      	bpl.n	800ad20 <__swbuf_r+0x28>
 800ad1c:	6923      	ldr	r3, [r4, #16]
 800ad1e:	b993      	cbnz	r3, 800ad46 <__swbuf_r+0x4e>
 800ad20:	4621      	mov	r1, r4
 800ad22:	4628      	mov	r0, r5
 800ad24:	f000 f83a 	bl	800ad9c <__swsetup_r>
 800ad28:	b168      	cbz	r0, 800ad46 <__swbuf_r+0x4e>
 800ad2a:	f04f 37ff 	mov.w	r7, #4294967295
 800ad2e:	4638      	mov	r0, r7
 800ad30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad32:	4b18      	ldr	r3, [pc, #96]	; (800ad94 <__swbuf_r+0x9c>)
 800ad34:	429c      	cmp	r4, r3
 800ad36:	d101      	bne.n	800ad3c <__swbuf_r+0x44>
 800ad38:	68ac      	ldr	r4, [r5, #8]
 800ad3a:	e7ea      	b.n	800ad12 <__swbuf_r+0x1a>
 800ad3c:	4b16      	ldr	r3, [pc, #88]	; (800ad98 <__swbuf_r+0xa0>)
 800ad3e:	429c      	cmp	r4, r3
 800ad40:	bf08      	it	eq
 800ad42:	68ec      	ldreq	r4, [r5, #12]
 800ad44:	e7e5      	b.n	800ad12 <__swbuf_r+0x1a>
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	6820      	ldr	r0, [r4, #0]
 800ad4a:	1ac0      	subs	r0, r0, r3
 800ad4c:	6963      	ldr	r3, [r4, #20]
 800ad4e:	b2f6      	uxtb	r6, r6
 800ad50:	4283      	cmp	r3, r0
 800ad52:	4637      	mov	r7, r6
 800ad54:	dc05      	bgt.n	800ad62 <__swbuf_r+0x6a>
 800ad56:	4621      	mov	r1, r4
 800ad58:	4628      	mov	r0, r5
 800ad5a:	f000 f88b 	bl	800ae74 <_fflush_r>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d1e3      	bne.n	800ad2a <__swbuf_r+0x32>
 800ad62:	68a3      	ldr	r3, [r4, #8]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	60a3      	str	r3, [r4, #8]
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	6022      	str	r2, [r4, #0]
 800ad6e:	701e      	strb	r6, [r3, #0]
 800ad70:	6963      	ldr	r3, [r4, #20]
 800ad72:	3001      	adds	r0, #1
 800ad74:	4283      	cmp	r3, r0
 800ad76:	d004      	beq.n	800ad82 <__swbuf_r+0x8a>
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	07db      	lsls	r3, r3, #31
 800ad7c:	d5d7      	bpl.n	800ad2e <__swbuf_r+0x36>
 800ad7e:	2e0a      	cmp	r6, #10
 800ad80:	d1d5      	bne.n	800ad2e <__swbuf_r+0x36>
 800ad82:	4621      	mov	r1, r4
 800ad84:	4628      	mov	r0, r5
 800ad86:	f000 f875 	bl	800ae74 <_fflush_r>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d0cf      	beq.n	800ad2e <__swbuf_r+0x36>
 800ad8e:	e7cc      	b.n	800ad2a <__swbuf_r+0x32>
 800ad90:	0800e0c8 	.word	0x0800e0c8
 800ad94:	0800e0a8 	.word	0x0800e0a8
 800ad98:	0800e088 	.word	0x0800e088

0800ad9c <__swsetup_r>:
 800ad9c:	4b31      	ldr	r3, [pc, #196]	; (800ae64 <__swsetup_r+0xc8>)
 800ad9e:	b570      	push	{r4, r5, r6, lr}
 800ada0:	681d      	ldr	r5, [r3, #0]
 800ada2:	4606      	mov	r6, r0
 800ada4:	460c      	mov	r4, r1
 800ada6:	b125      	cbz	r5, 800adb2 <__swsetup_r+0x16>
 800ada8:	69ab      	ldr	r3, [r5, #24]
 800adaa:	b913      	cbnz	r3, 800adb2 <__swsetup_r+0x16>
 800adac:	4628      	mov	r0, r5
 800adae:	f000 f8df 	bl	800af70 <__sinit>
 800adb2:	4b2d      	ldr	r3, [pc, #180]	; (800ae68 <__swsetup_r+0xcc>)
 800adb4:	429c      	cmp	r4, r3
 800adb6:	d10e      	bne.n	800add6 <__swsetup_r+0x3a>
 800adb8:	686c      	ldr	r4, [r5, #4]
 800adba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adbe:	071a      	lsls	r2, r3, #28
 800adc0:	d42c      	bmi.n	800ae1c <__swsetup_r+0x80>
 800adc2:	06dd      	lsls	r5, r3, #27
 800adc4:	d411      	bmi.n	800adea <__swsetup_r+0x4e>
 800adc6:	2209      	movs	r2, #9
 800adc8:	6032      	str	r2, [r6, #0]
 800adca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adce:	81a3      	strh	r3, [r4, #12]
 800add0:	f04f 30ff 	mov.w	r0, #4294967295
 800add4:	e03d      	b.n	800ae52 <__swsetup_r+0xb6>
 800add6:	4b25      	ldr	r3, [pc, #148]	; (800ae6c <__swsetup_r+0xd0>)
 800add8:	429c      	cmp	r4, r3
 800adda:	d101      	bne.n	800ade0 <__swsetup_r+0x44>
 800addc:	68ac      	ldr	r4, [r5, #8]
 800adde:	e7ec      	b.n	800adba <__swsetup_r+0x1e>
 800ade0:	4b23      	ldr	r3, [pc, #140]	; (800ae70 <__swsetup_r+0xd4>)
 800ade2:	429c      	cmp	r4, r3
 800ade4:	bf08      	it	eq
 800ade6:	68ec      	ldreq	r4, [r5, #12]
 800ade8:	e7e7      	b.n	800adba <__swsetup_r+0x1e>
 800adea:	0758      	lsls	r0, r3, #29
 800adec:	d512      	bpl.n	800ae14 <__swsetup_r+0x78>
 800adee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adf0:	b141      	cbz	r1, 800ae04 <__swsetup_r+0x68>
 800adf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adf6:	4299      	cmp	r1, r3
 800adf8:	d002      	beq.n	800ae00 <__swsetup_r+0x64>
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7ff f9f2 	bl	800a1e4 <_free_r>
 800ae00:	2300      	movs	r3, #0
 800ae02:	6363      	str	r3, [r4, #52]	; 0x34
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae0a:	81a3      	strh	r3, [r4, #12]
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	6063      	str	r3, [r4, #4]
 800ae10:	6923      	ldr	r3, [r4, #16]
 800ae12:	6023      	str	r3, [r4, #0]
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f043 0308 	orr.w	r3, r3, #8
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	b94b      	cbnz	r3, 800ae34 <__swsetup_r+0x98>
 800ae20:	89a3      	ldrh	r3, [r4, #12]
 800ae22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae2a:	d003      	beq.n	800ae34 <__swsetup_r+0x98>
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	4630      	mov	r0, r6
 800ae30:	f000 f920 	bl	800b074 <__smakebuf_r>
 800ae34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae38:	f013 0201 	ands.w	r2, r3, #1
 800ae3c:	d00a      	beq.n	800ae54 <__swsetup_r+0xb8>
 800ae3e:	2200      	movs	r2, #0
 800ae40:	60a2      	str	r2, [r4, #8]
 800ae42:	6962      	ldr	r2, [r4, #20]
 800ae44:	4252      	negs	r2, r2
 800ae46:	61a2      	str	r2, [r4, #24]
 800ae48:	6922      	ldr	r2, [r4, #16]
 800ae4a:	b942      	cbnz	r2, 800ae5e <__swsetup_r+0xc2>
 800ae4c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ae50:	d1bb      	bne.n	800adca <__swsetup_r+0x2e>
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	0799      	lsls	r1, r3, #30
 800ae56:	bf58      	it	pl
 800ae58:	6962      	ldrpl	r2, [r4, #20]
 800ae5a:	60a2      	str	r2, [r4, #8]
 800ae5c:	e7f4      	b.n	800ae48 <__swsetup_r+0xac>
 800ae5e:	2000      	movs	r0, #0
 800ae60:	e7f7      	b.n	800ae52 <__swsetup_r+0xb6>
 800ae62:	bf00      	nop
 800ae64:	20000120 	.word	0x20000120
 800ae68:	0800e0c8 	.word	0x0800e0c8
 800ae6c:	0800e0a8 	.word	0x0800e0a8
 800ae70:	0800e088 	.word	0x0800e088

0800ae74 <_fflush_r>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	690b      	ldr	r3, [r1, #16]
 800ae78:	4605      	mov	r5, r0
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	b913      	cbnz	r3, 800ae84 <_fflush_r+0x10>
 800ae7e:	2500      	movs	r5, #0
 800ae80:	4628      	mov	r0, r5
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	b118      	cbz	r0, 800ae8e <_fflush_r+0x1a>
 800ae86:	6983      	ldr	r3, [r0, #24]
 800ae88:	b90b      	cbnz	r3, 800ae8e <_fflush_r+0x1a>
 800ae8a:	f000 f871 	bl	800af70 <__sinit>
 800ae8e:	4b14      	ldr	r3, [pc, #80]	; (800aee0 <_fflush_r+0x6c>)
 800ae90:	429c      	cmp	r4, r3
 800ae92:	d11b      	bne.n	800aecc <_fflush_r+0x58>
 800ae94:	686c      	ldr	r4, [r5, #4]
 800ae96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d0ef      	beq.n	800ae7e <_fflush_r+0xa>
 800ae9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aea0:	07d0      	lsls	r0, r2, #31
 800aea2:	d404      	bmi.n	800aeae <_fflush_r+0x3a>
 800aea4:	0599      	lsls	r1, r3, #22
 800aea6:	d402      	bmi.n	800aeae <_fflush_r+0x3a>
 800aea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeaa:	f7fa fd43 	bl	8005934 <__retarget_lock_acquire_recursive>
 800aeae:	4628      	mov	r0, r5
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	f002 f934 	bl	800d11e <__sflush_r>
 800aeb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeb8:	07da      	lsls	r2, r3, #31
 800aeba:	4605      	mov	r5, r0
 800aebc:	d4e0      	bmi.n	800ae80 <_fflush_r+0xc>
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	059b      	lsls	r3, r3, #22
 800aec2:	d4dd      	bmi.n	800ae80 <_fflush_r+0xc>
 800aec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aec6:	f7fa fd51 	bl	800596c <__retarget_lock_release_recursive>
 800aeca:	e7d9      	b.n	800ae80 <_fflush_r+0xc>
 800aecc:	4b05      	ldr	r3, [pc, #20]	; (800aee4 <_fflush_r+0x70>)
 800aece:	429c      	cmp	r4, r3
 800aed0:	d101      	bne.n	800aed6 <_fflush_r+0x62>
 800aed2:	68ac      	ldr	r4, [r5, #8]
 800aed4:	e7df      	b.n	800ae96 <_fflush_r+0x22>
 800aed6:	4b04      	ldr	r3, [pc, #16]	; (800aee8 <_fflush_r+0x74>)
 800aed8:	429c      	cmp	r4, r3
 800aeda:	bf08      	it	eq
 800aedc:	68ec      	ldreq	r4, [r5, #12]
 800aede:	e7da      	b.n	800ae96 <_fflush_r+0x22>
 800aee0:	0800e0c8 	.word	0x0800e0c8
 800aee4:	0800e0a8 	.word	0x0800e0a8
 800aee8:	0800e088 	.word	0x0800e088

0800aeec <std>:
 800aeec:	2300      	movs	r3, #0
 800aeee:	b510      	push	{r4, lr}
 800aef0:	4604      	mov	r4, r0
 800aef2:	e9c0 3300 	strd	r3, r3, [r0]
 800aef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aefa:	6083      	str	r3, [r0, #8]
 800aefc:	8181      	strh	r1, [r0, #12]
 800aefe:	6643      	str	r3, [r0, #100]	; 0x64
 800af00:	81c2      	strh	r2, [r0, #14]
 800af02:	6183      	str	r3, [r0, #24]
 800af04:	4619      	mov	r1, r3
 800af06:	2208      	movs	r2, #8
 800af08:	305c      	adds	r0, #92	; 0x5c
 800af0a:	f001 fedf 	bl	800cccc <memset>
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <std+0x38>)
 800af10:	6263      	str	r3, [r4, #36]	; 0x24
 800af12:	4b05      	ldr	r3, [pc, #20]	; (800af28 <std+0x3c>)
 800af14:	62a3      	str	r3, [r4, #40]	; 0x28
 800af16:	4b05      	ldr	r3, [pc, #20]	; (800af2c <std+0x40>)
 800af18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af1a:	4b05      	ldr	r3, [pc, #20]	; (800af30 <std+0x44>)
 800af1c:	6224      	str	r4, [r4, #32]
 800af1e:	6323      	str	r3, [r4, #48]	; 0x30
 800af20:	bd10      	pop	{r4, pc}
 800af22:	bf00      	nop
 800af24:	0800d4f9 	.word	0x0800d4f9
 800af28:	0800d51b 	.word	0x0800d51b
 800af2c:	0800d553 	.word	0x0800d553
 800af30:	0800d577 	.word	0x0800d577

0800af34 <_cleanup_r>:
 800af34:	4901      	ldr	r1, [pc, #4]	; (800af3c <_cleanup_r+0x8>)
 800af36:	f002 b988 	b.w	800d24a <_fwalk_reent>
 800af3a:	bf00      	nop
 800af3c:	0800ae75 	.word	0x0800ae75

0800af40 <__sfp_lock_acquire>:
 800af40:	4801      	ldr	r0, [pc, #4]	; (800af48 <__sfp_lock_acquire+0x8>)
 800af42:	f7fa bcf7 	b.w	8005934 <__retarget_lock_acquire_recursive>
 800af46:	bf00      	nop
 800af48:	20000384 	.word	0x20000384

0800af4c <__sfp_lock_release>:
 800af4c:	4801      	ldr	r0, [pc, #4]	; (800af54 <__sfp_lock_release+0x8>)
 800af4e:	f7fa bd0d 	b.w	800596c <__retarget_lock_release_recursive>
 800af52:	bf00      	nop
 800af54:	20000384 	.word	0x20000384

0800af58 <__sinit_lock_acquire>:
 800af58:	4801      	ldr	r0, [pc, #4]	; (800af60 <__sinit_lock_acquire+0x8>)
 800af5a:	f7fa bceb 	b.w	8005934 <__retarget_lock_acquire_recursive>
 800af5e:	bf00      	nop
 800af60:	20000398 	.word	0x20000398

0800af64 <__sinit_lock_release>:
 800af64:	4801      	ldr	r0, [pc, #4]	; (800af6c <__sinit_lock_release+0x8>)
 800af66:	f7fa bd01 	b.w	800596c <__retarget_lock_release_recursive>
 800af6a:	bf00      	nop
 800af6c:	20000398 	.word	0x20000398

0800af70 <__sinit>:
 800af70:	b510      	push	{r4, lr}
 800af72:	4604      	mov	r4, r0
 800af74:	f7ff fff0 	bl	800af58 <__sinit_lock_acquire>
 800af78:	69a3      	ldr	r3, [r4, #24]
 800af7a:	b11b      	cbz	r3, 800af84 <__sinit+0x14>
 800af7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af80:	f7ff bff0 	b.w	800af64 <__sinit_lock_release>
 800af84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af88:	6523      	str	r3, [r4, #80]	; 0x50
 800af8a:	4b13      	ldr	r3, [pc, #76]	; (800afd8 <__sinit+0x68>)
 800af8c:	4a13      	ldr	r2, [pc, #76]	; (800afdc <__sinit+0x6c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	62a2      	str	r2, [r4, #40]	; 0x28
 800af92:	42a3      	cmp	r3, r4
 800af94:	bf04      	itt	eq
 800af96:	2301      	moveq	r3, #1
 800af98:	61a3      	streq	r3, [r4, #24]
 800af9a:	4620      	mov	r0, r4
 800af9c:	f000 f820 	bl	800afe0 <__sfp>
 800afa0:	6060      	str	r0, [r4, #4]
 800afa2:	4620      	mov	r0, r4
 800afa4:	f000 f81c 	bl	800afe0 <__sfp>
 800afa8:	60a0      	str	r0, [r4, #8]
 800afaa:	4620      	mov	r0, r4
 800afac:	f000 f818 	bl	800afe0 <__sfp>
 800afb0:	2200      	movs	r2, #0
 800afb2:	60e0      	str	r0, [r4, #12]
 800afb4:	2104      	movs	r1, #4
 800afb6:	6860      	ldr	r0, [r4, #4]
 800afb8:	f7ff ff98 	bl	800aeec <std>
 800afbc:	68a0      	ldr	r0, [r4, #8]
 800afbe:	2201      	movs	r2, #1
 800afc0:	2109      	movs	r1, #9
 800afc2:	f7ff ff93 	bl	800aeec <std>
 800afc6:	68e0      	ldr	r0, [r4, #12]
 800afc8:	2202      	movs	r2, #2
 800afca:	2112      	movs	r1, #18
 800afcc:	f7ff ff8e 	bl	800aeec <std>
 800afd0:	2301      	movs	r3, #1
 800afd2:	61a3      	str	r3, [r4, #24]
 800afd4:	e7d2      	b.n	800af7c <__sinit+0xc>
 800afd6:	bf00      	nop
 800afd8:	0800e084 	.word	0x0800e084
 800afdc:	0800af35 	.word	0x0800af35

0800afe0 <__sfp>:
 800afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe2:	4607      	mov	r7, r0
 800afe4:	f7ff ffac 	bl	800af40 <__sfp_lock_acquire>
 800afe8:	4b1e      	ldr	r3, [pc, #120]	; (800b064 <__sfp+0x84>)
 800afea:	681e      	ldr	r6, [r3, #0]
 800afec:	69b3      	ldr	r3, [r6, #24]
 800afee:	b913      	cbnz	r3, 800aff6 <__sfp+0x16>
 800aff0:	4630      	mov	r0, r6
 800aff2:	f7ff ffbd 	bl	800af70 <__sinit>
 800aff6:	3648      	adds	r6, #72	; 0x48
 800aff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800affc:	3b01      	subs	r3, #1
 800affe:	d503      	bpl.n	800b008 <__sfp+0x28>
 800b000:	6833      	ldr	r3, [r6, #0]
 800b002:	b30b      	cbz	r3, 800b048 <__sfp+0x68>
 800b004:	6836      	ldr	r6, [r6, #0]
 800b006:	e7f7      	b.n	800aff8 <__sfp+0x18>
 800b008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b00c:	b9d5      	cbnz	r5, 800b044 <__sfp+0x64>
 800b00e:	4b16      	ldr	r3, [pc, #88]	; (800b068 <__sfp+0x88>)
 800b010:	60e3      	str	r3, [r4, #12]
 800b012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b016:	6665      	str	r5, [r4, #100]	; 0x64
 800b018:	f7fa fc5c 	bl	80058d4 <__retarget_lock_init_recursive>
 800b01c:	f7ff ff96 	bl	800af4c <__sfp_lock_release>
 800b020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b028:	6025      	str	r5, [r4, #0]
 800b02a:	61a5      	str	r5, [r4, #24]
 800b02c:	2208      	movs	r2, #8
 800b02e:	4629      	mov	r1, r5
 800b030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b034:	f001 fe4a 	bl	800cccc <memset>
 800b038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b03c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b040:	4620      	mov	r0, r4
 800b042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b044:	3468      	adds	r4, #104	; 0x68
 800b046:	e7d9      	b.n	800affc <__sfp+0x1c>
 800b048:	2104      	movs	r1, #4
 800b04a:	4638      	mov	r0, r7
 800b04c:	f002 f8e7 	bl	800d21e <__sfmoreglue>
 800b050:	4604      	mov	r4, r0
 800b052:	6030      	str	r0, [r6, #0]
 800b054:	2800      	cmp	r0, #0
 800b056:	d1d5      	bne.n	800b004 <__sfp+0x24>
 800b058:	f7ff ff78 	bl	800af4c <__sfp_lock_release>
 800b05c:	230c      	movs	r3, #12
 800b05e:	603b      	str	r3, [r7, #0]
 800b060:	e7ee      	b.n	800b040 <__sfp+0x60>
 800b062:	bf00      	nop
 800b064:	0800e084 	.word	0x0800e084
 800b068:	ffff0001 	.word	0xffff0001

0800b06c <_localeconv_r>:
 800b06c:	4800      	ldr	r0, [pc, #0]	; (800b070 <_localeconv_r+0x4>)
 800b06e:	4770      	bx	lr
 800b070:	20000274 	.word	0x20000274

0800b074 <__smakebuf_r>:
 800b074:	898b      	ldrh	r3, [r1, #12]
 800b076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b078:	079d      	lsls	r5, r3, #30
 800b07a:	4606      	mov	r6, r0
 800b07c:	460c      	mov	r4, r1
 800b07e:	d507      	bpl.n	800b090 <__smakebuf_r+0x1c>
 800b080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	6123      	str	r3, [r4, #16]
 800b088:	2301      	movs	r3, #1
 800b08a:	6163      	str	r3, [r4, #20]
 800b08c:	b003      	add	sp, #12
 800b08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b090:	ab01      	add	r3, sp, #4
 800b092:	466a      	mov	r2, sp
 800b094:	f002 f8f8 	bl	800d288 <__swhatbuf_r>
 800b098:	9f00      	ldr	r7, [sp, #0]
 800b09a:	4605      	mov	r5, r0
 800b09c:	4639      	mov	r1, r7
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f7ff f8ea 	bl	800a278 <_malloc_r>
 800b0a4:	b948      	cbnz	r0, 800b0ba <__smakebuf_r+0x46>
 800b0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0aa:	059a      	lsls	r2, r3, #22
 800b0ac:	d4ee      	bmi.n	800b08c <__smakebuf_r+0x18>
 800b0ae:	f023 0303 	bic.w	r3, r3, #3
 800b0b2:	f043 0302 	orr.w	r3, r3, #2
 800b0b6:	81a3      	strh	r3, [r4, #12]
 800b0b8:	e7e2      	b.n	800b080 <__smakebuf_r+0xc>
 800b0ba:	4b0d      	ldr	r3, [pc, #52]	; (800b0f0 <__smakebuf_r+0x7c>)
 800b0bc:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0be:	89a3      	ldrh	r3, [r4, #12]
 800b0c0:	6020      	str	r0, [r4, #0]
 800b0c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0c6:	81a3      	strh	r3, [r4, #12]
 800b0c8:	9b01      	ldr	r3, [sp, #4]
 800b0ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b0ce:	b15b      	cbz	r3, 800b0e8 <__smakebuf_r+0x74>
 800b0d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f000 fc7f 	bl	800b9d8 <_isatty_r>
 800b0da:	b128      	cbz	r0, 800b0e8 <__smakebuf_r+0x74>
 800b0dc:	89a3      	ldrh	r3, [r4, #12]
 800b0de:	f023 0303 	bic.w	r3, r3, #3
 800b0e2:	f043 0301 	orr.w	r3, r3, #1
 800b0e6:	81a3      	strh	r3, [r4, #12]
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	431d      	orrs	r5, r3
 800b0ec:	81a5      	strh	r5, [r4, #12]
 800b0ee:	e7cd      	b.n	800b08c <__smakebuf_r+0x18>
 800b0f0:	0800af35 	.word	0x0800af35

0800b0f4 <__malloc_lock>:
 800b0f4:	4801      	ldr	r0, [pc, #4]	; (800b0fc <__malloc_lock+0x8>)
 800b0f6:	f7fa bc1d 	b.w	8005934 <__retarget_lock_acquire_recursive>
 800b0fa:	bf00      	nop
 800b0fc:	20000370 	.word	0x20000370

0800b100 <__malloc_unlock>:
 800b100:	4801      	ldr	r0, [pc, #4]	; (800b108 <__malloc_unlock+0x8>)
 800b102:	f7fa bc33 	b.w	800596c <__retarget_lock_release_recursive>
 800b106:	bf00      	nop
 800b108:	20000370 	.word	0x20000370

0800b10c <_Balloc>:
 800b10c:	b570      	push	{r4, r5, r6, lr}
 800b10e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b110:	4604      	mov	r4, r0
 800b112:	460d      	mov	r5, r1
 800b114:	b976      	cbnz	r6, 800b134 <_Balloc+0x28>
 800b116:	2010      	movs	r0, #16
 800b118:	f7ff f85c 	bl	800a1d4 <malloc>
 800b11c:	4602      	mov	r2, r0
 800b11e:	6260      	str	r0, [r4, #36]	; 0x24
 800b120:	b920      	cbnz	r0, 800b12c <_Balloc+0x20>
 800b122:	4b18      	ldr	r3, [pc, #96]	; (800b184 <_Balloc+0x78>)
 800b124:	4818      	ldr	r0, [pc, #96]	; (800b188 <_Balloc+0x7c>)
 800b126:	2166      	movs	r1, #102	; 0x66
 800b128:	f000 fc16 	bl	800b958 <__assert_func>
 800b12c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b130:	6006      	str	r6, [r0, #0]
 800b132:	60c6      	str	r6, [r0, #12]
 800b134:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b136:	68f3      	ldr	r3, [r6, #12]
 800b138:	b183      	cbz	r3, 800b15c <_Balloc+0x50>
 800b13a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b142:	b9b8      	cbnz	r0, 800b174 <_Balloc+0x68>
 800b144:	2101      	movs	r1, #1
 800b146:	fa01 f605 	lsl.w	r6, r1, r5
 800b14a:	1d72      	adds	r2, r6, #5
 800b14c:	0092      	lsls	r2, r2, #2
 800b14e:	4620      	mov	r0, r4
 800b150:	f002 f944 	bl	800d3dc <_calloc_r>
 800b154:	b160      	cbz	r0, 800b170 <_Balloc+0x64>
 800b156:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b15a:	e00e      	b.n	800b17a <_Balloc+0x6e>
 800b15c:	2221      	movs	r2, #33	; 0x21
 800b15e:	2104      	movs	r1, #4
 800b160:	4620      	mov	r0, r4
 800b162:	f002 f93b 	bl	800d3dc <_calloc_r>
 800b166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b168:	60f0      	str	r0, [r6, #12]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1e4      	bne.n	800b13a <_Balloc+0x2e>
 800b170:	2000      	movs	r0, #0
 800b172:	bd70      	pop	{r4, r5, r6, pc}
 800b174:	6802      	ldr	r2, [r0, #0]
 800b176:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b17a:	2300      	movs	r3, #0
 800b17c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b180:	e7f7      	b.n	800b172 <_Balloc+0x66>
 800b182:	bf00      	nop
 800b184:	080143d1 	.word	0x080143d1
 800b188:	0801446d 	.word	0x0801446d

0800b18c <_Bfree>:
 800b18c:	b570      	push	{r4, r5, r6, lr}
 800b18e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b190:	4605      	mov	r5, r0
 800b192:	460c      	mov	r4, r1
 800b194:	b976      	cbnz	r6, 800b1b4 <_Bfree+0x28>
 800b196:	2010      	movs	r0, #16
 800b198:	f7ff f81c 	bl	800a1d4 <malloc>
 800b19c:	4602      	mov	r2, r0
 800b19e:	6268      	str	r0, [r5, #36]	; 0x24
 800b1a0:	b920      	cbnz	r0, 800b1ac <_Bfree+0x20>
 800b1a2:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <_Bfree+0x3c>)
 800b1a4:	4809      	ldr	r0, [pc, #36]	; (800b1cc <_Bfree+0x40>)
 800b1a6:	218a      	movs	r1, #138	; 0x8a
 800b1a8:	f000 fbd6 	bl	800b958 <__assert_func>
 800b1ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1b0:	6006      	str	r6, [r0, #0]
 800b1b2:	60c6      	str	r6, [r0, #12]
 800b1b4:	b13c      	cbz	r4, 800b1c6 <_Bfree+0x3a>
 800b1b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1b8:	6862      	ldr	r2, [r4, #4]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1c0:	6021      	str	r1, [r4, #0]
 800b1c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1c6:	bd70      	pop	{r4, r5, r6, pc}
 800b1c8:	080143d1 	.word	0x080143d1
 800b1cc:	0801446d 	.word	0x0801446d

0800b1d0 <__multadd>:
 800b1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d4:	690d      	ldr	r5, [r1, #16]
 800b1d6:	4607      	mov	r7, r0
 800b1d8:	460c      	mov	r4, r1
 800b1da:	461e      	mov	r6, r3
 800b1dc:	f101 0c14 	add.w	ip, r1, #20
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	f8dc 3000 	ldr.w	r3, [ip]
 800b1e6:	b299      	uxth	r1, r3
 800b1e8:	fb02 6101 	mla	r1, r2, r1, r6
 800b1ec:	0c1e      	lsrs	r6, r3, #16
 800b1ee:	0c0b      	lsrs	r3, r1, #16
 800b1f0:	fb02 3306 	mla	r3, r2, r6, r3
 800b1f4:	b289      	uxth	r1, r1
 800b1f6:	3001      	adds	r0, #1
 800b1f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b1fc:	4285      	cmp	r5, r0
 800b1fe:	f84c 1b04 	str.w	r1, [ip], #4
 800b202:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b206:	dcec      	bgt.n	800b1e2 <__multadd+0x12>
 800b208:	b30e      	cbz	r6, 800b24e <__multadd+0x7e>
 800b20a:	68a3      	ldr	r3, [r4, #8]
 800b20c:	42ab      	cmp	r3, r5
 800b20e:	dc19      	bgt.n	800b244 <__multadd+0x74>
 800b210:	6861      	ldr	r1, [r4, #4]
 800b212:	4638      	mov	r0, r7
 800b214:	3101      	adds	r1, #1
 800b216:	f7ff ff79 	bl	800b10c <_Balloc>
 800b21a:	4680      	mov	r8, r0
 800b21c:	b928      	cbnz	r0, 800b22a <__multadd+0x5a>
 800b21e:	4602      	mov	r2, r0
 800b220:	4b0c      	ldr	r3, [pc, #48]	; (800b254 <__multadd+0x84>)
 800b222:	480d      	ldr	r0, [pc, #52]	; (800b258 <__multadd+0x88>)
 800b224:	21b5      	movs	r1, #181	; 0xb5
 800b226:	f000 fb97 	bl	800b958 <__assert_func>
 800b22a:	6922      	ldr	r2, [r4, #16]
 800b22c:	3202      	adds	r2, #2
 800b22e:	f104 010c 	add.w	r1, r4, #12
 800b232:	0092      	lsls	r2, r2, #2
 800b234:	300c      	adds	r0, #12
 800b236:	f001 fd3b 	bl	800ccb0 <memcpy>
 800b23a:	4621      	mov	r1, r4
 800b23c:	4638      	mov	r0, r7
 800b23e:	f7ff ffa5 	bl	800b18c <_Bfree>
 800b242:	4644      	mov	r4, r8
 800b244:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b248:	3501      	adds	r5, #1
 800b24a:	615e      	str	r6, [r3, #20]
 800b24c:	6125      	str	r5, [r4, #16]
 800b24e:	4620      	mov	r0, r4
 800b250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b254:	0801445c 	.word	0x0801445c
 800b258:	0801446d 	.word	0x0801446d

0800b25c <__i2b>:
 800b25c:	b510      	push	{r4, lr}
 800b25e:	460c      	mov	r4, r1
 800b260:	2101      	movs	r1, #1
 800b262:	f7ff ff53 	bl	800b10c <_Balloc>
 800b266:	4602      	mov	r2, r0
 800b268:	b928      	cbnz	r0, 800b276 <__i2b+0x1a>
 800b26a:	4b05      	ldr	r3, [pc, #20]	; (800b280 <__i2b+0x24>)
 800b26c:	4805      	ldr	r0, [pc, #20]	; (800b284 <__i2b+0x28>)
 800b26e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b272:	f000 fb71 	bl	800b958 <__assert_func>
 800b276:	2301      	movs	r3, #1
 800b278:	6144      	str	r4, [r0, #20]
 800b27a:	6103      	str	r3, [r0, #16]
 800b27c:	bd10      	pop	{r4, pc}
 800b27e:	bf00      	nop
 800b280:	0801445c 	.word	0x0801445c
 800b284:	0801446d 	.word	0x0801446d

0800b288 <__multiply>:
 800b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	4614      	mov	r4, r2
 800b28e:	690a      	ldr	r2, [r1, #16]
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	429a      	cmp	r2, r3
 800b294:	bfa8      	it	ge
 800b296:	4623      	movge	r3, r4
 800b298:	460f      	mov	r7, r1
 800b29a:	bfa4      	itt	ge
 800b29c:	460c      	movge	r4, r1
 800b29e:	461f      	movge	r7, r3
 800b2a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b2a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b2a8:	68a3      	ldr	r3, [r4, #8]
 800b2aa:	6861      	ldr	r1, [r4, #4]
 800b2ac:	eb0a 0609 	add.w	r6, sl, r9
 800b2b0:	42b3      	cmp	r3, r6
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	bfb8      	it	lt
 800b2b6:	3101      	addlt	r1, #1
 800b2b8:	f7ff ff28 	bl	800b10c <_Balloc>
 800b2bc:	b930      	cbnz	r0, 800b2cc <__multiply+0x44>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	4b44      	ldr	r3, [pc, #272]	; (800b3d4 <__multiply+0x14c>)
 800b2c2:	4845      	ldr	r0, [pc, #276]	; (800b3d8 <__multiply+0x150>)
 800b2c4:	f240 115d 	movw	r1, #349	; 0x15d
 800b2c8:	f000 fb46 	bl	800b958 <__assert_func>
 800b2cc:	f100 0514 	add.w	r5, r0, #20
 800b2d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b2d4:	462b      	mov	r3, r5
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	4543      	cmp	r3, r8
 800b2da:	d321      	bcc.n	800b320 <__multiply+0x98>
 800b2dc:	f107 0114 	add.w	r1, r7, #20
 800b2e0:	f104 0214 	add.w	r2, r4, #20
 800b2e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b2e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b2ec:	9302      	str	r3, [sp, #8]
 800b2ee:	1b13      	subs	r3, r2, r4
 800b2f0:	3b15      	subs	r3, #21
 800b2f2:	f023 0303 	bic.w	r3, r3, #3
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	f104 0715 	add.w	r7, r4, #21
 800b2fc:	42ba      	cmp	r2, r7
 800b2fe:	bf38      	it	cc
 800b300:	2304      	movcc	r3, #4
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	9b02      	ldr	r3, [sp, #8]
 800b306:	9103      	str	r1, [sp, #12]
 800b308:	428b      	cmp	r3, r1
 800b30a:	d80c      	bhi.n	800b326 <__multiply+0x9e>
 800b30c:	2e00      	cmp	r6, #0
 800b30e:	dd03      	ble.n	800b318 <__multiply+0x90>
 800b310:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b314:	2b00      	cmp	r3, #0
 800b316:	d05a      	beq.n	800b3ce <__multiply+0x146>
 800b318:	6106      	str	r6, [r0, #16]
 800b31a:	b005      	add	sp, #20
 800b31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b320:	f843 2b04 	str.w	r2, [r3], #4
 800b324:	e7d8      	b.n	800b2d8 <__multiply+0x50>
 800b326:	f8b1 a000 	ldrh.w	sl, [r1]
 800b32a:	f1ba 0f00 	cmp.w	sl, #0
 800b32e:	d023      	beq.n	800b378 <__multiply+0xf0>
 800b330:	f104 0e14 	add.w	lr, r4, #20
 800b334:	46a9      	mov	r9, r5
 800b336:	f04f 0c00 	mov.w	ip, #0
 800b33a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b33e:	f8d9 3000 	ldr.w	r3, [r9]
 800b342:	fa1f fb87 	uxth.w	fp, r7
 800b346:	b29b      	uxth	r3, r3
 800b348:	fb0a 330b 	mla	r3, sl, fp, r3
 800b34c:	4463      	add	r3, ip
 800b34e:	f8d9 c000 	ldr.w	ip, [r9]
 800b352:	0c3f      	lsrs	r7, r7, #16
 800b354:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b358:	fb0a c707 	mla	r7, sl, r7, ip
 800b35c:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b360:	b29b      	uxth	r3, r3
 800b362:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b366:	4572      	cmp	r2, lr
 800b368:	f849 3b04 	str.w	r3, [r9], #4
 800b36c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b370:	d8e3      	bhi.n	800b33a <__multiply+0xb2>
 800b372:	9b01      	ldr	r3, [sp, #4]
 800b374:	f845 c003 	str.w	ip, [r5, r3]
 800b378:	9b03      	ldr	r3, [sp, #12]
 800b37a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b37e:	3104      	adds	r1, #4
 800b380:	f1b9 0f00 	cmp.w	r9, #0
 800b384:	d021      	beq.n	800b3ca <__multiply+0x142>
 800b386:	682b      	ldr	r3, [r5, #0]
 800b388:	f104 0c14 	add.w	ip, r4, #20
 800b38c:	46ae      	mov	lr, r5
 800b38e:	f04f 0a00 	mov.w	sl, #0
 800b392:	f8bc b000 	ldrh.w	fp, [ip]
 800b396:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b39a:	fb09 770b 	mla	r7, r9, fp, r7
 800b39e:	4457      	add	r7, sl
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b3a6:	f84e 3b04 	str.w	r3, [lr], #4
 800b3aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b3ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3b2:	f8be 3000 	ldrh.w	r3, [lr]
 800b3b6:	fb09 330a 	mla	r3, r9, sl, r3
 800b3ba:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b3be:	4562      	cmp	r2, ip
 800b3c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3c4:	d8e5      	bhi.n	800b392 <__multiply+0x10a>
 800b3c6:	9f01      	ldr	r7, [sp, #4]
 800b3c8:	51eb      	str	r3, [r5, r7]
 800b3ca:	3504      	adds	r5, #4
 800b3cc:	e79a      	b.n	800b304 <__multiply+0x7c>
 800b3ce:	3e01      	subs	r6, #1
 800b3d0:	e79c      	b.n	800b30c <__multiply+0x84>
 800b3d2:	bf00      	nop
 800b3d4:	0801445c 	.word	0x0801445c
 800b3d8:	0801446d 	.word	0x0801446d

0800b3dc <__pow5mult>:
 800b3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3e0:	4615      	mov	r5, r2
 800b3e2:	f012 0203 	ands.w	r2, r2, #3
 800b3e6:	4607      	mov	r7, r0
 800b3e8:	460e      	mov	r6, r1
 800b3ea:	d007      	beq.n	800b3fc <__pow5mult+0x20>
 800b3ec:	4c25      	ldr	r4, [pc, #148]	; (800b484 <__pow5mult+0xa8>)
 800b3ee:	3a01      	subs	r2, #1
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3f6:	f7ff feeb 	bl	800b1d0 <__multadd>
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	10ad      	asrs	r5, r5, #2
 800b3fe:	d03d      	beq.n	800b47c <__pow5mult+0xa0>
 800b400:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b402:	b97c      	cbnz	r4, 800b424 <__pow5mult+0x48>
 800b404:	2010      	movs	r0, #16
 800b406:	f7fe fee5 	bl	800a1d4 <malloc>
 800b40a:	4602      	mov	r2, r0
 800b40c:	6278      	str	r0, [r7, #36]	; 0x24
 800b40e:	b928      	cbnz	r0, 800b41c <__pow5mult+0x40>
 800b410:	4b1d      	ldr	r3, [pc, #116]	; (800b488 <__pow5mult+0xac>)
 800b412:	481e      	ldr	r0, [pc, #120]	; (800b48c <__pow5mult+0xb0>)
 800b414:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b418:	f000 fa9e 	bl	800b958 <__assert_func>
 800b41c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b420:	6004      	str	r4, [r0, #0]
 800b422:	60c4      	str	r4, [r0, #12]
 800b424:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
 800b428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b42c:	b94c      	cbnz	r4, 800b442 <__pow5mult+0x66>
 800b42e:	f240 2171 	movw	r1, #625	; 0x271
 800b432:	4638      	mov	r0, r7
 800b434:	f7ff ff12 	bl	800b25c <__i2b>
 800b438:	2300      	movs	r3, #0
 800b43a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b43e:	4604      	mov	r4, r0
 800b440:	6003      	str	r3, [r0, #0]
 800b442:	f04f 0900 	mov.w	r9, #0
 800b446:	07eb      	lsls	r3, r5, #31
 800b448:	d50a      	bpl.n	800b460 <__pow5mult+0x84>
 800b44a:	4631      	mov	r1, r6
 800b44c:	4622      	mov	r2, r4
 800b44e:	4638      	mov	r0, r7
 800b450:	f7ff ff1a 	bl	800b288 <__multiply>
 800b454:	4631      	mov	r1, r6
 800b456:	4680      	mov	r8, r0
 800b458:	4638      	mov	r0, r7
 800b45a:	f7ff fe97 	bl	800b18c <_Bfree>
 800b45e:	4646      	mov	r6, r8
 800b460:	106d      	asrs	r5, r5, #1
 800b462:	d00b      	beq.n	800b47c <__pow5mult+0xa0>
 800b464:	6820      	ldr	r0, [r4, #0]
 800b466:	b938      	cbnz	r0, 800b478 <__pow5mult+0x9c>
 800b468:	4622      	mov	r2, r4
 800b46a:	4621      	mov	r1, r4
 800b46c:	4638      	mov	r0, r7
 800b46e:	f7ff ff0b 	bl	800b288 <__multiply>
 800b472:	6020      	str	r0, [r4, #0]
 800b474:	f8c0 9000 	str.w	r9, [r0]
 800b478:	4604      	mov	r4, r0
 800b47a:	e7e4      	b.n	800b446 <__pow5mult+0x6a>
 800b47c:	4630      	mov	r0, r6
 800b47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b482:	bf00      	nop
 800b484:	0800e0e8 	.word	0x0800e0e8
 800b488:	080143d1 	.word	0x080143d1
 800b48c:	0801446d 	.word	0x0801446d

0800b490 <__lshift>:
 800b490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b494:	460c      	mov	r4, r1
 800b496:	6849      	ldr	r1, [r1, #4]
 800b498:	6923      	ldr	r3, [r4, #16]
 800b49a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b49e:	68a3      	ldr	r3, [r4, #8]
 800b4a0:	4607      	mov	r7, r0
 800b4a2:	4691      	mov	r9, r2
 800b4a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4a8:	f108 0601 	add.w	r6, r8, #1
 800b4ac:	42b3      	cmp	r3, r6
 800b4ae:	db0b      	blt.n	800b4c8 <__lshift+0x38>
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	f7ff fe2b 	bl	800b10c <_Balloc>
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	b948      	cbnz	r0, 800b4ce <__lshift+0x3e>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	4b28      	ldr	r3, [pc, #160]	; (800b560 <__lshift+0xd0>)
 800b4be:	4829      	ldr	r0, [pc, #164]	; (800b564 <__lshift+0xd4>)
 800b4c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b4c4:	f000 fa48 	bl	800b958 <__assert_func>
 800b4c8:	3101      	adds	r1, #1
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	e7ee      	b.n	800b4ac <__lshift+0x1c>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f100 0114 	add.w	r1, r0, #20
 800b4d4:	f100 0210 	add.w	r2, r0, #16
 800b4d8:	4618      	mov	r0, r3
 800b4da:	4553      	cmp	r3, sl
 800b4dc:	db33      	blt.n	800b546 <__lshift+0xb6>
 800b4de:	6920      	ldr	r0, [r4, #16]
 800b4e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4e4:	f104 0314 	add.w	r3, r4, #20
 800b4e8:	f019 091f 	ands.w	r9, r9, #31
 800b4ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4f4:	d02b      	beq.n	800b54e <__lshift+0xbe>
 800b4f6:	f1c9 0e20 	rsb	lr, r9, #32
 800b4fa:	468a      	mov	sl, r1
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	6818      	ldr	r0, [r3, #0]
 800b500:	fa00 f009 	lsl.w	r0, r0, r9
 800b504:	4310      	orrs	r0, r2
 800b506:	f84a 0b04 	str.w	r0, [sl], #4
 800b50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b50e:	459c      	cmp	ip, r3
 800b510:	fa22 f20e 	lsr.w	r2, r2, lr
 800b514:	d8f3      	bhi.n	800b4fe <__lshift+0x6e>
 800b516:	ebac 0304 	sub.w	r3, ip, r4
 800b51a:	3b15      	subs	r3, #21
 800b51c:	f023 0303 	bic.w	r3, r3, #3
 800b520:	3304      	adds	r3, #4
 800b522:	f104 0015 	add.w	r0, r4, #21
 800b526:	4584      	cmp	ip, r0
 800b528:	bf38      	it	cc
 800b52a:	2304      	movcc	r3, #4
 800b52c:	50ca      	str	r2, [r1, r3]
 800b52e:	b10a      	cbz	r2, 800b534 <__lshift+0xa4>
 800b530:	f108 0602 	add.w	r6, r8, #2
 800b534:	3e01      	subs	r6, #1
 800b536:	4638      	mov	r0, r7
 800b538:	612e      	str	r6, [r5, #16]
 800b53a:	4621      	mov	r1, r4
 800b53c:	f7ff fe26 	bl	800b18c <_Bfree>
 800b540:	4628      	mov	r0, r5
 800b542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b546:	f842 0f04 	str.w	r0, [r2, #4]!
 800b54a:	3301      	adds	r3, #1
 800b54c:	e7c5      	b.n	800b4da <__lshift+0x4a>
 800b54e:	3904      	subs	r1, #4
 800b550:	f853 2b04 	ldr.w	r2, [r3], #4
 800b554:	f841 2f04 	str.w	r2, [r1, #4]!
 800b558:	459c      	cmp	ip, r3
 800b55a:	d8f9      	bhi.n	800b550 <__lshift+0xc0>
 800b55c:	e7ea      	b.n	800b534 <__lshift+0xa4>
 800b55e:	bf00      	nop
 800b560:	0801445c 	.word	0x0801445c
 800b564:	0801446d 	.word	0x0801446d

0800b568 <__mdiff>:
 800b568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	4689      	mov	r9, r1
 800b56e:	4606      	mov	r6, r0
 800b570:	4611      	mov	r1, r2
 800b572:	4648      	mov	r0, r9
 800b574:	4614      	mov	r4, r2
 800b576:	f001 ff16 	bl	800d3a6 <__mcmp>
 800b57a:	1e05      	subs	r5, r0, #0
 800b57c:	d112      	bne.n	800b5a4 <__mdiff+0x3c>
 800b57e:	4629      	mov	r1, r5
 800b580:	4630      	mov	r0, r6
 800b582:	f7ff fdc3 	bl	800b10c <_Balloc>
 800b586:	4602      	mov	r2, r0
 800b588:	b928      	cbnz	r0, 800b596 <__mdiff+0x2e>
 800b58a:	4b3e      	ldr	r3, [pc, #248]	; (800b684 <__mdiff+0x11c>)
 800b58c:	f240 2132 	movw	r1, #562	; 0x232
 800b590:	483d      	ldr	r0, [pc, #244]	; (800b688 <__mdiff+0x120>)
 800b592:	f000 f9e1 	bl	800b958 <__assert_func>
 800b596:	2301      	movs	r3, #1
 800b598:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b59c:	4610      	mov	r0, r2
 800b59e:	b003      	add	sp, #12
 800b5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a4:	bfbc      	itt	lt
 800b5a6:	464b      	movlt	r3, r9
 800b5a8:	46a1      	movlt	r9, r4
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b5b0:	bfba      	itte	lt
 800b5b2:	461c      	movlt	r4, r3
 800b5b4:	2501      	movlt	r5, #1
 800b5b6:	2500      	movge	r5, #0
 800b5b8:	f7ff fda8 	bl	800b10c <_Balloc>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	b918      	cbnz	r0, 800b5c8 <__mdiff+0x60>
 800b5c0:	4b30      	ldr	r3, [pc, #192]	; (800b684 <__mdiff+0x11c>)
 800b5c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b5c6:	e7e3      	b.n	800b590 <__mdiff+0x28>
 800b5c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b5cc:	6926      	ldr	r6, [r4, #16]
 800b5ce:	60c5      	str	r5, [r0, #12]
 800b5d0:	f109 0310 	add.w	r3, r9, #16
 800b5d4:	f109 0514 	add.w	r5, r9, #20
 800b5d8:	f104 0e14 	add.w	lr, r4, #20
 800b5dc:	f100 0b14 	add.w	fp, r0, #20
 800b5e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b5e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	46d9      	mov	r9, fp
 800b5ec:	f04f 0c00 	mov.w	ip, #0
 800b5f0:	9b01      	ldr	r3, [sp, #4]
 800b5f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b5f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b5fa:	9301      	str	r3, [sp, #4]
 800b5fc:	b281      	uxth	r1, r0
 800b5fe:	fa1f f38a 	uxth.w	r3, sl
 800b602:	1a5b      	subs	r3, r3, r1
 800b604:	0c00      	lsrs	r0, r0, #16
 800b606:	4463      	add	r3, ip
 800b608:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b60c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b610:	b29b      	uxth	r3, r3
 800b612:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b616:	4576      	cmp	r6, lr
 800b618:	f849 3b04 	str.w	r3, [r9], #4
 800b61c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b620:	d8e6      	bhi.n	800b5f0 <__mdiff+0x88>
 800b622:	1b33      	subs	r3, r6, r4
 800b624:	3b15      	subs	r3, #21
 800b626:	f023 0303 	bic.w	r3, r3, #3
 800b62a:	3415      	adds	r4, #21
 800b62c:	3304      	adds	r3, #4
 800b62e:	42a6      	cmp	r6, r4
 800b630:	bf38      	it	cc
 800b632:	2304      	movcc	r3, #4
 800b634:	441d      	add	r5, r3
 800b636:	445b      	add	r3, fp
 800b638:	461e      	mov	r6, r3
 800b63a:	462c      	mov	r4, r5
 800b63c:	4544      	cmp	r4, r8
 800b63e:	d30e      	bcc.n	800b65e <__mdiff+0xf6>
 800b640:	f108 0103 	add.w	r1, r8, #3
 800b644:	1b49      	subs	r1, r1, r5
 800b646:	f021 0103 	bic.w	r1, r1, #3
 800b64a:	3d03      	subs	r5, #3
 800b64c:	45a8      	cmp	r8, r5
 800b64e:	bf38      	it	cc
 800b650:	2100      	movcc	r1, #0
 800b652:	440b      	add	r3, r1
 800b654:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b658:	b191      	cbz	r1, 800b680 <__mdiff+0x118>
 800b65a:	6117      	str	r7, [r2, #16]
 800b65c:	e79e      	b.n	800b59c <__mdiff+0x34>
 800b65e:	f854 1b04 	ldr.w	r1, [r4], #4
 800b662:	46e6      	mov	lr, ip
 800b664:	0c08      	lsrs	r0, r1, #16
 800b666:	fa1c fc81 	uxtah	ip, ip, r1
 800b66a:	4471      	add	r1, lr
 800b66c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b670:	b289      	uxth	r1, r1
 800b672:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b676:	f846 1b04 	str.w	r1, [r6], #4
 800b67a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b67e:	e7dd      	b.n	800b63c <__mdiff+0xd4>
 800b680:	3f01      	subs	r7, #1
 800b682:	e7e7      	b.n	800b654 <__mdiff+0xec>
 800b684:	0801445c 	.word	0x0801445c
 800b688:	0801446d 	.word	0x0801446d

0800b68c <__d2b>:
 800b68c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b690:	2101      	movs	r1, #1
 800b692:	9e08      	ldr	r6, [sp, #32]
 800b694:	4690      	mov	r8, r2
 800b696:	4699      	mov	r9, r3
 800b698:	f7ff fd38 	bl	800b10c <_Balloc>
 800b69c:	4604      	mov	r4, r0
 800b69e:	b930      	cbnz	r0, 800b6ae <__d2b+0x22>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	4b24      	ldr	r3, [pc, #144]	; (800b734 <__d2b+0xa8>)
 800b6a4:	4824      	ldr	r0, [pc, #144]	; (800b738 <__d2b+0xac>)
 800b6a6:	f240 310a 	movw	r1, #778	; 0x30a
 800b6aa:	f000 f955 	bl	800b958 <__assert_func>
 800b6ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6b6:	b10d      	cbz	r5, 800b6bc <__d2b+0x30>
 800b6b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	f1b8 0300 	subs.w	r3, r8, #0
 800b6c2:	d024      	beq.n	800b70e <__d2b+0x82>
 800b6c4:	4668      	mov	r0, sp
 800b6c6:	9300      	str	r3, [sp, #0]
 800b6c8:	f001 fe40 	bl	800d34c <__lo0bits>
 800b6cc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6d0:	b1d8      	cbz	r0, 800b70a <__d2b+0x7e>
 800b6d2:	f1c0 0320 	rsb	r3, r0, #32
 800b6d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6da:	430b      	orrs	r3, r1
 800b6dc:	40c2      	lsrs	r2, r0
 800b6de:	6163      	str	r3, [r4, #20]
 800b6e0:	9201      	str	r2, [sp, #4]
 800b6e2:	9b01      	ldr	r3, [sp, #4]
 800b6e4:	61a3      	str	r3, [r4, #24]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	bf0c      	ite	eq
 800b6ea:	2201      	moveq	r2, #1
 800b6ec:	2202      	movne	r2, #2
 800b6ee:	6122      	str	r2, [r4, #16]
 800b6f0:	b1ad      	cbz	r5, 800b71e <__d2b+0x92>
 800b6f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6f6:	4405      	add	r5, r0
 800b6f8:	6035      	str	r5, [r6, #0]
 800b6fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b700:	6018      	str	r0, [r3, #0]
 800b702:	4620      	mov	r0, r4
 800b704:	b002      	add	sp, #8
 800b706:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b70a:	6161      	str	r1, [r4, #20]
 800b70c:	e7e9      	b.n	800b6e2 <__d2b+0x56>
 800b70e:	a801      	add	r0, sp, #4
 800b710:	f001 fe1c 	bl	800d34c <__lo0bits>
 800b714:	9b01      	ldr	r3, [sp, #4]
 800b716:	6163      	str	r3, [r4, #20]
 800b718:	3020      	adds	r0, #32
 800b71a:	2201      	movs	r2, #1
 800b71c:	e7e7      	b.n	800b6ee <__d2b+0x62>
 800b71e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b722:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b726:	6030      	str	r0, [r6, #0]
 800b728:	6918      	ldr	r0, [r3, #16]
 800b72a:	f001 fded 	bl	800d308 <__hi0bits>
 800b72e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b732:	e7e4      	b.n	800b6fe <__d2b+0x72>
 800b734:	0801445c 	.word	0x0801445c
 800b738:	0801446d 	.word	0x0801446d

0800b73c <_svfiprintf_r>:
 800b73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	4698      	mov	r8, r3
 800b742:	898b      	ldrh	r3, [r1, #12]
 800b744:	061b      	lsls	r3, r3, #24
 800b746:	b09d      	sub	sp, #116	; 0x74
 800b748:	4607      	mov	r7, r0
 800b74a:	460d      	mov	r5, r1
 800b74c:	4614      	mov	r4, r2
 800b74e:	d510      	bpl.n	800b772 <_svfiprintf_r+0x36>
 800b750:	690b      	ldr	r3, [r1, #16]
 800b752:	b973      	cbnz	r3, 800b772 <_svfiprintf_r+0x36>
 800b754:	2140      	movs	r1, #64	; 0x40
 800b756:	f7fe fd8f 	bl	800a278 <_malloc_r>
 800b75a:	6028      	str	r0, [r5, #0]
 800b75c:	6128      	str	r0, [r5, #16]
 800b75e:	b930      	cbnz	r0, 800b76e <_svfiprintf_r+0x32>
 800b760:	230c      	movs	r3, #12
 800b762:	603b      	str	r3, [r7, #0]
 800b764:	f04f 30ff 	mov.w	r0, #4294967295
 800b768:	b01d      	add	sp, #116	; 0x74
 800b76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b76e:	2340      	movs	r3, #64	; 0x40
 800b770:	616b      	str	r3, [r5, #20]
 800b772:	2300      	movs	r3, #0
 800b774:	9309      	str	r3, [sp, #36]	; 0x24
 800b776:	2320      	movs	r3, #32
 800b778:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b77c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b780:	2330      	movs	r3, #48	; 0x30
 800b782:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800b920 <_svfiprintf_r+0x1e4>
 800b786:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b78a:	f04f 0901 	mov.w	r9, #1
 800b78e:	4623      	mov	r3, r4
 800b790:	469a      	mov	sl, r3
 800b792:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b796:	b10a      	cbz	r2, 800b79c <_svfiprintf_r+0x60>
 800b798:	2a25      	cmp	r2, #37	; 0x25
 800b79a:	d1f9      	bne.n	800b790 <_svfiprintf_r+0x54>
 800b79c:	ebba 0b04 	subs.w	fp, sl, r4
 800b7a0:	d00b      	beq.n	800b7ba <_svfiprintf_r+0x7e>
 800b7a2:	465b      	mov	r3, fp
 800b7a4:	4622      	mov	r2, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	f001 fe4a 	bl	800d442 <__ssputs_r>
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	f000 80a7 	beq.w	800b902 <_svfiprintf_r+0x1c6>
 800b7b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7b6:	445a      	add	r2, fp
 800b7b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f000 809f 	beq.w	800b902 <_svfiprintf_r+0x1c6>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ce:	f10a 0a01 	add.w	sl, sl, #1
 800b7d2:	9304      	str	r3, [sp, #16]
 800b7d4:	9307      	str	r3, [sp, #28]
 800b7d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7da:	931a      	str	r3, [sp, #104]	; 0x68
 800b7dc:	4654      	mov	r4, sl
 800b7de:	2205      	movs	r2, #5
 800b7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e4:	484e      	ldr	r0, [pc, #312]	; (800b920 <_svfiprintf_r+0x1e4>)
 800b7e6:	f7f4 fcdb 	bl	80001a0 <memchr>
 800b7ea:	9a04      	ldr	r2, [sp, #16]
 800b7ec:	b9d8      	cbnz	r0, 800b826 <_svfiprintf_r+0xea>
 800b7ee:	06d0      	lsls	r0, r2, #27
 800b7f0:	bf44      	itt	mi
 800b7f2:	2320      	movmi	r3, #32
 800b7f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f8:	0711      	lsls	r1, r2, #28
 800b7fa:	bf44      	itt	mi
 800b7fc:	232b      	movmi	r3, #43	; 0x2b
 800b7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b802:	f89a 3000 	ldrb.w	r3, [sl]
 800b806:	2b2a      	cmp	r3, #42	; 0x2a
 800b808:	d015      	beq.n	800b836 <_svfiprintf_r+0xfa>
 800b80a:	9a07      	ldr	r2, [sp, #28]
 800b80c:	4654      	mov	r4, sl
 800b80e:	2000      	movs	r0, #0
 800b810:	f04f 0c0a 	mov.w	ip, #10
 800b814:	4621      	mov	r1, r4
 800b816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b81a:	3b30      	subs	r3, #48	; 0x30
 800b81c:	2b09      	cmp	r3, #9
 800b81e:	d94b      	bls.n	800b8b8 <_svfiprintf_r+0x17c>
 800b820:	b1b0      	cbz	r0, 800b850 <_svfiprintf_r+0x114>
 800b822:	9207      	str	r2, [sp, #28]
 800b824:	e014      	b.n	800b850 <_svfiprintf_r+0x114>
 800b826:	eba0 0308 	sub.w	r3, r0, r8
 800b82a:	fa09 f303 	lsl.w	r3, r9, r3
 800b82e:	4313      	orrs	r3, r2
 800b830:	9304      	str	r3, [sp, #16]
 800b832:	46a2      	mov	sl, r4
 800b834:	e7d2      	b.n	800b7dc <_svfiprintf_r+0xa0>
 800b836:	9b03      	ldr	r3, [sp, #12]
 800b838:	1d19      	adds	r1, r3, #4
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	9103      	str	r1, [sp, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	bfbb      	ittet	lt
 800b842:	425b      	neglt	r3, r3
 800b844:	f042 0202 	orrlt.w	r2, r2, #2
 800b848:	9307      	strge	r3, [sp, #28]
 800b84a:	9307      	strlt	r3, [sp, #28]
 800b84c:	bfb8      	it	lt
 800b84e:	9204      	strlt	r2, [sp, #16]
 800b850:	7823      	ldrb	r3, [r4, #0]
 800b852:	2b2e      	cmp	r3, #46	; 0x2e
 800b854:	d10a      	bne.n	800b86c <_svfiprintf_r+0x130>
 800b856:	7863      	ldrb	r3, [r4, #1]
 800b858:	2b2a      	cmp	r3, #42	; 0x2a
 800b85a:	d132      	bne.n	800b8c2 <_svfiprintf_r+0x186>
 800b85c:	9b03      	ldr	r3, [sp, #12]
 800b85e:	1d1a      	adds	r2, r3, #4
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	9203      	str	r2, [sp, #12]
 800b864:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b868:	3402      	adds	r4, #2
 800b86a:	9305      	str	r3, [sp, #20]
 800b86c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 800b924 <_svfiprintf_r+0x1e8>
 800b870:	7821      	ldrb	r1, [r4, #0]
 800b872:	2203      	movs	r2, #3
 800b874:	4650      	mov	r0, sl
 800b876:	f7f4 fc93 	bl	80001a0 <memchr>
 800b87a:	b138      	cbz	r0, 800b88c <_svfiprintf_r+0x150>
 800b87c:	9b04      	ldr	r3, [sp, #16]
 800b87e:	eba0 000a 	sub.w	r0, r0, sl
 800b882:	2240      	movs	r2, #64	; 0x40
 800b884:	4082      	lsls	r2, r0
 800b886:	4313      	orrs	r3, r2
 800b888:	3401      	adds	r4, #1
 800b88a:	9304      	str	r3, [sp, #16]
 800b88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b890:	4825      	ldr	r0, [pc, #148]	; (800b928 <_svfiprintf_r+0x1ec>)
 800b892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b896:	2206      	movs	r2, #6
 800b898:	f7f4 fc82 	bl	80001a0 <memchr>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d036      	beq.n	800b90e <_svfiprintf_r+0x1d2>
 800b8a0:	4b22      	ldr	r3, [pc, #136]	; (800b92c <_svfiprintf_r+0x1f0>)
 800b8a2:	bb1b      	cbnz	r3, 800b8ec <_svfiprintf_r+0x1b0>
 800b8a4:	9b03      	ldr	r3, [sp, #12]
 800b8a6:	3307      	adds	r3, #7
 800b8a8:	f023 0307 	bic.w	r3, r3, #7
 800b8ac:	3308      	adds	r3, #8
 800b8ae:	9303      	str	r3, [sp, #12]
 800b8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b2:	4433      	add	r3, r6
 800b8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b6:	e76a      	b.n	800b78e <_svfiprintf_r+0x52>
 800b8b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8bc:	460c      	mov	r4, r1
 800b8be:	2001      	movs	r0, #1
 800b8c0:	e7a8      	b.n	800b814 <_svfiprintf_r+0xd8>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	3401      	adds	r4, #1
 800b8c6:	9305      	str	r3, [sp, #20]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	f04f 0c0a 	mov.w	ip, #10
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8d4:	3a30      	subs	r2, #48	; 0x30
 800b8d6:	2a09      	cmp	r2, #9
 800b8d8:	d903      	bls.n	800b8e2 <_svfiprintf_r+0x1a6>
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d0c6      	beq.n	800b86c <_svfiprintf_r+0x130>
 800b8de:	9105      	str	r1, [sp, #20]
 800b8e0:	e7c4      	b.n	800b86c <_svfiprintf_r+0x130>
 800b8e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e7f0      	b.n	800b8ce <_svfiprintf_r+0x192>
 800b8ec:	ab03      	add	r3, sp, #12
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	462a      	mov	r2, r5
 800b8f2:	4b0f      	ldr	r3, [pc, #60]	; (800b930 <_svfiprintf_r+0x1f4>)
 800b8f4:	a904      	add	r1, sp, #16
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	f7fe fe44 	bl	800a584 <_printf_float>
 800b8fc:	1c42      	adds	r2, r0, #1
 800b8fe:	4606      	mov	r6, r0
 800b900:	d1d6      	bne.n	800b8b0 <_svfiprintf_r+0x174>
 800b902:	89ab      	ldrh	r3, [r5, #12]
 800b904:	065b      	lsls	r3, r3, #25
 800b906:	f53f af2d 	bmi.w	800b764 <_svfiprintf_r+0x28>
 800b90a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b90c:	e72c      	b.n	800b768 <_svfiprintf_r+0x2c>
 800b90e:	ab03      	add	r3, sp, #12
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	462a      	mov	r2, r5
 800b914:	4b06      	ldr	r3, [pc, #24]	; (800b930 <_svfiprintf_r+0x1f4>)
 800b916:	a904      	add	r1, sp, #16
 800b918:	4638      	mov	r0, r7
 800b91a:	f7ff f869 	bl	800a9f0 <_printf_i>
 800b91e:	e7ed      	b.n	800b8fc <_svfiprintf_r+0x1c0>
 800b920:	08014385 	.word	0x08014385
 800b924:	0801438b 	.word	0x0801438b
 800b928:	0801438f 	.word	0x0801438f
 800b92c:	0800a585 	.word	0x0800a585
 800b930:	0800d443 	.word	0x0800d443

0800b934 <_write_r>:
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	4d07      	ldr	r5, [pc, #28]	; (800b954 <_write_r+0x20>)
 800b938:	4604      	mov	r4, r0
 800b93a:	4608      	mov	r0, r1
 800b93c:	4611      	mov	r1, r2
 800b93e:	2200      	movs	r2, #0
 800b940:	602a      	str	r2, [r5, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	f000 fb7a 	bl	800c03c <_write>
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	d102      	bne.n	800b952 <_write_r+0x1e>
 800b94c:	682b      	ldr	r3, [r5, #0]
 800b94e:	b103      	cbz	r3, 800b952 <_write_r+0x1e>
 800b950:	6023      	str	r3, [r4, #0]
 800b952:	bd38      	pop	{r3, r4, r5, pc}
 800b954:	20000cf8 	.word	0x20000cf8

0800b958 <__assert_func>:
 800b958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b95a:	4614      	mov	r4, r2
 800b95c:	461a      	mov	r2, r3
 800b95e:	4b09      	ldr	r3, [pc, #36]	; (800b984 <__assert_func+0x2c>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4605      	mov	r5, r0
 800b964:	68d8      	ldr	r0, [r3, #12]
 800b966:	b954      	cbnz	r4, 800b97e <__assert_func+0x26>
 800b968:	4b07      	ldr	r3, [pc, #28]	; (800b988 <__assert_func+0x30>)
 800b96a:	461c      	mov	r4, r3
 800b96c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b970:	9100      	str	r1, [sp, #0]
 800b972:	462b      	mov	r3, r5
 800b974:	4905      	ldr	r1, [pc, #20]	; (800b98c <__assert_func+0x34>)
 800b976:	f7fe fc1b 	bl	800a1b0 <fiprintf>
 800b97a:	f001 fe27 	bl	800d5cc <abort>
 800b97e:	4b04      	ldr	r3, [pc, #16]	; (800b990 <__assert_func+0x38>)
 800b980:	e7f4      	b.n	800b96c <__assert_func+0x14>
 800b982:	bf00      	nop
 800b984:	20000120 	.word	0x20000120
 800b988:	08013e57 	.word	0x08013e57
 800b98c:	080144ef 	.word	0x080144ef
 800b990:	080144e2 	.word	0x080144e2

0800b994 <_close_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4d06      	ldr	r5, [pc, #24]	; (800b9b0 <_close_r+0x1c>)
 800b998:	2300      	movs	r3, #0
 800b99a:	4604      	mov	r4, r0
 800b99c:	4608      	mov	r0, r1
 800b99e:	602b      	str	r3, [r5, #0]
 800b9a0:	f000 fb50 	bl	800c044 <_close>
 800b9a4:	1c43      	adds	r3, r0, #1
 800b9a6:	d102      	bne.n	800b9ae <_close_r+0x1a>
 800b9a8:	682b      	ldr	r3, [r5, #0]
 800b9aa:	b103      	cbz	r3, 800b9ae <_close_r+0x1a>
 800b9ac:	6023      	str	r3, [r4, #0]
 800b9ae:	bd38      	pop	{r3, r4, r5, pc}
 800b9b0:	20000cf8 	.word	0x20000cf8

0800b9b4 <_fstat_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4d07      	ldr	r5, [pc, #28]	; (800b9d4 <_fstat_r+0x20>)
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4608      	mov	r0, r1
 800b9be:	4611      	mov	r1, r2
 800b9c0:	602b      	str	r3, [r5, #0]
 800b9c2:	f000 fb4d 	bl	800c060 <_fstat>
 800b9c6:	1c43      	adds	r3, r0, #1
 800b9c8:	d102      	bne.n	800b9d0 <_fstat_r+0x1c>
 800b9ca:	682b      	ldr	r3, [r5, #0]
 800b9cc:	b103      	cbz	r3, 800b9d0 <_fstat_r+0x1c>
 800b9ce:	6023      	str	r3, [r4, #0]
 800b9d0:	bd38      	pop	{r3, r4, r5, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20000cf8 	.word	0x20000cf8

0800b9d8 <_isatty_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4d06      	ldr	r5, [pc, #24]	; (800b9f4 <_isatty_r+0x1c>)
 800b9dc:	2300      	movs	r3, #0
 800b9de:	4604      	mov	r4, r0
 800b9e0:	4608      	mov	r0, r1
 800b9e2:	602b      	str	r3, [r5, #0]
 800b9e4:	f000 fb33 	bl	800c04e <_isatty>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_isatty_r+0x1a>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_isatty_r+0x1a>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	20000cf8 	.word	0x20000cf8

0800b9f8 <_lseek_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4d07      	ldr	r5, [pc, #28]	; (800ba18 <_lseek_r+0x20>)
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	4608      	mov	r0, r1
 800ba00:	4611      	mov	r1, r2
 800ba02:	2200      	movs	r2, #0
 800ba04:	602a      	str	r2, [r5, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	f000 fb1f 	bl	800c04a <_lseek>
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d102      	bne.n	800ba16 <_lseek_r+0x1e>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	b103      	cbz	r3, 800ba16 <_lseek_r+0x1e>
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	20000cf8 	.word	0x20000cf8

0800ba1c <_read_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4d07      	ldr	r5, [pc, #28]	; (800ba3c <_read_r+0x20>)
 800ba20:	4604      	mov	r4, r0
 800ba22:	4608      	mov	r0, r1
 800ba24:	4611      	mov	r1, r2
 800ba26:	2200      	movs	r2, #0
 800ba28:	602a      	str	r2, [r5, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	f000 fb02 	bl	800c034 <_read>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_read_r+0x1e>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_read_r+0x1e>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	20000cf8 	.word	0x20000cf8

0800ba40 <raise>:
 800ba40:	4b02      	ldr	r3, [pc, #8]	; (800ba4c <raise+0xc>)
 800ba42:	4601      	mov	r1, r0
 800ba44:	6818      	ldr	r0, [r3, #0]
 800ba46:	f001 bdc8 	b.w	800d5da <_raise_r>
 800ba4a:	bf00      	nop
 800ba4c:	20000120 	.word	0x20000120

0800ba50 <_kill_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4d07      	ldr	r5, [pc, #28]	; (800ba70 <_kill_r+0x20>)
 800ba54:	2300      	movs	r3, #0
 800ba56:	4604      	mov	r4, r0
 800ba58:	4608      	mov	r0, r1
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	602b      	str	r3, [r5, #0]
 800ba5e:	f000 fafb 	bl	800c058 <_kill>
 800ba62:	1c43      	adds	r3, r0, #1
 800ba64:	d102      	bne.n	800ba6c <_kill_r+0x1c>
 800ba66:	682b      	ldr	r3, [r5, #0]
 800ba68:	b103      	cbz	r3, 800ba6c <_kill_r+0x1c>
 800ba6a:	6023      	str	r3, [r4, #0]
 800ba6c:	bd38      	pop	{r3, r4, r5, pc}
 800ba6e:	bf00      	nop
 800ba70:	20000cf8 	.word	0x20000cf8

0800ba74 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800ba74:	4770      	bx	lr

0800ba76 <st_alarms_run>:
	}
 800ba76:	4770      	bx	lr

0800ba78 <display_blanking_off.isra.0>:
	return api->blanking_off(dev);
 800ba78:	6883      	ldr	r3, [r0, #8]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	4718      	bx	r3

0800ba7e <k_msleep.isra.0>:
	return k_sleep(Z_TIMEOUT_MS(ms));
 800ba7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
			return t * ((uint64_t)to_hz / from_hz);
 800ba82:	210a      	movs	r1, #10
 800ba84:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 800ba88:	f7fd bd04 	b.w	8009494 <z_impl_k_sleep>

0800ba8c <st_idle_run>:
static void st_idle_run(void *o){
 800ba8c:	4770      	bx	lr

0800ba8e <cbpprintf_external>:
{
 800ba8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba92:	4607      	mov	r7, r0
 800ba94:	460e      	mov	r6, r1
 800ba96:	4690      	mov	r8, r2
	if (buf == NULL) {
 800ba98:	461d      	mov	r5, r3
 800ba9a:	b30b      	cbz	r3, 800bae0 <cbpprintf_external+0x52>
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
 800ba9c:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
 800ba9e:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = hdr->hdr.desc.str_cnt;
 800baa0:	f893 a001 	ldrb.w	sl, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	4414      	add	r4, r2
 800baa8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800baac:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
 800baae:	f04f 0900 	mov.w	r9, #0
 800bab2:	45d1      	cmp	r9, sl
 800bab4:	d308      	bcc.n	800bac8 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
 800bab6:	686a      	ldr	r2, [r5, #4]
 800bab8:	f105 0308 	add.w	r3, r5, #8
 800babc:	4641      	mov	r1, r8
 800babe:	4638      	mov	r0, r7
 800bac0:	46b4      	mov	ip, r6
}
 800bac2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
 800bac6:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
 800bac8:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
 800bacc:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
 800bad0:	4620      	mov	r0, r4
 800bad2:	f7f5 fa79 	bl	8000fc8 <strlen>
 800bad6:	3001      	adds	r0, #1
 800bad8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 800bada:	f109 0901 	add.w	r9, r9, #1
 800bade:	e7e8      	b.n	800bab2 <cbpprintf_external+0x24>
}
 800bae0:	f06f 0015 	mvn.w	r0, #21
 800bae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bae8 <arch_printk_char_out>:
}
 800bae8:	2000      	movs	r0, #0
 800baea:	4770      	bx	lr

0800baec <str_out>:
{
 800baec:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800baee:	688a      	ldr	r2, [r1, #8]
 800baf0:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 800baf2:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800baf4:	b114      	cbz	r4, 800bafc <str_out+0x10>
 800baf6:	684b      	ldr	r3, [r1, #4]
 800baf8:	4293      	cmp	r3, r2
 800bafa:	dc01      	bgt.n	800bb00 <str_out+0x14>
		ctx->count++;
 800bafc:	608d      	str	r5, [r1, #8]
}
 800bafe:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 800bb00:	3b01      	subs	r3, #1
 800bb02:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 800bb04:	bf08      	it	eq
 800bb06:	2200      	moveq	r2, #0
 800bb08:	608d      	str	r5, [r1, #8]
 800bb0a:	bf0c      	ite	eq
 800bb0c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 800bb0e:	54a0      	strbne	r0, [r4, r2]
 800bb10:	e7f5      	b.n	800bafe <str_out+0x12>

0800bb12 <printk>:
{
 800bb12:	b40f      	push	{r0, r1, r2, r3}
 800bb14:	b507      	push	{r0, r1, r2, lr}
 800bb16:	a904      	add	r1, sp, #16
 800bb18:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800bb1c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 800bb1e:	f7f6 fe5f 	bl	80027e0 <vprintk>
}
 800bb22:	b003      	add	sp, #12
 800bb24:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb28:	b004      	add	sp, #16
 800bb2a:	4770      	bx	lr

0800bb2c <snprintk>:
{
 800bb2c:	b40c      	push	{r2, r3}
 800bb2e:	b507      	push	{r0, r1, r2, lr}
 800bb30:	ab04      	add	r3, sp, #16
 800bb32:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800bb36:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800bb38:	f7f6 fe60 	bl	80027fc <vsnprintk>
}
 800bb3c:	b003      	add	sp, #12
 800bb3e:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb42:	b002      	add	sp, #8
 800bb44:	4770      	bx	lr

0800bb46 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800bb46:	4604      	mov	r4, r0
 800bb48:	b508      	push	{r3, lr}
 800bb4a:	4608      	mov	r0, r1
 800bb4c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800bb4e:	461a      	mov	r2, r3
 800bb50:	47a0      	blx	r4
	return z_impl_z_current_get();
 800bb52:	f7fd fcd1 	bl	80094f8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800bb56:	f7f9 fce9 	bl	800552c <z_impl_k_thread_abort>

0800bb5a <chunk_size>:
		return ((uint16_t *)cmem)[f];
 800bb5a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800bb5e:	8840      	ldrh	r0, [r0, #2]
}
 800bb60:	0840      	lsrs	r0, r0, #1
 800bb62:	4770      	bx	lr

0800bb64 <free_list_add>:
{
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
 800bb68:	f7ff fff7 	bl	800bb5a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
 800bb6c:	fab0 f080 	clz	r0, r0
 800bb70:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
 800bb74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
 800bb78:	00ca      	lsls	r2, r1, #3
 800bb7a:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
 800bb7e:	1d17      	adds	r7, r2, #4
{
 800bb80:	460c      	mov	r4, r1
 800bb82:	3206      	adds	r2, #6
 800bb84:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
 800bb86:	b956      	cbnz	r6, 800bb9e <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
 800bb88:	2101      	movs	r1, #1
 800bb8a:	fa01 f000 	lsl.w	r0, r1, r0
 800bb8e:	68d9      	ldr	r1, [r3, #12]
 800bb90:	4301      	orrs	r1, r0
 800bb92:	60d9      	str	r1, [r3, #12]
		b->next = c;
 800bb94:	f8cc 4010 	str.w	r4, [ip, #16]
 800bb98:	53dd      	strh	r5, [r3, r7]
 800bb9a:	529d      	strh	r5, [r3, r2]
}
 800bb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
 800bb9e:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
 800bba0:	3104      	adds	r1, #4
 800bba2:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
 800bba4:	53d8      	strh	r0, [r3, r7]
 800bba6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800bbaa:	529e      	strh	r6, [r3, r2]
 800bbac:	80c5      	strh	r5, [r0, #6]
 800bbae:	525d      	strh	r5, [r3, r1]
 800bbb0:	e7f4      	b.n	800bb9c <free_list_add+0x38>

0800bbb2 <free_list_remove_bidx>:
{
 800bbb2:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
 800bbb4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800bbb8:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
 800bbba:	4299      	cmp	r1, r3
 800bbbc:	f102 0104 	add.w	r1, r2, #4
 800bbc0:	d10a      	bne.n	800bbd8 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	fa03 f202 	lsl.w	r2, r3, r2
 800bbc8:	68c3      	ldr	r3, [r0, #12]
 800bbca:	ea23 0302 	bic.w	r3, r3, r2
 800bbce:	60c3      	str	r3, [r0, #12]
		b->next = 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 800bbd6:	bd10      	pop	{r4, pc}
 800bbd8:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
 800bbda:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
 800bbde:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800bbe2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800bbe6:	80cb      	strh	r3, [r1, #6]
 800bbe8:	8082      	strh	r2, [r0, #4]
}
 800bbea:	e7f4      	b.n	800bbd6 <free_list_remove_bidx+0x24>

0800bbec <alloc_chunk>:
{
 800bbec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return 31 - __builtin_clz(usable_sz);
 800bbf0:	fab1 f581 	clz	r5, r1
 800bbf4:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
 800bbf8:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
 800bbfc:	4603      	mov	r3, r0
	if (b->next) {
 800bbfe:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
 800bc02:	460e      	mov	r6, r1
	if (b->next) {
 800bc04:	b1c2      	cbz	r2, 800bc38 <alloc_chunk+0x4c>
 800bc06:	2703      	movs	r7, #3
			chunkid_t c = b->next;
 800bc08:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	4621      	mov	r1, r4
 800bc10:	f7ff ffa3 	bl	800bb5a <chunk_size>
 800bc14:	42b0      	cmp	r0, r6
 800bc16:	d306      	bcc.n	800bc26 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
 800bc18:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7ff ffc9 	bl	800bbb2 <free_list_remove_bidx>
}
 800bc20:	4620      	mov	r0, r4
 800bc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
 800bc26:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
 800bc2a:	3f01      	subs	r7, #1
 800bc2c:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
 800bc2e:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
 800bc32:	d001      	beq.n	800bc38 <alloc_chunk+0x4c>
 800bc34:	4282      	cmp	r2, r0
 800bc36:	d1e7      	bne.n	800bc08 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
 800bc38:	f1c5 0220 	rsb	r2, r5, #32
 800bc3c:	f04f 34ff 	mov.w	r4, #4294967295
 800bc40:	4094      	lsls	r4, r2
 800bc42:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
 800bc44:	4014      	ands	r4, r2
 800bc46:	d0eb      	beq.n	800bc20 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
 800bc48:	fa94 f2a4 	rbit	r2, r4
 800bc4c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 800bc50:	1d11      	adds	r1, r2, #4
 800bc52:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 800bc56:	4621      	mov	r1, r4
 800bc58:	e7df      	b.n	800bc1a <alloc_chunk+0x2e>

0800bc5a <split_chunks>:
{
 800bc5a:	b538      	push	{r3, r4, r5, lr}
 800bc5c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
 800bc5e:	f7ff ff7c 	bl	800bb5a <chunk_size>
{
 800bc62:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
 800bc64:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
 800bc66:	1a51      	subs	r1, r2, r1
		((uint16_t *)cmem)[f] = val;
 800bc68:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
 800bc6c:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800bc6e:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
 800bc70:	8060      	strh	r0, [r4, #2]
 800bc72:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800bc76:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
 800bc78:	8044      	strh	r4, [r0, #2]
 800bc7a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
 800bc7e:	4618      	mov	r0, r3
 800bc80:	4611      	mov	r1, r2
 800bc82:	f7ff ff6a 	bl	800bb5a <chunk_size>
	void *cmem = &buf[c];
 800bc86:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
 800bc88:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
 800bc8c:	bd38      	pop	{r3, r4, r5, pc}

0800bc8e <sys_heap_alloc>:
{
 800bc8e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 800bc90:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
 800bc92:	b909      	cbnz	r1, 800bc98 <sys_heap_alloc+0xa>
		return NULL;
 800bc94:	2000      	movs	r0, #0
}
 800bc96:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
 800bc98:	68ab      	ldr	r3, [r5, #8]
 800bc9a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800bc9e:	d9f9      	bls.n	800bc94 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800bca0:	310b      	adds	r1, #11
 800bca2:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
 800bca4:	4621      	mov	r1, r4
 800bca6:	4628      	mov	r0, r5
 800bca8:	f7ff ffa0 	bl	800bbec <alloc_chunk>
	if (c == 0U) {
 800bcac:	4606      	mov	r6, r0
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d0f0      	beq.n	800bc94 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
 800bcb2:	4601      	mov	r1, r0
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f7ff ff50 	bl	800bb5a <chunk_size>
 800bcba:	42a0      	cmp	r0, r4
 800bcbc:	d907      	bls.n	800bcce <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
 800bcbe:	1932      	adds	r2, r6, r4
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	f7ff ffca 	bl	800bc5a <split_chunks>
		free_list_add(h, c + chunk_sz);
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	4628      	mov	r0, r5
 800bcca:	f7ff ff4b 	bl	800bb64 <free_list_add>
	void *cmem = &buf[c];
 800bcce:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 800bcd2:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800bcd4:	8853      	ldrh	r3, [r2, #2]
 800bcd6:	f043 0301 	orr.w	r3, r3, #1
 800bcda:	8053      	strh	r3, [r2, #2]
 800bcdc:	3004      	adds	r0, #4
	return mem;
 800bcde:	e7da      	b.n	800bc96 <sys_heap_alloc+0x8>

0800bce0 <_ldiv5>:
	uint32_t v_lo = *v;
 800bce0:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 800bce4:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 800bce6:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 800bcea:	fba2 2403 	umull	r2, r4, r2, r3
 800bcee:	18d5      	adds	r5, r2, r3
 800bcf0:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 800bcf4:	fba1 1303 	umull	r1, r3, r1, r3
 800bcf8:	1852      	adds	r2, r2, r1
 800bcfa:	eb44 0403 	adc.w	r4, r4, r3
 800bcfe:	1952      	adds	r2, r2, r5
 800bd00:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 800bd04:	1889      	adds	r1, r1, r2
 800bd06:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 800bd0a:	e9c0 1300 	strd	r1, r3, [r0]
}
 800bd0e:	bd30      	pop	{r4, r5, pc}

0800bd10 <_get_digit>:
{
 800bd10:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
 800bd12:	680a      	ldr	r2, [r1, #0]
 800bd14:	2a00      	cmp	r2, #0
{
 800bd16:	4603      	mov	r3, r0
	if (*digit_count > 0) {
 800bd18:	dd0f      	ble.n	800bd3a <_get_digit+0x2a>
		--*digit_count;
 800bd1a:	3a01      	subs	r2, #1
 800bd1c:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	6844      	ldr	r4, [r0, #4]
 800bd22:	200a      	movs	r0, #10
 800bd24:	fba2 1200 	umull	r1, r2, r2, r0
 800bd28:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 800bd2c:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
 800bd2e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800bd32:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
 800bd36:	3030      	adds	r0, #48	; 0x30
}
 800bd38:	bd10      	pop	{r4, pc}
		rval = '0';
 800bd3a:	2030      	movs	r0, #48	; 0x30
 800bd3c:	e7fc      	b.n	800bd38 <_get_digit+0x28>

0800bd3e <outs>:
{
 800bd3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd42:	4607      	mov	r7, r0
 800bd44:	4688      	mov	r8, r1
 800bd46:	4615      	mov	r5, r2
 800bd48:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800bd4a:	4614      	mov	r4, r2
 800bd4c:	42b4      	cmp	r4, r6
 800bd4e:	d305      	bcc.n	800bd5c <outs+0x1e>
 800bd50:	b10e      	cbz	r6, 800bd56 <outs+0x18>
	return (int)count;
 800bd52:	1b60      	subs	r0, r4, r5
 800bd54:	e008      	b.n	800bd68 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800bd56:	7823      	ldrb	r3, [r4, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d0fa      	beq.n	800bd52 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 800bd5c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bd60:	4641      	mov	r1, r8
 800bd62:	47b8      	blx	r7
		if (rc < 0) {
 800bd64:	2800      	cmp	r0, #0
 800bd66:	daf1      	bge.n	800bd4c <outs+0xe>
}
 800bd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bd6c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
 800bd6c:	4040      	eors	r0, r0
 800bd6e:	f380 8811 	msr	BASEPRI, r0
 800bd72:	f04f 0004 	mov.w	r0, #4
 800bd76:	df02      	svc	2
}
 800bd78:	4770      	bx	lr

0800bd7a <assert_print>:

void assert_print(const char *fmt, ...)
{
 800bd7a:	b40f      	push	{r0, r1, r2, r3}
 800bd7c:	b507      	push	{r0, r1, r2, lr}
 800bd7e:	a904      	add	r1, sp, #16
 800bd80:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 800bd84:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 800bd86:	f7f6 fd2b 	bl	80027e0 <vprintk>

	va_end(ap);
}
 800bd8a:	b003      	add	sp, #12
 800bd8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd90:	b004      	add	sp, #16
 800bd92:	4770      	bx	lr

0800bd94 <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 800bd94:	68c3      	ldr	r3, [r0, #12]
 800bd96:	6802      	ldr	r2, [r0, #0]
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d904      	bls.n	800bda6 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	1a9a      	subs	r2, r3, r2
		return false;
 800bda0:	2000      	movs	r0, #0
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 800bda2:	600a      	str	r2, [r1, #0]
}
 800bda4:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 800bda6:	6a40      	ldr	r0, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
 800bda8:	b913      	cbnz	r3, 800bdb0 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 800bdaa:	3801      	subs	r0, #1
 800bdac:	1a82      	subs	r2, r0, r2
		return false;
 800bdae:	e7f7      	b.n	800bda0 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
 800bdb0:	1a82      	subs	r2, r0, r2
	return true;
 800bdb2:	2001      	movs	r0, #1
 800bdb4:	e7f5      	b.n	800bda2 <free_space+0xe>

0800bdb6 <get_usage>:
{
 800bdb6:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
 800bdb8:	a901      	add	r1, sp, #4
{
 800bdba:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
 800bdbc:	f7ff ffea 	bl	800bd94 <free_space>
 800bdc0:	b120      	cbz	r0, 800bdcc <get_usage+0x16>
		f += (buffer->rd_idx - 1);
 800bdc2:	9b01      	ldr	r3, [sp, #4]
 800bdc4:	68e2      	ldr	r2, [r4, #12]
 800bdc6:	3b01      	subs	r3, #1
 800bdc8:	4413      	add	r3, r2
 800bdca:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
 800bdcc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bdce:	9b01      	ldr	r3, [sp, #4]
 800bdd0:	1ac0      	subs	r0, r0, r3
}
 800bdd2:	3801      	subs	r0, #1
 800bdd4:	b002      	add	sp, #8
 800bdd6:	bd10      	pop	{r4, pc}

0800bdd8 <idx_inc>:
{
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	4604      	mov	r4, r0
	uint32_t i = idx + val;
 800bddc:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800bdde:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
 800bde0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800bde2:	07d2      	lsls	r2, r2, #31
 800bde4:	d502      	bpl.n	800bdec <idx_inc+0x14>
		return i & (buffer->size - 1);
 800bde6:	3b01      	subs	r3, #1
 800bde8:	4018      	ands	r0, r3
}
 800bdea:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
 800bdec:	4298      	cmp	r0, r3
 800bdee:	bf28      	it	cs
 800bdf0:	1ac0      	subcs	r0, r0, r3
 800bdf2:	e7fa      	b.n	800bdea <idx_inc+0x12>

0800bdf4 <add_skip_item>:
{
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 800bdf8:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
 800bdfa:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 800bdfc:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
 800bdfe:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 800be02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800be06:	462a      	mov	r2, r5
 800be08:	6801      	ldr	r1, [r0, #0]
{
 800be0a:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800be0c:	f7ff ffe4 	bl	800bdd8 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800be10:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800be12:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800be14:	462a      	mov	r2, r5
 800be16:	4620      	mov	r0, r4
 800be18:	f7ff ffde 	bl	800bdd8 <idx_inc>
 800be1c:	6060      	str	r0, [r4, #4]
}
 800be1e:	bd38      	pop	{r3, r4, r5, pc}

0800be20 <max_utilization_update>:
{
 800be20:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 800be22:	6903      	ldr	r3, [r0, #16]
 800be24:	075b      	lsls	r3, r3, #29
{
 800be26:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 800be28:	d506      	bpl.n	800be38 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 800be2a:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800be2c:	f7ff ffc3 	bl	800bdb6 <get_usage>
 800be30:	4285      	cmp	r5, r0
 800be32:	bf2c      	ite	cs
 800be34:	62a5      	strcs	r5, [r4, #40]	; 0x28
 800be36:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
 800be38:	bd38      	pop	{r3, r4, r5, pc}

0800be3a <drop_item_locked>:
{
 800be3a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3e:	461f      	mov	r7, r3
	*user_packet = false;
 800be40:	2300      	movs	r3, #0
 800be42:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 800be44:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800be48:	f8d0 9020 	ldr.w	r9, [r0, #32]
	if (item->hdr.busy && !item->hdr.valid) {
 800be4c:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 800be50:	f003 0303 	and.w	r3, r3, #3
 800be54:	2b02      	cmp	r3, #2
{
 800be56:	4604      	mov	r4, r0
 800be58:	468b      	mov	fp, r1
 800be5a:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 800be5c:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800be60:	d103      	bne.n	800be6a <drop_item_locked+0x30>
		return item->skip.len;
 800be62:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 800be66:	08ad      	lsrs	r5, r5, #2
 800be68:	d12e      	bne.n	800bec8 <drop_item_locked+0x8e>
 800be6a:	69e3      	ldr	r3, [r4, #28]
 800be6c:	4630      	mov	r0, r6
 800be6e:	4798      	blx	r3
 800be70:	4605      	mov	r5, r0
	} else if (allow_drop) {
 800be72:	f1b8 0f00 	cmp.w	r8, #0
 800be76:	d038      	beq.n	800beea <drop_item_locked+0xb0>
		if (item->hdr.busy) {
 800be78:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 800be7c:	079b      	lsls	r3, r3, #30
 800be7e:	d531      	bpl.n	800bee4 <drop_item_locked+0xaa>
			add_skip_item(buffer, free_wlen + 1);
 800be80:	f10b 0101 	add.w	r1, fp, #1
 800be84:	4620      	mov	r0, r4
 800be86:	f7ff ffb5 	bl	800bdf4 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800be8a:	6861      	ldr	r1, [r4, #4]
 800be8c:	462a      	mov	r2, r5
 800be8e:	4620      	mov	r0, r4
 800be90:	f7ff ffa2 	bl	800bdd8 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800be94:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800be96:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800be98:	462a      	mov	r2, r5
 800be9a:	4620      	mov	r0, r4
 800be9c:	f7ff ff9c 	bl	800bdd8 <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800bea0:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800bea2:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800bea4:	68e1      	ldr	r1, [r4, #12]
 800bea6:	4620      	mov	r0, r4
 800bea8:	f7ff ff96 	bl	800bdd8 <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 800beac:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
 800beae:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
 800beb2:	f002 0203 	and.w	r2, r2, #3
 800beb6:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 800beb8:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800bebc:	d10e      	bne.n	800bedc <drop_item_locked+0xa2>
		return item->skip.len;
 800bebe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
 800bec2:	089b      	lsrs	r3, r3, #2
 800bec4:	d00a      	beq.n	800bedc <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
 800bec6:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800bec8:	68e1      	ldr	r1, [r4, #12]
 800beca:	462a      	mov	r2, r5
 800becc:	4620      	mov	r0, r4
 800bece:	f7ff ff83 	bl	800bdd8 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 800bed2:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
 800bed6:	4630      	mov	r0, r6
 800bed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
 800bedc:	69e3      	ldr	r3, [r4, #28]
 800bede:	4630      	mov	r0, r6
 800bee0:	4798      	blx	r3
 800bee2:	4405      	add	r5, r0
			*user_packet = true;
 800bee4:	2301      	movs	r3, #1
 800bee6:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
 800bee8:	e7ee      	b.n	800bec8 <drop_item_locked+0x8e>
		item = NULL;
 800beea:	4646      	mov	r6, r8
	return item;
 800beec:	e7f3      	b.n	800bed6 <drop_item_locked+0x9c>

0800beee <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 800beee:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 800bef2:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
 800bef4:	bf88      	it	hi
 800bef6:	6a42      	ldrhi	r2, [r0, #36]	; 0x24
 800bef8:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 800befa:	1e18      	subs	r0, r3, #0
 800befc:	bf18      	it	ne
 800befe:	2001      	movne	r0, #1
 800bf00:	4770      	bx	lr

0800bf02 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800bf02:	4770      	bx	lr

0800bf04 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800bf04:	2000      	movs	r0, #0
 800bf06:	4770      	bx	lr

0800bf08 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 800bf08:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 800bf0a:	075b      	lsls	r3, r3, #29
 800bf0c:	d40b      	bmi.n	800bf26 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800bf0e:	6803      	ldr	r3, [r0, #0]
 800bf10:	8842      	ldrh	r2, [r0, #2]
 800bf12:	f3c3 2349 	ubfx	r3, r3, #9, #10
 800bf16:	f3c2 02cb 	ubfx	r2, r2, #3, #12
 800bf1a:	1898      	adds	r0, r3, r2
 800bf1c:	3017      	adds	r0, #23
 800bf1e:	f020 0007 	bic.w	r0, r0, #7
 800bf22:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
 800bf24:	4770      	bx	lr
	return 0;
 800bf26:	2000      	movs	r0, #0
}
 800bf28:	4770      	bx	lr

0800bf2a <dummy_timestamp>:
}
 800bf2a:	2000      	movs	r0, #0
 800bf2c:	4770      	bx	lr

0800bf2e <default_lf_get_timestamp>:
{
 800bf2e:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800bf30:	f000 fe65 	bl	800cbfe <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800bf34:	220a      	movs	r2, #10
 800bf36:	2300      	movs	r3, #0
 800bf38:	f7f4 fe16 	bl	8000b68 <__aeabi_uldivmod>
}
 800bf3c:	bd08      	pop	{r3, pc}

0800bf3e <notify_drop>:
	z_log_dropped(true);
 800bf3e:	2001      	movs	r0, #1
 800bf40:	f7f7 bf7c 	b.w	8003e3c <z_log_dropped>

0800bf44 <z_log_get_tag>:
}
 800bf44:	2000      	movs	r0, #0
 800bf46:	4770      	bx	lr

0800bf48 <z_cbprintf_cpy>:
{
 800bf48:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
 800bf4a:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
 800bf4e:	1b9b      	subs	r3, r3, r6
 800bf50:	428b      	cmp	r3, r1
{
 800bf52:	460c      	mov	r4, r1
 800bf54:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
 800bf56:	d30a      	bcc.n	800bf6e <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
 800bf58:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800bf5a:	460a      	mov	r2, r1
 800bf5c:	4601      	mov	r1, r0
 800bf5e:	1998      	adds	r0, r3, r6
 800bf60:	f000 fea6 	bl	800ccb0 <memcpy>
	desc->off += len;
 800bf64:	68ab      	ldr	r3, [r5, #8]
 800bf66:	4423      	add	r3, r4
 800bf68:	60ab      	str	r3, [r5, #8]
	return len;
 800bf6a:	4620      	mov	r0, r4
}
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
 800bf6e:	f06f 001b 	mvn.w	r0, #27
 800bf72:	e7fb      	b.n	800bf6c <z_cbprintf_cpy+0x24>

0800bf74 <z_log_msg_finalize>:
{
 800bf74:	b570      	push	{r4, r5, r6, lr}
 800bf76:	460e      	mov	r6, r1
 800bf78:	4615      	mov	r5, r2
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
 800bf80:	4604      	mov	r4, r0
 800bf82:	b918      	cbnz	r0, 800bf8c <z_log_msg_finalize+0x18>
}
 800bf84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
 800bf88:	f7f7 bf58 	b.w	8003e3c <z_log_dropped>
	if (data) {
 800bf8c:	b12b      	cbz	r3, 800bf9a <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
 800bf8e:	3010      	adds	r0, #16
 800bf90:	f3c5 2349 	ubfx	r3, r5, #9, #10
 800bf94:	4418      	add	r0, r3
 800bf96:	f000 fe8b 	bl	800ccb0 <memcpy>
	msg->hdr.source = source;
 800bf9a:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
 800bf9e:	4620      	mov	r0, r4
}
 800bfa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
 800bfa4:	f7f8 b89c 	b.w	80040e0 <z_log_msg_commit>

0800bfa8 <buffer_write>:
{
 800bfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460d      	mov	r5, r1
 800bfae:	4614      	mov	r4, r2
 800bfb0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	463a      	mov	r2, r7
 800bfb8:	47b0      	blx	r6
	} while (len != 0);
 800bfba:	1a24      	subs	r4, r4, r0
		buf += processed;
 800bfbc:	4405      	add	r5, r0
	} while (len != 0);
 800bfbe:	d1f8      	bne.n	800bfb2 <buffer_write+0xa>
}
 800bfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bfc2 <cbvprintf>:
{
 800bfc2:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 800bfc4:	2400      	movs	r4, #0
 800bfc6:	9400      	str	r4, [sp, #0]
 800bfc8:	f7f6 fd9e 	bl	8002b08 <z_cbvprintf_impl>
}
 800bfcc:	b002      	add	sp, #8
 800bfce:	bd10      	pop	{r4, pc}

0800bfd0 <log_output_flush>:
{
 800bfd0:	b510      	push	{r4, lr}
		     output->control_block->offset,
 800bfd2:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800bfd4:	6881      	ldr	r1, [r0, #8]
{
 800bfd6:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 800bfd8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bfdc:	6800      	ldr	r0, [r0, #0]
 800bfde:	f7ff ffe3 	bl	800bfa8 <buffer_write>
	output->control_block->offset = 0;
 800bfe2:	6863      	ldr	r3, [r4, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	601a      	str	r2, [r3, #0]
}
 800bfe8:	bd10      	pop	{r4, pc}

0800bfea <cr_out_func>:
	if (c == '\n') {
 800bfea:	280a      	cmp	r0, #10
{
 800bfec:	b538      	push	{r3, r4, r5, lr}
 800bfee:	4604      	mov	r4, r0
 800bff0:	460d      	mov	r5, r1
	if (c == '\n') {
 800bff2:	d102      	bne.n	800bffa <cr_out_func+0x10>
		out_func((int)'\r', ctx);
 800bff4:	200d      	movs	r0, #13
 800bff6:	f7f8 f9b1 	bl	800435c <out_func>
	out_func(c, ctx);
 800bffa:	4629      	mov	r1, r5
 800bffc:	4620      	mov	r0, r4
 800bffe:	f7f8 f9ad 	bl	800435c <out_func>
}
 800c002:	2000      	movs	r0, #0
 800c004:	bd38      	pop	{r3, r4, r5, pc}

0800c006 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 800c006:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800c008:	6800      	ldr	r0, [r0, #0]
 800c00a:	f7f8 bd9b 	b.w	8004b44 <z_arm_fatal_error>

0800c00e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800c00e:	2100      	movs	r1, #0
 800c010:	2001      	movs	r0, #1
 800c012:	f7f8 bd97 	b.w	8004b44 <z_arm_fatal_error>

0800c016 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 800c016:	b508      	push	{r3, lr}
	handler();
 800c018:	f7f8 fe3c 	bl	8004c94 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 800c01c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800c020:	f7f8 bf10 	b.w	8004e44 <z_arm_exc_exit>

0800c024 <z_log_msg_static_create.constprop.0>:
 800c024:	2300      	movs	r3, #0
 800c026:	f7f8 b913 	b.w	8004250 <z_impl_z_log_msg_static_create>

0800c02a <_stdout_hook_default>:
}
 800c02a:	f04f 30ff 	mov.w	r0, #4294967295
 800c02e:	4770      	bx	lr

0800c030 <_stdin_hook_default>:
}
 800c030:	2000      	movs	r0, #0
 800c032:	4770      	bx	lr

0800c034 <_read>:
{
 800c034:	4608      	mov	r0, r1
 800c036:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800c038:	f7f9 bc04 	b.w	8005844 <z_impl_zephyr_read_stdin>

0800c03c <_write>:
{
 800c03c:	4608      	mov	r0, r1
 800c03e:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800c040:	f7f9 bc14 	b.w	800586c <z_impl_zephyr_write_stdout>

0800c044 <_close>:
int _close(int file)
 800c044:	f04f 30ff 	mov.w	r0, #4294967295
 800c048:	4770      	bx	lr

0800c04a <_lseek>:
}
 800c04a:	2000      	movs	r0, #0
 800c04c:	4770      	bx	lr

0800c04e <_isatty>:
}
 800c04e:	2802      	cmp	r0, #2
 800c050:	bfcc      	ite	gt
 800c052:	2000      	movgt	r0, #0
 800c054:	2001      	movle	r0, #1
 800c056:	4770      	bx	lr

0800c058 <_kill>:
}
 800c058:	2000      	movs	r0, #0
 800c05a:	4770      	bx	lr

0800c05c <_getpid>:
}
 800c05c:	2000      	movs	r0, #0
 800c05e:	4770      	bx	lr

0800c060 <_fstat>:
	st->st_mode = S_IFCHR;
 800c060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c064:	604b      	str	r3, [r1, #4]
}
 800c066:	2000      	movs	r0, #0
 800c068:	4770      	bx	lr

0800c06a <smf_set_initial>:
	ctx->previous = NULL;
 800c06a:	2200      	movs	r2, #0
	ctx->terminate_val = 0;
 800c06c:	e9c0 2201 	strd	r2, r2, [r0, #4]
	internal->terminate = false;
 800c070:	7b02      	ldrb	r2, [r0, #12]
	ctx->current = init_state;
 800c072:	6001      	str	r1, [r0, #0]
	internal->terminate = false;
 800c074:	f022 0206 	bic.w	r2, r2, #6
 800c078:	7302      	strb	r2, [r0, #12]
	if (init_state->entry) {
 800c07a:	680b      	ldr	r3, [r1, #0]
 800c07c:	b103      	cbz	r3, 800c080 <smf_set_initial+0x16>
		init_state->entry(ctx);
 800c07e:	4718      	bx	r3
}
 800c080:	4770      	bx	lr

0800c082 <smf_run_state>:
	internal->terminate = true;
	ctx->terminate_val = val;
}

int32_t smf_run_state(struct smf_ctx *const ctx)
{
 800c082:	b508      	push	{r3, lr}
	struct internal_ctx * const internal = (void *) &ctx->internal;

	/* No need to continue if terminate was set */
	if (internal->terminate) {
 800c084:	7b02      	ldrb	r2, [r0, #12]
 800c086:	0792      	lsls	r2, r2, #30
 800c088:	d501      	bpl.n	800c08e <smf_run_state+0xc>
		return ctx->terminate_val;
 800c08a:	6880      	ldr	r0, [r0, #8]
			return ctx->terminate_val;
		}
	}

	return 0;
}
 800c08c:	bd08      	pop	{r3, pc}
	if (ctx->current->run) {
 800c08e:	6803      	ldr	r3, [r0, #0]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	b103      	cbz	r3, 800c096 <smf_run_state+0x14>
		ctx->current->run(ctx);
 800c094:	4798      	blx	r3
	return 0;
 800c096:	2000      	movs	r0, #0
 800c098:	e7f8      	b.n	800c08c <smf_run_state+0xa>

0800c09a <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800c09a:	2200      	movs	r2, #0
{
 800c09c:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 800c09e:	4611      	mov	r1, r2
 800c0a0:	2006      	movs	r0, #6
 800c0a2:	f7f8 fdc3 	bl	8004c2c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	2007      	movs	r0, #7
 800c0ac:	f7f8 fdbe 	bl	8004c2c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI1_IRQ_PRI,
		__stm32_exti_isr_1, DEVICE_DT_GET(EXTI_NODE),
		0);
#ifdef CONFIG_SOC_SERIES_STM32F3X
	IRQ_CONNECT(EXTI2_TSC_IRQn,
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	2008      	movs	r0, #8
 800c0b6:	f7f8 fdb9 	bl	8004c2c <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	4611      	mov	r1, r2
 800c0be:	2009      	movs	r0, #9
 800c0c0:	f7f8 fdb4 	bl	8004c2c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	4611      	mov	r1, r2
 800c0c8:	200a      	movs	r0, #10
 800c0ca:	f7f8 fdaf 	bl	8004c2c <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	2017      	movs	r0, #23
 800c0d4:	f7f8 fdaa 	bl	8004c2c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800c0d8:	2200      	movs	r2, #0
 800c0da:	4611      	mov	r1, r2
 800c0dc:	2028      	movs	r0, #40	; 0x28
 800c0de:	f7f8 fda5 	bl	8004c2c <z_arm_irq_priority_set>
}
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	bd08      	pop	{r3, pc}

0800c0e6 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 800c0e6:	6902      	ldr	r2, [r0, #16]
 800c0e8:	2110      	movs	r1, #16
 800c0ea:	200a      	movs	r0, #10
 800c0ec:	f7f9 bca0 	b.w	8005a30 <__stm32_exti_isr.isra.0>

0800c0f0 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 800c0f0:	6902      	ldr	r2, [r0, #16]
 800c0f2:	210a      	movs	r1, #10
 800c0f4:	2005      	movs	r0, #5
 800c0f6:	f7f9 bc9b 	b.w	8005a30 <__stm32_exti_isr.isra.0>

0800c0fa <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 800c0fa:	6902      	ldr	r2, [r0, #16]
 800c0fc:	2105      	movs	r1, #5
 800c0fe:	2004      	movs	r0, #4
 800c100:	f7f9 bc96 	b.w	8005a30 <__stm32_exti_isr.isra.0>

0800c104 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 800c104:	6902      	ldr	r2, [r0, #16]
 800c106:	2104      	movs	r1, #4
 800c108:	2003      	movs	r0, #3
 800c10a:	f7f9 bc91 	b.w	8005a30 <__stm32_exti_isr.isra.0>

0800c10e <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 800c10e:	6902      	ldr	r2, [r0, #16]
 800c110:	2103      	movs	r1, #3
 800c112:	2002      	movs	r0, #2
 800c114:	f7f9 bc8c 	b.w	8005a30 <__stm32_exti_isr.isra.0>

0800c118 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 800c118:	6902      	ldr	r2, [r0, #16]
 800c11a:	2102      	movs	r1, #2
 800c11c:	2001      	movs	r0, #1
 800c11e:	f7f9 bc87 	b.w	8005a30 <__stm32_exti_isr.isra.0>

0800c122 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 800c122:	6902      	ldr	r2, [r0, #16]
 800c124:	2101      	movs	r1, #1
 800c126:	2000      	movs	r0, #0
 800c128:	f7f9 bc82 	b.w	8005a30 <__stm32_exti_isr.isra.0>

0800c12c <adc_stm32_enable>:
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800c12c:	6883      	ldr	r3, [r0, #8]
	if (LL_ADC_IsEnabled(adc) == 1UL) {
 800c12e:	07db      	lsls	r3, r3, #31
 800c130:	d407      	bmi.n	800c142 <adc_stm32_enable+0x16>
  MODIFY_REG(ADCx->CR,
 800c132:	6883      	ldr	r3, [r0, #8]
 800c134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c13c:	f043 0301 	orr.w	r3, r3, #1
 800c140:	6083      	str	r3, [r0, #8]
}
 800c142:	2000      	movs	r0, #0
 800c144:	4770      	bx	lr

0800c146 <adc_stm32_cfg_func_0>:
		    &adc_stm32_init, NULL,				\
		    &adc_stm32_data_##index, &adc_stm32_cfg_##index,	\
		    POST_KERNEL, CONFIG_ADC_INIT_PRIORITY,		\
		    &api_stm32_driver_api);

DT_INST_FOREACH_STATUS_OKAY(STM32_ADC_INIT)
 800c146:	b508      	push	{r3, lr}
 800c148:	2200      	movs	r2, #0
 800c14a:	2012      	movs	r0, #18
 800c14c:	4611      	mov	r1, r2
 800c14e:	f7f8 fd6d 	bl	8004c2c <z_arm_irq_priority_set>
 800c152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c156:	2012      	movs	r0, #18
 800c158:	f7f8 bd5a 	b.w	8004c10 <arch_irq_enable>

0800c15c <adc_stm32_disable>:
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800c15c:	6883      	ldr	r3, [r0, #8]
	if (LL_ADC_IsEnabled(adc) != 1UL) {
 800c15e:	07da      	lsls	r2, r3, #31
 800c160:	d50a      	bpl.n	800c178 <adc_stm32_disable+0x1c>
  MODIFY_REG(ADCx->CR,
 800c162:	6883      	ldr	r3, [r0, #8]
 800c164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c16c:	f043 0302 	orr.w	r3, r3, #2
 800c170:	6083      	str	r3, [r0, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800c172:	6883      	ldr	r3, [r0, #8]
	while (LL_ADC_IsEnabled(adc) == 1UL) {
 800c174:	07db      	lsls	r3, r3, #31
 800c176:	d4fc      	bmi.n	800c172 <adc_stm32_disable+0x16>
}
 800c178:	4770      	bx	lr

0800c17a <z_log_msg_static_create.constprop.0>:
 800c17a:	2300      	movs	r3, #0
 800c17c:	f7f8 b868 	b.w	8004250 <z_impl_z_log_msg_static_create>

0800c180 <adc_stm32_calib.isra.0>:
	ADC_TypeDef *adc = config->base;
 800c180:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(ADCx->CR,
 800c182:	6893      	ldr	r3, [r2, #8]
 800c184:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c188:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c18c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c190:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800c192:	6893      	ldr	r3, [r2, #8]
	while (LL_ADC_IsCalibrationOnGoing(adc)) {
 800c194:	2b00      	cmp	r3, #0
 800c196:	dbfc      	blt.n	800c192 <adc_stm32_calib.isra.0+0x12>
}
 800c198:	4770      	bx	lr

0800c19a <adc_context_start_sampling>:
	data->repeat_buffer = data->buffer;
 800c19a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800c19e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 800c1a2:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800c1aa:	6893      	ldr	r3, [r2, #8]
 800c1ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c1b4:	f043 0304 	orr.w	r3, r3, #4
 800c1b8:	6093      	str	r3, [r2, #8]
}
 800c1ba:	4770      	bx	lr

0800c1bc <adc_context_on_timer_expired>:
{
 800c1bc:	b410      	push	{r4}
 800c1be:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800c1c0:	3808      	subs	r0, #8
 800c1c2:	f3bf 8f5b 	dmb	ish
 800c1c6:	e850 2f00 	ldrex	r2, [r0]
 800c1ca:	1c51      	adds	r1, r2, #1
 800c1cc:	e840 1400 	strex	r4, r1, [r0]
 800c1d0:	2c00      	cmp	r4, #0
 800c1d2:	d1f8      	bne.n	800c1c6 <adc_context_on_timer_expired+0xa>
 800c1d4:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
 800c1d8:	b912      	cbnz	r2, 800c1e0 <adc_context_on_timer_expired+0x24>
}
 800c1da:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
 800c1dc:	f7ff bfdd 	b.w	800c19a <adc_context_start_sampling>
		ctx->status = -EBUSY;
 800c1e0:	f06f 020f 	mvn.w	r2, #15
}
 800c1e4:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
 800c1e6:	659a      	str	r2, [r3, #88]	; 0x58
}
 800c1e8:	4770      	bx	lr

0800c1ea <adc_stm32_isr>:
{
 800c1ea:	b510      	push	{r4, lr}
	ADC_TypeDef *adc = config->base;
 800c1ec:	6843      	ldr	r3, [r0, #4]
	struct adc_stm32_data *data = dev->data;
 800c1ee:	6904      	ldr	r4, [r0, #16]
	ADC_TypeDef *adc = config->base;
 800c1f0:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800c1f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	*data->buffer++ = LL_ADC_REG_ReadConversionData32(adc);
 800c1f4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c1f8:	1c99      	adds	r1, r3, #2
 800c1fa:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
 800c1fe:	801a      	strh	r2, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
 800c200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c202:	b39b      	cbz	r3, 800c26c <adc_stm32_isr+0x82>
		adc_sequence_callback callback = ctx->options.callback;
 800c204:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
 800c206:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
		if (callback) {
 800c20a:	b133      	cbz	r3, 800c21a <adc_stm32_isr+0x30>
			action = callback(dev,
 800c20c:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800c210:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
 800c212:	2801      	cmp	r0, #1
 800c214:	d00b      	beq.n	800c22e <adc_stm32_isr+0x44>
 800c216:	2802      	cmp	r0, #2
 800c218:	d022      	beq.n	800c260 <adc_stm32_isr+0x76>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
 800c21a:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 800c21e:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 800c222:	429a      	cmp	r2, r3
 800c224:	d91c      	bls.n	800c260 <adc_stm32_isr+0x76>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
 800c226:	3301      	adds	r3, #1
 800c228:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
			} else {
				finish = true;
			}
		}

		if (!finish) {
 800c22c:	e003      	b.n	800c236 <adc_stm32_isr+0x4c>
		data->buffer = data->repeat_buffer;
 800c22e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800c232:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
 800c236:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c238:	b923      	cbnz	r3, 800c244 <adc_stm32_isr+0x5a>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
 800c23a:	4620      	mov	r0, r4
}
 800c23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c240:	f7ff bfab 	b.w	800c19a <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800c244:	f3bf 8f5b 	dmb	ish
 800c248:	e854 3f00 	ldrex	r3, [r4]
 800c24c:	1e5a      	subs	r2, r3, #1
 800c24e:	e844 2100 	strex	r1, r2, [r4]
 800c252:	2900      	cmp	r1, #0
 800c254:	d1f8      	bne.n	800c248 <adc_stm32_isr+0x5e>
 800c256:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	dced      	bgt.n	800c23a <adc_stm32_isr+0x50>
 800c25e:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
 800c260:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c262:	b11b      	cbz	r3, 800c26c <adc_stm32_isr+0x82>
	z_impl_k_timer_stop(timer);
 800c264:	f104 0008 	add.w	r0, r4, #8
 800c268:	f000 fcf9 	bl	800cc5e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 800c26c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c274:	f7fb be1e 	b.w	8007eb4 <z_impl_k_sem_give>

0800c278 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 800c278:	680b      	ldr	r3, [r1, #0]
 800c27a:	f1a3 0214 	sub.w	r2, r3, #20
 800c27e:	2a08      	cmp	r2, #8
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 800c280:	bf9f      	itttt	ls
 800c282:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 800c286:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	reg_val |= pclken->enr;
 800c28a:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 800c28c:	681a      	ldrls	r2, [r3, #0]
	reg_val |= pclken->enr;
 800c28e:	bf9d      	ittte	ls
 800c290:	430a      	orrls	r2, r1
	return 0;
 800c292:	2000      	movls	r0, #0
	*reg = reg_val;
 800c294:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 800c296:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 800c29a:	4770      	bx	lr

0800c29c <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 800c29c:	680b      	ldr	r3, [r1, #0]
 800c29e:	f1a3 0214 	sub.w	r2, r3, #20
 800c2a2:	2a08      	cmp	r2, #8
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 800c2a4:	bf9f      	itttt	ls
 800c2a6:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 800c2aa:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	reg_val &= ~pclken->enr;
 800c2ae:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 800c2b0:	681a      	ldrls	r2, [r3, #0]
	reg_val &= ~pclken->enr;
 800c2b2:	bf9d      	ittte	ls
 800c2b4:	438a      	bicls	r2, r1
	return 0;
 800c2b6:	2000      	movls	r0, #0
	*reg = reg_val;
 800c2b8:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 800c2ba:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 800c2be:	4770      	bx	lr

0800c2c0 <stm32_clock_control_configure>:
	switch (src_clk) {
 800c2c0:	680b      	ldr	r3, [r1, #0]
 800c2c2:	3b04      	subs	r3, #4
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d80f      	bhi.n	800c2e8 <stm32_clock_control_configure+0x28>
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 800c2c8:	6849      	ldr	r1, [r1, #4]
					STM32_CLOCK_REG_GET(pclken->enr));
 800c2ca:	b2cb      	uxtb	r3, r1
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) +
 800c2cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c2d0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 800c2d4:	f3c1 4202 	ubfx	r2, r1, #16, #3
	reg_val = *reg;
 800c2d8:	6818      	ldr	r0, [r3, #0]
					STM32_CLOCK_SHIFT_GET(pclken->enr);
 800c2da:	f3c1 2104 	ubfx	r1, r1, #8, #5
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 800c2de:	408a      	lsls	r2, r1
	reg_val |= dt_val;
 800c2e0:	4302      	orrs	r2, r0
	*reg = reg_val;
 800c2e2:	601a      	str	r2, [r3, #0]
	return 0;
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	4770      	bx	lr
		return -ENOTSUP;
 800c2e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800c2ec:	4770      	bx	lr

0800c2ee <config_enable_default_clocks>:
	/* SYSCFG is required to remap IRQ to avoid conflicts with CAN */
	/* cf §14.1.3, RM0316 */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
#endif
#endif /* !CONFIG_SOC_SERIES_STM32F3X */
}
 800c2ee:	4770      	bx	lr

0800c2f0 <z_log_msg_static_create.constprop.0>:
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f7f7 bfad 	b.w	8004250 <z_impl_z_log_msg_static_create>

0800c2f6 <ssd1306_set_pixel_format>:
	if (pf == PIXEL_FORMAT_MONO10) {
 800c2f6:	2904      	cmp	r1, #4
 800c2f8:	d001      	beq.n	800c2fe <ssd1306_set_pixel_format+0x8>
 800c2fa:	f7fa b863 	b.w	80063c4 <ssd1306_set_pixel_format.part.0>
}
 800c2fe:	2000      	movs	r0, #0
 800c300:	4770      	bx	lr

0800c302 <ssd1306_write_bus.isra.0>:
static inline int ssd1306_write_bus(const struct device *dev,
 800c302:	b530      	push	{r4, r5, lr}
 800c304:	461c      	mov	r4, r3
 800c306:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write_dt(&config->bus,
 800c308:	f084 0401 	eor.w	r4, r4, #1
 800c30c:	01a4      	lsls	r4, r4, #6
 800c30e:	f88d 4007 	strb.w	r4, [sp, #7]
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
 800c312:	f10d 0407 	add.w	r4, sp, #7
static inline int ssd1306_write_bus(const struct device *dev,
 800c316:	4605      	mov	r5, r0
 800c318:	9402      	str	r4, [sp, #8]
	msg[0].len = 1U;
 800c31a:	2401      	movs	r4, #1
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)buf;
	msg[1].len = num_bytes;
 800c31c:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].len = 1U;
 800c320:	9403      	str	r4, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800c322:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
 800c324:	2400      	movs	r4, #0
static inline int i2c_burst_write_dt(const struct i2c_dt_spec *spec,
				     uint8_t start_addr,
				     const uint8_t *buf,
				     uint32_t num_bytes)
{
	return i2c_burst_write(spec->bus, spec->addr,
 800c326:	6800      	ldr	r0, [r0, #0]
 800c328:	88ab      	ldrh	r3, [r5, #4]
	msg[0].flags = I2C_MSG_WRITE;
 800c32a:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800c32e:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 800c332:	6881      	ldr	r1, [r0, #8]
 800c334:	688c      	ldr	r4, [r1, #8]
 800c336:	a902      	add	r1, sp, #8
 800c338:	47a0      	blx	r4
}
 800c33a:	b009      	add	sp, #36	; 0x24
 800c33c:	bd30      	pop	{r4, r5, pc}

0800c33e <ssd1306_set_contrast>:
{
 800c33e:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
 800c340:	2381      	movs	r3, #129	; 0x81
 800c342:	f88d 3004 	strb.w	r3, [sp, #4]
 800c346:	f88d 1005 	strb.w	r1, [sp, #5]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 800c34a:	2301      	movs	r3, #1
 800c34c:	2202      	movs	r2, #2
 800c34e:	a901      	add	r1, sp, #4
 800c350:	6840      	ldr	r0, [r0, #4]
 800c352:	f7ff ffd6 	bl	800c302 <ssd1306_write_bus.isra.0>
}
 800c356:	b003      	add	sp, #12
 800c358:	f85d fb04 	ldr.w	pc, [sp], #4

0800c35c <ssd1306_suspend>:
{
 800c35c:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
 800c35e:	23ae      	movs	r3, #174	; 0xae
 800c360:	f88d 3004 	strb.w	r3, [sp, #4]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 800c364:	2301      	movs	r3, #1
 800c366:	461a      	mov	r2, r3
 800c368:	a901      	add	r1, sp, #4
 800c36a:	6840      	ldr	r0, [r0, #4]
 800c36c:	f7ff ffc9 	bl	800c302 <ssd1306_write_bus.isra.0>
}
 800c370:	b003      	add	sp, #12
 800c372:	f85d fb04 	ldr.w	pc, [sp], #4

0800c376 <ssd1306_resume>:
{
 800c376:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
 800c378:	23af      	movs	r3, #175	; 0xaf
 800c37a:	f88d 3004 	strb.w	r3, [sp, #4]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 800c37e:	2301      	movs	r3, #1
 800c380:	461a      	mov	r2, r3
 800c382:	a901      	add	r1, sp, #4
 800c384:	6840      	ldr	r0, [r0, #4]
 800c386:	f7ff ffbc 	bl	800c302 <ssd1306_write_bus.isra.0>
}
 800c38a:	b003      	add	sp, #12
 800c38c:	f85d fb04 	ldr.w	pc, [sp], #4

0800c390 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c390:	6843      	ldr	r3, [r0, #4]
 800c392:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800c394:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800c396:	600b      	str	r3, [r1, #0]
}
 800c398:	2000      	movs	r0, #0
 800c39a:	4770      	bx	lr

0800c39c <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c39c:	6843      	ldr	r3, [r0, #4]
 800c39e:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800c3a0:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800c3a2:	4042      	eors	r2, r0
 800c3a4:	400a      	ands	r2, r1
 800c3a6:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800c3a8:	615a      	str	r2, [r3, #20]
}
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	4770      	bx	lr

0800c3ae <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c3ae:	6843      	ldr	r3, [r0, #4]
 800c3b0:	685b      	ldr	r3, [r3, #4]
}
 800c3b2:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 800c3b4:	6199      	str	r1, [r3, #24]
}
 800c3b6:	4770      	bx	lr

0800c3b8 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c3b8:	6843      	ldr	r3, [r0, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
}
 800c3bc:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800c3be:	6299      	str	r1, [r3, #40]	; 0x28
 800c3c0:	4770      	bx	lr

0800c3c2 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c3c2:	6843      	ldr	r3, [r0, #4]
 800c3c4:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800c3c6:	6953      	ldr	r3, [r2, #20]
 800c3c8:	404b      	eors	r3, r1
 800c3ca:	6153      	str	r3, [r2, #20]
}
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	4770      	bx	lr

0800c3d0 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800c3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c3d2:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800c3d4:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c3d6:	6867      	ldr	r7, [r4, #4]
 800c3d8:	4088      	lsls	r0, r1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800c3da:	461e      	mov	r6, r3
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800c3dc:	f3c2 1380 	ubfx	r3, r2, #6, #1
 800c3e0:	ea27 0700 	bic.w	r7, r7, r0
 800c3e4:	408b      	lsls	r3, r1
 800c3e6:	433b      	orrs	r3, r7
 800c3e8:	6063      	str	r3, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c3ea:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 800c3ee:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800c3f2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800c3f6:	f04f 0e03 	mov.w	lr, #3
 800c3fa:	007f      	lsls	r7, r7, #1
 800c3fc:	fa0e f707 	lsl.w	r7, lr, r7
 800c400:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c404:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 800c408:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800c40c:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 800c410:	007f      	lsls	r7, r7, #1
 800c412:	40bb      	lsls	r3, r7
 800c414:	ea43 030c 	orr.w	r3, r3, ip
 800c418:	60a3      	str	r3, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c41a:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800c41e:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c422:	68e7      	ldr	r7, [r4, #12]
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	fa0e f303 	lsl.w	r3, lr, r3
 800c42a:	ea27 0703 	bic.w	r7, r7, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c42e:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800c432:	fab3 f383 	clz	r3, r3
 800c436:	f002 0530 	and.w	r5, r2, #48	; 0x30
 800c43a:	005b      	lsls	r3, r3, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800c43c:	f3c2 2241 	ubfx	r2, r2, #9, #2
 800c440:	409a      	lsls	r2, r3
 800c442:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 800c444:	2d20      	cmp	r5, #32
 800c446:	60e2      	str	r2, [r4, #12]
 800c448:	d116      	bne.n	800c478 <gpio_stm32_configure_raw.isra.0+0xa8>
		if (pin < 8) {
 800c44a:	2907      	cmp	r1, #7
 800c44c:	dc2b      	bgt.n	800c4a6 <gpio_stm32_configure_raw.isra.0+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c44e:	fa90 f3a0 	rbit	r3, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800c452:	6a22      	ldr	r2, [r4, #32]
  if (value == 0U)
 800c454:	b32b      	cbz	r3, 800c4a2 <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 800c456:	fab3 f383 	clz	r3, r3
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	210f      	movs	r1, #15
 800c45e:	fa01 f303 	lsl.w	r3, r1, r3
 800c462:	ea22 0203 	bic.w	r2, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c466:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800c46a:	fab3 f383 	clz	r3, r3
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	fa06 f303 	lsl.w	r3, r6, r3
 800c474:	4313      	orrs	r3, r2
 800c476:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c478:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800c47c:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c480:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c482:	fa90 f0a0 	rbit	r0, r0
 800c486:	005b      	lsls	r3, r3, #1
 800c488:	2103      	movs	r1, #3
  return __builtin_clz(value);
 800c48a:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800c48e:	092d      	lsrs	r5, r5, #4
 800c490:	fa01 f303 	lsl.w	r3, r1, r3
 800c494:	0040      	lsls	r0, r0, #1
 800c496:	ea22 0303 	bic.w	r3, r2, r3
 800c49a:	4085      	lsls	r5, r0
 800c49c:	431d      	orrs	r5, r3
 800c49e:	6025      	str	r5, [r4, #0]
}
 800c4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800c4a2:	462b      	mov	r3, r5
 800c4a4:	e7d9      	b.n	800c45a <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c4a6:	0a03      	lsrs	r3, r0, #8
 800c4a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4aa:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800c4ae:	b182      	cbz	r2, 800c4d2 <gpio_stm32_configure_raw.isra.0+0x102>
  return __builtin_clz(value);
 800c4b0:	fab2 f282 	clz	r2, r2
 800c4b4:	0092      	lsls	r2, r2, #2
 800c4b6:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4b8:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800c4bc:	fab3 f383 	clz	r3, r3
 800c4c0:	fa07 f202 	lsl.w	r2, r7, r2
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	ea21 0202 	bic.w	r2, r1, r2
 800c4ca:	409e      	lsls	r6, r3
 800c4cc:	4316      	orrs	r6, r2
 800c4ce:	6266      	str	r6, [r4, #36]	; 0x24
}
 800c4d0:	e7d2      	b.n	800c478 <gpio_stm32_configure_raw.isra.0+0xa8>
    return 32U;
 800c4d2:	462a      	mov	r2, r5
 800c4d4:	e7ee      	b.n	800c4b4 <gpio_stm32_configure_raw.isra.0+0xe4>

0800c4d6 <gpio_stm32_config>:
{
 800c4d6:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 800c4d8:	039a      	lsls	r2, r3, #14
{
 800c4da:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 800c4dc:	d518      	bpl.n	800c510 <gpio_stm32_config+0x3a>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800c4de:	079c      	lsls	r4, r3, #30
 800c4e0:	d50f      	bpl.n	800c502 <gpio_stm32_config+0x2c>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800c4e2:	075a      	lsls	r2, r3, #29
 800c4e4:	d52d      	bpl.n	800c542 <gpio_stm32_config+0x6c>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800c4e6:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 800c4e8:	06dc      	lsls	r4, r3, #27
 800c4ea:	d50c      	bpl.n	800c506 <gpio_stm32_config+0x30>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800c4ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800c4f0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 800c4f4:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800c4f6:	d018      	beq.n	800c52a <gpio_stm32_config+0x54>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c4f8:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 800c4fe:	61a3      	str	r3, [r4, #24]
	return 0;
 800c500:	e00d      	b.n	800c51e <gpio_stm32_config+0x48>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800c502:	2210      	movs	r2, #16
 800c504:	e7f0      	b.n	800c4e8 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800c506:	069c      	lsls	r4, r3, #26
 800c508:	d5f2      	bpl.n	800c4f0 <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800c50a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 800c50e:	e7ef      	b.n	800c4f0 <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 800c510:	03dc      	lsls	r4, r3, #15
 800c512:	d511      	bpl.n	800c538 <gpio_stm32_config+0x62>
		if ((flags & GPIO_PULL_UP) != 0) {
 800c514:	06da      	lsls	r2, r3, #27
 800c516:	d411      	bmi.n	800c53c <gpio_stm32_config+0x66>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800c518:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c51c:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 800c51e:	6840      	ldr	r0, [r0, #4]
 800c520:	2300      	movs	r3, #0
 800c522:	f7ff ff55 	bl	800c3d0 <gpio_stm32_configure_raw.isra.0>
	return 0;
 800c526:	2000      	movs	r0, #0
}
 800c528:	bd10      	pop	{r4, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800c52a:	035b      	lsls	r3, r3, #13
 800c52c:	d5f7      	bpl.n	800c51e <gpio_stm32_config+0x48>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c52e:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800c530:	2301      	movs	r3, #1
 800c532:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 800c534:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 800c536:	e7f2      	b.n	800c51e <gpio_stm32_config+0x48>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800c538:	2230      	movs	r2, #48	; 0x30
 800c53a:	e7f0      	b.n	800c51e <gpio_stm32_config+0x48>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800c53c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c540:	e7ed      	b.n	800c51e <gpio_stm32_config+0x48>
				return -ENOTSUP;
 800c542:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800c546:	e7ef      	b.n	800c528 <gpio_stm32_config+0x52>

0800c548 <gpio_stm32_configure>:
{
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	461f      	mov	r7, r3
 800c54c:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800c54e:	6840      	ldr	r0, [r0, #4]
{
 800c550:	460e      	mov	r6, r1
 800c552:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800c554:	f7ff ff3c 	bl	800c3d0 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 800c558:	2f11      	cmp	r7, #17
 800c55a:	d108      	bne.n	800c56e <gpio_stm32_configure+0x26>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800c55c:	2301      	movs	r3, #1
 800c55e:	fa03 f606 	lsl.w	r6, r3, r6
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c562:	6863      	ldr	r3, [r4, #4]
 800c564:	685b      	ldr	r3, [r3, #4]
		if (gpio_out == STM32_ODR_1) {
 800c566:	052a      	lsls	r2, r5, #20
	WRITE_REG(gpio->BSRR, pins);
 800c568:	bf4c      	ite	mi
 800c56a:	619e      	strmi	r6, [r3, #24]
 800c56c:	629e      	strpl	r6, [r3, #40]	; 0x28
}
 800c56e:	2000      	movs	r0, #0
 800c570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c572 <stm32_i2c_enable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 800c572:	68c3      	ldr	r3, [r0, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	f042 0220 	orr.w	r2, r2, #32
 800c57a:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	f042 0210 	orr.w	r2, r2, #16
 800c582:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c58a:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c592:	601a      	str	r2, [r3, #0]
}
 800c594:	4770      	bx	lr

0800c596 <stm32_i2c_disable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 800c596:	68c3      	ldr	r3, [r0, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	f022 0202 	bic.w	r2, r2, #2
 800c59e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	f022 0204 	bic.w	r2, r2, #4
 800c5a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	f022 0220 	bic.w	r2, r2, #32
 800c5ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	f022 0210 	bic.w	r2, r2, #16
 800c5b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5c6:	601a      	str	r2, [r3, #0]
}
 800c5c8:	4770      	bx	lr

0800c5ca <stm32_i2c_master_mode_end>:
{
 800c5ca:	b510      	push	{r4, lr}
 800c5cc:	4603      	mov	r3, r0
	const struct i2c_stm32_config *cfg = dev->config;
 800c5ce:	6840      	ldr	r0, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800c5d0:	691c      	ldr	r4, [r3, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c5d2:	68c1      	ldr	r1, [r0, #12]
	stm32_i2c_disable_transfer_interrupts(dev);
 800c5d4:	f7ff ffdf 	bl	800c596 <stm32_i2c_disable_transfer_interrupts.isra.0>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800c5d8:	680b      	ldr	r3, [r1, #0]
 800c5da:	f023 0301 	bic.w	r3, r3, #1
 800c5de:	600b      	str	r3, [r1, #0]
 800c5e0:	4620      	mov	r0, r4
}
 800c5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e6:	f7fb bc65 	b.w	8007eb4 <z_impl_k_sem_give>

0800c5ea <stm32_i2c_event_isr>:
{
 800c5ea:	b510      	push	{r4, lr}
	struct i2c_stm32_data *data = dev->data;
 800c5ec:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c5ee:	6843      	ldr	r3, [r0, #4]
	if (data->current.len) {
 800c5f0:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	I2C_TypeDef *i2c = cfg->i2c;
 800c5f2:	68db      	ldr	r3, [r3, #12]
	if (data->current.len) {
 800c5f4:	b18a      	cbz	r2, 800c61a <stm32_i2c_event_isr+0x30>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800c5f6:	699a      	ldr	r2, [r3, #24]
 800c5f8:	0792      	lsls	r2, r2, #30
			LL_I2C_TransmitData8(i2c, *data->current.buf);
 800c5fa:	bf42      	ittt	mi
 800c5fc:	6bca      	ldrmi	r2, [r1, #60]	; 0x3c
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 800c5fe:	7812      	ldrbmi	r2, [r2, #0]
 800c600:	629a      	strmi	r2, [r3, #40]	; 0x28
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800c602:	699a      	ldr	r2, [r3, #24]
 800c604:	0754      	lsls	r4, r2, #29
			*data->current.buf = LL_I2C_ReceiveData8(i2c);
 800c606:	bf42      	ittt	mi
 800c608:	6bca      	ldrmi	r2, [r1, #60]	; 0x3c
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800c60a:	6a5c      	ldrmi	r4, [r3, #36]	; 0x24
 800c60c:	7014      	strbmi	r4, [r2, #0]
		data->current.buf++;
 800c60e:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800c610:	3201      	adds	r2, #1
 800c612:	63ca      	str	r2, [r1, #60]	; 0x3c
		data->current.len--;
 800c614:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800c616:	3a01      	subs	r2, #1
 800c618:	638a      	str	r2, [r1, #56]	; 0x38
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 800c61a:	699a      	ldr	r2, [r3, #24]
 800c61c:	06d2      	lsls	r2, r2, #27
 800c61e:	d414      	bmi.n	800c64a <stm32_i2c_event_isr+0x60>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800c620:	699a      	ldr	r2, [r3, #24]
 800c622:	0694      	lsls	r4, r2, #26
 800c624:	d41c      	bmi.n	800c660 <stm32_i2c_event_isr+0x76>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 800c626:	699a      	ldr	r2, [r3, #24]
 800c628:	0652      	lsls	r2, r2, #25
 800c62a:	d402      	bmi.n	800c632 <stm32_i2c_event_isr+0x48>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
 800c62c:	699a      	ldr	r2, [r3, #24]
 800c62e:	0614      	lsls	r4, r2, #24
 800c630:	d515      	bpl.n	800c65e <stm32_i2c_event_isr+0x74>
		if (data->current.msg->flags & I2C_MSG_STOP) {
 800c632:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800c634:	7a12      	ldrb	r2, [r2, #8]
 800c636:	0792      	lsls	r2, r2, #30
 800c638:	d40d      	bmi.n	800c656 <stm32_i2c_event_isr+0x6c>
			stm32_i2c_disable_transfer_interrupts(dev);
 800c63a:	6840      	ldr	r0, [r0, #4]
 800c63c:	f7ff ffab 	bl	800c596 <stm32_i2c_disable_transfer_interrupts.isra.0>
}
 800c640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c644:	4608      	mov	r0, r1
 800c646:	f7fb bc35 	b.w	8007eb4 <z_impl_k_sem_give>
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 800c64a:	69da      	ldr	r2, [r3, #28]
 800c64c:	f042 0210 	orr.w	r2, r2, #16
 800c650:	61da      	str	r2, [r3, #28]
		data->current.is_nack = 1U;
 800c652:	2201      	movs	r2, #1
 800c654:	62ca      	str	r2, [r1, #44]	; 0x2c
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c65c:	605a      	str	r2, [r3, #4]
}
 800c65e:	bd10      	pop	{r4, pc}
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800c660:	69da      	ldr	r2, [r3, #28]
 800c662:	f042 0220 	orr.w	r2, r2, #32
 800c666:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800c668:	685a      	ldr	r2, [r3, #4]
 800c66a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800c66e:	605a      	str	r2, [r3, #4]
 800c670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stm32_i2c_master_mode_end(dev);
 800c674:	f7ff bfa9 	b.w	800c5ca <stm32_i2c_master_mode_end>

0800c678 <stm32_i2c_error_isr>:
	I2C_TypeDef *i2c = cfg->i2c;
 800c678:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800c67a:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c67c:	68db      	ldr	r3, [r3, #12]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ARLO) == (I2C_ISR_ARLO)) ? 1UL : 0UL);
 800c67e:	699a      	ldr	r2, [r3, #24]
 800c680:	0592      	lsls	r2, r2, #22
 800c682:	d507      	bpl.n	800c694 <stm32_i2c_error_isr+0x1c>
  SET_BIT(I2Cx->ICR, I2C_ICR_ARLOCF);
 800c684:	69da      	ldr	r2, [r3, #28]
 800c686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c68a:	61da      	str	r2, [r3, #28]
		data->current.is_arlo = 1U;
 800c68c:	2301      	movs	r3, #1
 800c68e:	628b      	str	r3, [r1, #40]	; 0x28
	stm32_i2c_master_mode_end(dev);
 800c690:	f7ff bf9b 	b.w	800c5ca <stm32_i2c_master_mode_end>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BERR) == (I2C_ISR_BERR)) ? 1UL : 0UL);
 800c694:	699a      	ldr	r2, [r3, #24]
 800c696:	05d2      	lsls	r2, r2, #23
 800c698:	d506      	bpl.n	800c6a8 <stm32_i2c_error_isr+0x30>
  SET_BIT(I2Cx->ICR, I2C_ICR_BERRCF);
 800c69a:	69da      	ldr	r2, [r3, #28]
 800c69c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c6a0:	61da      	str	r2, [r3, #28]
		data->current.is_err = 1U;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	630b      	str	r3, [r1, #48]	; 0x30
		goto end;
 800c6a6:	e7f3      	b.n	800c690 <stm32_i2c_error_isr+0x18>
}
 800c6a8:	4770      	bx	lr

0800c6aa <stm32_i2c_msg_write>:
{
 800c6aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 800c6ae:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800c6b0:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c6b2:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 800c6b6:	684f      	ldr	r7, [r1, #4]
 800c6b8:	63a7      	str	r7, [r4, #56]	; 0x38
	data->current.buf = msg->buf;
 800c6ba:	680f      	ldr	r7, [r1, #0]
 800c6bc:	63e7      	str	r7, [r4, #60]	; 0x3c
	data->current.is_nack = 0U;
 800c6be:	f04f 0c00 	mov.w	ip, #0
{
 800c6c2:	4605      	mov	r5, r0
	data->current.is_write = 1U;
 800c6c4:	2701      	movs	r7, #1
	data->current.is_err = 0U;
 800c6c6:	e9c4 cc0b 	strd	ip, ip, [r4, #44]	; 0x2c
	data->current.is_write = 1U;
 800c6ca:	6267      	str	r7, [r4, #36]	; 0x24
	data->current.msg = msg;
 800c6cc:	6361      	str	r1, [r4, #52]	; 0x34
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_WRITE);
 800c6ce:	f8cd c000 	str.w	ip, [sp]
 800c6d2:	f7fa f961 	bl	8006998 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 800c6d6:	6868      	ldr	r0, [r5, #4]
 800c6d8:	f7ff ff4b 	bl	800c572 <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 800c6dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c6e0:	f043 0302 	orr.w	r3, r3, #2
 800c6e4:	f8c8 3000 	str.w	r3, [r8]
	return z_impl_k_sem_take(sem, timeout);
 800c6e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f7fb fc1e 	bl	8007f30 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 800c6f4:	b150      	cbz	r0, 800c70c <stm32_i2c_msg_write+0x62>
		stm32_i2c_master_mode_end(dev);
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f7ff ff67 	bl	800c5ca <stm32_i2c_master_mode_end>
 800c6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c700:	f04f 33ff 	mov.w	r3, #4294967295
 800c704:	4620      	mov	r0, r4
 800c706:	f7fb fc13 	bl	8007f30 <z_impl_k_sem_take>
		is_timeout = true;
 800c70a:	4638      	mov	r0, r7
	if (data->current.is_nack || data->current.is_err ||
 800c70c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800c710:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c712:	b129      	cbz	r1, 800c720 <stm32_i2c_msg_write+0x76>
	if (data->current.is_arlo) {
 800c714:	2100      	movs	r1, #0
 800c716:	b102      	cbz	r2, 800c71a <stm32_i2c_msg_write+0x70>
		data->current.is_arlo = 0U;
 800c718:	62a1      	str	r1, [r4, #40]	; 0x28
		data->current.is_nack = 0U;
 800c71a:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (data->current.is_err) {
 800c71c:	b963      	cbnz	r3, 800c738 <stm32_i2c_msg_write+0x8e>
 800c71e:	e002      	b.n	800c726 <stm32_i2c_msg_write+0x7c>
	if (data->current.is_nack || data->current.is_err ||
 800c720:	b943      	cbnz	r3, 800c734 <stm32_i2c_msg_write+0x8a>
 800c722:	b92a      	cbnz	r2, 800c730 <stm32_i2c_msg_write+0x86>
	    data->current.is_arlo || is_timeout) {
 800c724:	b108      	cbz	r0, 800c72a <stm32_i2c_msg_write+0x80>
	return -EIO;
 800c726:	f06f 0004 	mvn.w	r0, #4
}
 800c72a:	b002      	add	sp, #8
 800c72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->current.is_arlo = 0U;
 800c730:	62a3      	str	r3, [r4, #40]	; 0x28
	if (data->current.is_err) {
 800c732:	e7f8      	b.n	800c726 <stm32_i2c_msg_write+0x7c>
	if (data->current.is_arlo) {
 800c734:	b102      	cbz	r2, 800c738 <stm32_i2c_msg_write+0x8e>
		data->current.is_arlo = 0U;
 800c736:	62a1      	str	r1, [r4, #40]	; 0x28
		data->current.is_err = 0U;
 800c738:	2300      	movs	r3, #0
 800c73a:	6323      	str	r3, [r4, #48]	; 0x30
 800c73c:	e7f3      	b.n	800c726 <stm32_i2c_msg_write+0x7c>

0800c73e <stm32_i2c_msg_read>:
{
 800c73e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 800c742:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800c744:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c746:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 800c74a:	684f      	ldr	r7, [r1, #4]
 800c74c:	63a7      	str	r7, [r4, #56]	; 0x38
	data->current.buf = msg->buf;
 800c74e:	680f      	ldr	r7, [r1, #0]
 800c750:	63e7      	str	r7, [r4, #60]	; 0x3c
{
 800c752:	4605      	mov	r5, r0
	data->current.is_write = 0U;
 800c754:	2700      	movs	r7, #0
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 800c756:	f44f 6680 	mov.w	r6, #1024	; 0x400
	data->current.is_arlo = 0U;
 800c75a:	e9c4 7709 	strd	r7, r7, [r4, #36]	; 0x24
	data->current.is_nack = 0U;
 800c75e:	e9c4 770b 	strd	r7, r7, [r4, #44]	; 0x2c
	data->current.msg = msg;
 800c762:	6361      	str	r1, [r4, #52]	; 0x34
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 800c764:	9600      	str	r6, [sp, #0]
 800c766:	f7fa f917 	bl	8006998 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 800c76a:	6868      	ldr	r0, [r5, #4]
 800c76c:	f7ff ff01 	bl	800c572 <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800c770:	f8d8 3000 	ldr.w	r3, [r8]
 800c774:	f043 0304 	orr.w	r3, r3, #4
 800c778:	f8c8 3000 	str.w	r3, [r8]
 800c77c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c780:	2300      	movs	r3, #0
 800c782:	4620      	mov	r0, r4
 800c784:	f7fb fbd4 	bl	8007f30 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 800c788:	b150      	cbz	r0, 800c7a0 <stm32_i2c_msg_read+0x62>
		stm32_i2c_master_mode_end(dev);
 800c78a:	4628      	mov	r0, r5
 800c78c:	f7ff ff1d 	bl	800c5ca <stm32_i2c_master_mode_end>
 800c790:	f04f 32ff 	mov.w	r2, #4294967295
 800c794:	f04f 33ff 	mov.w	r3, #4294967295
 800c798:	4620      	mov	r0, r4
 800c79a:	f7fb fbc9 	bl	8007f30 <z_impl_k_sem_take>
		is_timeout = true;
 800c79e:	2001      	movs	r0, #1
	if (data->current.is_nack || data->current.is_err ||
 800c7a0:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800c7a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c7a6:	b129      	cbz	r1, 800c7b4 <stm32_i2c_msg_read+0x76>
	if (data->current.is_arlo) {
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	b102      	cbz	r2, 800c7ae <stm32_i2c_msg_read+0x70>
		data->current.is_arlo = 0U;
 800c7ac:	62a1      	str	r1, [r4, #40]	; 0x28
		data->current.is_nack = 0U;
 800c7ae:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (data->current.is_err) {
 800c7b0:	b963      	cbnz	r3, 800c7cc <stm32_i2c_msg_read+0x8e>
 800c7b2:	e002      	b.n	800c7ba <stm32_i2c_msg_read+0x7c>
	if (data->current.is_nack || data->current.is_err ||
 800c7b4:	b943      	cbnz	r3, 800c7c8 <stm32_i2c_msg_read+0x8a>
 800c7b6:	b92a      	cbnz	r2, 800c7c4 <stm32_i2c_msg_read+0x86>
	    data->current.is_arlo || is_timeout) {
 800c7b8:	b108      	cbz	r0, 800c7be <stm32_i2c_msg_read+0x80>
	return -EIO;
 800c7ba:	f06f 0004 	mvn.w	r0, #4
}
 800c7be:	b002      	add	sp, #8
 800c7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->current.is_arlo = 0U;
 800c7c4:	62a3      	str	r3, [r4, #40]	; 0x28
	if (data->current.is_err) {
 800c7c6:	e7f8      	b.n	800c7ba <stm32_i2c_msg_read+0x7c>
	if (data->current.is_arlo) {
 800c7c8:	b102      	cbz	r2, 800c7cc <stm32_i2c_msg_read+0x8e>
		data->current.is_arlo = 0U;
 800c7ca:	62a1      	str	r1, [r4, #40]	; 0x28
		data->current.is_err = 0U;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	6323      	str	r3, [r4, #48]	; 0x30
 800c7d0:	e7f3      	b.n	800c7ba <stm32_i2c_msg_read+0x7c>

0800c7d2 <i2c_stm32_irq_config_func_i2c1>:
STM32_I2C_IRQ_HANDLER(name)

/* I2C instances declaration */

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c1), okay)
STM32_I2C_INIT(i2c1);
 800c7d2:	b508      	push	{r3, lr}
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	4611      	mov	r1, r2
 800c7d8:	201f      	movs	r0, #31
 800c7da:	f7f8 fa27 	bl	8004c2c <z_arm_irq_priority_set>
 800c7de:	201f      	movs	r0, #31
 800c7e0:	f7f8 fa16 	bl	8004c10 <arch_irq_enable>
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	2020      	movs	r0, #32
 800c7e8:	4611      	mov	r1, r2
 800c7ea:	f7f8 fa1f 	bl	8004c2c <z_arm_irq_priority_set>
 800c7ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c7f2:	2020      	movs	r0, #32
 800c7f4:	f7f8 ba0c 	b.w	8004c10 <arch_irq_enable>

0800c7f8 <i2c_stm32_transfer>:
{
 800c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fc:	4699      	mov	r9, r3
	current->flags |= I2C_MSG_RESTART;
 800c7fe:	7a0b      	ldrb	r3, [r1, #8]
	struct i2c_stm32_data *data = dev->data;
 800c800:	6906      	ldr	r6, [r0, #16]
	current->flags |= I2C_MSG_RESTART;
 800c802:	f043 0304 	orr.w	r3, r3, #4
{
 800c806:	4615      	mov	r5, r2
	current->flags |= I2C_MSG_RESTART;
 800c808:	720b      	strb	r3, [r1, #8]
{
 800c80a:	b087      	sub	sp, #28
 800c80c:	4607      	mov	r7, r0
 800c80e:	460c      	mov	r4, r1
	for (uint8_t i = 1; i <= num_msgs; i++) {
 800c810:	460a      	mov	r2, r1
 800c812:	2301      	movs	r3, #1
 800c814:	42ab      	cmp	r3, r5
 800c816:	d90c      	bls.n	800c832 <i2c_stm32_transfer+0x3a>
	k_sem_take(&data->bus_mutex, K_FOREVER);
 800c818:	f106 0810 	add.w	r8, r6, #16
 800c81c:	f04f 33ff 	mov.w	r3, #4294967295
 800c820:	f04f 32ff 	mov.w	r2, #4294967295
 800c824:	4640      	mov	r0, r8
 800c826:	f7fb fb83 	bl	8007f30 <z_impl_k_sem_take>
	while (num_msgs > 0) {
 800c82a:	3414      	adds	r4, #20
 800c82c:	2300      	movs	r3, #0
 800c82e:	ae03      	add	r6, sp, #12
 800c830:	e050      	b.n	800c8d4 <i2c_stm32_transfer+0xdc>
			if (OPERATION(current) != OPERATION(next)) {
 800c832:	7a11      	ldrb	r1, [r2, #8]
		if (i < num_msgs) {
 800c834:	d20c      	bcs.n	800c850 <i2c_stm32_transfer+0x58>
			if (OPERATION(current) != OPERATION(next)) {
 800c836:	7d10      	ldrb	r0, [r2, #20]
 800c838:	ea80 0c01 	eor.w	ip, r0, r1
 800c83c:	f01c 0f01 	tst.w	ip, #1
 800c840:	d001      	beq.n	800c846 <i2c_stm32_transfer+0x4e>
				if (!(next->flags & I2C_MSG_RESTART)) {
 800c842:	0740      	lsls	r0, r0, #29
 800c844:	d501      	bpl.n	800c84a <i2c_stm32_transfer+0x52>
			if (current->flags & I2C_MSG_STOP) {
 800c846:	0789      	lsls	r1, r1, #30
 800c848:	d505      	bpl.n	800c856 <i2c_stm32_transfer+0x5e>
		return ret;
 800c84a:	f06f 0315 	mvn.w	r3, #21
 800c84e:	e048      	b.n	800c8e2 <i2c_stm32_transfer+0xea>
			current->flags |= I2C_MSG_STOP;
 800c850:	f041 0102 	orr.w	r1, r1, #2
 800c854:	7211      	strb	r1, [r2, #8]
	for (uint8_t i = 1; i <= num_msgs; i++) {
 800c856:	3301      	adds	r3, #1
		current++;
 800c858:	320c      	adds	r2, #12
	for (uint8_t i = 1; i <= num_msgs; i++) {
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	e7da      	b.n	800c814 <i2c_stm32_transfer+0x1c>
		if (num_msgs > 1) {
 800c85e:	2d01      	cmp	r5, #1
 800c860:	bf14      	ite	ne
 800c862:	4623      	movne	r3, r4
 800c864:	2300      	moveq	r3, #0
 800c866:	9301      	str	r3, [sp, #4]
		ret = i2c_stm32_transaction(dev, *current, next_msg_flags, slave);
 800c868:	f1a4 0314 	sub.w	r3, r4, #20
 800c86c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c870:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	const uint8_t saved_flags = msg.flags;
 800c874:	f89d b014 	ldrb.w	fp, [sp, #20]
	uint32_t rest = msg.len;
 800c878:	f8dd a010 	ldr.w	sl, [sp, #16]
		saved_flags & ~(I2C_MSG_STOP | I2C_MSG_RESTART);
 800c87c:	f02b 0306 	bic.w	r3, fp, #6
	uint8_t combine_flags =
 800c880:	f88d 300b 	strb.w	r3, [sp, #11]
		if (msg.len > i2c_stm32_maxchunk) {
 800c884:	9b04      	ldr	r3, [sp, #16]
 800c886:	2bff      	cmp	r3, #255	; 0xff
			msg.len = i2c_stm32_maxchunk;
 800c888:	bf83      	ittte	hi
 800c88a:	23ff      	movhi	r3, #255	; 0xff
 800c88c:	9304      	strhi	r3, [sp, #16]
			msg.flags &= ~I2C_MSG_STOP;
 800c88e:	f89d 3014 	ldrbhi.w	r3, [sp, #20]
			flagsp = next_msg_flags;
 800c892:	9a01      	ldrls	r2, [sp, #4]
			msg.flags &= ~I2C_MSG_STOP;
 800c894:	bf8a      	itet	hi
 800c896:	f003 03fd 	andhi.w	r3, r3, #253	; 0xfd
			flagsp = &combine_flags;
 800c89a:	465b      	movls	r3, fp
 800c89c:	f10d 020b 	addhi.w	r2, sp, #11
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 800c8a0:	f013 0f01 	tst.w	r3, #1
			msg.flags &= ~I2C_MSG_STOP;
 800c8a4:	f88d 3014 	strb.w	r3, [sp, #20]
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 800c8a8:	4631      	mov	r1, r6
 800c8aa:	464b      	mov	r3, r9
 800c8ac:	4638      	mov	r0, r7
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 800c8ae:	d11c      	bne.n	800c8ea <i2c_stm32_transfer+0xf2>
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 800c8b0:	f7ff fefb 	bl	800c6aa <stm32_i2c_msg_write>
		if (ret < 0) {
 800c8b4:	2800      	cmp	r0, #0
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 800c8b6:	4603      	mov	r3, r0
		if (ret < 0) {
 800c8b8:	db0e      	blt.n	800c8d8 <i2c_stm32_transfer+0xe0>
		rest -= msg.len;
 800c8ba:	9904      	ldr	r1, [sp, #16]
		msg.buf += msg.len;
 800c8bc:	9a03      	ldr	r2, [sp, #12]
		rest -= msg.len;
 800c8be:	ebaa 0a01 	sub.w	sl, sl, r1
		msg.buf += msg.len;
 800c8c2:	440a      	add	r2, r1
		msg.len = rest;
 800c8c4:	e9cd 2a03 	strd	r2, sl, [sp, #12]
	} while (rest > 0U);
 800c8c8:	f1ba 0f00 	cmp.w	sl, #0
 800c8cc:	d1da      	bne.n	800c884 <i2c_stm32_transfer+0x8c>
		num_msgs--;
 800c8ce:	3d01      	subs	r5, #1
 800c8d0:	b2ed      	uxtb	r5, r5
 800c8d2:	340c      	adds	r4, #12
	while (num_msgs > 0) {
 800c8d4:	2d00      	cmp	r5, #0
 800c8d6:	d1c2      	bne.n	800c85e <i2c_stm32_transfer+0x66>
 800c8d8:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
 800c8da:	4640      	mov	r0, r8
 800c8dc:	f7fb faea 	bl	8007eb4 <z_impl_k_sem_give>
}
 800c8e0:	9b01      	ldr	r3, [sp, #4]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	b007      	add	sp, #28
 800c8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 800c8ea:	f7ff ff28 	bl	800c73e <stm32_i2c_msg_read>
 800c8ee:	e7e1      	b.n	800c8b4 <i2c_stm32_transfer+0xbc>

0800c8f0 <i2c_stm32_runtime_configure>:
{
 800c8f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct i2c_stm32_data *data = dev->data;
 800c8f4:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800c8f6:	6843      	ldr	r3, [r0, #4]
{
 800c8f8:	460f      	mov	r7, r1
 800c8fa:	4605      	mov	r5, r0
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800c8fc:	4668      	mov	r0, sp
	I2C_TypeDef *i2c = cfg->i2c;
 800c8fe:	68de      	ldr	r6, [r3, #12]
	k_sem_take(&data->bus_mutex, K_FOREVER);
 800c900:	3410      	adds	r4, #16
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800c902:	f000 f8dd 	bl	800cac0 <LL_RCC_GetSystemClocksFreq>
	data->dev_config = config;
 800c906:	6127      	str	r7, [r4, #16]
	clock = rcc_clocks.SYSCLK_Frequency;
 800c908:	f8dd 8000 	ldr.w	r8, [sp]
	return z_impl_k_sem_take(sem, timeout);
 800c90c:	f04f 32ff 	mov.w	r2, #4294967295
 800c910:	f04f 33ff 	mov.w	r3, #4294967295
 800c914:	4620      	mov	r0, r4
 800c916:	f7fb fb0b 	bl	8007f30 <z_impl_k_sem_take>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800c91a:	6833      	ldr	r3, [r6, #0]
 800c91c:	f023 0301 	bic.w	r3, r3, #1
 800c920:	6033      	str	r3, [r6, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800c922:	6833      	ldr	r3, [r6, #0]
 800c924:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c928:	6033      	str	r3, [r6, #0]
	ret = stm32_i2c_configure_timing(dev, clock);
 800c92a:	4641      	mov	r1, r8
 800c92c:	4628      	mov	r0, r5
 800c92e:	f7fa f881 	bl	8006a34 <stm32_i2c_configure_timing>
 800c932:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 800c934:	4620      	mov	r0, r4
 800c936:	f7fb fabd 	bl	8007eb4 <z_impl_k_sem_give>
}
 800c93a:	4628      	mov	r0, r5
 800c93c:	b004      	add	sp, #16
 800c93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c942 <uart_stm32_err_check>:
	const struct uart_stm32_config *config = dev->config;
 800c942:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800c944:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800c946:	69d0      	ldr	r0, [r2, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800c948:	69d1      	ldr	r1, [r2, #28]
 800c94a:	07c9      	lsls	r1, r1, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800c94c:	69d1      	ldr	r1, [r2, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800c94e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 800c952:	bf48      	it	mi
 800c954:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800c958:	0789      	lsls	r1, r1, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 800c95a:	69d1      	ldr	r1, [r2, #28]
		err |= UART_ERROR_FRAMING;
 800c95c:	bf48      	it	mi
 800c95e:	f040 0004 	orrmi.w	r0, r0, #4
 800c962:	05c9      	lsls	r1, r1, #23
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 800c964:	bf42      	ittt	mi
 800c966:	f44f 7180 	movmi.w	r1, #256	; 0x100
		err |= UART_BREAK;
 800c96a:	f040 0008 	orrmi.w	r0, r0, #8
 800c96e:	6211      	strmi	r1, [r2, #32]
	if (err & UART_ERROR_OVERRUN) {
 800c970:	07c2      	lsls	r2, r0, #31
		LL_USART_ClearFlag_ORE(config->usart);
 800c972:	bf42      	ittt	mi
 800c974:	681a      	ldrmi	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800c976:	2108      	movmi	r1, #8
 800c978:	6211      	strmi	r1, [r2, #32]
	if (err & UART_ERROR_PARITY) {
 800c97a:	0781      	lsls	r1, r0, #30
		LL_USART_ClearFlag_PE(config->usart);
 800c97c:	bf42      	ittt	mi
 800c97e:	681a      	ldrmi	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800c980:	2101      	movmi	r1, #1
 800c982:	6211      	strmi	r1, [r2, #32]
	if (err & UART_ERROR_FRAMING) {
 800c984:	0742      	lsls	r2, r0, #29
		LL_USART_ClearFlag_FE(config->usart);
 800c986:	bf42      	ittt	mi
 800c988:	681a      	ldrmi	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800c98a:	2102      	movmi	r1, #2
 800c98c:	6211      	strmi	r1, [r2, #32]
	LL_USART_ClearFlag_NE(config->usart);
 800c98e:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 800c990:	2204      	movs	r2, #4
 800c992:	621a      	str	r2, [r3, #32]
}
 800c994:	4770      	bx	lr

0800c996 <uart_stm32_poll_out>:
{
 800c996:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 800c998:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 800c99a:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800c99c:	69d3      	ldr	r3, [r2, #28]
 800c99e:	061b      	lsls	r3, r3, #24
 800c9a0:	d5fc      	bpl.n	800c99c <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 800c9a2:	f04f 0210 	mov.w	r2, #16
 800c9a6:	f3ef 8311 	mrs	r3, BASEPRI
 800c9aa:	f382 8812 	msr	BASEPRI_MAX, r2
 800c9ae:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 800c9b2:	6802      	ldr	r2, [r0, #0]
 800c9b4:	69d4      	ldr	r4, [r2, #28]
 800c9b6:	0624      	lsls	r4, r4, #24
 800c9b8:	d404      	bmi.n	800c9c4 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 800c9ba:	f383 8811 	msr	BASEPRI, r3
 800c9be:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 800c9c2:	e7ea      	b.n	800c99a <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800c9c4:	8511      	strh	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
}
 800c9ce:	bd10      	pop	{r4, pc}

0800c9d0 <uart_stm32_poll_in>:
	const struct uart_stm32_config *config = dev->config;
 800c9d0:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800c9d2:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800c9d4:	69d0      	ldr	r0, [r2, #28]
 800c9d6:	0700      	lsls	r0, r0, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800c9d8:	bf44      	itt	mi
 800c9da:	2008      	movmi	r0, #8
 800c9dc:	6210      	strmi	r0, [r2, #32]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 800c9de:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800c9e0:	69da      	ldr	r2, [r3, #28]
 800c9e2:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800c9e4:	bf43      	ittte	mi
 800c9e6:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 800c9e8:	700b      	strbmi	r3, [r1, #0]
	return 0;
 800c9ea:	2000      	movmi	r0, #0
		return -1;
 800c9ec:	f04f 30ff 	movpl.w	r0, #4294967295
}
 800c9f0:	4770      	bx	lr

0800c9f2 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 800c9f2:	6903      	ldr	r3, [r0, #16]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 800c9f8:	6843      	ldr	r3, [r0, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800ca02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca06:	d035      	beq.n	800ca74 <uart_stm32_config_get+0x82>
 800ca08:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 800ca0c:	f1dc 0300 	rsbs	r3, ip, #0
 800ca10:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800ca14:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 800ca16:	6843      	ldr	r3, [r0, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800ca20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca24:	d028      	beq.n	800ca78 <uart_stm32_config_get+0x86>
 800ca26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca2a:	d027      	beq.n	800ca7c <uart_stm32_config_get+0x8a>
		return UART_CFG_STOP_BITS_2;
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	bf0c      	ite	eq
 800ca30:	2301      	moveq	r3, #1
 800ca32:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800ca34:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 800ca36:	6843      	ldr	r3, [r0, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800ca3a:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800ca3c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800ca3e:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	switch (db) {
 800ca42:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800ca46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ca4a:	d019      	beq.n	800ca80 <uart_stm32_config_get+0x8e>
 800ca4c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800ca50:	d11b      	bne.n	800ca8a <uart_stm32_config_get+0x98>
			return UART_CFG_DATA_BITS_7;
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	bf14      	ite	ne
 800ca56:	2301      	movne	r3, #1
 800ca58:	2302      	moveq	r3, #2
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800ca5a:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 800ca5c:	6843      	ldr	r3, [r0, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800ca66:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800ca6a:	4253      	negs	r3, r2
 800ca6c:	4153      	adcs	r3, r2
 800ca6e:	71cb      	strb	r3, [r1, #7]
}
 800ca70:	2000      	movs	r0, #0
 800ca72:	4770      	bx	lr
	switch (parity) {
 800ca74:	2302      	movs	r3, #2
 800ca76:	e7cd      	b.n	800ca14 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e7db      	b.n	800ca34 <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	e7d9      	b.n	800ca34 <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_9;
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	bf14      	ite	ne
 800ca84:	2303      	movne	r3, #3
 800ca86:	2304      	moveq	r3, #4
 800ca88:	e7e7      	b.n	800ca5a <uart_stm32_config_get+0x68>
			return UART_CFG_DATA_BITS_8;
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	bf14      	ite	ne
 800ca8e:	2302      	movne	r3, #2
 800ca90:	2303      	moveq	r3, #3
 800ca92:	e7e2      	b.n	800ca5a <uart_stm32_config_get+0x68>

0800ca94 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 800ca94:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
 800ca96:	6803      	ldr	r3, [r0, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800ca98:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
 800ca9c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800ca9e:	7905      	ldrb	r5, [r0, #4]
 800caa0:	6804      	ldr	r4, [r0, #0]
 800caa2:	4435      	add	r5, r6
 800caa4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800caa8:	42a3      	cmp	r3, r4
 800caaa:	d902      	bls.n	800cab2 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
 800caac:	f06f 0001 	mvn.w	r0, #1
}
 800cab0:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
 800cab2:	795c      	ldrb	r4, [r3, #5]
 800cab4:	428c      	cmp	r4, r1
 800cab6:	d001      	beq.n	800cabc <pinctrl_lookup_state+0x28>
		(*state)++;
 800cab8:	3308      	adds	r3, #8
 800caba:	e7ef      	b.n	800ca9c <pinctrl_lookup_state+0x8>
			return 0;
 800cabc:	2000      	movs	r0, #0
 800cabe:	e7f7      	b.n	800cab0 <pinctrl_lookup_state+0x1c>

0800cac0 <LL_RCC_GetSystemClocksFreq>:
{
 800cac0:	b510      	push	{r4, lr}
 800cac2:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800cac4:	f7fa fd72 	bl	80075ac <RCC_GetSystemClockFreq>
 800cac8:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800caca:	f7fa fd31 	bl	8007530 <RCC_GetHCLKClockFreq>
 800cace:	6048      	str	r0, [r1, #4]
 800cad0:	4604      	mov	r4, r0
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800cad2:	f7fa fd39 	bl	8007548 <RCC_GetPCLK1ClockFreq>
 800cad6:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800cad8:	4620      	mov	r0, r4
 800cada:	f7fa fd41 	bl	8007560 <RCC_GetPCLK2ClockFreq>
 800cade:	60c8      	str	r0, [r1, #12]
}
 800cae0:	bd10      	pop	{r4, pc}

0800cae2 <z_device_state_init>:
}
 800cae2:	4770      	bx	lr

0800cae4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800cae4:	b138      	cbz	r0, 800caf6 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800cae6:	68c3      	ldr	r3, [r0, #12]
 800cae8:	8818      	ldrh	r0, [r3, #0]
 800caea:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800caee:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800caf2:	4258      	negs	r0, r3
 800caf4:	4158      	adcs	r0, r3
}
 800caf6:	4770      	bx	lr

0800caf8 <arch_system_halt>:
	__asm__ volatile(
 800caf8:	f04f 0210 	mov.w	r2, #16
 800cafc:	f3ef 8311 	mrs	r3, BASEPRI
 800cb00:	f382 8812 	msr	BASEPRI_MAX, r2
 800cb04:	f3bf 8f6f 	isb	sy
	for (;;) {
 800cb08:	e7fe      	b.n	800cb08 <arch_system_halt+0x10>

0800cb0a <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
 800cb0a:	f000 b8df 	b.w	800cccc <memset>

0800cb0e <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800cb0e:	f000 b8cf 	b.w	800ccb0 <memcpy>

0800cb12 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb12:	f3ef 8005 	mrs	r0, IPSR
}
 800cb16:	3800      	subs	r0, #0
 800cb18:	bf18      	it	ne
 800cb1a:	2001      	movne	r0, #1
 800cb1c:	4770      	bx	lr

0800cb1e <z_impl_k_thread_name_set>:
}
 800cb1e:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800cb22:	4770      	bx	lr

0800cb24 <k_thread_name_get>:
}
 800cb24:	2000      	movs	r0, #0
 800cb26:	4770      	bx	lr

0800cb28 <z_impl_k_thread_start>:
	z_sched_start(thread);
 800cb28:	f7fb be60 	b.w	80087ec <z_sched_start>

0800cb2c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 800cb2c:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800cb30:	428b      	cmp	r3, r1
 800cb32:	d001      	beq.n	800cb38 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 800cb34:	f7fc b95a 	b.w	8008dec <z_set_prio>
}
 800cb38:	2000      	movs	r0, #0
 800cb3a:	4770      	bx	lr

0800cb3c <z_impl_k_mutex_init>:
{
 800cb3c:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800cb3e:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
 800cb40:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
 800cb44:	e9c3 3300 	strd	r3, r3, [r3]
}
 800cb48:	4770      	bx	lr

0800cb4a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800cb4a:	b13a      	cbz	r2, 800cb5c <z_impl_k_sem_init+0x12>
 800cb4c:	428a      	cmp	r2, r1
 800cb4e:	d305      	bcc.n	800cb5c <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 800cb50:	e9c0 1202 	strd	r1, r2, [r0, #8]
 800cb54:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 800cb58:	2000      	movs	r0, #0
 800cb5a:	4770      	bx	lr
		return -EINVAL;
 800cb5c:	f06f 0015 	mvn.w	r0, #21
}
 800cb60:	4770      	bx	lr

0800cb62 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
 800cb62:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 800cb64:	2301      	movs	r3, #1
 800cb66:	408b      	lsls	r3, r1
 800cb68:	ea22 0303 	bic.w	r3, r2, r3
 800cb6c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 800cb6e:	fa22 f001 	lsr.w	r0, r2, r1
}
 800cb72:	f000 0001 	and.w	r0, r0, #1
 800cb76:	4770      	bx	lr

0800cb78 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 800cb78:	b120      	cbz	r0, 800cb84 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	4611      	mov	r1, r2
 800cb7e:	3088      	adds	r0, #136	; 0x88
 800cb80:	f7fc bd88 	b.w	8009694 <z_sched_wake>
}
 800cb84:	4770      	bx	lr

0800cb86 <k_work_submit_to_queue>:
{
 800cb86:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
 800cb88:	f7fb fbac 	bl	80082e4 <z_work_submit_to_queue>
	if (ret > 0) {
 800cb8c:	1e04      	subs	r4, r0, #0
 800cb8e:	dd09      	ble.n	800cba4 <k_work_submit_to_queue+0x1e>
 800cb90:	f04f 0310 	mov.w	r3, #16
 800cb94:	f3ef 8011 	mrs	r0, BASEPRI
 800cb98:	f383 8812 	msr	BASEPRI_MAX, r3
 800cb9c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800cba0:	f000 f802 	bl	800cba8 <z_reschedule_irqlock>
}
 800cba4:	4620      	mov	r0, r4
 800cba6:	bd10      	pop	{r4, pc}

0800cba8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800cba8:	4603      	mov	r3, r0
 800cbaa:	b920      	cbnz	r0, 800cbb6 <z_reschedule_irqlock+0xe>
 800cbac:	f3ef 8205 	mrs	r2, IPSR
 800cbb0:	b90a      	cbnz	r2, 800cbb6 <z_reschedule_irqlock+0xe>
 800cbb2:	f7f8 b897 	b.w	8004ce4 <arch_swap>
	__asm__ volatile(
 800cbb6:	f383 8811 	msr	BASEPRI, r3
 800cbba:	f3bf 8f6f 	isb	sy
}
 800cbbe:	4770      	bx	lr

0800cbc0 <z_reschedule_unlocked>:
	__asm__ volatile(
 800cbc0:	f04f 0310 	mov.w	r3, #16
 800cbc4:	f3ef 8011 	mrs	r0, BASEPRI
 800cbc8:	f383 8812 	msr	BASEPRI_MAX, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f7ff bfea 	b.w	800cba8 <z_reschedule_irqlock>

0800cbd4 <z_impl_k_usleep>:
	ticks = k_us_to_ticks_ceil64(us);
 800cbd4:	17c1      	asrs	r1, r0, #31
		t += off;
 800cbd6:	3063      	adds	r0, #99	; 0x63
{
 800cbd8:	b508      	push	{r3, lr}
			return t / ((uint64_t)from_hz / to_hz);
 800cbda:	f04f 0264 	mov.w	r2, #100	; 0x64
 800cbde:	f04f 0300 	mov.w	r3, #0
 800cbe2:	f141 0100 	adc.w	r1, r1, #0
 800cbe6:	f7f3 ffbf 	bl	8000b68 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 800cbea:	17c1      	asrs	r1, r0, #31
 800cbec:	f7fc fbb0 	bl	8009350 <z_tick_sleep>
}
 800cbf0:	2364      	movs	r3, #100	; 0x64
 800cbf2:	4358      	muls	r0, r3
 800cbf4:	bd08      	pop	{r3, pc}

0800cbf6 <sys_clock_tick_get_32>:
{
 800cbf6:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800cbf8:	f7fd f826 	bl	8009c48 <sys_clock_tick_get>
}
 800cbfc:	bd08      	pop	{r3, pc}

0800cbfe <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 800cbfe:	f7fd b823 	b.w	8009c48 <sys_clock_tick_get>

0800cc02 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800cc02:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cc06:	bf08      	it	eq
 800cc08:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 800cc0c:	b538      	push	{r3, r4, r5, lr}
 800cc0e:	460c      	mov	r4, r1
 800cc10:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800cc12:	d014      	beq.n	800cc3e <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800cc14:	4308      	orrs	r0, r1
 800cc16:	d103      	bne.n	800cc20 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 800cc18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
 800cc1c:	f7fd b814 	b.w	8009c48 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 800cc20:	f06f 0001 	mvn.w	r0, #1
 800cc24:	1b40      	subs	r0, r0, r5
 800cc26:	f04f 33ff 	mov.w	r3, #4294967295
 800cc2a:	eb63 0101 	sbc.w	r1, r3, r1
 800cc2e:	2900      	cmp	r1, #0
 800cc30:	da04      	bge.n	800cc3c <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
 800cc32:	f7fd f809 	bl	8009c48 <sys_clock_tick_get>
 800cc36:	1940      	adds	r0, r0, r5
 800cc38:	eb41 0104 	adc.w	r1, r1, r4
}
 800cc3c:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
 800cc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc42:	4601      	mov	r1, r0
 800cc44:	e7fa      	b.n	800cc3c <sys_clock_timeout_end_calc+0x3a>

0800cc46 <k_timer_init>:
	timer->status = 0U;
 800cc46:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 800cc48:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 800cc4c:	f100 0218 	add.w	r2, r0, #24
 800cc50:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 800cc54:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 800cc58:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 800cc5a:	6343      	str	r3, [r0, #52]	; 0x34
}
 800cc5c:	4770      	bx	lr

0800cc5e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800cc5e:	b510      	push	{r4, lr}
 800cc60:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
 800cc62:	f7fc feb5 	bl	80099d0 <z_abort_timeout>

	if (inactive) {
 800cc66:	b9b0      	cbnz	r0, 800cc96 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 800cc68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc6a:	b10b      	cbz	r3, 800cc70 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800cc70:	f104 0018 	add.w	r0, r4, #24
 800cc74:	f7fc fa2c 	bl	80090d0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800cc78:	b168      	cbz	r0, 800cc96 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 800cc7a:	f7fb fce9 	bl	8008650 <z_ready_thread>
 800cc7e:	f04f 0310 	mov.w	r3, #16
 800cc82:	f3ef 8011 	mrs	r0, BASEPRI
 800cc86:	f383 8812 	msr	BASEPRI_MAX, r3
 800cc8a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 800cc8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc92:	f7ff bf89 	b.w	800cba8 <z_reschedule_irqlock>
 800cc96:	bd10      	pop	{r4, pc}

0800cc98 <k_malloc>:
{
 800cc98:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
 800cc9a:	2004      	movs	r0, #4
 800cc9c:	f7fd b968 	b.w	8009f70 <k_aligned_alloc>

0800cca0 <k_heap_init>:
{
 800cca0:	b410      	push	{r4}
 800cca2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 800cca6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 800ccaa:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 800ccac:	f7f5 be3e 	b.w	800292c <sys_heap_init>

0800ccb0 <memcpy>:
 800ccb0:	440a      	add	r2, r1
 800ccb2:	4291      	cmp	r1, r2
 800ccb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800ccb8:	d100      	bne.n	800ccbc <memcpy+0xc>
 800ccba:	4770      	bx	lr
 800ccbc:	b510      	push	{r4, lr}
 800ccbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccc6:	4291      	cmp	r1, r2
 800ccc8:	d1f9      	bne.n	800ccbe <memcpy+0xe>
 800ccca:	bd10      	pop	{r4, pc}

0800cccc <memset>:
 800cccc:	4402      	add	r2, r0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d100      	bne.n	800ccd6 <memset+0xa>
 800ccd4:	4770      	bx	lr
 800ccd6:	f803 1b01 	strb.w	r1, [r3], #1
 800ccda:	e7f9      	b.n	800ccd0 <memset+0x4>

0800ccdc <__sfputc_r>:
 800ccdc:	6893      	ldr	r3, [r2, #8]
 800ccde:	3b01      	subs	r3, #1
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	b410      	push	{r4}
 800cce4:	6093      	str	r3, [r2, #8]
 800cce6:	da07      	bge.n	800ccf8 <__sfputc_r+0x1c>
 800cce8:	6994      	ldr	r4, [r2, #24]
 800ccea:	42a3      	cmp	r3, r4
 800ccec:	db01      	blt.n	800ccf2 <__sfputc_r+0x16>
 800ccee:	290a      	cmp	r1, #10
 800ccf0:	d102      	bne.n	800ccf8 <__sfputc_r+0x1c>
 800ccf2:	bc10      	pop	{r4}
 800ccf4:	f7fe b800 	b.w	800acf8 <__swbuf_r>
 800ccf8:	6813      	ldr	r3, [r2, #0]
 800ccfa:	1c58      	adds	r0, r3, #1
 800ccfc:	6010      	str	r0, [r2, #0]
 800ccfe:	7019      	strb	r1, [r3, #0]
 800cd00:	4608      	mov	r0, r1
 800cd02:	bc10      	pop	{r4}
 800cd04:	4770      	bx	lr

0800cd06 <__sfputs_r>:
 800cd06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd08:	4606      	mov	r6, r0
 800cd0a:	460f      	mov	r7, r1
 800cd0c:	4614      	mov	r4, r2
 800cd0e:	18d5      	adds	r5, r2, r3
 800cd10:	42ac      	cmp	r4, r5
 800cd12:	d101      	bne.n	800cd18 <__sfputs_r+0x12>
 800cd14:	2000      	movs	r0, #0
 800cd16:	e007      	b.n	800cd28 <__sfputs_r+0x22>
 800cd18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd1c:	463a      	mov	r2, r7
 800cd1e:	4630      	mov	r0, r6
 800cd20:	f7ff ffdc 	bl	800ccdc <__sfputc_r>
 800cd24:	1c43      	adds	r3, r0, #1
 800cd26:	d1f3      	bne.n	800cd10 <__sfputs_r+0xa>
 800cd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd2a <__cvt>:
 800cd2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2e:	b089      	sub	sp, #36	; 0x24
 800cd30:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	461d      	mov	r5, r3
 800cd38:	4614      	mov	r4, r2
 800cd3a:	bfbc      	itt	lt
 800cd3c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800cd40:	4614      	movlt	r4, r2
 800cd42:	f028 0a20 	bic.w	sl, r8, #32
 800cd46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd48:	bfb6      	itet	lt
 800cd4a:	461d      	movlt	r5, r3
 800cd4c:	2300      	movge	r3, #0
 800cd4e:	232d      	movlt	r3, #45	; 0x2d
 800cd50:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
 800cd54:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
 800cd58:	7013      	strb	r3, [r2, #0]
 800cd5a:	d005      	beq.n	800cd68 <__cvt+0x3e>
 800cd5c:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 800cd60:	d100      	bne.n	800cd64 <__cvt+0x3a>
 800cd62:	3601      	adds	r6, #1
 800cd64:	2302      	movs	r3, #2
 800cd66:	e000      	b.n	800cd6a <__cvt+0x40>
 800cd68:	2303      	movs	r3, #3
 800cd6a:	aa07      	add	r2, sp, #28
 800cd6c:	9204      	str	r2, [sp, #16]
 800cd6e:	aa06      	add	r2, sp, #24
 800cd70:	e9cd 9202 	strd	r9, r2, [sp, #8]
 800cd74:	e9cd 3600 	strd	r3, r6, [sp]
 800cd78:	4622      	mov	r2, r4
 800cd7a:	462b      	mov	r3, r5
 800cd7c:	f7f4 f9f0 	bl	8001160 <_dtoa_r>
 800cd80:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800cd84:	4607      	mov	r7, r0
 800cd86:	d119      	bne.n	800cdbc <__cvt+0x92>
 800cd88:	f01b 0f01 	tst.w	fp, #1
 800cd8c:	d00e      	beq.n	800cdac <__cvt+0x82>
 800cd8e:	eb07 0806 	add.w	r8, r7, r6
 800cd92:	2200      	movs	r2, #0
 800cd94:	2300      	movs	r3, #0
 800cd96:	4620      	mov	r0, r4
 800cd98:	4629      	mov	r1, r5
 800cd9a:	f7f3 ff55 	bl	8000c48 <__aeabi_dcmpeq>
 800cd9e:	b108      	cbz	r0, 800cda4 <__cvt+0x7a>
 800cda0:	f8cd 801c 	str.w	r8, [sp, #28]
 800cda4:	2230      	movs	r2, #48	; 0x30
 800cda6:	9b07      	ldr	r3, [sp, #28]
 800cda8:	4543      	cmp	r3, r8
 800cdaa:	d321      	bcc.n	800cdf0 <__cvt+0xc6>
 800cdac:	9b07      	ldr	r3, [sp, #28]
 800cdae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cdb0:	1bdb      	subs	r3, r3, r7
 800cdb2:	4638      	mov	r0, r7
 800cdb4:	6013      	str	r3, [r2, #0]
 800cdb6:	b009      	add	sp, #36	; 0x24
 800cdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cdc0:	d0e2      	beq.n	800cd88 <__cvt+0x5e>
 800cdc2:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
 800cdc6:	eb00 0806 	add.w	r8, r0, r6
 800cdca:	d1e2      	bne.n	800cd92 <__cvt+0x68>
 800cdcc:	7803      	ldrb	r3, [r0, #0]
 800cdce:	2b30      	cmp	r3, #48	; 0x30
 800cdd0:	d10a      	bne.n	800cde8 <__cvt+0xbe>
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	4629      	mov	r1, r5
 800cdda:	f7f3 ff35 	bl	8000c48 <__aeabi_dcmpeq>
 800cdde:	b918      	cbnz	r0, 800cde8 <__cvt+0xbe>
 800cde0:	f1c6 0601 	rsb	r6, r6, #1
 800cde4:	f8c9 6000 	str.w	r6, [r9]
 800cde8:	f8d9 3000 	ldr.w	r3, [r9]
 800cdec:	4498      	add	r8, r3
 800cdee:	e7d0      	b.n	800cd92 <__cvt+0x68>
 800cdf0:	1c59      	adds	r1, r3, #1
 800cdf2:	9107      	str	r1, [sp, #28]
 800cdf4:	701a      	strb	r2, [r3, #0]
 800cdf6:	e7d6      	b.n	800cda6 <__cvt+0x7c>

0800cdf8 <__exponent>:
 800cdf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdfa:	2900      	cmp	r1, #0
 800cdfc:	bfba      	itte	lt
 800cdfe:	4249      	neglt	r1, r1
 800ce00:	232d      	movlt	r3, #45	; 0x2d
 800ce02:	232b      	movge	r3, #43	; 0x2b
 800ce04:	2909      	cmp	r1, #9
 800ce06:	7002      	strb	r2, [r0, #0]
 800ce08:	7043      	strb	r3, [r0, #1]
 800ce0a:	dd29      	ble.n	800ce60 <__exponent+0x68>
 800ce0c:	f10d 0307 	add.w	r3, sp, #7
 800ce10:	461d      	mov	r5, r3
 800ce12:	270a      	movs	r7, #10
 800ce14:	461a      	mov	r2, r3
 800ce16:	fbb1 f6f7 	udiv	r6, r1, r7
 800ce1a:	fb07 1416 	mls	r4, r7, r6, r1
 800ce1e:	3430      	adds	r4, #48	; 0x30
 800ce20:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ce24:	460c      	mov	r4, r1
 800ce26:	2c63      	cmp	r4, #99	; 0x63
 800ce28:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce2c:	4631      	mov	r1, r6
 800ce2e:	dcf1      	bgt.n	800ce14 <__exponent+0x1c>
 800ce30:	3130      	adds	r1, #48	; 0x30
 800ce32:	1e94      	subs	r4, r2, #2
 800ce34:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ce38:	1c41      	adds	r1, r0, #1
 800ce3a:	4623      	mov	r3, r4
 800ce3c:	42ab      	cmp	r3, r5
 800ce3e:	d30a      	bcc.n	800ce56 <__exponent+0x5e>
 800ce40:	f10d 0309 	add.w	r3, sp, #9
 800ce44:	1a9b      	subs	r3, r3, r2
 800ce46:	42ac      	cmp	r4, r5
 800ce48:	bf88      	it	hi
 800ce4a:	2300      	movhi	r3, #0
 800ce4c:	3302      	adds	r3, #2
 800ce4e:	4403      	add	r3, r0
 800ce50:	1a18      	subs	r0, r3, r0
 800ce52:	b003      	add	sp, #12
 800ce54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce56:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ce5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ce5e:	e7ed      	b.n	800ce3c <__exponent+0x44>
 800ce60:	2330      	movs	r3, #48	; 0x30
 800ce62:	3130      	adds	r1, #48	; 0x30
 800ce64:	7083      	strb	r3, [r0, #2]
 800ce66:	70c1      	strb	r1, [r0, #3]
 800ce68:	1d03      	adds	r3, r0, #4
 800ce6a:	e7f1      	b.n	800ce50 <__exponent+0x58>

0800ce6c <_printf_common>:
 800ce6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce70:	4616      	mov	r6, r2
 800ce72:	4698      	mov	r8, r3
 800ce74:	688a      	ldr	r2, [r1, #8]
 800ce76:	690b      	ldr	r3, [r1, #16]
 800ce78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	bfb8      	it	lt
 800ce80:	4613      	movlt	r3, r2
 800ce82:	6033      	str	r3, [r6, #0]
 800ce84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce88:	4607      	mov	r7, r0
 800ce8a:	460c      	mov	r4, r1
 800ce8c:	b10a      	cbz	r2, 800ce92 <_printf_common+0x26>
 800ce8e:	3301      	adds	r3, #1
 800ce90:	6033      	str	r3, [r6, #0]
 800ce92:	6823      	ldr	r3, [r4, #0]
 800ce94:	0699      	lsls	r1, r3, #26
 800ce96:	bf42      	ittt	mi
 800ce98:	6833      	ldrmi	r3, [r6, #0]
 800ce9a:	3302      	addmi	r3, #2
 800ce9c:	6033      	strmi	r3, [r6, #0]
 800ce9e:	6825      	ldr	r5, [r4, #0]
 800cea0:	f015 0506 	ands.w	r5, r5, #6
 800cea4:	d106      	bne.n	800ceb4 <_printf_common+0x48>
 800cea6:	f104 0a19 	add.w	sl, r4, #25
 800ceaa:	68e3      	ldr	r3, [r4, #12]
 800ceac:	6832      	ldr	r2, [r6, #0]
 800ceae:	1a9b      	subs	r3, r3, r2
 800ceb0:	42ab      	cmp	r3, r5
 800ceb2:	dc26      	bgt.n	800cf02 <_printf_common+0x96>
 800ceb4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ceb8:	6822      	ldr	r2, [r4, #0]
 800ceba:	3b00      	subs	r3, #0
 800cebc:	bf18      	it	ne
 800cebe:	2301      	movne	r3, #1
 800cec0:	0692      	lsls	r2, r2, #26
 800cec2:	d42b      	bmi.n	800cf1c <_printf_common+0xb0>
 800cec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cec8:	4641      	mov	r1, r8
 800ceca:	4638      	mov	r0, r7
 800cecc:	47c8      	blx	r9
 800cece:	3001      	adds	r0, #1
 800ced0:	d01e      	beq.n	800cf10 <_printf_common+0xa4>
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	6922      	ldr	r2, [r4, #16]
 800ced6:	f003 0306 	and.w	r3, r3, #6
 800ceda:	2b04      	cmp	r3, #4
 800cedc:	bf02      	ittt	eq
 800cede:	68e5      	ldreq	r5, [r4, #12]
 800cee0:	6833      	ldreq	r3, [r6, #0]
 800cee2:	1aed      	subeq	r5, r5, r3
 800cee4:	68a3      	ldr	r3, [r4, #8]
 800cee6:	bf0c      	ite	eq
 800cee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ceec:	2500      	movne	r5, #0
 800ceee:	4293      	cmp	r3, r2
 800cef0:	bfc4      	itt	gt
 800cef2:	1a9b      	subgt	r3, r3, r2
 800cef4:	18ed      	addgt	r5, r5, r3
 800cef6:	2600      	movs	r6, #0
 800cef8:	341a      	adds	r4, #26
 800cefa:	42b5      	cmp	r5, r6
 800cefc:	d11a      	bne.n	800cf34 <_printf_common+0xc8>
 800cefe:	2000      	movs	r0, #0
 800cf00:	e008      	b.n	800cf14 <_printf_common+0xa8>
 800cf02:	2301      	movs	r3, #1
 800cf04:	4652      	mov	r2, sl
 800cf06:	4641      	mov	r1, r8
 800cf08:	4638      	mov	r0, r7
 800cf0a:	47c8      	blx	r9
 800cf0c:	3001      	adds	r0, #1
 800cf0e:	d103      	bne.n	800cf18 <_printf_common+0xac>
 800cf10:	f04f 30ff 	mov.w	r0, #4294967295
 800cf14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf18:	3501      	adds	r5, #1
 800cf1a:	e7c6      	b.n	800ceaa <_printf_common+0x3e>
 800cf1c:	18e1      	adds	r1, r4, r3
 800cf1e:	1c5a      	adds	r2, r3, #1
 800cf20:	2030      	movs	r0, #48	; 0x30
 800cf22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf26:	4422      	add	r2, r4
 800cf28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf30:	3302      	adds	r3, #2
 800cf32:	e7c7      	b.n	800cec4 <_printf_common+0x58>
 800cf34:	2301      	movs	r3, #1
 800cf36:	4622      	mov	r2, r4
 800cf38:	4641      	mov	r1, r8
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	47c8      	blx	r9
 800cf3e:	3001      	adds	r0, #1
 800cf40:	d0e6      	beq.n	800cf10 <_printf_common+0xa4>
 800cf42:	3601      	adds	r6, #1
 800cf44:	e7d9      	b.n	800cefa <_printf_common+0x8e>

0800cf46 <__sprintf_chk>:
 800cf46:	b408      	push	{r3}
 800cf48:	b517      	push	{r0, r1, r2, r4, lr}
 800cf4a:	ab05      	add	r3, sp, #20
 800cf4c:	1e14      	subs	r4, r2, #0
 800cf4e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf52:	9301      	str	r3, [sp, #4]
 800cf54:	da07      	bge.n	800cf66 <__sprintf_chk+0x20>
 800cf56:	461a      	mov	r2, r3
 800cf58:	f7fd fec4 	bl	800ace4 <vsiprintf>
 800cf5c:	b003      	add	sp, #12
 800cf5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf62:	b001      	add	sp, #4
 800cf64:	4770      	bx	lr
 800cf66:	460a      	mov	r2, r1
 800cf68:	4621      	mov	r1, r4
 800cf6a:	f7fd fe97 	bl	800ac9c <vsniprintf>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	dbf4      	blt.n	800cf5c <__sprintf_chk+0x16>
 800cf72:	42a0      	cmp	r0, r4
 800cf74:	d3f2      	bcc.n	800cf5c <__sprintf_chk+0x16>
 800cf76:	f7f8 fd11 	bl	800599c <__chk_fail>

0800cf7a <strncpy>:
 800cf7a:	b510      	push	{r4, lr}
 800cf7c:	3901      	subs	r1, #1
 800cf7e:	4603      	mov	r3, r0
 800cf80:	b132      	cbz	r2, 800cf90 <strncpy+0x16>
 800cf82:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cf86:	f803 4b01 	strb.w	r4, [r3], #1
 800cf8a:	3a01      	subs	r2, #1
 800cf8c:	2c00      	cmp	r4, #0
 800cf8e:	d1f7      	bne.n	800cf80 <strncpy+0x6>
 800cf90:	441a      	add	r2, r3
 800cf92:	2100      	movs	r1, #0
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d100      	bne.n	800cf9a <strncpy+0x20>
 800cf98:	bd10      	pop	{r4, pc}
 800cf9a:	f803 1b01 	strb.w	r1, [r3], #1
 800cf9e:	e7f9      	b.n	800cf94 <strncpy+0x1a>

0800cfa0 <strnlen>:
 800cfa0:	b510      	push	{r4, lr}
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	4401      	add	r1, r0
 800cfa6:	428a      	cmp	r2, r1
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	d003      	beq.n	800cfb4 <strnlen+0x14>
 800cfac:	781c      	ldrb	r4, [r3, #0]
 800cfae:	3201      	adds	r2, #1
 800cfb0:	2c00      	cmp	r4, #0
 800cfb2:	d1f8      	bne.n	800cfa6 <strnlen+0x6>
 800cfb4:	1a18      	subs	r0, r3, r0
 800cfb6:	bd10      	pop	{r4, pc}

0800cfb8 <_vsniprintf_r>:
 800cfb8:	b530      	push	{r4, r5, lr}
 800cfba:	4614      	mov	r4, r2
 800cfbc:	2c00      	cmp	r4, #0
 800cfbe:	b09b      	sub	sp, #108	; 0x6c
 800cfc0:	4605      	mov	r5, r0
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	da05      	bge.n	800cfd2 <_vsniprintf_r+0x1a>
 800cfc6:	238b      	movs	r3, #139	; 0x8b
 800cfc8:	6003      	str	r3, [r0, #0]
 800cfca:	f04f 30ff 	mov.w	r0, #4294967295
 800cfce:	b01b      	add	sp, #108	; 0x6c
 800cfd0:	bd30      	pop	{r4, r5, pc}
 800cfd2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cfd6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cfda:	bf14      	ite	ne
 800cfdc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cfe0:	4623      	moveq	r3, r4
 800cfe2:	9302      	str	r3, [sp, #8]
 800cfe4:	9305      	str	r3, [sp, #20]
 800cfe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfea:	9100      	str	r1, [sp, #0]
 800cfec:	9104      	str	r1, [sp, #16]
 800cfee:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cff2:	4669      	mov	r1, sp
 800cff4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cff6:	f7fe fba1 	bl	800b73c <_svfiprintf_r>
 800cffa:	1c43      	adds	r3, r0, #1
 800cffc:	bfbc      	itt	lt
 800cffe:	238b      	movlt	r3, #139	; 0x8b
 800d000:	602b      	strlt	r3, [r5, #0]
 800d002:	2c00      	cmp	r4, #0
 800d004:	d0e3      	beq.n	800cfce <_vsniprintf_r+0x16>
 800d006:	9b00      	ldr	r3, [sp, #0]
 800d008:	2200      	movs	r2, #0
 800d00a:	701a      	strb	r2, [r3, #0]
 800d00c:	e7df      	b.n	800cfce <_vsniprintf_r+0x16>

0800d00e <quorem>:
 800d00e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d012:	6903      	ldr	r3, [r0, #16]
 800d014:	690c      	ldr	r4, [r1, #16]
 800d016:	42a3      	cmp	r3, r4
 800d018:	4607      	mov	r7, r0
 800d01a:	db7e      	blt.n	800d11a <quorem+0x10c>
 800d01c:	3c01      	subs	r4, #1
 800d01e:	f101 0814 	add.w	r8, r1, #20
 800d022:	00a3      	lsls	r3, r4, #2
 800d024:	f100 0514 	add.w	r5, r0, #20
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d02e:	9301      	str	r3, [sp, #4]
 800d030:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d034:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d038:	3301      	adds	r3, #1
 800d03a:	429a      	cmp	r2, r3
 800d03c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d040:	fbb2 f6f3 	udiv	r6, r2, r3
 800d044:	d32e      	bcc.n	800d0a4 <quorem+0x96>
 800d046:	f04f 0a00 	mov.w	sl, #0
 800d04a:	46c4      	mov	ip, r8
 800d04c:	46ae      	mov	lr, r5
 800d04e:	46d3      	mov	fp, sl
 800d050:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d054:	b298      	uxth	r0, r3
 800d056:	fb06 a000 	mla	r0, r6, r0, sl
 800d05a:	0c02      	lsrs	r2, r0, #16
 800d05c:	0c1b      	lsrs	r3, r3, #16
 800d05e:	fb06 2303 	mla	r3, r6, r3, r2
 800d062:	f8de 2000 	ldr.w	r2, [lr]
 800d066:	b280      	uxth	r0, r0
 800d068:	b292      	uxth	r2, r2
 800d06a:	1a12      	subs	r2, r2, r0
 800d06c:	445a      	add	r2, fp
 800d06e:	f8de 0000 	ldr.w	r0, [lr]
 800d072:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d076:	b29b      	uxth	r3, r3
 800d078:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d07c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d080:	b292      	uxth	r2, r2
 800d082:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d086:	45e1      	cmp	r9, ip
 800d088:	f84e 2b04 	str.w	r2, [lr], #4
 800d08c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d090:	d2de      	bcs.n	800d050 <quorem+0x42>
 800d092:	9b00      	ldr	r3, [sp, #0]
 800d094:	58eb      	ldr	r3, [r5, r3]
 800d096:	b92b      	cbnz	r3, 800d0a4 <quorem+0x96>
 800d098:	9b01      	ldr	r3, [sp, #4]
 800d09a:	3b04      	subs	r3, #4
 800d09c:	429d      	cmp	r5, r3
 800d09e:	461a      	mov	r2, r3
 800d0a0:	d32f      	bcc.n	800d102 <quorem+0xf4>
 800d0a2:	613c      	str	r4, [r7, #16]
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	f000 f97e 	bl	800d3a6 <__mcmp>
 800d0aa:	2800      	cmp	r0, #0
 800d0ac:	db25      	blt.n	800d0fa <quorem+0xec>
 800d0ae:	4629      	mov	r1, r5
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	f858 2b04 	ldr.w	r2, [r8], #4
 800d0b6:	f8d1 c000 	ldr.w	ip, [r1]
 800d0ba:	fa1f fe82 	uxth.w	lr, r2
 800d0be:	fa1f f38c 	uxth.w	r3, ip
 800d0c2:	eba3 030e 	sub.w	r3, r3, lr
 800d0c6:	4403      	add	r3, r0
 800d0c8:	0c12      	lsrs	r2, r2, #16
 800d0ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d0ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0d8:	45c1      	cmp	r9, r8
 800d0da:	f841 3b04 	str.w	r3, [r1], #4
 800d0de:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d0e2:	d2e6      	bcs.n	800d0b2 <quorem+0xa4>
 800d0e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0ec:	b922      	cbnz	r2, 800d0f8 <quorem+0xea>
 800d0ee:	3b04      	subs	r3, #4
 800d0f0:	429d      	cmp	r5, r3
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	d30b      	bcc.n	800d10e <quorem+0x100>
 800d0f6:	613c      	str	r4, [r7, #16]
 800d0f8:	3601      	adds	r6, #1
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	b003      	add	sp, #12
 800d0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d102:	6812      	ldr	r2, [r2, #0]
 800d104:	3b04      	subs	r3, #4
 800d106:	2a00      	cmp	r2, #0
 800d108:	d1cb      	bne.n	800d0a2 <quorem+0x94>
 800d10a:	3c01      	subs	r4, #1
 800d10c:	e7c6      	b.n	800d09c <quorem+0x8e>
 800d10e:	6812      	ldr	r2, [r2, #0]
 800d110:	3b04      	subs	r3, #4
 800d112:	2a00      	cmp	r2, #0
 800d114:	d1ef      	bne.n	800d0f6 <quorem+0xe8>
 800d116:	3c01      	subs	r4, #1
 800d118:	e7ea      	b.n	800d0f0 <quorem+0xe2>
 800d11a:	2000      	movs	r0, #0
 800d11c:	e7ee      	b.n	800d0fc <quorem+0xee>

0800d11e <__sflush_r>:
 800d11e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d124:	0717      	lsls	r7, r2, #28
 800d126:	4605      	mov	r5, r0
 800d128:	460c      	mov	r4, r1
 800d12a:	d456      	bmi.n	800d1da <__sflush_r+0xbc>
 800d12c:	684b      	ldr	r3, [r1, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	dc02      	bgt.n	800d138 <__sflush_r+0x1a>
 800d132:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d134:	2b00      	cmp	r3, #0
 800d136:	dd3d      	ble.n	800d1b4 <__sflush_r+0x96>
 800d138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d13a:	2e00      	cmp	r6, #0
 800d13c:	d03a      	beq.n	800d1b4 <__sflush_r+0x96>
 800d13e:	2300      	movs	r3, #0
 800d140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d144:	682f      	ldr	r7, [r5, #0]
 800d146:	6a21      	ldr	r1, [r4, #32]
 800d148:	602b      	str	r3, [r5, #0]
 800d14a:	d025      	beq.n	800d198 <__sflush_r+0x7a>
 800d14c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d14e:	89a3      	ldrh	r3, [r4, #12]
 800d150:	0758      	lsls	r0, r3, #29
 800d152:	d505      	bpl.n	800d160 <__sflush_r+0x42>
 800d154:	6863      	ldr	r3, [r4, #4]
 800d156:	1ad2      	subs	r2, r2, r3
 800d158:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d15a:	b10b      	cbz	r3, 800d160 <__sflush_r+0x42>
 800d15c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d15e:	1ad2      	subs	r2, r2, r3
 800d160:	6a21      	ldr	r1, [r4, #32]
 800d162:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d164:	2300      	movs	r3, #0
 800d166:	4628      	mov	r0, r5
 800d168:	47b0      	blx	r6
 800d16a:	1c41      	adds	r1, r0, #1
 800d16c:	d024      	beq.n	800d1b8 <__sflush_r+0x9a>
 800d16e:	2300      	movs	r3, #0
 800d170:	6063      	str	r3, [r4, #4]
 800d172:	6923      	ldr	r3, [r4, #16]
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	89a3      	ldrh	r3, [r4, #12]
 800d178:	04da      	lsls	r2, r3, #19
 800d17a:	d500      	bpl.n	800d17e <__sflush_r+0x60>
 800d17c:	6560      	str	r0, [r4, #84]	; 0x54
 800d17e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d180:	602f      	str	r7, [r5, #0]
 800d182:	b1b9      	cbz	r1, 800d1b4 <__sflush_r+0x96>
 800d184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d188:	4299      	cmp	r1, r3
 800d18a:	d002      	beq.n	800d192 <__sflush_r+0x74>
 800d18c:	4628      	mov	r0, r5
 800d18e:	f7fd f829 	bl	800a1e4 <_free_r>
 800d192:	2300      	movs	r3, #0
 800d194:	6363      	str	r3, [r4, #52]	; 0x34
 800d196:	e00d      	b.n	800d1b4 <__sflush_r+0x96>
 800d198:	2301      	movs	r3, #1
 800d19a:	4628      	mov	r0, r5
 800d19c:	47b0      	blx	r6
 800d19e:	1c46      	adds	r6, r0, #1
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	d1d4      	bne.n	800d14e <__sflush_r+0x30>
 800d1a4:	682b      	ldr	r3, [r5, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d0d1      	beq.n	800d14e <__sflush_r+0x30>
 800d1aa:	2b1d      	cmp	r3, #29
 800d1ac:	d001      	beq.n	800d1b2 <__sflush_r+0x94>
 800d1ae:	2b16      	cmp	r3, #22
 800d1b0:	d12a      	bne.n	800d208 <__sflush_r+0xea>
 800d1b2:	602f      	str	r7, [r5, #0]
 800d1b4:	2000      	movs	r0, #0
 800d1b6:	e02e      	b.n	800d216 <__sflush_r+0xf8>
 800d1b8:	682a      	ldr	r2, [r5, #0]
 800d1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1be:	b142      	cbz	r2, 800d1d2 <__sflush_r+0xb4>
 800d1c0:	2a1d      	cmp	r2, #29
 800d1c2:	d001      	beq.n	800d1c8 <__sflush_r+0xaa>
 800d1c4:	2a16      	cmp	r2, #22
 800d1c6:	d121      	bne.n	800d20c <__sflush_r+0xee>
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	6063      	str	r3, [r4, #4]
 800d1cc:	6923      	ldr	r3, [r4, #16]
 800d1ce:	6023      	str	r3, [r4, #0]
 800d1d0:	e7d5      	b.n	800d17e <__sflush_r+0x60>
 800d1d2:	6062      	str	r2, [r4, #4]
 800d1d4:	6922      	ldr	r2, [r4, #16]
 800d1d6:	6022      	str	r2, [r4, #0]
 800d1d8:	e7ce      	b.n	800d178 <__sflush_r+0x5a>
 800d1da:	690f      	ldr	r7, [r1, #16]
 800d1dc:	2f00      	cmp	r7, #0
 800d1de:	d0e9      	beq.n	800d1b4 <__sflush_r+0x96>
 800d1e0:	0793      	lsls	r3, r2, #30
 800d1e2:	680e      	ldr	r6, [r1, #0]
 800d1e4:	bf08      	it	eq
 800d1e6:	694b      	ldreq	r3, [r1, #20]
 800d1e8:	600f      	str	r7, [r1, #0]
 800d1ea:	bf18      	it	ne
 800d1ec:	2300      	movne	r3, #0
 800d1ee:	1bf6      	subs	r6, r6, r7
 800d1f0:	608b      	str	r3, [r1, #8]
 800d1f2:	2e00      	cmp	r6, #0
 800d1f4:	ddde      	ble.n	800d1b4 <__sflush_r+0x96>
 800d1f6:	6a21      	ldr	r1, [r4, #32]
 800d1f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d1fc:	4633      	mov	r3, r6
 800d1fe:	463a      	mov	r2, r7
 800d200:	4628      	mov	r0, r5
 800d202:	47e0      	blx	ip
 800d204:	2800      	cmp	r0, #0
 800d206:	dc07      	bgt.n	800d218 <__sflush_r+0xfa>
 800d208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d210:	81a3      	strh	r3, [r4, #12]
 800d212:	f04f 30ff 	mov.w	r0, #4294967295
 800d216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d218:	4407      	add	r7, r0
 800d21a:	1a36      	subs	r6, r6, r0
 800d21c:	e7e9      	b.n	800d1f2 <__sflush_r+0xd4>

0800d21e <__sfmoreglue>:
 800d21e:	b570      	push	{r4, r5, r6, lr}
 800d220:	2368      	movs	r3, #104	; 0x68
 800d222:	1e4d      	subs	r5, r1, #1
 800d224:	435d      	muls	r5, r3
 800d226:	460e      	mov	r6, r1
 800d228:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d22c:	f7fd f824 	bl	800a278 <_malloc_r>
 800d230:	4604      	mov	r4, r0
 800d232:	b140      	cbz	r0, 800d246 <__sfmoreglue+0x28>
 800d234:	2100      	movs	r1, #0
 800d236:	e9c0 1600 	strd	r1, r6, [r0]
 800d23a:	300c      	adds	r0, #12
 800d23c:	60a0      	str	r0, [r4, #8]
 800d23e:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d242:	f7ff fd43 	bl	800cccc <memset>
 800d246:	4620      	mov	r0, r4
 800d248:	bd70      	pop	{r4, r5, r6, pc}

0800d24a <_fwalk_reent>:
 800d24a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d24e:	4606      	mov	r6, r0
 800d250:	4688      	mov	r8, r1
 800d252:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d256:	2700      	movs	r7, #0
 800d258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d25c:	f1b9 0901 	subs.w	r9, r9, #1
 800d260:	d505      	bpl.n	800d26e <_fwalk_reent+0x24>
 800d262:	6824      	ldr	r4, [r4, #0]
 800d264:	2c00      	cmp	r4, #0
 800d266:	d1f7      	bne.n	800d258 <_fwalk_reent+0xe>
 800d268:	4638      	mov	r0, r7
 800d26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d26e:	89ab      	ldrh	r3, [r5, #12]
 800d270:	2b01      	cmp	r3, #1
 800d272:	d907      	bls.n	800d284 <_fwalk_reent+0x3a>
 800d274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d278:	3301      	adds	r3, #1
 800d27a:	d003      	beq.n	800d284 <_fwalk_reent+0x3a>
 800d27c:	4629      	mov	r1, r5
 800d27e:	4630      	mov	r0, r6
 800d280:	47c0      	blx	r8
 800d282:	4307      	orrs	r7, r0
 800d284:	3568      	adds	r5, #104	; 0x68
 800d286:	e7e9      	b.n	800d25c <_fwalk_reent+0x12>

0800d288 <__swhatbuf_r>:
 800d288:	b570      	push	{r4, r5, r6, lr}
 800d28a:	460c      	mov	r4, r1
 800d28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d290:	2900      	cmp	r1, #0
 800d292:	b096      	sub	sp, #88	; 0x58
 800d294:	4615      	mov	r5, r2
 800d296:	461e      	mov	r6, r3
 800d298:	da0d      	bge.n	800d2b6 <__swhatbuf_r+0x2e>
 800d29a:	89a3      	ldrh	r3, [r4, #12]
 800d29c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d2a0:	f04f 0100 	mov.w	r1, #0
 800d2a4:	bf14      	ite	ne
 800d2a6:	2340      	movne	r3, #64	; 0x40
 800d2a8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	6031      	str	r1, [r6, #0]
 800d2b0:	602b      	str	r3, [r5, #0]
 800d2b2:	b016      	add	sp, #88	; 0x58
 800d2b4:	bd70      	pop	{r4, r5, r6, pc}
 800d2b6:	466a      	mov	r2, sp
 800d2b8:	f7fe fb7c 	bl	800b9b4 <_fstat_r>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	dbec      	blt.n	800d29a <__swhatbuf_r+0x12>
 800d2c0:	9901      	ldr	r1, [sp, #4]
 800d2c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d2c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d2ca:	4259      	negs	r1, r3
 800d2cc:	4159      	adcs	r1, r3
 800d2ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2d2:	e7eb      	b.n	800d2ac <__swhatbuf_r+0x24>

0800d2d4 <memmove>:
 800d2d4:	4288      	cmp	r0, r1
 800d2d6:	b510      	push	{r4, lr}
 800d2d8:	eb01 0402 	add.w	r4, r1, r2
 800d2dc:	d902      	bls.n	800d2e4 <memmove+0x10>
 800d2de:	4284      	cmp	r4, r0
 800d2e0:	4623      	mov	r3, r4
 800d2e2:	d807      	bhi.n	800d2f4 <memmove+0x20>
 800d2e4:	1e43      	subs	r3, r0, #1
 800d2e6:	42a1      	cmp	r1, r4
 800d2e8:	d008      	beq.n	800d2fc <memmove+0x28>
 800d2ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2f2:	e7f8      	b.n	800d2e6 <memmove+0x12>
 800d2f4:	4402      	add	r2, r0
 800d2f6:	4601      	mov	r1, r0
 800d2f8:	428a      	cmp	r2, r1
 800d2fa:	d100      	bne.n	800d2fe <memmove+0x2a>
 800d2fc:	bd10      	pop	{r4, pc}
 800d2fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d306:	e7f7      	b.n	800d2f8 <memmove+0x24>

0800d308 <__hi0bits>:
 800d308:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800d30c:	4603      	mov	r3, r0
 800d30e:	bf36      	itet	cc
 800d310:	0403      	lslcc	r3, r0, #16
 800d312:	2000      	movcs	r0, #0
 800d314:	2010      	movcc	r0, #16
 800d316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d31a:	bf3c      	itt	cc
 800d31c:	021b      	lslcc	r3, r3, #8
 800d31e:	3008      	addcc	r0, #8
 800d320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d324:	bf3c      	itt	cc
 800d326:	011b      	lslcc	r3, r3, #4
 800d328:	3004      	addcc	r0, #4
 800d32a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d32e:	d303      	bcc.n	800d338 <__hi0bits+0x30>
 800d330:	2b00      	cmp	r3, #0
 800d332:	db0a      	blt.n	800d34a <__hi0bits+0x42>
 800d334:	3001      	adds	r0, #1
 800d336:	4770      	bx	lr
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	d501      	bpl.n	800d340 <__hi0bits+0x38>
 800d33c:	3002      	adds	r0, #2
 800d33e:	4770      	bx	lr
 800d340:	005b      	lsls	r3, r3, #1
 800d342:	d501      	bpl.n	800d348 <__hi0bits+0x40>
 800d344:	3003      	adds	r0, #3
 800d346:	4770      	bx	lr
 800d348:	2020      	movs	r0, #32
 800d34a:	4770      	bx	lr

0800d34c <__lo0bits>:
 800d34c:	6803      	ldr	r3, [r0, #0]
 800d34e:	4602      	mov	r2, r0
 800d350:	f013 0007 	ands.w	r0, r3, #7
 800d354:	d00b      	beq.n	800d36e <__lo0bits+0x22>
 800d356:	07d9      	lsls	r1, r3, #31
 800d358:	d421      	bmi.n	800d39e <__lo0bits+0x52>
 800d35a:	0798      	lsls	r0, r3, #30
 800d35c:	bf49      	itett	mi
 800d35e:	085b      	lsrmi	r3, r3, #1
 800d360:	089b      	lsrpl	r3, r3, #2
 800d362:	2001      	movmi	r0, #1
 800d364:	6013      	strmi	r3, [r2, #0]
 800d366:	bf5c      	itt	pl
 800d368:	6013      	strpl	r3, [r2, #0]
 800d36a:	2002      	movpl	r0, #2
 800d36c:	4770      	bx	lr
 800d36e:	b299      	uxth	r1, r3
 800d370:	b909      	cbnz	r1, 800d376 <__lo0bits+0x2a>
 800d372:	0c1b      	lsrs	r3, r3, #16
 800d374:	2010      	movs	r0, #16
 800d376:	b2d9      	uxtb	r1, r3
 800d378:	b909      	cbnz	r1, 800d37e <__lo0bits+0x32>
 800d37a:	3008      	adds	r0, #8
 800d37c:	0a1b      	lsrs	r3, r3, #8
 800d37e:	0719      	lsls	r1, r3, #28
 800d380:	bf04      	itt	eq
 800d382:	091b      	lsreq	r3, r3, #4
 800d384:	3004      	addeq	r0, #4
 800d386:	0799      	lsls	r1, r3, #30
 800d388:	bf04      	itt	eq
 800d38a:	089b      	lsreq	r3, r3, #2
 800d38c:	3002      	addeq	r0, #2
 800d38e:	07d9      	lsls	r1, r3, #31
 800d390:	d403      	bmi.n	800d39a <__lo0bits+0x4e>
 800d392:	085b      	lsrs	r3, r3, #1
 800d394:	f100 0001 	add.w	r0, r0, #1
 800d398:	d003      	beq.n	800d3a2 <__lo0bits+0x56>
 800d39a:	6013      	str	r3, [r2, #0]
 800d39c:	4770      	bx	lr
 800d39e:	2000      	movs	r0, #0
 800d3a0:	4770      	bx	lr
 800d3a2:	2020      	movs	r0, #32
 800d3a4:	4770      	bx	lr

0800d3a6 <__mcmp>:
 800d3a6:	690a      	ldr	r2, [r1, #16]
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	6900      	ldr	r0, [r0, #16]
 800d3ac:	1a80      	subs	r0, r0, r2
 800d3ae:	b530      	push	{r4, r5, lr}
 800d3b0:	d10e      	bne.n	800d3d0 <__mcmp+0x2a>
 800d3b2:	3314      	adds	r3, #20
 800d3b4:	3114      	adds	r1, #20
 800d3b6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d3ba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d3be:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3c2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d3c6:	4295      	cmp	r5, r2
 800d3c8:	d003      	beq.n	800d3d2 <__mcmp+0x2c>
 800d3ca:	d205      	bcs.n	800d3d8 <__mcmp+0x32>
 800d3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d0:	bd30      	pop	{r4, r5, pc}
 800d3d2:	42a3      	cmp	r3, r4
 800d3d4:	d3f3      	bcc.n	800d3be <__mcmp+0x18>
 800d3d6:	e7fb      	b.n	800d3d0 <__mcmp+0x2a>
 800d3d8:	2001      	movs	r0, #1
 800d3da:	e7f9      	b.n	800d3d0 <__mcmp+0x2a>

0800d3dc <_calloc_r>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	fb02 f501 	mul.w	r5, r2, r1
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	f7fc ff48 	bl	800a278 <_malloc_r>
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	b118      	cbz	r0, 800d3f4 <_calloc_r+0x18>
 800d3ec:	462a      	mov	r2, r5
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	f7ff fc6c 	bl	800cccc <memset>
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	bd38      	pop	{r3, r4, r5, pc}

0800d3f8 <_realloc_r>:
 800d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fa:	4607      	mov	r7, r0
 800d3fc:	4615      	mov	r5, r2
 800d3fe:	460c      	mov	r4, r1
 800d400:	b921      	cbnz	r1, 800d40c <_realloc_r+0x14>
 800d402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d406:	4611      	mov	r1, r2
 800d408:	f7fc bf36 	b.w	800a278 <_malloc_r>
 800d40c:	b922      	cbnz	r2, 800d418 <_realloc_r+0x20>
 800d40e:	f7fc fee9 	bl	800a1e4 <_free_r>
 800d412:	2400      	movs	r4, #0
 800d414:	4620      	mov	r0, r4
 800d416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d418:	f000 f8c3 	bl	800d5a2 <_malloc_usable_size_r>
 800d41c:	42a8      	cmp	r0, r5
 800d41e:	d2f9      	bcs.n	800d414 <_realloc_r+0x1c>
 800d420:	4629      	mov	r1, r5
 800d422:	4638      	mov	r0, r7
 800d424:	f7fc ff28 	bl	800a278 <_malloc_r>
 800d428:	4606      	mov	r6, r0
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d0f1      	beq.n	800d412 <_realloc_r+0x1a>
 800d42e:	4621      	mov	r1, r4
 800d430:	462a      	mov	r2, r5
 800d432:	f7ff fc3d 	bl	800ccb0 <memcpy>
 800d436:	4621      	mov	r1, r4
 800d438:	4638      	mov	r0, r7
 800d43a:	f7fc fed3 	bl	800a1e4 <_free_r>
 800d43e:	4634      	mov	r4, r6
 800d440:	e7e8      	b.n	800d414 <_realloc_r+0x1c>

0800d442 <__ssputs_r>:
 800d442:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d446:	688e      	ldr	r6, [r1, #8]
 800d448:	461f      	mov	r7, r3
 800d44a:	42be      	cmp	r6, r7
 800d44c:	680b      	ldr	r3, [r1, #0]
 800d44e:	4682      	mov	sl, r0
 800d450:	460c      	mov	r4, r1
 800d452:	4690      	mov	r8, r2
 800d454:	d82d      	bhi.n	800d4b2 <__ssputs_r+0x70>
 800d456:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d45a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d45e:	d026      	beq.n	800d4ae <__ssputs_r+0x6c>
 800d460:	6965      	ldr	r5, [r4, #20]
 800d462:	6909      	ldr	r1, [r1, #16]
 800d464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d468:	eba3 0901 	sub.w	r9, r3, r1
 800d46c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d470:	1c7b      	adds	r3, r7, #1
 800d472:	444b      	add	r3, r9
 800d474:	106d      	asrs	r5, r5, #1
 800d476:	429d      	cmp	r5, r3
 800d478:	bf38      	it	cc
 800d47a:	461d      	movcc	r5, r3
 800d47c:	0553      	lsls	r3, r2, #21
 800d47e:	d527      	bpl.n	800d4d0 <__ssputs_r+0x8e>
 800d480:	4629      	mov	r1, r5
 800d482:	f7fc fef9 	bl	800a278 <_malloc_r>
 800d486:	4606      	mov	r6, r0
 800d488:	b360      	cbz	r0, 800d4e4 <__ssputs_r+0xa2>
 800d48a:	6921      	ldr	r1, [r4, #16]
 800d48c:	464a      	mov	r2, r9
 800d48e:	f7ff fc0f 	bl	800ccb0 <memcpy>
 800d492:	89a3      	ldrh	r3, [r4, #12]
 800d494:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d49c:	81a3      	strh	r3, [r4, #12]
 800d49e:	6126      	str	r6, [r4, #16]
 800d4a0:	6165      	str	r5, [r4, #20]
 800d4a2:	444e      	add	r6, r9
 800d4a4:	eba5 0509 	sub.w	r5, r5, r9
 800d4a8:	6026      	str	r6, [r4, #0]
 800d4aa:	60a5      	str	r5, [r4, #8]
 800d4ac:	463e      	mov	r6, r7
 800d4ae:	42be      	cmp	r6, r7
 800d4b0:	d900      	bls.n	800d4b4 <__ssputs_r+0x72>
 800d4b2:	463e      	mov	r6, r7
 800d4b4:	6820      	ldr	r0, [r4, #0]
 800d4b6:	4632      	mov	r2, r6
 800d4b8:	4641      	mov	r1, r8
 800d4ba:	f7ff ff0b 	bl	800d2d4 <memmove>
 800d4be:	68a3      	ldr	r3, [r4, #8]
 800d4c0:	1b9b      	subs	r3, r3, r6
 800d4c2:	60a3      	str	r3, [r4, #8]
 800d4c4:	6823      	ldr	r3, [r4, #0]
 800d4c6:	4433      	add	r3, r6
 800d4c8:	6023      	str	r3, [r4, #0]
 800d4ca:	2000      	movs	r0, #0
 800d4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4d0:	462a      	mov	r2, r5
 800d4d2:	f7ff ff91 	bl	800d3f8 <_realloc_r>
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	d1e0      	bne.n	800d49e <__ssputs_r+0x5c>
 800d4dc:	6921      	ldr	r1, [r4, #16]
 800d4de:	4650      	mov	r0, sl
 800d4e0:	f7fc fe80 	bl	800a1e4 <_free_r>
 800d4e4:	230c      	movs	r3, #12
 800d4e6:	f8ca 3000 	str.w	r3, [sl]
 800d4ea:	89a3      	ldrh	r3, [r4, #12]
 800d4ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4f0:	81a3      	strh	r3, [r4, #12]
 800d4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f6:	e7e9      	b.n	800d4cc <__ssputs_r+0x8a>

0800d4f8 <__sread>:
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d500:	f7fe fa8c 	bl	800ba1c <_read_r>
 800d504:	2800      	cmp	r0, #0
 800d506:	bfab      	itete	ge
 800d508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d50a:	89a3      	ldrhlt	r3, [r4, #12]
 800d50c:	181b      	addge	r3, r3, r0
 800d50e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d512:	bfac      	ite	ge
 800d514:	6563      	strge	r3, [r4, #84]	; 0x54
 800d516:	81a3      	strhlt	r3, [r4, #12]
 800d518:	bd10      	pop	{r4, pc}

0800d51a <__swrite>:
 800d51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d51e:	461f      	mov	r7, r3
 800d520:	898b      	ldrh	r3, [r1, #12]
 800d522:	05db      	lsls	r3, r3, #23
 800d524:	4605      	mov	r5, r0
 800d526:	460c      	mov	r4, r1
 800d528:	4616      	mov	r6, r2
 800d52a:	d505      	bpl.n	800d538 <__swrite+0x1e>
 800d52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d530:	2302      	movs	r3, #2
 800d532:	2200      	movs	r2, #0
 800d534:	f7fe fa60 	bl	800b9f8 <_lseek_r>
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d53e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d542:	81a3      	strh	r3, [r4, #12]
 800d544:	4632      	mov	r2, r6
 800d546:	463b      	mov	r3, r7
 800d548:	4628      	mov	r0, r5
 800d54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d54e:	f7fe b9f1 	b.w	800b934 <_write_r>

0800d552 <__sseek>:
 800d552:	b510      	push	{r4, lr}
 800d554:	460c      	mov	r4, r1
 800d556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d55a:	f7fe fa4d 	bl	800b9f8 <_lseek_r>
 800d55e:	1c43      	adds	r3, r0, #1
 800d560:	89a3      	ldrh	r3, [r4, #12]
 800d562:	bf15      	itete	ne
 800d564:	6560      	strne	r0, [r4, #84]	; 0x54
 800d566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d56a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d56e:	81a3      	strheq	r3, [r4, #12]
 800d570:	bf18      	it	ne
 800d572:	81a3      	strhne	r3, [r4, #12]
 800d574:	bd10      	pop	{r4, pc}

0800d576 <__sclose>:
 800d576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d57a:	f7fe ba0b 	b.w	800b994 <_close_r>

0800d57e <__ascii_mbtowc>:
 800d57e:	b082      	sub	sp, #8
 800d580:	b901      	cbnz	r1, 800d584 <__ascii_mbtowc+0x6>
 800d582:	a901      	add	r1, sp, #4
 800d584:	b142      	cbz	r2, 800d598 <__ascii_mbtowc+0x1a>
 800d586:	b14b      	cbz	r3, 800d59c <__ascii_mbtowc+0x1e>
 800d588:	7813      	ldrb	r3, [r2, #0]
 800d58a:	600b      	str	r3, [r1, #0]
 800d58c:	7812      	ldrb	r2, [r2, #0]
 800d58e:	1e10      	subs	r0, r2, #0
 800d590:	bf18      	it	ne
 800d592:	2001      	movne	r0, #1
 800d594:	b002      	add	sp, #8
 800d596:	4770      	bx	lr
 800d598:	4610      	mov	r0, r2
 800d59a:	e7fb      	b.n	800d594 <__ascii_mbtowc+0x16>
 800d59c:	f06f 0001 	mvn.w	r0, #1
 800d5a0:	e7f8      	b.n	800d594 <__ascii_mbtowc+0x16>

0800d5a2 <_malloc_usable_size_r>:
 800d5a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5a6:	1f18      	subs	r0, r3, #4
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	bfbc      	itt	lt
 800d5ac:	580b      	ldrlt	r3, [r1, r0]
 800d5ae:	18c0      	addlt	r0, r0, r3
 800d5b0:	4770      	bx	lr

0800d5b2 <__ascii_wctomb>:
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	4608      	mov	r0, r1
 800d5b6:	b141      	cbz	r1, 800d5ca <__ascii_wctomb+0x18>
 800d5b8:	2aff      	cmp	r2, #255	; 0xff
 800d5ba:	d904      	bls.n	800d5c6 <__ascii_wctomb+0x14>
 800d5bc:	228a      	movs	r2, #138	; 0x8a
 800d5be:	601a      	str	r2, [r3, #0]
 800d5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c4:	4770      	bx	lr
 800d5c6:	700a      	strb	r2, [r1, #0]
 800d5c8:	2001      	movs	r0, #1
 800d5ca:	4770      	bx	lr

0800d5cc <abort>:
 800d5cc:	b508      	push	{r3, lr}
 800d5ce:	2006      	movs	r0, #6
 800d5d0:	f7fe fa36 	bl	800ba40 <raise>
 800d5d4:	2001      	movs	r0, #1
 800d5d6:	f7f8 f961 	bl	800589c <_exit>

0800d5da <_raise_r>:
 800d5da:	291f      	cmp	r1, #31
 800d5dc:	b538      	push	{r3, r4, r5, lr}
 800d5de:	4605      	mov	r5, r0
 800d5e0:	460c      	mov	r4, r1
 800d5e2:	d904      	bls.n	800d5ee <_raise_r+0x14>
 800d5e4:	2316      	movs	r3, #22
 800d5e6:	6003      	str	r3, [r0, #0]
 800d5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ec:	bd38      	pop	{r3, r4, r5, pc}
 800d5ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5f0:	b112      	cbz	r2, 800d5f8 <_raise_r+0x1e>
 800d5f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5f6:	b94b      	cbnz	r3, 800d60c <_raise_r+0x32>
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	f000 f816 	bl	800d62a <_getpid_r>
 800d5fe:	4622      	mov	r2, r4
 800d600:	4601      	mov	r1, r0
 800d602:	4628      	mov	r0, r5
 800d604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d608:	f7fe ba22 	b.w	800ba50 <_kill_r>
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d00a      	beq.n	800d626 <_raise_r+0x4c>
 800d610:	1c59      	adds	r1, r3, #1
 800d612:	d103      	bne.n	800d61c <_raise_r+0x42>
 800d614:	2316      	movs	r3, #22
 800d616:	6003      	str	r3, [r0, #0]
 800d618:	2001      	movs	r0, #1
 800d61a:	e7e7      	b.n	800d5ec <_raise_r+0x12>
 800d61c:	2100      	movs	r1, #0
 800d61e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d622:	4620      	mov	r0, r4
 800d624:	4798      	blx	r3
 800d626:	2000      	movs	r0, #0
 800d628:	e7e0      	b.n	800d5ec <_raise_r+0x12>

0800d62a <_getpid_r>:
 800d62a:	f7fe bd17 	b.w	800c05c <_getpid>
	...
