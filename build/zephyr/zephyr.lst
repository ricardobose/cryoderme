
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 26 00 20 fd 50 00 08 af b6 00 08 d1 50 00 08     .&. .P.......P..
 8000010:	d1 50 00 08 d1 50 00 08 d1 50 00 08 00 00 00 00     .P...P...P......
	...
 800002c:	69 49 00 08 d1 50 00 08 00 00 00 00 15 49 00 08     iI...P.......I..
 800003c:	61 6d 00 08                                         am..

08000040 <_irq_vector_table>:
 8000040:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000050:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000060:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000070:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000080:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000090:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 80000a0:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 80000b0:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 80000c0:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 80000d0:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 80000e0:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 80000f0:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000100:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000110:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000120:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000130:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000140:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000150:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000160:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000170:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000180:	19 4a 00 08 19 4a 00 08 19 4a 00 08 19 4a 00 08     .J...J...J...J..
 8000190:	19 4a 00 08                                         .J..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__gesf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpsf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__lesf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpsf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpsf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa6:	d011      	beq.n	8000acc <__cmpsf2+0x40>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000aae:	bf18      	it	ne
 8000ab0:	ea90 0f01 	teqne	r0, r1
 8000ab4:	bf58      	it	pl
 8000ab6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000aba:	bf88      	it	hi
 8000abc:	17c8      	asrhi	r0, r1, #31
 8000abe:	bf38      	it	cc
 8000ac0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ac4:	bf18      	it	ne
 8000ac6:	f040 0001 	orrne.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ad0:	d102      	bne.n	8000ad8 <__cmpsf2+0x4c>
 8000ad2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ad6:	d105      	bne.n	8000ae4 <__cmpsf2+0x58>
 8000ad8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000adc:	d1e4      	bne.n	8000aa8 <__cmpsf2+0x1c>
 8000ade:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ae2:	d0e1      	beq.n	8000aa8 <__cmpsf2+0x1c>
 8000ae4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_cfrcmple>:
 8000aec:	4684      	mov	ip, r0
 8000aee:	4608      	mov	r0, r1
 8000af0:	4661      	mov	r1, ip
 8000af2:	e7ff      	b.n	8000af4 <__aeabi_cfcmpeq>

08000af4 <__aeabi_cfcmpeq>:
 8000af4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000af6:	f7ff ffc9 	bl	8000a8c <__cmpsf2>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	bf48      	it	mi
 8000afe:	f110 0f00 	cmnmi.w	r0, #0
 8000b02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b04 <__aeabi_fcmpeq>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff fff4 	bl	8000af4 <__aeabi_cfcmpeq>
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2001      	moveq	r0, #1
 8000b10:	2000      	movne	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_fcmplt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffea 	bl	8000af4 <__aeabi_cfcmpeq>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fcmple>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffe0 	bl	8000af4 <__aeabi_cfcmpeq>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_fcmpge>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffd2 	bl	8000aec <__aeabi_cfrcmple>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_fcmpgt>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffc8 	bl	8000aec <__aeabi_cfrcmple>
 8000b5c:	bf34      	ite	cc
 8000b5e:	2001      	movcc	r0, #1
 8000b60:	2000      	movcs	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b80c 	b.w	8000b98 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f8ce 	bl	8000d28 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_idiv0>:
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__gedf2>:
 8000b9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000ba0:	e006      	b.n	8000bb0 <__cmpdf2+0x4>
 8000ba2:	bf00      	nop

08000ba4 <__ledf2>:
 8000ba4:	f04f 0c01 	mov.w	ip, #1
 8000ba8:	e002      	b.n	8000bb0 <__cmpdf2+0x4>
 8000baa:	bf00      	nop

08000bac <__cmpdf2>:
 8000bac:	f04f 0c01 	mov.w	ip, #1
 8000bb0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc0:	bf18      	it	ne
 8000bc2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000bc6:	d01b      	beq.n	8000c00 <__cmpdf2+0x54>
 8000bc8:	b001      	add	sp, #4
 8000bca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000bce:	bf0c      	ite	eq
 8000bd0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000bd4:	ea91 0f03 	teqne	r1, r3
 8000bd8:	bf02      	ittt	eq
 8000bda:	ea90 0f02 	teqeq	r0, r2
 8000bde:	2000      	moveq	r0, #0
 8000be0:	4770      	bxeq	lr
 8000be2:	f110 0f00 	cmn.w	r0, #0
 8000be6:	ea91 0f03 	teq	r1, r3
 8000bea:	bf58      	it	pl
 8000bec:	4299      	cmppl	r1, r3
 8000bee:	bf08      	it	eq
 8000bf0:	4290      	cmpeq	r0, r2
 8000bf2:	bf2c      	ite	cs
 8000bf4:	17d8      	asrcs	r0, r3, #31
 8000bf6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bfa:	f040 0001 	orr.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c08:	d102      	bne.n	8000c10 <__cmpdf2+0x64>
 8000c0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c0e:	d107      	bne.n	8000c20 <__cmpdf2+0x74>
 8000c10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c18:	d1d6      	bne.n	8000bc8 <__cmpdf2+0x1c>
 8000c1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c1e:	d0d3      	beq.n	8000bc8 <__cmpdf2+0x1c>
 8000c20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_cdrcmple>:
 8000c28:	4684      	mov	ip, r0
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	4662      	mov	r2, ip
 8000c2e:	468c      	mov	ip, r1
 8000c30:	4619      	mov	r1, r3
 8000c32:	4663      	mov	r3, ip
 8000c34:	e000      	b.n	8000c38 <__aeabi_cdcmpeq>
 8000c36:	bf00      	nop

08000c38 <__aeabi_cdcmpeq>:
 8000c38:	b501      	push	{r0, lr}
 8000c3a:	f7ff ffb7 	bl	8000bac <__cmpdf2>
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	bf48      	it	mi
 8000c42:	f110 0f00 	cmnmi.w	r0, #0
 8000c46:	bd01      	pop	{r0, pc}

08000c48 <__aeabi_dcmpeq>:
 8000c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c4c:	f7ff fff4 	bl	8000c38 <__aeabi_cdcmpeq>
 8000c50:	bf0c      	ite	eq
 8000c52:	2001      	moveq	r0, #1
 8000c54:	2000      	movne	r0, #0
 8000c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5a:	bf00      	nop

08000c5c <__aeabi_dcmplt>:
 8000c5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c60:	f7ff ffea 	bl	8000c38 <__aeabi_cdcmpeq>
 8000c64:	bf34      	ite	cc
 8000c66:	2001      	movcc	r0, #1
 8000c68:	2000      	movcs	r0, #0
 8000c6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c6e:	bf00      	nop

08000c70 <__aeabi_dcmple>:
 8000c70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c74:	f7ff ffe0 	bl	8000c38 <__aeabi_cdcmpeq>
 8000c78:	bf94      	ite	ls
 8000c7a:	2001      	movls	r0, #1
 8000c7c:	2000      	movhi	r0, #0
 8000c7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c82:	bf00      	nop

08000c84 <__aeabi_dcmpge>:
 8000c84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c88:	f7ff ffce 	bl	8000c28 <__aeabi_cdrcmple>
 8000c8c:	bf94      	ite	ls
 8000c8e:	2001      	movls	r0, #1
 8000c90:	2000      	movhi	r0, #0
 8000c92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c96:	bf00      	nop

08000c98 <__aeabi_dcmpgt>:
 8000c98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c9c:	f7ff ffc4 	bl	8000c28 <__aeabi_cdrcmple>
 8000ca0:	bf34      	ite	cc
 8000ca2:	2001      	movcc	r0, #1
 8000ca4:	2000      	movcs	r0, #0
 8000ca6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000caa:	bf00      	nop

08000cac <__aeabi_dcmpun>:
 8000cac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cb4:	d102      	bne.n	8000cbc <__aeabi_dcmpun+0x10>
 8000cb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cba:	d10a      	bne.n	8000cd2 <__aeabi_dcmpun+0x26>
 8000cbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cc4:	d102      	bne.n	8000ccc <__aeabi_dcmpun+0x20>
 8000cc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cca:	d102      	bne.n	8000cd2 <__aeabi_dcmpun+0x26>
 8000ccc:	f04f 0000 	mov.w	r0, #0
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0001 	mov.w	r0, #1
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2iz>:
 8000cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ce0:	d215      	bcs.n	8000d0e <__aeabi_d2iz+0x36>
 8000ce2:	d511      	bpl.n	8000d08 <__aeabi_d2iz+0x30>
 8000ce4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ce8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cec:	d912      	bls.n	8000d14 <__aeabi_d2iz+0x3c>
 8000cee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	4770      	bx	lr
 8000d08:	f04f 0000 	mov.w	r0, #0
 8000d0c:	4770      	bx	lr
 8000d0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d12:	d105      	bne.n	8000d20 <__aeabi_d2iz+0x48>
 8000d14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000d18:	bf08      	it	eq
 8000d1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d1e:	4770      	bx	lr
 8000d20:	f04f 0000 	mov.w	r0, #0
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	4686      	mov	lr, r0
 8000d2e:	468c      	mov	ip, r1
 8000d30:	4608      	mov	r0, r1
 8000d32:	9e08      	ldr	r6, [sp, #32]
 8000d34:	4615      	mov	r5, r2
 8000d36:	4674      	mov	r4, lr
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 80c2 	bne.w	8000ec4 <__udivmoddi4+0x19c>
 8000d40:	4285      	cmp	r5, r0
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	d945      	bls.n	8000dd4 <__udivmoddi4+0xac>
 8000d48:	b14a      	cbz	r2, 8000d5e <__udivmoddi4+0x36>
 8000d4a:	f1c2 0320 	rsb	r3, r2, #32
 8000d4e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d52:	fa2e f303 	lsr.w	r3, lr, r3
 8000d56:	4095      	lsls	r5, r2
 8000d58:	ea43 0c0c 	orr.w	ip, r3, ip
 8000d5c:	4094      	lsls	r4, r2
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	b2a8      	uxth	r0, r5
 8000d64:	fbbc f8fe 	udiv	r8, ip, lr
 8000d68:	0c23      	lsrs	r3, r4, #16
 8000d6a:	fb0e cc18 	mls	ip, lr, r8, ip
 8000d6e:	fb08 f900 	mul.w	r9, r8, r0
 8000d72:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8000d76:	4599      	cmp	r9, r3
 8000d78:	d928      	bls.n	8000dcc <__udivmoddi4+0xa4>
 8000d7a:	18eb      	adds	r3, r5, r3
 8000d7c:	f108 37ff 	add.w	r7, r8, #4294967295
 8000d80:	d204      	bcs.n	8000d8c <__udivmoddi4+0x64>
 8000d82:	4599      	cmp	r9, r3
 8000d84:	d902      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d86:	f1a8 0702 	sub.w	r7, r8, #2
 8000d8a:	442b      	add	r3, r5
 8000d8c:	eba3 0309 	sub.w	r3, r3, r9
 8000d90:	b2a4      	uxth	r4, r4
 8000d92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d96:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d9a:	fb0c f000 	mul.w	r0, ip, r0
 8000d9e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da2:	42a0      	cmp	r0, r4
 8000da4:	d914      	bls.n	8000dd0 <__udivmoddi4+0xa8>
 8000da6:	192c      	adds	r4, r5, r4
 8000da8:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000dac:	d204      	bcs.n	8000db8 <__udivmoddi4+0x90>
 8000dae:	42a0      	cmp	r0, r4
 8000db0:	d902      	bls.n	8000db8 <__udivmoddi4+0x90>
 8000db2:	f1ac 0302 	sub.w	r3, ip, #2
 8000db6:	442c      	add	r4, r5
 8000db8:	1a24      	subs	r4, r4, r0
 8000dba:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8000dbe:	b11e      	cbz	r6, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	6034      	str	r4, [r6, #0]
 8000dc6:	6073      	str	r3, [r6, #4]
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	4647      	mov	r7, r8
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0x64>
 8000dd0:	4663      	mov	r3, ip
 8000dd2:	e7f1      	b.n	8000db8 <__udivmoddi4+0x90>
 8000dd4:	bb92      	cbnz	r2, 8000e3c <__udivmoddi4+0x114>
 8000dd6:	1b43      	subs	r3, r0, r5
 8000dd8:	2101      	movs	r1, #1
 8000dda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dde:	b2af      	uxth	r7, r5
 8000de0:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de4:	0c20      	lsrs	r0, r4, #16
 8000de6:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dea:	fb0c f807 	mul.w	r8, ip, r7
 8000dee:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df2:	4598      	cmp	r8, r3
 8000df4:	d962      	bls.n	8000ebc <__udivmoddi4+0x194>
 8000df6:	18eb      	adds	r3, r5, r3
 8000df8:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfc:	d204      	bcs.n	8000e08 <__udivmoddi4+0xe0>
 8000dfe:	4598      	cmp	r8, r3
 8000e00:	d902      	bls.n	8000e08 <__udivmoddi4+0xe0>
 8000e02:	f1ac 0002 	sub.w	r0, ip, #2
 8000e06:	442b      	add	r3, r5
 8000e08:	eba3 0308 	sub.w	r3, r3, r8
 8000e0c:	b2a4      	uxth	r4, r4
 8000e0e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e12:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e16:	fb0c f707 	mul.w	r7, ip, r7
 8000e1a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1e:	42a7      	cmp	r7, r4
 8000e20:	d94e      	bls.n	8000ec0 <__udivmoddi4+0x198>
 8000e22:	192c      	adds	r4, r5, r4
 8000e24:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000e28:	d204      	bcs.n	8000e34 <__udivmoddi4+0x10c>
 8000e2a:	42a7      	cmp	r7, r4
 8000e2c:	d902      	bls.n	8000e34 <__udivmoddi4+0x10c>
 8000e2e:	f1ac 0302 	sub.w	r3, ip, #2
 8000e32:	442c      	add	r4, r5
 8000e34:	1be4      	subs	r4, r4, r7
 8000e36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e3a:	e7c0      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	4095      	lsls	r5, r2
 8000e46:	4090      	lsls	r0, r2
 8000e48:	fa2e f303 	lsr.w	r3, lr, r3
 8000e4c:	4303      	orrs	r3, r0
 8000e4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e52:	b2af      	uxth	r7, r5
 8000e54:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e58:	fb0e 101c 	mls	r0, lr, ip, r1
 8000e5c:	0c19      	lsrs	r1, r3, #16
 8000e5e:	fb0c f807 	mul.w	r8, ip, r7
 8000e62:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e66:	4588      	cmp	r8, r1
 8000e68:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6c:	d922      	bls.n	8000eb4 <__udivmoddi4+0x18c>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e74:	d204      	bcs.n	8000e80 <__udivmoddi4+0x158>
 8000e76:	4588      	cmp	r8, r1
 8000e78:	d902      	bls.n	8000e80 <__udivmoddi4+0x158>
 8000e7a:	f1ac 0002 	sub.w	r0, ip, #2
 8000e7e:	4429      	add	r1, r5
 8000e80:	eba1 0108 	sub.w	r1, r1, r8
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e8a:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e8e:	fb0c f707 	mul.w	r7, ip, r7
 8000e92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d90e      	bls.n	8000eb8 <__udivmoddi4+0x190>
 8000e9a:	18eb      	adds	r3, r5, r3
 8000e9c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000ea0:	d204      	bcs.n	8000eac <__udivmoddi4+0x184>
 8000ea2:	429f      	cmp	r7, r3
 8000ea4:	d902      	bls.n	8000eac <__udivmoddi4+0x184>
 8000ea6:	f1ac 0102 	sub.w	r1, ip, #2
 8000eaa:	442b      	add	r3, r5
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb2:	e792      	b.n	8000dda <__udivmoddi4+0xb2>
 8000eb4:	4660      	mov	r0, ip
 8000eb6:	e7e3      	b.n	8000e80 <__udivmoddi4+0x158>
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7f7      	b.n	8000eac <__udivmoddi4+0x184>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0xe0>
 8000ec0:	4663      	mov	r3, ip
 8000ec2:	e7b7      	b.n	8000e34 <__udivmoddi4+0x10c>
 8000ec4:	4283      	cmp	r3, r0
 8000ec6:	d906      	bls.n	8000ed6 <__udivmoddi4+0x1ae>
 8000ec8:	b916      	cbnz	r6, 8000ed0 <__udivmoddi4+0x1a8>
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000ed0:	e9c6 e000 	strd	lr, r0, [r6]
 8000ed4:	e7f9      	b.n	8000eca <__udivmoddi4+0x1a2>
 8000ed6:	fab3 f783 	clz	r7, r3
 8000eda:	b98f      	cbnz	r7, 8000f00 <__udivmoddi4+0x1d8>
 8000edc:	4283      	cmp	r3, r0
 8000ede:	d301      	bcc.n	8000ee4 <__udivmoddi4+0x1bc>
 8000ee0:	4572      	cmp	r2, lr
 8000ee2:	d808      	bhi.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ee4:	ebbe 0402 	subs.w	r4, lr, r2
 8000ee8:	eb60 0303 	sbc.w	r3, r0, r3
 8000eec:	2001      	movs	r0, #1
 8000eee:	469c      	mov	ip, r3
 8000ef0:	b91e      	cbnz	r6, 8000efa <__udivmoddi4+0x1d2>
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e768      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000ef6:	4638      	mov	r0, r7
 8000ef8:	e7fa      	b.n	8000ef0 <__udivmoddi4+0x1c8>
 8000efa:	e9c6 4c00 	strd	r4, ip, [r6]
 8000efe:	e7f8      	b.n	8000ef2 <__udivmoddi4+0x1ca>
 8000f00:	f1c7 0c20 	rsb	ip, r7, #32
 8000f04:	40bb      	lsls	r3, r7
 8000f06:	fa22 f40c 	lsr.w	r4, r2, ip
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	fa2e f10c 	lsr.w	r1, lr, ip
 8000f10:	fa20 f30c 	lsr.w	r3, r0, ip
 8000f14:	40b8      	lsls	r0, r7
 8000f16:	4301      	orrs	r1, r0
 8000f18:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000f1c:	fa0e f507 	lsl.w	r5, lr, r7
 8000f20:	fbb3 f8f9 	udiv	r8, r3, r9
 8000f24:	fa1f fe84 	uxth.w	lr, r4
 8000f28:	fb09 3018 	mls	r0, r9, r8, r3
 8000f2c:	0c0b      	lsrs	r3, r1, #16
 8000f2e:	fb08 fa0e 	mul.w	sl, r8, lr
 8000f32:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000f36:	459a      	cmp	sl, r3
 8000f38:	fa02 f207 	lsl.w	r2, r2, r7
 8000f3c:	d940      	bls.n	8000fc0 <__udivmoddi4+0x298>
 8000f3e:	18e3      	adds	r3, r4, r3
 8000f40:	f108 30ff 	add.w	r0, r8, #4294967295
 8000f44:	d204      	bcs.n	8000f50 <__udivmoddi4+0x228>
 8000f46:	459a      	cmp	sl, r3
 8000f48:	d902      	bls.n	8000f50 <__udivmoddi4+0x228>
 8000f4a:	f1a8 0002 	sub.w	r0, r8, #2
 8000f4e:	4423      	add	r3, r4
 8000f50:	eba3 030a 	sub.w	r3, r3, sl
 8000f54:	b289      	uxth	r1, r1
 8000f56:	fbb3 f8f9 	udiv	r8, r3, r9
 8000f5a:	fb09 3318 	mls	r3, r9, r8, r3
 8000f5e:	fb08 fe0e 	mul.w	lr, r8, lr
 8000f62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f66:	458e      	cmp	lr, r1
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x29c>
 8000f6a:	1861      	adds	r1, r4, r1
 8000f6c:	f108 33ff 	add.w	r3, r8, #4294967295
 8000f70:	d204      	bcs.n	8000f7c <__udivmoddi4+0x254>
 8000f72:	458e      	cmp	lr, r1
 8000f74:	d902      	bls.n	8000f7c <__udivmoddi4+0x254>
 8000f76:	f1a8 0302 	sub.w	r3, r8, #2
 8000f7a:	4421      	add	r1, r4
 8000f7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f80:	fba0 9802 	umull	r9, r8, r0, r2
 8000f84:	eba1 010e 	sub.w	r1, r1, lr
 8000f88:	4541      	cmp	r1, r8
 8000f8a:	46ce      	mov	lr, r9
 8000f8c:	4643      	mov	r3, r8
 8000f8e:	d302      	bcc.n	8000f96 <__udivmoddi4+0x26e>
 8000f90:	d106      	bne.n	8000fa0 <__udivmoddi4+0x278>
 8000f92:	454d      	cmp	r5, r9
 8000f94:	d204      	bcs.n	8000fa0 <__udivmoddi4+0x278>
 8000f96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f9a:	eb68 0304 	sbc.w	r3, r8, r4
 8000f9e:	3801      	subs	r0, #1
 8000fa0:	2e00      	cmp	r6, #0
 8000fa2:	d0a6      	beq.n	8000ef2 <__udivmoddi4+0x1ca>
 8000fa4:	ebb5 020e 	subs.w	r2, r5, lr
 8000fa8:	eb61 0103 	sbc.w	r1, r1, r3
 8000fac:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000fb0:	fa22 f307 	lsr.w	r3, r2, r7
 8000fb4:	ea4c 0303 	orr.w	r3, ip, r3
 8000fb8:	40f9      	lsrs	r1, r7
 8000fba:	e9c6 3100 	strd	r3, r1, [r6]
 8000fbe:	e798      	b.n	8000ef2 <__udivmoddi4+0x1ca>
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	e7c5      	b.n	8000f50 <__udivmoddi4+0x228>
 8000fc4:	4643      	mov	r3, r8
 8000fc6:	e7d9      	b.n	8000f7c <__udivmoddi4+0x254>

08000fc8 <strlen>:
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d1fb      	bne.n	8000fca <strlen+0x2>
 8000fd2:	1a18      	subs	r0, r3, r0
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	4770      	bx	lr

08000fd8 <temp_sensors>:
	};



void temp_sensors(void)		//funçção executada como thread
{
 8000fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t buf;
	double aux;
	double aux_A=25.0/310.0;			// aux_A e aux_B calculam as constantes para gera uma equção de reta 
	double aux_B=25.0-(931.0*aux_A);	// Y = aux_A.X + aux_B oude y é temperatura e x valor do adc em bits 
										// equação de reta para o sensor TMP36 para conversão de BITs em Temperatura
	k_msleep(2000);
 8000fdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
 8000fe0:	b087      	sub	sp, #28
	k_msleep(2000);
 8000fe2:	f00a f898 	bl	800b116 <k_msleep.isra.0>
	printk(" -----    Thread sensores ----    \n"); 
 8000fe6:	484c      	ldr	r0, [pc, #304]	; (8001118 <temp_sensors+0x140>)
 8000fe8:	4c4c      	ldr	r4, [pc, #304]	; (800111c <temp_sensors+0x144>)
 8000fea:	f00a f8de 	bl	800b1aa <printk>

	struct adc_sequence sequence = {
 8000fee:	2214      	movs	r2, #20
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	a801      	add	r0, sp, #4
 8000ff4:	f00b f991 	bl	800c31a <memset>
 8000ff8:	f10d 0302 	add.w	r3, sp, #2
 8000ffc:	9303      	str	r3, [sp, #12]
 8000ffe:	2302      	movs	r3, #2
 8001000:	9304      	str	r3, [sp, #16]
		// buffer size in bytes, not number of samples 
		.buffer_size = sizeof(buf),
	};

// Configure channels individually prior to sampling. 
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
 8001002:	2500      	movs	r5, #0
		if (!device_is_ready(adc_channels[i].dev)) {
 8001004:	f854 0c06 	ldr.w	r0, [r4, #-6]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8001008:	f00b f8b8 	bl	800c17c <z_device_is_ready>
 800100c:	b928      	cbnz	r0, 800101a <temp_sensors+0x42>
			printk("ADC controller device not ready\n");
 800100e:	4844      	ldr	r0, [pc, #272]	; (8001120 <temp_sensors+0x148>)
 8001010:	f00a f8cb 	bl	800b1aa <printk>
			}
		}
		printf("\n \n");
		k_msleep(5000);
	}
}
 8001014:	b007      	add	sp, #28
 8001016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * Devicetree is not valid.
 * @see adc_channel_setup()
 */
static inline int adc_channel_setup_dt(const struct adc_dt_spec *spec)
{
	if (!spec->channel_cfg_dt_node_exists) {
 800101a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800101e:	b163      	cbz	r3, 800103a <temp_sensors+0x62>
		return -ENOTSUP;
	}

	return adc_channel_setup(spec->dev, &spec->channel_cfg);
 8001020:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
 8001024:	6883      	ldr	r3, [r0, #8]
 8001026:	4621      	mov	r1, r4
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4798      	blx	r3
		if (err < 0) {
 800102c:	1e02      	subs	r2, r0, #0
 800102e:	da07      	bge.n	8001040 <temp_sensors+0x68>
			printk("Could not setup channel #%d (%d)\n", i, err);
 8001030:	483c      	ldr	r0, [pc, #240]	; (8001124 <temp_sensors+0x14c>)
 8001032:	4629      	mov	r1, r5
 8001034:	f00a f8b9 	bl	800b1aa <printk>
			return;
 8001038:	e7ec      	b.n	8001014 <temp_sensors+0x3c>
		return -ENOTSUP;
 800103a:	f06f 0285 	mvn.w	r2, #133	; 0x85
 800103e:	e7f7      	b.n	8001030 <temp_sensors+0x58>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
 8001040:	3501      	adds	r5, #1
 8001042:	2d04      	cmp	r5, #4
 8001044:	f104 0410 	add.w	r4, r4, #16
 8001048:	d1dc      	bne.n	8001004 <temp_sensors+0x2c>
					aux = (aux_A*buf) + aux_B;			// equação de reta do sensor TMP36 para conversão de BITs em Temperatura 
 800104a:	f20f 0bbc 	addw	fp, pc, #188	; 0xbc
 800104e:	e9db ab00 	ldrd	sl, fp, [fp]
 8001052:	f20f 09bc 	addw	r9, pc, #188	; 0xbc
 8001056:	e9d9 8900 	ldrd	r8, r9, [r9]
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {	// for faz leitura de todos os ADC identificados para o projeto
 800105a:	4c33      	ldr	r4, [pc, #204]	; (8001128 <temp_sensors+0x150>)
 800105c:	2504      	movs	r5, #4
 * @retval -ENOTSUP If @p spec does not have valid channel configuration
 */
static inline int adc_sequence_init_dt(const struct adc_dt_spec *spec,
				       struct adc_sequence *seq)
{
	if (!spec->channel_cfg_dt_node_exists) {
 800105e:	7963      	ldrb	r3, [r4, #5]
 8001060:	b14b      	cbz	r3, 8001076 <temp_sensors+0x9e>
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
 8001062:	7922      	ldrb	r2, [r4, #4]
 8001064:	2301      	movs	r3, #1
 8001066:	4093      	lsls	r3, r2
 8001068:	9302      	str	r3, [sp, #8]
	seq->resolution = spec->resolution;
 800106a:	7ba3      	ldrb	r3, [r4, #14]
 800106c:	f88d 3014 	strb.w	r3, [sp, #20]
	seq->oversampling = spec->oversampling;
 8001070:	7be3      	ldrb	r3, [r4, #15]
 8001072:	f88d 3015 	strb.w	r3, [sp, #21]
			err = adc_read(adc_channels[i].dev, &sequence);				// faz leitura de ADC
 8001076:	6820      	ldr	r0, [r4, #0]
	return api->read(dev, sequence);
 8001078:	6883      	ldr	r3, [r0, #8]
 800107a:	a901      	add	r1, sp, #4
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4798      	blx	r3
			if (err < 0) {
 8001080:	1e01      	subs	r1, r0, #0
 8001082:	da12      	bge.n	80010aa <temp_sensors+0xd2>
				printk("Could not read (%d)\n", err);					// print em caso de erro
 8001084:	4829      	ldr	r0, [pc, #164]	; (800112c <temp_sensors+0x154>)
 8001086:	f00a f890 	bl	800b1aa <printk>
				smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Alarms]);	// seleciona SMT state para apresentação de falha	
 800108a:	4929      	ldr	r1, [pc, #164]	; (8001130 <temp_sensors+0x158>)
					smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Temp]);		
 800108c:	4829      	ldr	r0, [pc, #164]	; (8001134 <temp_sensors+0x15c>)
 800108e:	f004 fa91 	bl	80055b4 <smf_set_state>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {	// for faz leitura de todos os ADC identificados para o projeto
 8001092:	3d01      	subs	r5, #1
 8001094:	f104 0410 	add.w	r4, r4, #16
 8001098:	d1e1      	bne.n	800105e <temp_sensors+0x86>
		printf("\n \n");
 800109a:	4827      	ldr	r0, [pc, #156]	; (8001138 <temp_sensors+0x160>)
 800109c:	f009 f922 	bl	800a2e4 <iprintf>
		k_msleep(5000);
 80010a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80010a4:	f00a f837 	bl	800b116 <k_msleep.isra.0>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {	// for faz leitura de todos os ADC identificados para o projeto
 80010a8:	e7d7      	b.n	800105a <temp_sensors+0x82>
					aux = (aux_A*buf) + aux_B;			// equação de reta do sensor TMP36 para conversão de BITs em Temperatura 
 80010aa:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 80010ae:	f7ff fa19 	bl	80004e4 <__aeabi_i2d>
 80010b2:	4652      	mov	r2, sl
 80010b4:	465b      	mov	r3, fp
 80010b6:	f7ff fa7f 	bl	80005b8 <__aeabi_dmul>
 80010ba:	4642      	mov	r2, r8
 80010bc:	464b      	mov	r3, r9
 80010be:	f7ff f8c3 	bl	8000248 <__aeabi_dsub>
					printf("Temp: %2.1foC  ", aux);		// printk para controle
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
					aux = (aux_A*buf) + aux_B;			// equação de reta do sensor TMP36 para conversão de BITs em Temperatura 
 80010c6:	4606      	mov	r6, r0
					printf("Temp: %2.1foC  ", aux);		// printk para controle
 80010c8:	481c      	ldr	r0, [pc, #112]	; (800113c <temp_sensors+0x164>)
					aux = (aux_A*buf) + aux_B;			// equação de reta do sensor TMP36 para conversão de BITs em Temperatura 
 80010ca:	460f      	mov	r7, r1
					printf("Temp: %2.1foC  ", aux);		// printk para controle
 80010cc:	f009 f90a 	bl	800a2e4 <iprintf>
					if (adc_channels[i].channel_id==2) TempSensor_quente=aux;		// transfere valor para variavel sensor do bloco quente
 80010d0:	7923      	ldrb	r3, [r4, #4]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d107      	bne.n	80010e6 <temp_sensors+0x10e>
 80010d6:	4630      	mov	r0, r6
 80010d8:	4639      	mov	r1, r7
 80010da:	f7ff fc7f 	bl	80009dc <__aeabi_d2f>
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <temp_sensors+0x168>)
					if (adc_channels[i].channel_id==7) TempSensor_frio2=aux;		// transfere valor para variavel sensor do bloco frio 2
 80010e0:	6018      	str	r0, [r3, #0]
					smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Temp]);		
 80010e2:	4918      	ldr	r1, [pc, #96]	; (8001144 <temp_sensors+0x16c>)
 80010e4:	e7d2      	b.n	800108c <temp_sensors+0xb4>
					if (adc_channels[i].channel_id==6) TempSensor_frio1=aux;		// transfere valor para variavel sensor do bloco frio 1
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d105      	bne.n	80010f6 <temp_sensors+0x11e>
 80010ea:	4630      	mov	r0, r6
 80010ec:	4639      	mov	r1, r7
 80010ee:	f7ff fc75 	bl	80009dc <__aeabi_d2f>
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <temp_sensors+0x170>)
 80010f4:	e7f4      	b.n	80010e0 <temp_sensors+0x108>
					if (adc_channels[i].channel_id==7) TempSensor_frio2=aux;		// transfere valor para variavel sensor do bloco frio 2
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	d1f3      	bne.n	80010e2 <temp_sensors+0x10a>
 80010fa:	4630      	mov	r0, r6
 80010fc:	4639      	mov	r1, r7
 80010fe:	f7ff fc6d 	bl	80009dc <__aeabi_d2f>
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <temp_sensors+0x174>)
 8001104:	e7ec      	b.n	80010e0 <temp_sensors+0x108>
 8001106:	bf00      	nop
 8001108:	4a5294a5 	.word	0x4a5294a5
 800110c:	3fb4a529 	.word	0x3fb4a529
 8001110:	94a5294a 	.word	0x94a5294a
 8001114:	40490a52 	.word	0x40490a52
 8001118:	0800d76d 	.word	0x0800d76d
 800111c:	0800d30e 	.word	0x0800d30e
 8001120:	0800d791 	.word	0x0800d791
 8001124:	0800d7b2 	.word	0x0800d7b2
 8001128:	0800d308 	.word	0x0800d308
 800112c:	0800d7d4 	.word	0x0800d7d4
 8001130:	0800d368 	.word	0x0800d368
 8001134:	200009fc 	.word	0x200009fc
 8001138:	0800d7f9 	.word	0x0800d7f9
 800113c:	0800d7e9 	.word	0x0800d7e9
 8001140:	200009f0 	.word	0x200009f0
 8001144:	0800d398 	.word	0x0800d398
 8001148:	200009f8 	.word	0x200009f8
 800114c:	200009f4 	.word	0x200009f4

08001150 <_dtoa_r>:
 8001150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001154:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8001156:	b097      	sub	sp, #92	; 0x5c
 8001158:	4614      	mov	r4, r2
 800115a:	461d      	mov	r5, r3
 800115c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001160:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8001162:	4683      	mov	fp, r0
 8001164:	b97f      	cbnz	r7, 8001186 <_dtoa_r+0x36>
 8001166:	2010      	movs	r0, #16
 8001168:	f008 fb80 	bl	800986c <malloc>
 800116c:	4602      	mov	r2, r0
 800116e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
 8001172:	b920      	cbnz	r0, 800117e <_dtoa_r+0x2e>
 8001174:	4ba2      	ldr	r3, [pc, #648]	; (8001400 <_dtoa_r+0x2b0>)
 8001176:	21ea      	movs	r1, #234	; 0xea
 8001178:	48a2      	ldr	r0, [pc, #648]	; (8001404 <_dtoa_r+0x2b4>)
 800117a:	f009 ff39 	bl	800aff0 <__assert_func>
 800117e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8001182:	6007      	str	r7, [r0, #0]
 8001184:	60c7      	str	r7, [r0, #12]
 8001186:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800118a:	6819      	ldr	r1, [r3, #0]
 800118c:	b159      	cbz	r1, 80011a6 <_dtoa_r+0x56>
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	604a      	str	r2, [r1, #4]
 8001192:	2301      	movs	r3, #1
 8001194:	4093      	lsls	r3, r2
 8001196:	608b      	str	r3, [r1, #8]
 8001198:	4658      	mov	r0, fp
 800119a:	f009 fb43 	bl	800a824 <_Bfree>
 800119e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	1e2b      	subs	r3, r5, #0
 80011a8:	bfb9      	ittee	lt
 80011aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80011ae:	9305      	strlt	r3, [sp, #20]
 80011b0:	2300      	movge	r3, #0
 80011b2:	6033      	strge	r3, [r6, #0]
 80011b4:	9f05      	ldr	r7, [sp, #20]
 80011b6:	4b94      	ldr	r3, [pc, #592]	; (8001408 <_dtoa_r+0x2b8>)
 80011b8:	bfbc      	itt	lt
 80011ba:	2201      	movlt	r2, #1
 80011bc:	6032      	strlt	r2, [r6, #0]
 80011be:	43bb      	bics	r3, r7
 80011c0:	d119      	bne.n	80011f6 <_dtoa_r+0xa6>
 80011c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80011c4:	f242 730f 	movw	r3, #9999	; 0x270f
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80011ce:	4323      	orrs	r3, r4
 80011d0:	f000 85e2 	beq.w	8001d98 <_dtoa_r+0xc48>
 80011d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80011d6:	b953      	cbnz	r3, 80011ee <_dtoa_r+0x9e>
 80011d8:	4b8c      	ldr	r3, [pc, #560]	; (800140c <_dtoa_r+0x2bc>)
 80011da:	e021      	b.n	8001220 <_dtoa_r+0xd0>
 80011dc:	4b8c      	ldr	r3, [pc, #560]	; (8001410 <_dtoa_r+0x2c0>)
 80011de:	9308      	str	r3, [sp, #32]
 80011e0:	3308      	adds	r3, #8
 80011e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	9808      	ldr	r0, [sp, #32]
 80011e8:	b017      	add	sp, #92	; 0x5c
 80011ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011ee:	4b87      	ldr	r3, [pc, #540]	; (800140c <_dtoa_r+0x2bc>)
 80011f0:	9308      	str	r3, [sp, #32]
 80011f2:	3303      	adds	r3, #3
 80011f4:	e7f5      	b.n	80011e2 <_dtoa_r+0x92>
 80011f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80011fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80011fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001202:	2200      	movs	r2, #0
 8001204:	2300      	movs	r3, #0
 8001206:	f7ff fd1f 	bl	8000c48 <__aeabi_dcmpeq>
 800120a:	4680      	mov	r8, r0
 800120c:	b150      	cbz	r0, 8001224 <_dtoa_r+0xd4>
 800120e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001210:	2301      	movs	r3, #1
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001216:	b113      	cbz	r3, 800121e <_dtoa_r+0xce>
 8001218:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800121a:	4b7e      	ldr	r3, [pc, #504]	; (8001414 <_dtoa_r+0x2c4>)
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b7e      	ldr	r3, [pc, #504]	; (8001418 <_dtoa_r+0x2c8>)
 8001220:	9308      	str	r3, [sp, #32]
 8001222:	e7e0      	b.n	80011e6 <_dtoa_r+0x96>
 8001224:	ab14      	add	r3, sp, #80	; 0x50
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	ab15      	add	r3, sp, #84	; 0x54
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	4658      	mov	r0, fp
 800122e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001232:	f009 fd77 	bl	800ad24 <__d2b>
 8001236:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800123a:	9003      	str	r0, [sp, #12]
 800123c:	2e00      	cmp	r6, #0
 800123e:	d07a      	beq.n	8001336 <_dtoa_r+0x1e6>
 8001240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001242:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8001246:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800124a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800124e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8001252:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001256:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800125a:	4619      	mov	r1, r3
 800125c:	2200      	movs	r2, #0
 800125e:	4b6f      	ldr	r3, [pc, #444]	; (800141c <_dtoa_r+0x2cc>)
 8001260:	f7fe fff2 	bl	8000248 <__aeabi_dsub>
 8001264:	a360      	add	r3, pc, #384	; (adr r3, 80013e8 <_dtoa_r+0x298>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff f9a5 	bl	80005b8 <__aeabi_dmul>
 800126e:	a360      	add	r3, pc, #384	; (adr r3, 80013f0 <_dtoa_r+0x2a0>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7fe ffea 	bl	800024c <__adddf3>
 8001278:	4604      	mov	r4, r0
 800127a:	4630      	mov	r0, r6
 800127c:	460d      	mov	r5, r1
 800127e:	f7ff f931 	bl	80004e4 <__aeabi_i2d>
 8001282:	a35d      	add	r3, pc, #372	; (adr r3, 80013f8 <_dtoa_r+0x2a8>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f996 	bl	80005b8 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4620      	mov	r0, r4
 8001292:	4629      	mov	r1, r5
 8001294:	f7fe ffda 	bl	800024c <__adddf3>
 8001298:	4604      	mov	r4, r0
 800129a:	460d      	mov	r5, r1
 800129c:	f7ff fd1c 	bl	8000cd8 <__aeabi_d2iz>
 80012a0:	2200      	movs	r2, #0
 80012a2:	4607      	mov	r7, r0
 80012a4:	2300      	movs	r3, #0
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff fcd7 	bl	8000c5c <__aeabi_dcmplt>
 80012ae:	b140      	cbz	r0, 80012c2 <_dtoa_r+0x172>
 80012b0:	4638      	mov	r0, r7
 80012b2:	f7ff f917 	bl	80004e4 <__aeabi_i2d>
 80012b6:	4622      	mov	r2, r4
 80012b8:	462b      	mov	r3, r5
 80012ba:	f7ff fcc5 	bl	8000c48 <__aeabi_dcmpeq>
 80012be:	b900      	cbnz	r0, 80012c2 <_dtoa_r+0x172>
 80012c0:	3f01      	subs	r7, #1
 80012c2:	2f16      	cmp	r7, #22
 80012c4:	d854      	bhi.n	8001370 <_dtoa_r+0x220>
 80012c6:	4b56      	ldr	r3, [pc, #344]	; (8001420 <_dtoa_r+0x2d0>)
 80012c8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80012d4:	f7ff fcc2 	bl	8000c5c <__aeabi_dcmplt>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d04b      	beq.n	8001374 <_dtoa_r+0x224>
 80012dc:	3f01      	subs	r7, #1
 80012de:	2300      	movs	r3, #0
 80012e0:	9312      	str	r3, [sp, #72]	; 0x48
 80012e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80012e4:	1b9b      	subs	r3, r3, r6
 80012e6:	1e5a      	subs	r2, r3, #1
 80012e8:	bf45      	ittet	mi
 80012ea:	f1c3 0301 	rsbmi	r3, r3, #1
 80012ee:	9306      	strmi	r3, [sp, #24]
 80012f0:	2300      	movpl	r3, #0
 80012f2:	2300      	movmi	r3, #0
 80012f4:	920a      	str	r2, [sp, #40]	; 0x28
 80012f6:	bf54      	ite	pl
 80012f8:	9306      	strpl	r3, [sp, #24]
 80012fa:	930a      	strmi	r3, [sp, #40]	; 0x28
 80012fc:	2f00      	cmp	r7, #0
 80012fe:	db3b      	blt.n	8001378 <_dtoa_r+0x228>
 8001300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001302:	970f      	str	r7, [sp, #60]	; 0x3c
 8001304:	443b      	add	r3, r7
 8001306:	930a      	str	r3, [sp, #40]	; 0x28
 8001308:	2300      	movs	r3, #0
 800130a:	930b      	str	r3, [sp, #44]	; 0x2c
 800130c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800130e:	2b09      	cmp	r3, #9
 8001310:	f200 808a 	bhi.w	8001428 <_dtoa_r+0x2d8>
 8001314:	2b05      	cmp	r3, #5
 8001316:	bfc4      	itt	gt
 8001318:	3b04      	subgt	r3, #4
 800131a:	9320      	strgt	r3, [sp, #128]	; 0x80
 800131c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800131e:	f1a3 0302 	sub.w	r3, r3, #2
 8001322:	bfcc      	ite	gt
 8001324:	2400      	movgt	r4, #0
 8001326:	2401      	movle	r4, #1
 8001328:	2b03      	cmp	r3, #3
 800132a:	f200 8088 	bhi.w	800143e <_dtoa_r+0x2ee>
 800132e:	e8df f003 	tbb	[pc, r3]
 8001332:	382b      	.short	0x382b
 8001334:	5736      	.short	0x5736
 8001336:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 800133a:	441e      	add	r6, r3
 800133c:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8001340:	2b20      	cmp	r3, #32
 8001342:	bfc1      	itttt	gt
 8001344:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8001348:	409f      	lslgt	r7, r3
 800134a:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
 800134e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8001352:	bfd6      	itet	le
 8001354:	f1c3 0320 	rsble	r3, r3, #32
 8001358:	ea47 0003 	orrgt.w	r0, r7, r3
 800135c:	fa04 f003 	lslle.w	r0, r4, r3
 8001360:	f7ff f8b0 	bl	80004c4 <__aeabi_ui2d>
 8001364:	2201      	movs	r2, #1
 8001366:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800136a:	3e01      	subs	r6, #1
 800136c:	9213      	str	r2, [sp, #76]	; 0x4c
 800136e:	e774      	b.n	800125a <_dtoa_r+0x10a>
 8001370:	2301      	movs	r3, #1
 8001372:	e7b5      	b.n	80012e0 <_dtoa_r+0x190>
 8001374:	9012      	str	r0, [sp, #72]	; 0x48
 8001376:	e7b4      	b.n	80012e2 <_dtoa_r+0x192>
 8001378:	9b06      	ldr	r3, [sp, #24]
 800137a:	1bdb      	subs	r3, r3, r7
 800137c:	9306      	str	r3, [sp, #24]
 800137e:	427b      	negs	r3, r7
 8001380:	930b      	str	r3, [sp, #44]	; 0x2c
 8001382:	2300      	movs	r3, #0
 8001384:	930f      	str	r3, [sp, #60]	; 0x3c
 8001386:	e7c1      	b.n	800130c <_dtoa_r+0x1bc>
 8001388:	2300      	movs	r3, #0
 800138a:	930e      	str	r3, [sp, #56]	; 0x38
 800138c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800138e:	2b00      	cmp	r3, #0
 8001390:	dc58      	bgt.n	8001444 <_dtoa_r+0x2f4>
 8001392:	2301      	movs	r3, #1
 8001394:	9309      	str	r3, [sp, #36]	; 0x24
 8001396:	4699      	mov	r9, r3
 8001398:	461a      	mov	r2, r3
 800139a:	9221      	str	r2, [sp, #132]	; 0x84
 800139c:	e00c      	b.n	80013b8 <_dtoa_r+0x268>
 800139e:	2301      	movs	r3, #1
 80013a0:	e7f3      	b.n	800138a <_dtoa_r+0x23a>
 80013a2:	2300      	movs	r3, #0
 80013a4:	930e      	str	r3, [sp, #56]	; 0x38
 80013a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	f103 0901 	add.w	r9, r3, #1
 80013ae:	9309      	str	r3, [sp, #36]	; 0x24
 80013b0:	464b      	mov	r3, r9
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	bfb8      	it	lt
 80013b6:	2301      	movlt	r3, #1
 80013b8:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 80013bc:	2100      	movs	r1, #0
 80013be:	2204      	movs	r2, #4
 80013c0:	f102 0514 	add.w	r5, r2, #20
 80013c4:	429d      	cmp	r5, r3
 80013c6:	d941      	bls.n	800144c <_dtoa_r+0x2fc>
 80013c8:	6041      	str	r1, [r0, #4]
 80013ca:	4658      	mov	r0, fp
 80013cc:	f009 f9ea 	bl	800a7a4 <_Balloc>
 80013d0:	9008      	str	r0, [sp, #32]
 80013d2:	2800      	cmp	r0, #0
 80013d4:	d13d      	bne.n	8001452 <_dtoa_r+0x302>
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <_dtoa_r+0x2d4>)
 80013d8:	4602      	mov	r2, r0
 80013da:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013de:	e6cb      	b.n	8001178 <_dtoa_r+0x28>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e7df      	b.n	80013a4 <_dtoa_r+0x254>
 80013e4:	f3af 8000 	nop.w
 80013e8:	636f4361 	.word	0x636f4361
 80013ec:	3fd287a7 	.word	0x3fd287a7
 80013f0:	8b60c8b3 	.word	0x8b60c8b3
 80013f4:	3fc68a28 	.word	0x3fc68a28
 80013f8:	509f79fb 	.word	0x509f79fb
 80013fc:	3fd34413 	.word	0x3fd34413
 8001400:	0801376b 	.word	0x0801376b
 8001404:	08013782 	.word	0x08013782
 8001408:	7ff00000 	.word	0x7ff00000
 800140c:	08013767 	.word	0x08013767
 8001410:	0801375e 	.word	0x0801375e
 8001414:	0801352f 	.word	0x0801352f
 8001418:	0801352e 	.word	0x0801352e
 800141c:	3ff80000 	.word	0x3ff80000
 8001420:	0800d240 	.word	0x0800d240
 8001424:	080137f6 	.word	0x080137f6
 8001428:	2401      	movs	r4, #1
 800142a:	2300      	movs	r3, #0
 800142c:	9320      	str	r3, [sp, #128]	; 0x80
 800142e:	940e      	str	r4, [sp, #56]	; 0x38
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	9309      	str	r3, [sp, #36]	; 0x24
 8001436:	4699      	mov	r9, r3
 8001438:	2200      	movs	r2, #0
 800143a:	2312      	movs	r3, #18
 800143c:	e7ad      	b.n	800139a <_dtoa_r+0x24a>
 800143e:	2301      	movs	r3, #1
 8001440:	930e      	str	r3, [sp, #56]	; 0x38
 8001442:	e7f5      	b.n	8001430 <_dtoa_r+0x2e0>
 8001444:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001446:	9309      	str	r3, [sp, #36]	; 0x24
 8001448:	4699      	mov	r9, r3
 800144a:	e7b5      	b.n	80013b8 <_dtoa_r+0x268>
 800144c:	3101      	adds	r1, #1
 800144e:	0052      	lsls	r2, r2, #1
 8001450:	e7b6      	b.n	80013c0 <_dtoa_r+0x270>
 8001452:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8001456:	9a08      	ldr	r2, [sp, #32]
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	f1b9 0f0e 	cmp.w	r9, #14
 800145e:	d86f      	bhi.n	8001540 <_dtoa_r+0x3f0>
 8001460:	2c00      	cmp	r4, #0
 8001462:	d06d      	beq.n	8001540 <_dtoa_r+0x3f0>
 8001464:	2f00      	cmp	r7, #0
 8001466:	dd36      	ble.n	80014d6 <_dtoa_r+0x386>
 8001468:	4ba1      	ldr	r3, [pc, #644]	; (80016f0 <_dtoa_r+0x5a0>)
 800146a:	f007 020f 	and.w	r2, r7, #15
 800146e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001472:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001476:	05f8      	lsls	r0, r7, #23
 8001478:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800147c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8001480:	d517      	bpl.n	80014b2 <_dtoa_r+0x362>
 8001482:	4b9c      	ldr	r3, [pc, #624]	; (80016f4 <_dtoa_r+0x5a4>)
 8001484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001488:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800148c:	f7ff f9be 	bl	800080c <__aeabi_ddiv>
 8001490:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001494:	f004 040f 	and.w	r4, r4, #15
 8001498:	f04f 0803 	mov.w	r8, #3
 800149c:	4d95      	ldr	r5, [pc, #596]	; (80016f4 <_dtoa_r+0x5a4>)
 800149e:	b95c      	cbnz	r4, 80014b8 <_dtoa_r+0x368>
 80014a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80014a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80014a8:	f7ff f9b0 	bl	800080c <__aeabi_ddiv>
 80014ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014b0:	e02b      	b.n	800150a <_dtoa_r+0x3ba>
 80014b2:	f04f 0802 	mov.w	r8, #2
 80014b6:	e7f1      	b.n	800149c <_dtoa_r+0x34c>
 80014b8:	07e1      	lsls	r1, r4, #31
 80014ba:	d509      	bpl.n	80014d0 <_dtoa_r+0x380>
 80014bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80014c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80014c4:	f7ff f878 	bl	80005b8 <__aeabi_dmul>
 80014c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80014cc:	f108 0801 	add.w	r8, r8, #1
 80014d0:	1064      	asrs	r4, r4, #1
 80014d2:	3508      	adds	r5, #8
 80014d4:	e7e3      	b.n	800149e <_dtoa_r+0x34e>
 80014d6:	f000 8107 	beq.w	80016e8 <_dtoa_r+0x598>
 80014da:	427c      	negs	r4, r7
 80014dc:	4b84      	ldr	r3, [pc, #528]	; (80016f0 <_dtoa_r+0x5a0>)
 80014de:	4d85      	ldr	r5, [pc, #532]	; (80016f4 <_dtoa_r+0x5a4>)
 80014e0:	f004 020f 	and.w	r2, r4, #15
 80014e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80014f0:	f7ff f862 	bl	80005b8 <__aeabi_dmul>
 80014f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014f8:	1124      	asrs	r4, r4, #4
 80014fa:	2300      	movs	r3, #0
 80014fc:	f04f 0802 	mov.w	r8, #2
 8001500:	2c00      	cmp	r4, #0
 8001502:	f040 80e5 	bne.w	80016d0 <_dtoa_r+0x580>
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1d0      	bne.n	80014ac <_dtoa_r+0x35c>
 800150a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800150c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 814c 	beq.w	80017ae <_dtoa_r+0x65e>
 8001516:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <_dtoa_r+0x5a8>)
 8001518:	2200      	movs	r2, #0
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7ff fb9d 	bl	8000c5c <__aeabi_dcmplt>
 8001522:	2800      	cmp	r0, #0
 8001524:	f000 8143 	beq.w	80017ae <_dtoa_r+0x65e>
 8001528:	f1b9 0f00 	cmp.w	r9, #0
 800152c:	f000 813f 	beq.w	80017ae <_dtoa_r+0x65e>
 8001530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001532:	2b00      	cmp	r3, #0
 8001534:	f300 80e4 	bgt.w	8001700 <_dtoa_r+0x5b0>
 8001538:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800153c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001542:	2b00      	cmp	r3, #0
 8001544:	db02      	blt.n	800154c <_dtoa_r+0x3fc>
 8001546:	2f0e      	cmp	r7, #14
 8001548:	f340 8242 	ble.w	80019d0 <_dtoa_r+0x880>
 800154c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800154e:	2a00      	cmp	r2, #0
 8001550:	f040 8267 	bne.w	8001a22 <_dtoa_r+0x8d2>
 8001554:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8001556:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800155a:	2500      	movs	r5, #0
 800155c:	f1b8 0f00 	cmp.w	r8, #0
 8001560:	d00d      	beq.n	800157e <_dtoa_r+0x42e>
 8001562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001564:	2b00      	cmp	r3, #0
 8001566:	dd0a      	ble.n	800157e <_dtoa_r+0x42e>
 8001568:	4543      	cmp	r3, r8
 800156a:	9a06      	ldr	r2, [sp, #24]
 800156c:	bfa8      	it	ge
 800156e:	4643      	movge	r3, r8
 8001570:	1ad2      	subs	r2, r2, r3
 8001572:	9206      	str	r2, [sp, #24]
 8001574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001576:	eba8 0803 	sub.w	r8, r8, r3
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	930a      	str	r3, [sp, #40]	; 0x28
 800157e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001580:	b30b      	cbz	r3, 80015c6 <_dtoa_r+0x476>
 8001582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 82a6 	beq.w	8001ad6 <_dtoa_r+0x986>
 800158a:	2c00      	cmp	r4, #0
 800158c:	f000 82a1 	beq.w	8001ad2 <_dtoa_r+0x982>
 8001590:	4629      	mov	r1, r5
 8001592:	4622      	mov	r2, r4
 8001594:	4658      	mov	r0, fp
 8001596:	f009 fa6d 	bl	800aa74 <__pow5mult>
 800159a:	9a03      	ldr	r2, [sp, #12]
 800159c:	4601      	mov	r1, r0
 800159e:	4605      	mov	r5, r0
 80015a0:	4658      	mov	r0, fp
 80015a2:	f009 f9bd 	bl	800a920 <__multiply>
 80015a6:	9903      	ldr	r1, [sp, #12]
 80015a8:	4606      	mov	r6, r0
 80015aa:	4658      	mov	r0, fp
 80015ac:	f009 f93a 	bl	800a824 <_Bfree>
 80015b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015b2:	1b1b      	subs	r3, r3, r4
 80015b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80015b6:	f000 8291 	beq.w	8001adc <_dtoa_r+0x98c>
 80015ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80015bc:	4631      	mov	r1, r6
 80015be:	4658      	mov	r0, fp
 80015c0:	f009 fa58 	bl	800aa74 <__pow5mult>
 80015c4:	9003      	str	r0, [sp, #12]
 80015c6:	2101      	movs	r1, #1
 80015c8:	4658      	mov	r0, fp
 80015ca:	f009 f993 	bl	800a8f4 <__i2b>
 80015ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80015d0:	4604      	mov	r4, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8284 	beq.w	8001ae0 <_dtoa_r+0x990>
 80015d8:	461a      	mov	r2, r3
 80015da:	4601      	mov	r1, r0
 80015dc:	4658      	mov	r0, fp
 80015de:	f009 fa49 	bl	800aa74 <__pow5mult>
 80015e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	4604      	mov	r4, r0
 80015e8:	dc03      	bgt.n	80015f2 <_dtoa_r+0x4a2>
 80015ea:	9b04      	ldr	r3, [sp, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 827c 	beq.w	8001aea <_dtoa_r+0x99a>
 80015f2:	2600      	movs	r6, #0
 80015f4:	6923      	ldr	r3, [r4, #16]
 80015f6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80015fa:	6918      	ldr	r0, [r3, #16]
 80015fc:	f00b f9ab 	bl	800c956 <__hi0bits>
 8001600:	960f      	str	r6, [sp, #60]	; 0x3c
 8001602:	f1c0 0020 	rsb	r0, r0, #32
 8001606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001608:	4418      	add	r0, r3
 800160a:	f010 001f 	ands.w	r0, r0, #31
 800160e:	f000 8291 	beq.w	8001b34 <_dtoa_r+0x9e4>
 8001612:	f1c0 0320 	rsb	r3, r0, #32
 8001616:	2b04      	cmp	r3, #4
 8001618:	f340 8281 	ble.w	8001b1e <_dtoa_r+0x9ce>
 800161c:	9b06      	ldr	r3, [sp, #24]
 800161e:	f1c0 001c 	rsb	r0, r0, #28
 8001622:	4403      	add	r3, r0
 8001624:	9306      	str	r3, [sp, #24]
 8001626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001628:	4403      	add	r3, r0
 800162a:	4480      	add	r8, r0
 800162c:	930a      	str	r3, [sp, #40]	; 0x28
 800162e:	9b06      	ldr	r3, [sp, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	dd05      	ble.n	8001640 <_dtoa_r+0x4f0>
 8001634:	9903      	ldr	r1, [sp, #12]
 8001636:	461a      	mov	r2, r3
 8001638:	4658      	mov	r0, fp
 800163a:	f009 fa75 	bl	800ab28 <__lshift>
 800163e:	9003      	str	r0, [sp, #12]
 8001640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001642:	2b00      	cmp	r3, #0
 8001644:	dd05      	ble.n	8001652 <_dtoa_r+0x502>
 8001646:	4621      	mov	r1, r4
 8001648:	461a      	mov	r2, r3
 800164a:	4658      	mov	r0, fp
 800164c:	f009 fa6c 	bl	800ab28 <__lshift>
 8001650:	4604      	mov	r4, r0
 8001652:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 8276 	beq.w	8001b46 <_dtoa_r+0x9f6>
 800165a:	9803      	ldr	r0, [sp, #12]
 800165c:	4621      	mov	r1, r4
 800165e:	f00b f9c9 	bl	800c9f4 <__mcmp>
 8001662:	2800      	cmp	r0, #0
 8001664:	f280 826f 	bge.w	8001b46 <_dtoa_r+0x9f6>
 8001668:	2300      	movs	r3, #0
 800166a:	9903      	ldr	r1, [sp, #12]
 800166c:	220a      	movs	r2, #10
 800166e:	4658      	mov	r0, fp
 8001670:	f009 f8fa 	bl	800a868 <__multadd>
 8001674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001676:	9003      	str	r0, [sp, #12]
 8001678:	1e7e      	subs	r6, r7, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 825c 	beq.w	8001b38 <_dtoa_r+0x9e8>
 8001680:	2300      	movs	r3, #0
 8001682:	4629      	mov	r1, r5
 8001684:	220a      	movs	r2, #10
 8001686:	4658      	mov	r0, fp
 8001688:	f009 f8ee 	bl	800a868 <__multadd>
 800168c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800168e:	2b00      	cmp	r3, #0
 8001690:	4605      	mov	r5, r0
 8001692:	dc03      	bgt.n	800169c <_dtoa_r+0x54c>
 8001694:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001696:	2b02      	cmp	r3, #2
 8001698:	f300 825e 	bgt.w	8001b58 <_dtoa_r+0xa08>
 800169c:	f1b8 0f00 	cmp.w	r8, #0
 80016a0:	dd05      	ble.n	80016ae <_dtoa_r+0x55e>
 80016a2:	4629      	mov	r1, r5
 80016a4:	4642      	mov	r2, r8
 80016a6:	4658      	mov	r0, fp
 80016a8:	f009 fa3e 	bl	800ab28 <__lshift>
 80016ac:	4605      	mov	r5, r0
 80016ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 82d0 	beq.w	8001c56 <_dtoa_r+0xb06>
 80016b6:	6869      	ldr	r1, [r5, #4]
 80016b8:	4658      	mov	r0, fp
 80016ba:	f009 f873 	bl	800a7a4 <_Balloc>
 80016be:	4607      	mov	r7, r0
 80016c0:	2800      	cmp	r0, #0
 80016c2:	f040 827f 	bne.w	8001bc4 <_dtoa_r+0xa74>
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <_dtoa_r+0x5ac>)
 80016c8:	4602      	mov	r2, r0
 80016ca:	f240 21ea 	movw	r1, #746	; 0x2ea
 80016ce:	e553      	b.n	8001178 <_dtoa_r+0x28>
 80016d0:	07e2      	lsls	r2, r4, #31
 80016d2:	d506      	bpl.n	80016e2 <_dtoa_r+0x592>
 80016d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80016d8:	f7fe ff6e 	bl	80005b8 <__aeabi_dmul>
 80016dc:	f108 0801 	add.w	r8, r8, #1
 80016e0:	2301      	movs	r3, #1
 80016e2:	1064      	asrs	r4, r4, #1
 80016e4:	3508      	adds	r5, #8
 80016e6:	e70b      	b.n	8001500 <_dtoa_r+0x3b0>
 80016e8:	f04f 0802 	mov.w	r8, #2
 80016ec:	e70d      	b.n	800150a <_dtoa_r+0x3ba>
 80016ee:	bf00      	nop
 80016f0:	0800d240 	.word	0x0800d240
 80016f4:	0800d218 	.word	0x0800d218
 80016f8:	3ff00000 	.word	0x3ff00000
 80016fc:	080137f6 	.word	0x080137f6
 8001700:	4620      	mov	r0, r4
 8001702:	4bad      	ldr	r3, [pc, #692]	; (80019b8 <_dtoa_r+0x868>)
 8001704:	2200      	movs	r2, #0
 8001706:	4629      	mov	r1, r5
 8001708:	f7fe ff56 	bl	80005b8 <__aeabi_dmul>
 800170c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001710:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001712:	1e7e      	subs	r6, r7, #1
 8001714:	f108 0801 	add.w	r8, r8, #1
 8001718:	4640      	mov	r0, r8
 800171a:	f7fe fee3 	bl	80004e4 <__aeabi_i2d>
 800171e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001722:	f7fe ff49 	bl	80005b8 <__aeabi_dmul>
 8001726:	4ba5      	ldr	r3, [pc, #660]	; (80019bc <_dtoa_r+0x86c>)
 8001728:	2200      	movs	r2, #0
 800172a:	f7fe fd8f 	bl	800024c <__adddf3>
 800172e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8001732:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001736:	9311      	str	r3, [sp, #68]	; 0x44
 8001738:	2c00      	cmp	r4, #0
 800173a:	d13b      	bne.n	80017b4 <_dtoa_r+0x664>
 800173c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001740:	4b9f      	ldr	r3, [pc, #636]	; (80019c0 <_dtoa_r+0x870>)
 8001742:	2200      	movs	r2, #0
 8001744:	f7fe fd80 	bl	8000248 <__aeabi_dsub>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001750:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001754:	f7ff faa0 	bl	8000c98 <__aeabi_dcmpgt>
 8001758:	2800      	cmp	r0, #0
 800175a:	f040 8157 	bne.w	8001a0c <_dtoa_r+0x8bc>
 800175e:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 8001762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800176a:	f7ff fa77 	bl	8000c5c <__aeabi_dcmplt>
 800176e:	2800      	cmp	r0, #0
 8001770:	f43f aee2 	beq.w	8001538 <_dtoa_r+0x3e8>
 8001774:	2400      	movs	r4, #0
 8001776:	4625      	mov	r5, r4
 8001778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800177a:	f8dd a020 	ldr.w	sl, [sp, #32]
 800177e:	43de      	mvns	r6, r3
 8001780:	f04f 0800 	mov.w	r8, #0
 8001784:	4621      	mov	r1, r4
 8001786:	4658      	mov	r0, fp
 8001788:	f009 f84c 	bl	800a824 <_Bfree>
 800178c:	2d00      	cmp	r5, #0
 800178e:	f000 80a9 	beq.w	80018e4 <_dtoa_r+0x794>
 8001792:	f1b8 0f00 	cmp.w	r8, #0
 8001796:	d005      	beq.n	80017a4 <_dtoa_r+0x654>
 8001798:	45a8      	cmp	r8, r5
 800179a:	d003      	beq.n	80017a4 <_dtoa_r+0x654>
 800179c:	4641      	mov	r1, r8
 800179e:	4658      	mov	r0, fp
 80017a0:	f009 f840 	bl	800a824 <_Bfree>
 80017a4:	4629      	mov	r1, r5
 80017a6:	4658      	mov	r0, fp
 80017a8:	f009 f83c 	bl	800a824 <_Bfree>
 80017ac:	e09a      	b.n	80018e4 <_dtoa_r+0x794>
 80017ae:	463e      	mov	r6, r7
 80017b0:	464c      	mov	r4, r9
 80017b2:	e7b1      	b.n	8001718 <_dtoa_r+0x5c8>
 80017b4:	4b83      	ldr	r3, [pc, #524]	; (80019c4 <_dtoa_r+0x874>)
 80017b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80017ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80017be:	9b08      	ldr	r3, [sp, #32]
 80017c0:	441c      	add	r4, r3
 80017c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d04a      	beq.n	800185e <_dtoa_r+0x70e>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	2000      	movs	r0, #0
 80017ce:	497e      	ldr	r1, [pc, #504]	; (80019c8 <_dtoa_r+0x878>)
 80017d0:	f7ff f81c 	bl	800080c <__aeabi_ddiv>
 80017d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80017d8:	f7fe fd36 	bl	8000248 <__aeabi_dsub>
 80017dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80017e0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80017e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80017e8:	f7ff fa76 	bl	8000cd8 <__aeabi_d2iz>
 80017ec:	4605      	mov	r5, r0
 80017ee:	f7fe fe79 	bl	80004e4 <__aeabi_i2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80017fa:	f7fe fd25 	bl	8000248 <__aeabi_dsub>
 80017fe:	3530      	adds	r5, #48	; 0x30
 8001800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	f80a 5b01 	strb.w	r5, [sl], #1
 800180c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001810:	f7ff fa42 	bl	8000c98 <__aeabi_dcmpgt>
 8001814:	2800      	cmp	r0, #0
 8001816:	d165      	bne.n	80018e4 <_dtoa_r+0x794>
 8001818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800181c:	496b      	ldr	r1, [pc, #428]	; (80019cc <_dtoa_r+0x87c>)
 800181e:	2000      	movs	r0, #0
 8001820:	f7fe fd12 	bl	8000248 <__aeabi_dsub>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800182c:	f7ff fa34 	bl	8000c98 <__aeabi_dcmpgt>
 8001830:	2800      	cmp	r0, #0
 8001832:	f040 810d 	bne.w	8001a50 <_dtoa_r+0x900>
 8001836:	45a2      	cmp	sl, r4
 8001838:	f000 80ea 	beq.w	8001a10 <_dtoa_r+0x8c0>
 800183c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001840:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <_dtoa_r+0x868>)
 8001842:	2200      	movs	r2, #0
 8001844:	f7fe feb8 	bl	80005b8 <__aeabi_dmul>
 8001848:	4b5b      	ldr	r3, [pc, #364]	; (80019b8 <_dtoa_r+0x868>)
 800184a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800184e:	2200      	movs	r2, #0
 8001850:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001854:	f7fe feb0 	bl	80005b8 <__aeabi_dmul>
 8001858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800185c:	e7c2      	b.n	80017e4 <_dtoa_r+0x694>
 800185e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001862:	f7fe fea9 	bl	80005b8 <__aeabi_dmul>
 8001866:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800186a:	f8dd a020 	ldr.w	sl, [sp, #32]
 800186e:	46a0      	mov	r8, r4
 8001870:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001874:	f7ff fa30 	bl	8000cd8 <__aeabi_d2iz>
 8001878:	4605      	mov	r5, r0
 800187a:	f7fe fe33 	bl	80004e4 <__aeabi_i2d>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001886:	f7fe fcdf 	bl	8000248 <__aeabi_dsub>
 800188a:	3530      	adds	r5, #48	; 0x30
 800188c:	f80a 5b01 	strb.w	r5, [sl], #1
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	45a2      	cmp	sl, r4
 8001896:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	d123      	bne.n	80018e8 <_dtoa_r+0x798>
 80018a0:	4b49      	ldr	r3, [pc, #292]	; (80019c8 <_dtoa_r+0x878>)
 80018a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80018a6:	f7fe fcd1 	bl	800024c <__adddf3>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80018b2:	f7ff f9f1 	bl	8000c98 <__aeabi_dcmpgt>
 80018b6:	2800      	cmp	r0, #0
 80018b8:	f040 80ca 	bne.w	8001a50 <_dtoa_r+0x900>
 80018bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80018c0:	4941      	ldr	r1, [pc, #260]	; (80019c8 <_dtoa_r+0x878>)
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7fe fcc0 	bl	8000248 <__aeabi_dsub>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80018d0:	f7ff f9c4 	bl	8000c5c <__aeabi_dcmplt>
 80018d4:	b170      	cbz	r0, 80018f4 <_dtoa_r+0x7a4>
 80018d6:	46c2      	mov	sl, r8
 80018d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80018dc:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 80018e0:	2b30      	cmp	r3, #48	; 0x30
 80018e2:	d0f8      	beq.n	80018d6 <_dtoa_r+0x786>
 80018e4:	4637      	mov	r7, r6
 80018e6:	e055      	b.n	8001994 <_dtoa_r+0x844>
 80018e8:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <_dtoa_r+0x868>)
 80018ea:	f7fe fe65 	bl	80005b8 <__aeabi_dmul>
 80018ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80018f2:	e7bd      	b.n	8001870 <_dtoa_r+0x720>
 80018f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80018f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80018fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f6ff ae28 	blt.w	8001554 <_dtoa_r+0x404>
 8001904:	2f0e      	cmp	r7, #14
 8001906:	f73f ae25 	bgt.w	8001554 <_dtoa_r+0x404>
 800190a:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <_dtoa_r+0x874>)
 800190c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8001910:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001914:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8001918:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800191a:	2b00      	cmp	r3, #0
 800191c:	da02      	bge.n	8001924 <_dtoa_r+0x7d4>
 800191e:	f1b9 0f00 	cmp.w	r9, #0
 8001922:	d064      	beq.n	80019ee <_dtoa_r+0x89e>
 8001924:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8001928:	f8dd a020 	ldr.w	sl, [sp, #32]
 800192c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe ff6a 	bl	800080c <__aeabi_ddiv>
 8001938:	f7ff f9ce 	bl	8000cd8 <__aeabi_d2iz>
 800193c:	4606      	mov	r6, r0
 800193e:	f7fe fdd1 	bl	80004e4 <__aeabi_i2d>
 8001942:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001946:	f7fe fe37 	bl	80005b8 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4620      	mov	r0, r4
 8001950:	4629      	mov	r1, r5
 8001952:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8001956:	f7fe fc77 	bl	8000248 <__aeabi_dsub>
 800195a:	f80a 4b01 	strb.w	r4, [sl], #1
 800195e:	9c08      	ldr	r4, [sp, #32]
 8001960:	ebaa 0404 	sub.w	r4, sl, r4
 8001964:	45a1      	cmp	r9, r4
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	f040 8082 	bne.w	8001a72 <_dtoa_r+0x922>
 800196e:	f7fe fc6d 	bl	800024c <__adddf3>
 8001972:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001976:	4604      	mov	r4, r0
 8001978:	460d      	mov	r5, r1
 800197a:	f7ff f98d 	bl	8000c98 <__aeabi_dcmpgt>
 800197e:	2800      	cmp	r0, #0
 8001980:	d165      	bne.n	8001a4e <_dtoa_r+0x8fe>
 8001982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001986:	4620      	mov	r0, r4
 8001988:	4629      	mov	r1, r5
 800198a:	f7ff f95d 	bl	8000c48 <__aeabi_dcmpeq>
 800198e:	b108      	cbz	r0, 8001994 <_dtoa_r+0x844>
 8001990:	07f3      	lsls	r3, r6, #31
 8001992:	d45c      	bmi.n	8001a4e <_dtoa_r+0x8fe>
 8001994:	9903      	ldr	r1, [sp, #12]
 8001996:	4658      	mov	r0, fp
 8001998:	f008 ff44 	bl	800a824 <_Bfree>
 800199c:	2300      	movs	r3, #0
 800199e:	f88a 3000 	strb.w	r3, [sl]
 80019a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80019a4:	3701      	adds	r7, #1
 80019a6:	601f      	str	r7, [r3, #0]
 80019a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f43f ac1b 	beq.w	80011e6 <_dtoa_r+0x96>
 80019b0:	f8c3 a000 	str.w	sl, [r3]
 80019b4:	e417      	b.n	80011e6 <_dtoa_r+0x96>
 80019b6:	bf00      	nop
 80019b8:	40240000 	.word	0x40240000
 80019bc:	401c0000 	.word	0x401c0000
 80019c0:	40140000 	.word	0x40140000
 80019c4:	0800d240 	.word	0x0800d240
 80019c8:	3fe00000 	.word	0x3fe00000
 80019cc:	3ff00000 	.word	0x3ff00000
 80019d0:	4ba2      	ldr	r3, [pc, #648]	; (8001c5c <_dtoa_r+0xb0c>)
 80019d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80019d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019da:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80019de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	da9f      	bge.n	8001924 <_dtoa_r+0x7d4>
 80019e4:	f1b9 0f00 	cmp.w	r9, #0
 80019e8:	dc9c      	bgt.n	8001924 <_dtoa_r+0x7d4>
 80019ea:	f47f aec3 	bne.w	8001774 <_dtoa_r+0x624>
 80019ee:	4b9c      	ldr	r3, [pc, #624]	; (8001c60 <_dtoa_r+0xb10>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80019f6:	f7fe fddf 	bl	80005b8 <__aeabi_dmul>
 80019fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80019fe:	f7ff f941 	bl	8000c84 <__aeabi_dcmpge>
 8001a02:	4604      	mov	r4, r0
 8001a04:	2800      	cmp	r0, #0
 8001a06:	f47f aeb5 	bne.w	8001774 <_dtoa_r+0x624>
 8001a0a:	463e      	mov	r6, r7
 8001a0c:	4625      	mov	r5, r4
 8001a0e:	e0b4      	b.n	8001b7a <_dtoa_r+0xa2a>
 8001a10:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8001a14:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001a18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db01      	blt.n	8001a22 <_dtoa_r+0x8d2>
 8001a1e:	2f0e      	cmp	r7, #14
 8001a20:	ddd6      	ble.n	80019d0 <_dtoa_r+0x880>
 8001a22:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001a24:	2a01      	cmp	r2, #1
 8001a26:	dc36      	bgt.n	8001a96 <_dtoa_r+0x946>
 8001a28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001a2a:	b382      	cbz	r2, 8001a8e <_dtoa_r+0x93e>
 8001a2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8001a30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8001a32:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001a36:	9a06      	ldr	r2, [sp, #24]
 8001a38:	441a      	add	r2, r3
 8001a3a:	9206      	str	r2, [sp, #24]
 8001a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a3e:	2101      	movs	r1, #1
 8001a40:	441a      	add	r2, r3
 8001a42:	4658      	mov	r0, fp
 8001a44:	920a      	str	r2, [sp, #40]	; 0x28
 8001a46:	f008 ff55 	bl	800a8f4 <__i2b>
 8001a4a:	4605      	mov	r5, r0
 8001a4c:	e586      	b.n	800155c <_dtoa_r+0x40c>
 8001a4e:	463e      	mov	r6, r7
 8001a50:	4653      	mov	r3, sl
 8001a52:	469a      	mov	sl, r3
 8001a54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001a58:	2a39      	cmp	r2, #57	; 0x39
 8001a5a:	d106      	bne.n	8001a6a <_dtoa_r+0x91a>
 8001a5c:	9a08      	ldr	r2, [sp, #32]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d1f7      	bne.n	8001a52 <_dtoa_r+0x902>
 8001a62:	9908      	ldr	r1, [sp, #32]
 8001a64:	2230      	movs	r2, #48	; 0x30
 8001a66:	3601      	adds	r6, #1
 8001a68:	700a      	strb	r2, [r1, #0]
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	3201      	adds	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e738      	b.n	80018e4 <_dtoa_r+0x794>
 8001a72:	4b7c      	ldr	r3, [pc, #496]	; (8001c64 <_dtoa_r+0xb14>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	f7fe fd9f 	bl	80005b8 <__aeabi_dmul>
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	4604      	mov	r4, r0
 8001a80:	460d      	mov	r5, r1
 8001a82:	f7ff f8e1 	bl	8000c48 <__aeabi_dcmpeq>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	f43f af50 	beq.w	800192c <_dtoa_r+0x7dc>
 8001a8c:	e782      	b.n	8001994 <_dtoa_r+0x844>
 8001a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001a90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8001a94:	e7cc      	b.n	8001a30 <_dtoa_r+0x8e0>
 8001a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a98:	f109 34ff 	add.w	r4, r9, #4294967295
 8001a9c:	42a3      	cmp	r3, r4
 8001a9e:	db08      	blt.n	8001ab2 <_dtoa_r+0x962>
 8001aa0:	f1b9 0f00 	cmp.w	r9, #0
 8001aa4:	eba3 0404 	sub.w	r4, r3, r4
 8001aa8:	db0e      	blt.n	8001ac8 <_dtoa_r+0x978>
 8001aaa:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001aae:	464b      	mov	r3, r9
 8001ab0:	e7c1      	b.n	8001a36 <_dtoa_r+0x8e6>
 8001ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ab4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001ab6:	940b      	str	r4, [sp, #44]	; 0x2c
 8001ab8:	1ae3      	subs	r3, r4, r3
 8001aba:	441a      	add	r2, r3
 8001abc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001ac0:	920f      	str	r2, [sp, #60]	; 0x3c
 8001ac2:	464b      	mov	r3, r9
 8001ac4:	2400      	movs	r4, #0
 8001ac6:	e7b6      	b.n	8001a36 <_dtoa_r+0x8e6>
 8001ac8:	9b06      	ldr	r3, [sp, #24]
 8001aca:	eba3 0809 	sub.w	r8, r3, r9
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e7b1      	b.n	8001a36 <_dtoa_r+0x8e6>
 8001ad2:	9e03      	ldr	r6, [sp, #12]
 8001ad4:	e571      	b.n	80015ba <_dtoa_r+0x46a>
 8001ad6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001ad8:	9903      	ldr	r1, [sp, #12]
 8001ada:	e570      	b.n	80015be <_dtoa_r+0x46e>
 8001adc:	9603      	str	r6, [sp, #12]
 8001ade:	e572      	b.n	80015c6 <_dtoa_r+0x476>
 8001ae0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	dc17      	bgt.n	8001b16 <_dtoa_r+0x9c6>
 8001ae6:	9b04      	ldr	r3, [sp, #16]
 8001ae8:	b9ab      	cbnz	r3, 8001b16 <_dtoa_r+0x9c6>
 8001aea:	9b05      	ldr	r3, [sp, #20]
 8001aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001af0:	b99b      	cbnz	r3, 8001b1a <_dtoa_r+0x9ca>
 8001af2:	9b05      	ldr	r3, [sp, #20]
 8001af4:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8001af8:	0d36      	lsrs	r6, r6, #20
 8001afa:	0536      	lsls	r6, r6, #20
 8001afc:	b136      	cbz	r6, 8001b0c <_dtoa_r+0x9bc>
 8001afe:	9b06      	ldr	r3, [sp, #24]
 8001b00:	3301      	adds	r3, #1
 8001b02:	9306      	str	r3, [sp, #24]
 8001b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b06:	3301      	adds	r3, #1
 8001b08:	930a      	str	r3, [sp, #40]	; 0x28
 8001b0a:	2601      	movs	r6, #1
 8001b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f47f ad70 	bne.w	80015f4 <_dtoa_r+0x4a4>
 8001b14:	960f      	str	r6, [sp, #60]	; 0x3c
 8001b16:	2001      	movs	r0, #1
 8001b18:	e575      	b.n	8001606 <_dtoa_r+0x4b6>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	e7f6      	b.n	8001b0c <_dtoa_r+0x9bc>
 8001b1e:	f43f ad86 	beq.w	800162e <_dtoa_r+0x4de>
 8001b22:	9a06      	ldr	r2, [sp, #24]
 8001b24:	331c      	adds	r3, #28
 8001b26:	441a      	add	r2, r3
 8001b28:	9206      	str	r2, [sp, #24]
 8001b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b2c:	441a      	add	r2, r3
 8001b2e:	4498      	add	r8, r3
 8001b30:	920a      	str	r2, [sp, #40]	; 0x28
 8001b32:	e57c      	b.n	800162e <_dtoa_r+0x4de>
 8001b34:	4603      	mov	r3, r0
 8001b36:	e7f4      	b.n	8001b22 <_dtoa_r+0x9d2>
 8001b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	dc2b      	bgt.n	8001b96 <_dtoa_r+0xa46>
 8001b3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	dc09      	bgt.n	8001b58 <_dtoa_r+0xa08>
 8001b44:	e027      	b.n	8001b96 <_dtoa_r+0xa46>
 8001b46:	f1b9 0f00 	cmp.w	r9, #0
 8001b4a:	dc1d      	bgt.n	8001b88 <_dtoa_r+0xa38>
 8001b4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	dd1a      	ble.n	8001b88 <_dtoa_r+0xa38>
 8001b52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001b56:	463e      	mov	r6, r7
 8001b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f47f ae0c 	bne.w	8001778 <_dtoa_r+0x628>
 8001b60:	4621      	mov	r1, r4
 8001b62:	2205      	movs	r2, #5
 8001b64:	4658      	mov	r0, fp
 8001b66:	f008 fe7f 	bl	800a868 <__multadd>
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	9803      	ldr	r0, [sp, #12]
 8001b70:	f00a ff40 	bl	800c9f4 <__mcmp>
 8001b74:	2800      	cmp	r0, #0
 8001b76:	f77f adff 	ble.w	8001778 <_dtoa_r+0x628>
 8001b7a:	f8dd a020 	ldr.w	sl, [sp, #32]
 8001b7e:	2331      	movs	r3, #49	; 0x31
 8001b80:	f80a 3b01 	strb.w	r3, [sl], #1
 8001b84:	3601      	adds	r6, #1
 8001b86:	e5fb      	b.n	8001780 <_dtoa_r+0x630>
 8001b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001b8e:	463e      	mov	r6, r7
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f47f ad83 	bne.w	800169c <_dtoa_r+0x54c>
 8001b96:	9f08      	ldr	r7, [sp, #32]
 8001b98:	9803      	ldr	r0, [sp, #12]
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	f00a fd5e 	bl	800c65c <quorem>
 8001ba0:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8001ba4:	f807 9b01 	strb.w	r9, [r7], #1
 8001ba8:	9b08      	ldr	r3, [sp, #32]
 8001baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bac:	1afb      	subs	r3, r7, r3
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	f340 80cb 	ble.w	8001d4a <_dtoa_r+0xbfa>
 8001bb4:	9903      	ldr	r1, [sp, #12]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	220a      	movs	r2, #10
 8001bba:	4658      	mov	r0, fp
 8001bbc:	f008 fe54 	bl	800a868 <__multadd>
 8001bc0:	9003      	str	r0, [sp, #12]
 8001bc2:	e7e9      	b.n	8001b98 <_dtoa_r+0xa48>
 8001bc4:	692a      	ldr	r2, [r5, #16]
 8001bc6:	3202      	adds	r2, #2
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	f105 010c 	add.w	r1, r5, #12
 8001bce:	300c      	adds	r0, #12
 8001bd0:	f00a fb95 	bl	800c2fe <memcpy>
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4639      	mov	r1, r7
 8001bd8:	4658      	mov	r0, fp
 8001bda:	f008 ffa5 	bl	800ab28 <__lshift>
 8001bde:	9b08      	ldr	r3, [sp, #32]
 8001be0:	f103 0a01 	add.w	sl, r3, #1
 8001be4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001be8:	4413      	add	r3, r2
 8001bea:	930a      	str	r3, [sp, #40]	; 0x28
 8001bec:	9b04      	ldr	r3, [sp, #16]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	46a8      	mov	r8, r5
 8001bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8001bf6:	4605      	mov	r5, r0
 8001bf8:	f10a 33ff 	add.w	r3, sl, #4294967295
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	9803      	ldr	r0, [sp, #12]
 8001c00:	9306      	str	r3, [sp, #24]
 8001c02:	f00a fd2b 	bl	800c65c <quorem>
 8001c06:	4641      	mov	r1, r8
 8001c08:	9009      	str	r0, [sp, #36]	; 0x24
 8001c0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8001c0e:	9803      	ldr	r0, [sp, #12]
 8001c10:	f00a fef0 	bl	800c9f4 <__mcmp>
 8001c14:	462a      	mov	r2, r5
 8001c16:	4621      	mov	r1, r4
 8001c18:	4607      	mov	r7, r0
 8001c1a:	4658      	mov	r0, fp
 8001c1c:	f008 fff0 	bl	800ac00 <__mdiff>
 8001c20:	68c2      	ldr	r2, [r0, #12]
 8001c22:	4601      	mov	r1, r0
 8001c24:	b302      	cbz	r2, 8001c68 <_dtoa_r+0xb18>
 8001c26:	4658      	mov	r0, fp
 8001c28:	f008 fdfc 	bl	800a824 <_Bfree>
 8001c2c:	2f00      	cmp	r7, #0
 8001c2e:	da3a      	bge.n	8001ca6 <_dtoa_r+0xb56>
 8001c30:	9903      	ldr	r1, [sp, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4658      	mov	r0, fp
 8001c36:	f008 ff77 	bl	800ab28 <__lshift>
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	9003      	str	r0, [sp, #12]
 8001c3e:	f00a fed9 	bl	800c9f4 <__mcmp>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	dc03      	bgt.n	8001c4e <_dtoa_r+0xafe>
 8001c46:	d129      	bne.n	8001c9c <_dtoa_r+0xb4c>
 8001c48:	f019 0f01 	tst.w	r9, #1
 8001c4c:	d026      	beq.n	8001c9c <_dtoa_r+0xb4c>
 8001c4e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8001c52:	d11d      	bne.n	8001c90 <_dtoa_r+0xb40>
 8001c54:	e032      	b.n	8001cbc <_dtoa_r+0xb6c>
 8001c56:	4628      	mov	r0, r5
 8001c58:	e7c1      	b.n	8001bde <_dtoa_r+0xa8e>
 8001c5a:	bf00      	nop
 8001c5c:	0800d240 	.word	0x0800d240
 8001c60:	40140000 	.word	0x40140000
 8001c64:	40240000 	.word	0x40240000
 8001c68:	900e      	str	r0, [sp, #56]	; 0x38
 8001c6a:	9803      	ldr	r0, [sp, #12]
 8001c6c:	f00a fec2 	bl	800c9f4 <__mcmp>
 8001c70:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001c72:	900c      	str	r0, [sp, #48]	; 0x30
 8001c74:	4658      	mov	r0, fp
 8001c76:	f008 fdd5 	bl	800a824 <_Bfree>
 8001c7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c7c:	bb5a      	cbnz	r2, 8001cd6 <_dtoa_r+0xb86>
 8001c7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001c80:	b953      	cbnz	r3, 8001c98 <_dtoa_r+0xb48>
 8001c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001c84:	b943      	cbnz	r3, 8001c98 <_dtoa_r+0xb48>
 8001c86:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8001c8a:	d017      	beq.n	8001cbc <_dtoa_r+0xb6c>
 8001c8c:	2f00      	cmp	r7, #0
 8001c8e:	dd05      	ble.n	8001c9c <_dtoa_r+0xb4c>
 8001c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8001c96:	e001      	b.n	8001c9c <_dtoa_r+0xb4c>
 8001c98:	2f00      	cmp	r7, #0
 8001c9a:	da2a      	bge.n	8001cf2 <_dtoa_r+0xba2>
 8001c9c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001ca0:	f80a 9b01 	strb.w	r9, [sl], #1
 8001ca4:	e56e      	b.n	8001784 <_dtoa_r+0x634>
 8001ca6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001ca8:	433b      	orrs	r3, r7
 8001caa:	d104      	bne.n	8001cb6 <_dtoa_r+0xb66>
 8001cac:	9b04      	ldr	r3, [sp, #16]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0bc      	beq.n	8001c30 <_dtoa_r+0xae0>
 8001cb6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8001cba:	d136      	bne.n	8001d2a <_dtoa_r+0xbda>
 8001cbc:	9f06      	ldr	r7, [sp, #24]
 8001cbe:	2339      	movs	r3, #57	; 0x39
 8001cc0:	f807 3b01 	strb.w	r3, [r7], #1
 8001cc4:	46ba      	mov	sl, r7
 8001cc6:	3f01      	subs	r7, #1
 8001cc8:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8001ccc:	2b39      	cmp	r3, #57	; 0x39
 8001cce:	d05b      	beq.n	8001d88 <_dtoa_r+0xc38>
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	703b      	strb	r3, [r7, #0]
 8001cd4:	e556      	b.n	8001784 <_dtoa_r+0x634>
 8001cd6:	2f00      	cmp	r7, #0
 8001cd8:	db06      	blt.n	8001ce8 <_dtoa_r+0xb98>
 8001cda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001cdc:	433b      	orrs	r3, r7
 8001cde:	d106      	bne.n	8001cee <_dtoa_r+0xb9e>
 8001ce0:	9b04      	ldr	r3, [sp, #16]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	b913      	cbnz	r3, 8001cee <_dtoa_r+0xb9e>
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	dca1      	bgt.n	8001c30 <_dtoa_r+0xae0>
 8001cec:	e7d6      	b.n	8001c9c <_dtoa_r+0xb4c>
 8001cee:	2a00      	cmp	r2, #0
 8001cf0:	dce1      	bgt.n	8001cb6 <_dtoa_r+0xb66>
 8001cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cf4:	f80a 9c01 	strb.w	r9, [sl, #-1]
 8001cf8:	4553      	cmp	r3, sl
 8001cfa:	4657      	mov	r7, sl
 8001cfc:	d02f      	beq.n	8001d5e <_dtoa_r+0xc0e>
 8001cfe:	9903      	ldr	r1, [sp, #12]
 8001d00:	2300      	movs	r3, #0
 8001d02:	220a      	movs	r2, #10
 8001d04:	4658      	mov	r0, fp
 8001d06:	f008 fdaf 	bl	800a868 <__multadd>
 8001d0a:	45a8      	cmp	r8, r5
 8001d0c:	9003      	str	r0, [sp, #12]
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	f04f 020a 	mov.w	r2, #10
 8001d16:	4641      	mov	r1, r8
 8001d18:	4658      	mov	r0, fp
 8001d1a:	d10b      	bne.n	8001d34 <_dtoa_r+0xbe4>
 8001d1c:	f008 fda4 	bl	800a868 <__multadd>
 8001d20:	4680      	mov	r8, r0
 8001d22:	4605      	mov	r5, r0
 8001d24:	f10a 0a01 	add.w	sl, sl, #1
 8001d28:	e766      	b.n	8001bf8 <_dtoa_r+0xaa8>
 8001d2a:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001d2e:	f109 0901 	add.w	r9, r9, #1
 8001d32:	e7b5      	b.n	8001ca0 <_dtoa_r+0xb50>
 8001d34:	f008 fd98 	bl	800a868 <__multadd>
 8001d38:	4629      	mov	r1, r5
 8001d3a:	4680      	mov	r8, r0
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	220a      	movs	r2, #10
 8001d40:	4658      	mov	r0, fp
 8001d42:	f008 fd91 	bl	800a868 <__multadd>
 8001d46:	4605      	mov	r5, r0
 8001d48:	e7ec      	b.n	8001d24 <_dtoa_r+0xbd4>
 8001d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bfc8      	it	gt
 8001d50:	461f      	movgt	r7, r3
 8001d52:	9b08      	ldr	r3, [sp, #32]
 8001d54:	bfd8      	it	le
 8001d56:	2701      	movle	r7, #1
 8001d58:	441f      	add	r7, r3
 8001d5a:	f04f 0800 	mov.w	r8, #0
 8001d5e:	9903      	ldr	r1, [sp, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	4658      	mov	r0, fp
 8001d64:	f008 fee0 	bl	800ab28 <__lshift>
 8001d68:	4621      	mov	r1, r4
 8001d6a:	9003      	str	r0, [sp, #12]
 8001d6c:	f00a fe42 	bl	800c9f4 <__mcmp>
 8001d70:	2800      	cmp	r0, #0
 8001d72:	dca7      	bgt.n	8001cc4 <_dtoa_r+0xb74>
 8001d74:	d102      	bne.n	8001d7c <_dtoa_r+0xc2c>
 8001d76:	f019 0f01 	tst.w	r9, #1
 8001d7a:	d1a3      	bne.n	8001cc4 <_dtoa_r+0xb74>
 8001d7c:	46ba      	mov	sl, r7
 8001d7e:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
 8001d82:	2b30      	cmp	r3, #48	; 0x30
 8001d84:	d0fa      	beq.n	8001d7c <_dtoa_r+0xc2c>
 8001d86:	e4fd      	b.n	8001784 <_dtoa_r+0x634>
 8001d88:	9b08      	ldr	r3, [sp, #32]
 8001d8a:	42bb      	cmp	r3, r7
 8001d8c:	d19a      	bne.n	8001cc4 <_dtoa_r+0xb74>
 8001d8e:	9a08      	ldr	r2, [sp, #32]
 8001d90:	2331      	movs	r3, #49	; 0x31
 8001d92:	3601      	adds	r6, #1
 8001d94:	7013      	strb	r3, [r2, #0]
 8001d96:	e4f5      	b.n	8001784 <_dtoa_r+0x634>
 8001d98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f47f aa1e 	bne.w	80011dc <_dtoa_r+0x8c>
 8001da0:	4b01      	ldr	r3, [pc, #4]	; (8001da8 <_dtoa_r+0xc58>)
 8001da2:	f7ff ba3d 	b.w	8001220 <_dtoa_r+0xd0>
 8001da6:	bf00      	nop
 8001da8:	0801375e 	.word	0x0801375e

08001dac <st_temp_run>:
static void st_temp_run(void *o){
 8001dac:	b530      	push	{r4, r5, lr}
	char aux_buffer[5] = "-----";									// string é inicializada
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <st_temp_run+0x74>)
		display_blanking_off(dev);									// turn display buffer off, in order to change text
 8001db0:	4c1c      	ldr	r4, [pc, #112]	; (8001e24 <st_temp_run+0x78>)
	char aux_buffer[5] = "-----";									// string é inicializada
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	791b      	ldrb	r3, [r3, #4]
		sprintf(aux_buffer,"%2.1f", TempSensor_frio2);				// print to array the text with temperatura valor
 8001db6:	4d1c      	ldr	r5, [pc, #112]	; (8001e28 <st_temp_run+0x7c>)
static void st_temp_run(void *o){
 8001db8:	b085      	sub	sp, #20
	char aux_buffer[5] = "-----";									// string é inicializada
 8001dba:	9002      	str	r0, [sp, #8]
		display_blanking_off(dev);									// turn display buffer off, in order to change text
 8001dbc:	6820      	ldr	r0, [r4, #0]
	char aux_buffer[5] = "-----";									// string é inicializada
 8001dbe:	f88d 300c 	strb.w	r3, [sp, #12]
		display_blanking_off(dev);									// turn display buffer off, in order to change text
 8001dc2:	f009 f9a5 	bl	800b110 <display_blanking_off.isra.0>
		cfb_framebuffer_clear(dev, false);							// clear display text buffer
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	6820      	ldr	r0, [r4, #0]
 8001dca:	f002 fc01 	bl	80045d0 <cfb_framebuffer_clear>
		cfb_framebuffer_set_font(dev, 0);							// set font size of display text
 8001dce:	2100      	movs	r1, #0
 8001dd0:	6820      	ldr	r0, [r4, #0]
 8001dd2:	f002 fc3f 	bl	8004654 <cfb_framebuffer_set_font>
		sprintf(aux_buffer,"%2.1f", TempSensor_frio2);				// print to array the text with temperatura valor
 8001dd6:	6828      	ldr	r0, [r5, #0]
 8001dd8:	f7fe fb96 	bl	8000508 <__aeabi_f2d>
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <st_temp_run+0x80>)
 8001dde:	e9cd 0100 	strd	r0, r1, [sp]
 8001de2:	2205      	movs	r2, #5
 8001de4:	2100      	movs	r1, #0
 8001de6:	a802      	add	r0, sp, #8
 8001de8:	f00a fbd4 	bl	800c594 <__sprintf_chk>
		if (TempSensor_frio2 <0) cfb_print(dev,aux_buffer, 16, 0);	// write to the display buffer in this position if negative temperatura 
 8001dec:	6828      	ldr	r0, [r5, #0]
 8001dee:	2100      	movs	r1, #0
 8001df0:	f7fe fe92 	bl	8000b18 <__aeabi_fcmplt>
 8001df4:	b170      	cbz	r0, 8001e14 <st_temp_run+0x68>
 8001df6:	2300      	movs	r3, #0
 8001df8:	2210      	movs	r2, #16
 8001dfa:	a902      	add	r1, sp, #8
		else cfb_print(dev,aux_buffer, 16, 8);						// write to the display buffer in this position if positive temperatura
 8001dfc:	6820      	ldr	r0, [r4, #0]
 8001dfe:	f002 fb0d 	bl	800441c <cfb_print>
		cfb_framebuffer_finalize(dev);								// play the buffer in display
 8001e02:	6820      	ldr	r0, [r4, #0]
 8001e04:	f002 fbf4 	bl	80045f0 <cfb_framebuffer_finalize>
	smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Idle]);			// set next SMT state	
 8001e08:	4909      	ldr	r1, [pc, #36]	; (8001e30 <st_temp_run+0x84>)
 8001e0a:	480a      	ldr	r0, [pc, #40]	; (8001e34 <st_temp_run+0x88>)
 8001e0c:	f003 fbd2 	bl	80055b4 <smf_set_state>
	}
 8001e10:	b005      	add	sp, #20
 8001e12:	bd30      	pop	{r4, r5, pc}
		else cfb_print(dev,aux_buffer, 16, 8);						// write to the display buffer in this position if positive temperatura
 8001e14:	2308      	movs	r3, #8
 8001e16:	2210      	movs	r2, #16
 8001e18:	eb0d 0103 	add.w	r1, sp, r3
 8001e1c:	e7ee      	b.n	8001dfc <st_temp_run+0x50>
 8001e1e:	bf00      	nop
 8001e20:	0800d750 	.word	0x0800d750
 8001e24:	20000a10 	.word	0x20000a10
 8001e28:	200009f4 	.word	0x200009f4
 8001e2c:	0800d74a 	.word	0x0800d74a
 8001e30:	0800d3a8 	.word	0x0800d3a8
 8001e34:	200009fc 	.word	0x200009fc

08001e38 <st_bt_fim_run>:
static void st_bt_fim_run(void *o){
 8001e38:	b510      	push	{r4, lr}
	 	display_blanking_off(dev);
 8001e3a:	4c0b      	ldr	r4, [pc, #44]	; (8001e68 <st_bt_fim_run+0x30>)
 8001e3c:	6820      	ldr	r0, [r4, #0]
 8001e3e:	f009 f967 	bl	800b110 <display_blanking_off.isra.0>
		cfb_framebuffer_clear(dev, false);
 8001e42:	6820      	ldr	r0, [r4, #0]
 8001e44:	2100      	movs	r1, #0
 8001e46:	f002 fbc3 	bl	80045d0 <cfb_framebuffer_clear>
		cfb_framebuffer_set_font(dev, 0);
 8001e4a:	6820      	ldr	r0, [r4, #0]
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	f002 fc01 	bl	8004654 <cfb_framebuffer_set_font>
		cfb_print(dev, "OFF", 8, 8); 	// posição em multiplos 8 para y e x
 8001e52:	2308      	movs	r3, #8
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	4905      	ldr	r1, [pc, #20]	; (8001e6c <st_bt_fim_run+0x34>)
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f002 fadf 	bl	800441c <cfb_print>
		cfb_framebuffer_finalize(dev);
 8001e5e:	6820      	ldr	r0, [r4, #0]
	}
 8001e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		cfb_framebuffer_finalize(dev);
 8001e64:	f002 bbc4 	b.w	80045f0 <cfb_framebuffer_finalize>
 8001e68:	20000a10 	.word	0x20000a10
 8001e6c:	0800d756 	.word	0x0800d756

08001e70 <st_bt_inicio_run>:
static void st_bt_inicio_run(void *o)  { 
 8001e70:	b510      	push	{r4, lr}
	 	display_blanking_off(dev);
 8001e72:	4c14      	ldr	r4, [pc, #80]	; (8001ec4 <st_bt_inicio_run+0x54>)
 8001e74:	6820      	ldr	r0, [r4, #0]
 8001e76:	f009 f94b 	bl	800b110 <display_blanking_off.isra.0>
		cfb_framebuffer_clear(dev, false);
 8001e7a:	6820      	ldr	r0, [r4, #0]
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	f002 fba7 	bl	80045d0 <cfb_framebuffer_clear>
		cfb_framebuffer_set_font(dev, 0);
 8001e82:	6820      	ldr	r0, [r4, #0]
 8001e84:	2100      	movs	r1, #0
 8001e86:	f002 fbe5 	bl	8004654 <cfb_framebuffer_set_font>
		cfb_print(dev, " ON ", 0, 0);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <st_bt_inicio_run+0x58>)
 8001e90:	6820      	ldr	r0, [r4, #0]
 8001e92:	f002 fac3 	bl	800441c <cfb_print>
		cfb_framebuffer_set_font(dev, 1);
 8001e96:	6820      	ldr	r0, [r4, #0]
 8001e98:	2101      	movs	r1, #1
 8001e9a:	f002 fbdb 	bl	8004654 <cfb_framebuffer_set_font>
		cfb_print(dev, "CRYODERME V 1", 8, 48);	// posição em multiplos 8 para y e x
 8001e9e:	490b      	ldr	r1, [pc, #44]	; (8001ecc <st_bt_inicio_run+0x5c>)
 8001ea0:	6820      	ldr	r0, [r4, #0]
 8001ea2:	2330      	movs	r3, #48	; 0x30
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	f002 fab9 	bl	800441c <cfb_print>
		cfb_framebuffer_finalize(dev);
 8001eaa:	6820      	ldr	r0, [r4, #0]
 8001eac:	f002 fba0 	bl	80045f0 <cfb_framebuffer_finalize>
		k_msleep(2000);
 8001eb0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001eb4:	f009 f92f 	bl	800b116 <k_msleep.isra.0>
	}
 8001eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Idle]);	//set STM para voltar a Idle State depois de finalizar este estado
 8001ebc:	4904      	ldr	r1, [pc, #16]	; (8001ed0 <st_bt_inicio_run+0x60>)
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <st_bt_inicio_run+0x64>)
 8001ec0:	f003 bb78 	b.w	80055b4 <smf_set_state>
 8001ec4:	20000a10 	.word	0x20000a10
 8001ec8:	0800d75a 	.word	0x0800d75a
 8001ecc:	0800d75f 	.word	0x0800d75f
 8001ed0:	0800d3a8 	.word	0x0800d3a8
 8001ed4:	200009fc 	.word	0x200009fc

08001ed8 <main>:
{
 8001ed8:	b538      	push	{r3, r4, r5, lr}
	dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_display));
 8001eda:	4c1f      	ldr	r4, [pc, #124]	; (8001f58 <main+0x80>)
 8001edc:	481f      	ldr	r0, [pc, #124]	; (8001f5c <main+0x84>)
 8001ede:	6020      	str	r0, [r4, #0]
 8001ee0:	f00a f94c 	bl	800c17c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8001ee4:	b930      	cbnz	r0, 8001ef4 <main+0x1c>
			printk("Device %s not ready\n", dev->name);
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	481d      	ldr	r0, [pc, #116]	; (8001f60 <main+0x88>)
 8001eea:	6819      	ldr	r1, [r3, #0]
}
 8001eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Device %s not ready\n", dev->name);
 8001ef0:	f009 b95b 	b.w	800b1aa <printk>
	if (display_set_pixel_format(dev, PIXEL_FORMAT_MONO10) != 0) {
 8001ef4:	6820      	ldr	r0, [r4, #0]
			 const enum display_pixel_format pixel_format)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	return api->set_pixel_format(dev, pixel_format);
 8001ef6:	6883      	ldr	r3, [r0, #8]
 8001ef8:	2104      	movs	r1, #4
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4798      	blx	r3
 8001efe:	b120      	cbz	r0, 8001f0a <main+0x32>
			printk("Failed to set required pixel format\n");
 8001f00:	4818      	ldr	r0, [pc, #96]	; (8001f64 <main+0x8c>)
}
 8001f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Framebuffer initialization failed!\n");
 8001f06:	f009 b950 	b.w	800b1aa <printk>
	if (cfb_framebuffer_init(dev)) {
 8001f0a:	6820      	ldr	r0, [r4, #0]
 8001f0c:	f002 fbae 	bl	800466c <cfb_framebuffer_init>
 8001f10:	b108      	cbz	r0, 8001f16 <main+0x3e>
			printk("Framebuffer initialization failed!\n");
 8001f12:	4815      	ldr	r0, [pc, #84]	; (8001f68 <main+0x90>)
 8001f14:	e7f5      	b.n	8001f02 <main+0x2a>
	printk("Initialized %s\n", dev->name);
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	4814      	ldr	r0, [pc, #80]	; (8001f6c <main+0x94>)
 8001f1a:	6819      	ldr	r1, [r3, #0]
		ret = smf_run_state(SMF_CTX(&s_obj));
 8001f1c:	4d14      	ldr	r5, [pc, #80]	; (8001f70 <main+0x98>)
	printk("Initialized %s\n", dev->name);
 8001f1e:	f009 f944 	bl	800b1aa <printk>
	cfb_framebuffer_clear(dev, true);
 8001f22:	2101      	movs	r1, #1
 8001f24:	6820      	ldr	r0, [r4, #0]
 8001f26:	f002 fb53 	bl	80045d0 <cfb_framebuffer_clear>
	display_blanking_off(dev);
 8001f2a:	6820      	ldr	r0, [r4, #0]
 8001f2c:	f009 f8f0 	bl	800b110 <display_blanking_off.isra.0>
	cfb_framebuffer_set_font(dev, 1);
 8001f30:	6820      	ldr	r0, [r4, #0]
		ret = smf_run_state(SMF_CTX(&s_obj));
 8001f32:	4c10      	ldr	r4, [pc, #64]	; (8001f74 <main+0x9c>)
	cfb_framebuffer_set_font(dev, 1);
 8001f34:	2101      	movs	r1, #1
 8001f36:	f002 fb8d 	bl	8004654 <cfb_framebuffer_set_font>
    smf_set_initial(SMF_CTX(&s_obj), &demo_states[ST_BT_Inicio]);
 8001f3a:	490f      	ldr	r1, [pc, #60]	; (8001f78 <main+0xa0>)
 8001f3c:	480c      	ldr	r0, [pc, #48]	; (8001f70 <main+0x98>)
 8001f3e:	f009 fbe0 	bl	800b702 <smf_set_initial>
	printk("vai entrar While \n");
 8001f42:	480e      	ldr	r0, [pc, #56]	; (8001f7c <main+0xa4>)
 8001f44:	f009 f931 	bl	800b1aa <printk>
		ret = smf_run_state(SMF_CTX(&s_obj));
 8001f48:	4628      	mov	r0, r5
 8001f4a:	f009 fbe6 	bl	800b71a <smf_run_state>
 8001f4e:	6020      	str	r0, [r4, #0]
		k_msleep(1);
 8001f50:	2001      	movs	r0, #1
 8001f52:	f009 f8e0 	bl	800b116 <k_msleep.isra.0>
	while (1) 
 8001f56:	e7f7      	b.n	8001f48 <main+0x70>
 8001f58:	20000a10 	.word	0x20000a10
 8001f5c:	0800ce44 	.word	0x0800ce44
 8001f60:	0800d7fd 	.word	0x0800d7fd
 8001f64:	0800d812 	.word	0x0800d812
 8001f68:	0800d837 	.word	0x0800d837
 8001f6c:	0800d85b 	.word	0x0800d85b
 8001f70:	200009fc 	.word	0x200009fc
 8001f74:	20000a0c 	.word	0x20000a0c
 8001f78:	0800d348 	.word	0x0800d348
 8001f7c:	0800d86b 	.word	0x0800d86b

08001f80 <display_corrido>:
void display_corrido (char *buffer, int atraso){
 8001f80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	char aux_buffer[5] = "     ";	// string é inicializada com espaço apenas
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <display_corrido+0x68>)
	display_blanking_off(dev);
 8001f86:	4d19      	ldr	r5, [pc, #100]	; (8001fec <display_corrido+0x6c>)
void display_corrido (char *buffer, int atraso){
 8001f88:	4607      	mov	r7, r0
	char aux_buffer[5] = "     ";	// string é inicializada com espaço apenas
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	9000      	str	r0, [sp, #0]
 8001f8e:	791b      	ldrb	r3, [r3, #4]
 8001f90:	f88d 3004 	strb.w	r3, [sp, #4]
	unsigned int size = strlen (buffer); 
 8001f94:	4638      	mov	r0, r7
void display_corrido (char *buffer, int atraso){
 8001f96:	4688      	mov	r8, r1
	unsigned int size = strlen (buffer); 
 8001f98:	f7ff f816 	bl	8000fc8 <strlen>
 8001f9c:	4604      	mov	r4, r0
	display_blanking_off(dev);
 8001f9e:	6828      	ldr	r0, [r5, #0]
 8001fa0:	f009 f8b6 	bl	800b110 <display_blanking_off.isra.0>
	cfb_framebuffer_set_font(dev, 0);
 8001fa4:	6828      	ldr	r0, [r5, #0]
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	f002 fb54 	bl	8004654 <cfb_framebuffer_set_font>
	for (int i=0; i < (size+1); i++){
 8001fac:	2600      	movs	r6, #0
 8001fae:	3401      	adds	r4, #1
 8001fb0:	42b4      	cmp	r4, r6
 8001fb2:	d802      	bhi.n	8001fba <display_corrido+0x3a>
}    //Modo Temp 0 graus
 8001fb4:	b002      	add	sp, #8
 8001fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cfb_framebuffer_clear(dev, false);
 8001fba:	2100      	movs	r1, #0
 8001fbc:	6828      	ldr	r0, [r5, #0]
 8001fbe:	f002 fb07 	bl	80045d0 <cfb_framebuffer_clear>
			strncpy(aux_buffer, buffer+i,4);
 8001fc2:	19b9      	adds	r1, r7, r6
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4668      	mov	r0, sp
 8001fc8:	f00a fafe 	bl	800c5c8 <strncpy>
			cfb_print(dev,aux_buffer, 0, 0); 	// posição em multiplos 8 para y e x
 8001fcc:	2300      	movs	r3, #0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4669      	mov	r1, sp
 8001fd2:	6828      	ldr	r0, [r5, #0]
 8001fd4:	f002 fa22 	bl	800441c <cfb_print>
			cfb_framebuffer_finalize(dev);
 8001fd8:	6828      	ldr	r0, [r5, #0]
 8001fda:	f002 fb09 	bl	80045f0 <cfb_framebuffer_finalize>
			k_msleep(atraso);		
 8001fde:	4640      	mov	r0, r8
 8001fe0:	f009 f899 	bl	800b116 <k_msleep.isra.0>
	for (int i=0; i < (size+1); i++){
 8001fe4:	3601      	adds	r6, #1
 8001fe6:	e7e3      	b.n	8001fb0 <display_corrido+0x30>
 8001fe8:	0800d87e 	.word	0x0800d87e
 8001fec:	20000a10 	.word	0x20000a10

08001ff0 <st_bt_flow_run>:
static void st_bt_flow_run(void *o){
 8001ff0:	b508      	push	{r3, lr}
		if (high_flow_trabalho) display_corrido("Tecla HiFLow", TEXT_PERIOD_S); // somente para tam fonte = 0. Função de apresentação texto corrido 
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <st_bt_flow_run+0x20>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2196      	movs	r1, #150	; 0x96
 8001ff8:	b143      	cbz	r3, 800200c <st_bt_flow_run+0x1c>
 8001ffa:	4806      	ldr	r0, [pc, #24]	; (8002014 <st_bt_flow_run+0x24>)
		else display_corrido("Tecla LowFlow", TEXT_PERIOD_S);
 8001ffc:	f7ff ffc0 	bl	8001f80 <display_corrido>
	}
 8002000:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Temp]);	// depois da msg do botão flow volta a apresentar a temperatura no dipslay
 8002004:	4904      	ldr	r1, [pc, #16]	; (8002018 <st_bt_flow_run+0x28>)
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <st_bt_flow_run+0x2c>)
 8002008:	f003 bad4 	b.w	80055b4 <smf_set_state>
		else display_corrido("Tecla LowFlow", TEXT_PERIOD_S);
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <st_bt_flow_run+0x30>)
 800200e:	e7f5      	b.n	8001ffc <st_bt_flow_run+0xc>
 8002010:	200002e0 	.word	0x200002e0
 8002014:	0800d884 	.word	0x0800d884
 8002018:	0800d398 	.word	0x0800d398
 800201c:	200009fc 	.word	0x200009fc
 8002020:	0800d891 	.word	0x0800d891

08002024 <st_bt_temp_run>:
static void st_bt_temp_run(void *o){
 8002024:	b508      	push	{r3, lr}
		if (low_temp_trabalho) display_corrido("Tecla T-35", TEXT_PERIOD_S); // somente para tam fonte = 0. Função de apresentação texto corrido 
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <st_bt_temp_run+0x20>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2196      	movs	r1, #150	; 0x96
 800202c:	b143      	cbz	r3, 8002040 <st_bt_temp_run+0x1c>
 800202e:	4806      	ldr	r0, [pc, #24]	; (8002048 <st_bt_temp_run+0x24>)
		else display_corrido("Tecla T0", TEXT_PERIOD_S);
 8002030:	f7ff ffa6 	bl	8001f80 <display_corrido>
	}
 8002034:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	smf_set_state(SMF_CTX(&s_obj), &demo_states[ST_Temp]);	// depois da msg do botão flow volta a apresentar a temperatura no dipslay
 8002038:	4904      	ldr	r1, [pc, #16]	; (800204c <st_bt_temp_run+0x28>)
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <st_bt_temp_run+0x2c>)
 800203c:	f003 baba 	b.w	80055b4 <smf_set_state>
		else display_corrido("Tecla T0", TEXT_PERIOD_S);
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <st_bt_temp_run+0x30>)
 8002042:	e7f5      	b.n	8002030 <st_bt_temp_run+0xc>
 8002044:	200002e1 	.word	0x200002e1
 8002048:	0800d89f 	.word	0x0800d89f
 800204c:	0800d398 	.word	0x0800d398
 8002050:	200009fc 	.word	0x200009fc
 8002054:	0800d8aa 	.word	0x0800d8aa

08002058 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
 8002058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800205c:	b091      	sub	sp, #68	; 0x44
 800205e:	460f      	mov	r7, r1
 8002060:	4691      	mov	r9, r2
 8002062:	9301      	str	r3, [sp, #4]
	__ASSERT_NO_MSG(in_packaged != NULL);
 8002064:	4604      	mov	r4, r0
 8002066:	b958      	cbnz	r0, 8002080 <cbprintf_package_convert+0x28>
 8002068:	49a7      	ldr	r1, [pc, #668]	; (8002308 <cbprintf_package_convert+0x2b0>)
 800206a:	4aa8      	ldr	r2, [pc, #672]	; (800230c <cbprintf_package_convert+0x2b4>)
 800206c:	48a8      	ldr	r0, [pc, #672]	; (8002310 <cbprintf_package_convert+0x2b8>)
 800206e:	f240 335f 	movw	r3, #863	; 0x35f
 8002072:	f009 f9ce 	bl	800b412 <assert_print>
 8002076:	f240 315f 	movw	r1, #863	; 0x35f
		const char *str = *(const char **)&buf32[*str_pos];
		bool is_ro = ptr_in_rodata(str);

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
 800207a:	48a4      	ldr	r0, [pc, #656]	; (800230c <cbprintf_package_convert+0x2b4>)
 800207c:	f009 f9c2 	bl	800b404 <assert_post_action>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
 8002080:	b941      	cbnz	r1, 8002094 <cbprintf_package_convert+0x3c>
	buf += ros_nbr;
 8002082:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
 8002084:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
 8002086:	7880      	ldrb	r0, [r0, #2]
 8002088:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800208c:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
 800208e:	42be      	cmp	r6, r7
 8002090:	d818      	bhi.n	80020c4 <cbprintf_package_convert+0x6c>
	return (size_t)(uintptr_t)(buf - start);
 8002092:	1b07      	subs	r7, r0, r4
	ros_nbr = in_desc->ro_str_cnt;
 8002094:	f894 a002 	ldrb.w	sl, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
 8002098:	78e3      	ldrb	r3, [r4, #3]
 800209a:	9302      	str	r3, [sp, #8]
	ro_cpy = ros_nbr &&
 800209c:	f1ba 0f00 	cmp.w	sl, #0
 80020a0:	d002      	beq.n	80020a8 <cbprintf_package_convert+0x50>
 80020a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80020a4:	07d9      	lsls	r1, r3, #31
 80020a6:	d415      	bmi.n	80020d4 <cbprintf_package_convert+0x7c>
	rw_cpy = rws_nbr > 0 &&
 80020a8:	9b02      	ldr	r3, [sp, #8]
 80020aa:	bb9b      	cbnz	r3, 8002114 <cbprintf_package_convert+0xbc>
		if (cb) {
 80020ac:	f1b9 0f00 	cmp.w	r9, #0
 80020b0:	d003      	beq.n	80020ba <cbprintf_package_convert+0x62>
			cb(in_packaged, in_len, ctx);
 80020b2:	9a01      	ldr	r2, [sp, #4]
 80020b4:	4639      	mov	r1, r7
 80020b6:	4620      	mov	r0, r4
 80020b8:	47c8      	blx	r9
		return in_len;
 80020ba:	463d      	mov	r5, r7

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
 80020bc:	4628      	mov	r0, r5
 80020be:	b011      	add	sp, #68	; 0x44
 80020c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
 80020c4:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
 80020c6:	4628      	mov	r0, r5
 80020c8:	f7fe ff7e 	bl	8000fc8 <strlen>
 80020cc:	3001      	adds	r0, #1
 80020ce:	4428      	add	r0, r5
	for (int i = 0; i < s_nbr; i++) {
 80020d0:	3701      	adds	r7, #1
 80020d2:	e7dc      	b.n	800208e <cbprintf_package_convert+0x36>
	rw_cpy = rws_nbr > 0 &&
 80020d4:	7823      	ldrb	r3, [r4, #0]
	args_size = in_desc->len * sizeof(int);
 80020d6:	009a      	lsls	r2, r3, #2
 80020d8:	9204      	str	r2, [sp, #16]
	uint8_t *str_pos = &buf[args_size];
 80020da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
	if (cb == NULL) {
 80020de:	f1b9 0f00 	cmp.w	r9, #0
 80020e2:	f040 80cf 	bne.w	8002284 <cbprintf_package_convert+0x22c>
		out_len = (int)in_len;
 80020e6:	463d      	mov	r5, r7
		if (ro_cpy) {
 80020e8:	44b2      	add	sl, r6
	size_t strl_cnt = 0;
 80020ea:	2700      	movs	r7, #0
			for (int i = 0; i < ros_nbr; i++) {
 80020ec:	4556      	cmp	r6, sl
 80020ee:	d021      	beq.n	8002134 <cbprintf_package_convert+0xdc>
				const char *str = *(const char **)&buf32[*str_pos];
 80020f0:	f816 3b01 	ldrb.w	r3, [r6], #1
		return 1 + strlen(str);
 80020f4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80020f8:	f7fe ff66 	bl	8000fc8 <strlen>
				if (strl && strl_cnt < strl_len) {
 80020fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
		return 1 + strlen(str);
 80020fe:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
 8002100:	b133      	cbz	r3, 8002110 <cbprintf_package_convert+0xb8>
 8002102:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002104:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
 8002106:	bf3e      	ittt	cc
 8002108:	9b1b      	ldrcc	r3, [sp, #108]	; 0x6c
 800210a:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
 800210e:	3701      	addcc	r7, #1
				out_len += len;
 8002110:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
 8002112:	e7eb      	b.n	80020ec <cbprintf_package_convert+0x94>
	rw_cpy = rws_nbr > 0 &&
 8002114:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002116:	079a      	lsls	r2, r3, #30
 8002118:	d5c8      	bpl.n	80020ac <cbprintf_package_convert+0x54>
	args_size = in_desc->len * sizeof(int);
 800211a:	7823      	ldrb	r3, [r4, #0]
 800211c:	009a      	lsls	r2, r3, #2
 800211e:	9204      	str	r2, [sp, #16]
	uint8_t *str_pos = &buf[args_size];
 8002120:	eb04 0683 	add.w	r6, r4, r3, lsl #2
	if (cb == NULL) {
 8002124:	f1b9 0f00 	cmp.w	r9, #0
 8002128:	d142      	bne.n	80021b0 <cbprintf_package_convert+0x158>
		out_len = (int)in_len;
 800212a:	463d      	mov	r5, r7
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 800212c:	f1ba 0f00 	cmp.w	sl, #0
 8002130:	d11a      	bne.n	8002168 <cbprintf_package_convert+0x110>
	size_t strl_cnt = 0;
 8002132:	4657      	mov	r7, sl
		bool drop_ro_str_pos = !(flags &
 8002134:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002136:	f8dd a008 	ldr.w	sl, [sp, #8]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 800213a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8002314 <cbprintf_package_convert+0x2bc>
 800213e:	4976      	ldr	r1, [pc, #472]	; (8002318 <cbprintf_package_convert+0x2c0>)
 8002140:	f003 0b05 	and.w	fp, r3, #5
		for (int i = 0; i < rws_nbr; i++) {
 8002144:	44b2      	add	sl, r6
			    (!is_ro && flags & CBPRINTF_PACKAGE_CONVERT_RW_STR)) {
 8002146:	f003 0202 	and.w	r2, r3, #2
		for (int i = 0; i < rws_nbr; i++) {
 800214a:	4556      	cmp	r6, sl
 800214c:	d0b6      	beq.n	80020bc <cbprintf_package_convert+0x64>
			const char *str = *(const char **)&buf32[*str_pos];
 800214e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002152:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8002156:	4540      	cmp	r0, r8
 8002158:	d301      	bcc.n	800215e <cbprintf_package_convert+0x106>
 800215a:	4288      	cmp	r0, r1
 800215c:	d30b      	bcc.n	8002176 <cbprintf_package_convert+0x11e>
			    (!is_ro && flags & CBPRINTF_PACKAGE_CONVERT_RW_STR)) {
 800215e:	2a00      	cmp	r2, #0
 8002160:	d0f3      	beq.n	800214a <cbprintf_package_convert+0xf2>
 8002162:	f04f 0900 	mov.w	r9, #0
 8002166:	e00b      	b.n	8002180 <cbprintf_package_convert+0x128>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8002168:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800216a:	f013 0704 	ands.w	r7, r3, #4
				str_pos += ros_nbr;
 800216e:	bf1c      	itt	ne
 8002170:	4456      	addne	r6, sl
	size_t strl_cnt = 0;
 8002172:	464f      	movne	r7, r9
 8002174:	e7de      	b.n	8002134 <cbprintf_package_convert+0xdc>
			if ((is_ro && flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ||
 8002176:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002178:	07db      	lsls	r3, r3, #31
 800217a:	d514      	bpl.n	80021a6 <cbprintf_package_convert+0x14e>
 800217c:	f04f 0901 	mov.w	r9, #1
 8002180:	9201      	str	r2, [sp, #4]
		return 1 + strlen(str);
 8002182:	f7fe ff21 	bl	8000fc8 <strlen>
				if (strl && strl_cnt < strl_len) {
 8002186:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002188:	9a01      	ldr	r2, [sp, #4]
 800218a:	4963      	ldr	r1, [pc, #396]	; (8002318 <cbprintf_package_convert+0x2c0>)
		return 1 + strlen(str);
 800218c:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
 800218e:	b133      	cbz	r3, 800219e <cbprintf_package_convert+0x146>
 8002190:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002192:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
 8002194:	bf3e      	ittt	cc
 8002196:	9b1b      	ldrcc	r3, [sp, #108]	; 0x6c
 8002198:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
 800219c:	3701      	addcc	r7, #1
				out_len += len;
 800219e:	4405      	add	r5, r0
			if (is_ro && drop_ro_str_pos) {
 80021a0:	f1b9 0f00 	cmp.w	r9, #0
 80021a4:	d0d1      	beq.n	800214a <cbprintf_package_convert+0xf2>
 80021a6:	f1bb 0f00 	cmp.w	fp, #0
 80021aa:	d1ce      	bne.n	800214a <cbprintf_package_convert+0xf2>
				out_len--;
 80021ac:	3d01      	subs	r5, #1
		for (int i = 0; i < rws_nbr; i++) {
 80021ae:	e7cc      	b.n	800214a <cbprintf_package_convert+0xf2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 80021b0:	f1ba 0f00 	cmp.w	sl, #0
 80021b4:	d06b      	beq.n	800228e <cbprintf_package_convert+0x236>
 80021b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80021b8:	f012 0804 	ands.w	r8, r2, #4
 80021bc:	d06a      	beq.n	8002294 <cbprintf_package_convert+0x23c>
		keep_cnt = ros_nbr;
 80021be:	46d0      	mov	r8, sl
		dst = keep_str_pos;
 80021c0:	a80c      	add	r0, sp, #48	; 0x30
		scpy_cnt = 0;
 80021c2:	f04f 0b00 	mov.w	fp, #0
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80021c6:	4652      	mov	r2, sl
 80021c8:	4631      	mov	r1, r6
 80021ca:	9303      	str	r3, [sp, #12]
 80021cc:	f00a f897 	bl	800c2fe <memcpy>
 80021d0:	9b03      	ldr	r3, [sp, #12]
 80021d2:	f8df e140 	ldr.w	lr, [pc, #320]	; 8002314 <cbprintf_package_convert+0x2bc>
	str_pos += ros_nbr;
 80021d6:	eb06 020a 	add.w	r2, r6, sl
 80021da:	9203      	str	r2, [sp, #12]
 80021dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80021e0:	eb02 0c01 	add.w	ip, r2, r1
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 80021e4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80021e6:	4e4c      	ldr	r6, [pc, #304]	; (8002318 <cbprintf_package_convert+0x2c0>)
 80021e8:	f002 0202 	and.w	r2, r2, #2
 80021ec:	9205      	str	r2, [sp, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 80021ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80021f0:	f002 0101 	and.w	r1, r2, #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 80021f4:	f002 0004 	and.w	r0, r2, #4
	for (int i = 0; i < rws_nbr; i++) {
 80021f8:	9a03      	ldr	r2, [sp, #12]
 80021fa:	4594      	cmp	ip, r2
 80021fc:	d14c      	bne.n	8002298 <cbprintf_package_convert+0x240>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : keep_cnt;
 80021fe:	991a      	ldr	r1, [sp, #104]	; 0x68
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 8002200:	7866      	ldrb	r6, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : keep_cnt;
 8002202:	f011 0f02 	tst.w	r1, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 8002206:	eb06 020b 	add.w	r2, r6, fp
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : keep_cnt;
 800220a:	bf0c      	ite	eq
 800220c:	4640      	moveq	r0, r8
 800220e:	2000      	movne	r0, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 8002210:	07cd      	lsls	r5, r1, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 8002212:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 8002214:	f100 80a7 	bmi.w	8002366 <cbprintf_package_convert+0x30e>
 8002218:	f011 0f04 	tst.w	r1, #4
 800221c:	bf14      	ite	ne
 800221e:	4641      	movne	r1, r8
 8002220:	2100      	moveq	r1, #0
	*in_desc = out_desc;
 8002222:	7062      	strb	r2, [r4, #1]
 8002224:	70a1      	strb	r1, [r4, #2]
 8002226:	70e0      	strb	r0, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
 8002228:	9a01      	ldr	r2, [sp, #4]
 800222a:	9904      	ldr	r1, [sp, #16]
 800222c:	9305      	str	r3, [sp, #20]
 800222e:	4620      	mov	r0, r4
 8002230:	47c8      	blx	r9
	if (rv < 0) {
 8002232:	1e05      	subs	r5, r0, #0
 8002234:	f6ff af42 	blt.w	80020bc <cbprintf_package_convert+0x64>
	*in_desc = in_desc_backup;
 8002238:	9b05      	ldr	r3, [sp, #20]
 800223a:	7023      	strb	r3, [r4, #0]
 800223c:	9b02      	ldr	r3, [sp, #8]
 800223e:	7066      	strb	r6, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8002240:	9a01      	ldr	r2, [sp, #4]
	*in_desc = in_desc_backup;
 8002242:	f884 a002 	strb.w	sl, [r4, #2]
 8002246:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8002248:	4641      	mov	r1, r8
 800224a:	a80c      	add	r0, sp, #48	; 0x30
 800224c:	47c8      	blx	r9
	if (rv < 0) {
 800224e:	1e06      	subs	r6, r0, #0
 8002250:	f2c0 80ae 	blt.w	80023b0 <cbprintf_package_convert+0x358>
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
 8002254:	9b04      	ldr	r3, [sp, #16]
	rv = cb(str_pos, strs_len, ctx);
 8002256:	9803      	ldr	r0, [sp, #12]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
 8002258:	eba7 010a 	sub.w	r1, r7, sl
 800225c:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
 800225e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8002262:	1ac9      	subs	r1, r1, r3
 8002264:	47c8      	blx	r9
	if (rv < 0) {
 8002266:	2800      	cmp	r0, #0
 8002268:	f2c0 80a4 	blt.w	80023b4 <cbprintf_package_convert+0x35c>
	out_len += rv;
 800226c:	442e      	add	r6, r5
	out_len += rv;
 800226e:	1835      	adds	r5, r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
 8002270:	2700      	movs	r7, #0
		uint8_t loc = cpy_str_pos[i];
 8002272:	f10d 0a20 	add.w	sl, sp, #32
	for (int i = 0; i < scpy_cnt; i++) {
 8002276:	45bb      	cmp	fp, r7
 8002278:	dc77      	bgt.n	800236a <cbprintf_package_convert+0x312>
	(void)cb(NULL, 0, ctx);
 800227a:	2100      	movs	r1, #0
 800227c:	9a01      	ldr	r2, [sp, #4]
 800227e:	4608      	mov	r0, r1
 8002280:	47c8      	blx	r9
	return out_len;
 8002282:	e71b      	b.n	80020bc <cbprintf_package_convert+0x64>
	if (cb == NULL) {
 8002284:	46d3      	mov	fp, sl
 8002286:	a808      	add	r0, sp, #32
 8002288:	f04f 0800 	mov.w	r8, #0
 800228c:	e79b      	b.n	80021c6 <cbprintf_package_convert+0x16e>
		keep_cnt = 0;
 800228e:	46d0      	mov	r8, sl
		scpy_cnt = 0;
 8002290:	46d3      	mov	fp, sl
 8002292:	e79e      	b.n	80021d2 <cbprintf_package_convert+0x17a>
 8002294:	46c3      	mov	fp, r8
 8002296:	e79c      	b.n	80021d2 <cbprintf_package_convert+0x17a>
		const char *str = *(const char **)&buf32[*str_pos];
 8002298:	9d03      	ldr	r5, [sp, #12]
 800229a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800229e:	9503      	str	r5, [sp, #12]
 80022a0:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 80022a4:	4575      	cmp	r5, lr
 80022a6:	d301      	bcc.n	80022ac <cbprintf_package_convert+0x254>
 80022a8:	42b5      	cmp	r5, r6
 80022aa:	d30f      	bcc.n	80022cc <cbprintf_package_convert+0x274>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 80022ac:	9d05      	ldr	r5, [sp, #20]
 80022ae:	2d00      	cmp	r5, #0
 80022b0:	d138      	bne.n	8002324 <cbprintf_package_convert+0x2cc>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
 80022b2:	f1b8 0f0f 	cmp.w	r8, #15
 80022b6:	d94c      	bls.n	8002352 <cbprintf_package_convert+0x2fa>
 80022b8:	4918      	ldr	r1, [pc, #96]	; (800231c <cbprintf_package_convert+0x2c4>)
 80022ba:	4a14      	ldr	r2, [pc, #80]	; (800230c <cbprintf_package_convert+0x2b4>)
 80022bc:	4814      	ldr	r0, [pc, #80]	; (8002310 <cbprintf_package_convert+0x2b8>)
 80022be:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80022c2:	f009 f8a6 	bl	800b412 <assert_print>
 80022c6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80022ca:	e6d6      	b.n	800207a <cbprintf_package_convert+0x22>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 80022cc:	b161      	cbz	r1, 80022e8 <cbprintf_package_convert+0x290>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
 80022ce:	f1bb 0f0f 	cmp.w	fp, #15
 80022d2:	d934      	bls.n	800233e <cbprintf_package_convert+0x2e6>
 80022d4:	4912      	ldr	r1, [pc, #72]	; (8002320 <cbprintf_package_convert+0x2c8>)
 80022d6:	4a0d      	ldr	r2, [pc, #52]	; (800230c <cbprintf_package_convert+0x2b4>)
 80022d8:	480d      	ldr	r0, [pc, #52]	; (8002310 <cbprintf_package_convert+0x2b8>)
 80022da:	f240 33f2 	movw	r3, #1010	; 0x3f2
 80022de:	f009 f898 	bl	800b412 <assert_print>
 80022e2:	f240 31f2 	movw	r1, #1010	; 0x3f2
 80022e6:	e6c8      	b.n	800207a <cbprintf_package_convert+0x22>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d085      	beq.n	80021f8 <cbprintf_package_convert+0x1a0>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
 80022ec:	f1b8 0f0f 	cmp.w	r8, #15
 80022f0:	d92f      	bls.n	8002352 <cbprintf_package_convert+0x2fa>
 80022f2:	490a      	ldr	r1, [pc, #40]	; (800231c <cbprintf_package_convert+0x2c4>)
 80022f4:	4a05      	ldr	r2, [pc, #20]	; (800230c <cbprintf_package_convert+0x2b4>)
 80022f6:	4806      	ldr	r0, [pc, #24]	; (8002310 <cbprintf_package_convert+0x2b8>)
 80022f8:	f240 33f5 	movw	r3, #1013	; 0x3f5
 80022fc:	f009 f889 	bl	800b412 <assert_print>
 8002300:	f240 31f5 	movw	r1, #1013	; 0x3f5
 8002304:	e6b9      	b.n	800207a <cbprintf_package_convert+0x22>
 8002306:	bf00      	nop
 8002308:	08011949 	.word	0x08011949
 800230c:	08011897 	.word	0x08011897
 8002310:	080118c5 	.word	0x080118c5
 8002314:	0800cc84 	.word	0x0800cc84
 8002318:	080138c0 	.word	0x080138c0
 800231c:	08011983 	.word	0x08011983
 8002320:	08011964 	.word	0x08011964
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
 8002324:	f1bb 0f0f 	cmp.w	fp, #15
 8002328:	d909      	bls.n	800233e <cbprintf_package_convert+0x2e6>
 800232a:	4923      	ldr	r1, [pc, #140]	; (80023b8 <cbprintf_package_convert+0x360>)
 800232c:	4a23      	ldr	r2, [pc, #140]	; (80023bc <cbprintf_package_convert+0x364>)
 800232e:	4824      	ldr	r0, [pc, #144]	; (80023c0 <cbprintf_package_convert+0x368>)
 8002330:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8002334:	f009 f86d 	bl	800b412 <assert_print>
 8002338:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 800233c:	e69d      	b.n	800207a <cbprintf_package_convert+0x22>
				cpy_str_pos[scpy_cnt++] = *str_pos;
 800233e:	f10b 0501 	add.w	r5, fp, #1
 8002342:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8002346:	44eb      	add	fp, sp
 8002348:	f80b 2c20 	strb.w	r2, [fp, #-32]
 800234c:	fa5f fb85 	uxtb.w	fp, r5
 8002350:	e752      	b.n	80021f8 <cbprintf_package_convert+0x1a0>
				keep_str_pos[keep_cnt++] = *str_pos;
 8002352:	f108 0501 	add.w	r5, r8, #1
 8002356:	f108 0840 	add.w	r8, r8, #64	; 0x40
 800235a:	44e8      	add	r8, sp
 800235c:	f808 2c10 	strb.w	r2, [r8, #-16]
 8002360:	fa5f f885 	uxtb.w	r8, r5
	for (int i = 0; i < rws_nbr; i++) {
 8002364:	e748      	b.n	80021f8 <cbprintf_package_convert+0x1a0>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 8002366:	2100      	movs	r1, #0
 8002368:	e75b      	b.n	8002222 <cbprintf_package_convert+0x1ca>
		uint8_t loc = cpy_str_pos[i];
 800236a:	f817 300a 	ldrb.w	r3, [r7, sl]
 800236e:	f88d 301f 	strb.w	r3, [sp, #31]
		const char *str = *(const char **)&buf32[loc];
 8002372:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
 8002376:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002378:	b1c3      	cbz	r3, 80023ac <cbprintf_package_convert+0x354>
 800237a:	f833 6017 	ldrh.w	r6, [r3, r7, lsl #1]
		rv = cb(&loc, 1, ctx);
 800237e:	9a01      	ldr	r2, [sp, #4]
 8002380:	2101      	movs	r1, #1
 8002382:	f10d 001f 	add.w	r0, sp, #31
 8002386:	47c8      	blx	r9
		if (rv < 0) {
 8002388:	2800      	cmp	r0, #0
 800238a:	db13      	blt.n	80023b4 <cbprintf_package_convert+0x35c>
		out_len += rv;
 800238c:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
 800238e:	b926      	cbnz	r6, 800239a <cbprintf_package_convert+0x342>
 8002390:	4640      	mov	r0, r8
 8002392:	f7fe fe19 	bl	8000fc8 <strlen>
 8002396:	1c46      	adds	r6, r0, #1
 8002398:	b2b6      	uxth	r6, r6
	return cb(str, strl, ctx);
 800239a:	9a01      	ldr	r2, [sp, #4]
 800239c:	4631      	mov	r1, r6
 800239e:	4640      	mov	r0, r8
 80023a0:	47c8      	blx	r9
		if (rv < 0) {
 80023a2:	2800      	cmp	r0, #0
 80023a4:	db06      	blt.n	80023b4 <cbprintf_package_convert+0x35c>
		out_len += rv;
 80023a6:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
 80023a8:	3701      	adds	r7, #1
 80023aa:	e764      	b.n	8002276 <cbprintf_package_convert+0x21e>
		uint16_t str_len = strl ? strl[i] : 0;
 80023ac:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80023ae:	e7e6      	b.n	800237e <cbprintf_package_convert+0x326>
 80023b0:	4635      	mov	r5, r6
 80023b2:	e683      	b.n	80020bc <cbprintf_package_convert+0x64>
 80023b4:	4605      	mov	r5, r0
 80023b6:	e681      	b.n	80020bc <cbprintf_package_convert+0x64>
 80023b8:	08011964 	.word	0x08011964
 80023bc:	08011897 	.word	0x08011897
 80023c0:	080118c5 	.word	0x080118c5

080023c4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 80023c4:	4b01      	ldr	r3, [pc, #4]	; (80023cc <char_out+0x8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4718      	bx	r3
 80023ca:	bf00      	nop
 80023cc:	200000a0 	.word	0x200000a0

080023d0 <__printk_hook_install>:
	_char_out = fn;
 80023d0:	4b01      	ldr	r3, [pc, #4]	; (80023d8 <__printk_hook_install+0x8>)
 80023d2:	6018      	str	r0, [r3, #0]
}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	200000a0 	.word	0x200000a0

080023dc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 80023dc:	b507      	push	{r0, r1, r2, lr}
 80023de:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 80023e0:	2100      	movs	r1, #0
 80023e2:	4602      	mov	r2, r0
 80023e4:	9100      	str	r1, [sp, #0]
 80023e6:	4803      	ldr	r0, [pc, #12]	; (80023f4 <vprintk+0x18>)
 80023e8:	f000 f98c 	bl	8002704 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 80023ec:	b003      	add	sp, #12
 80023ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80023f2:	bf00      	nop
 80023f4:	080023c5 	.word	0x080023c5

080023f8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80023f8:	b530      	push	{r4, r5, lr}
 80023fa:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
 80023fc:	2500      	movs	r5, #0
 80023fe:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
 8002402:	4604      	mov	r4, r0
 8002404:	9500      	str	r5, [sp, #0]
 8002406:	a903      	add	r1, sp, #12
 8002408:	4805      	ldr	r0, [pc, #20]	; (8002420 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
 800240a:	9505      	str	r5, [sp, #20]
 800240c:	f000 f97a 	bl	8002704 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
 8002410:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8002414:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 8002416:	bfb8      	it	lt
 8002418:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 800241a:	b007      	add	sp, #28
 800241c:	bd30      	pop	{r4, r5, pc}
 800241e:	bf00      	nop
 8002420:	0800b185 	.word	0x0800b185

08002424 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 8002424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002428:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
 800242a:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
 800242c:	6806      	ldr	r6, [r0, #0]
{
 800242e:	460f      	mov	r7, r1
 8002430:	4614      	mov	r4, r2
	if (align != rew) {
 8002432:	d011      	beq.n	8002458 <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
 8002434:	f1c1 0900 	rsb	r9, r1, #0
 8002438:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
 800243c:	464a      	mov	r2, r9
 800243e:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
 8002440:	f103 31ff 	add.w	r1, r3, #4294967295
		gap = MIN(rew, chunk_header_bytes(h));
 8002444:	bf28      	it	cs
 8002446:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
 8002448:	4219      	tst	r1, r3
 800244a:	d10c      	bne.n	8002466 <sys_heap_aligned_alloc+0x42>
 800244c:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
 800244e:	b9e4      	cbnz	r4, 800248a <sys_heap_aligned_alloc+0x66>
		return NULL;
 8002450:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
 8002452:	4628      	mov	r0, r5
 8002454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
 8002458:	2904      	cmp	r1, #4
 800245a:	d813      	bhi.n	8002484 <sys_heap_aligned_alloc+0x60>
}
 800245c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
 8002460:	4611      	mov	r1, r2
 8002462:	f008 bf60 	b.w	800b326 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
 8002466:	492c      	ldr	r1, [pc, #176]	; (8002518 <sys_heap_aligned_alloc+0xf4>)
 8002468:	4a2c      	ldr	r2, [pc, #176]	; (800251c <sys_heap_aligned_alloc+0xf8>)
 800246a:	482d      	ldr	r0, [pc, #180]	; (8002520 <sys_heap_aligned_alloc+0xfc>)
 800246c:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8002470:	f008 ffcf 	bl	800b412 <assert_print>
 8002474:	482b      	ldr	r0, [pc, #172]	; (8002524 <sys_heap_aligned_alloc+0x100>)
 8002476:	f008 ffcc 	bl	800b412 <assert_print>
 800247a:	4828      	ldr	r0, [pc, #160]	; (800251c <sys_heap_aligned_alloc+0xf8>)
 800247c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002480:	f008 ffc0 	bl	800b404 <assert_post_action>
		rew = 0;
 8002484:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
 8002486:	2204      	movs	r2, #4
 8002488:	e7e1      	b.n	800244e <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
 800248a:	68b3      	ldr	r3, [r6, #8]
 800248c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
 8002490:	d9de      	bls.n	8002450 <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8002492:	f104 010b 	add.w	r1, r4, #11
 8002496:	4439      	add	r1, r7
 8002498:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 800249a:	08c9      	lsrs	r1, r1, #3
 800249c:	4630      	mov	r0, r6
 800249e:	f008 fef1 	bl	800b284 <alloc_chunk>
	if (c0 == 0) {
 80024a2:	4680      	mov	r8, r0
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d0d3      	beq.n	8002450 <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 80024a8:	f109 0504 	add.w	r5, r9, #4
 80024ac:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 80024b0:	1e7b      	subs	r3, r7, #1
 80024b2:	4435      	add	r5, r6
 80024b4:	441d      	add	r5, r3
 80024b6:	427f      	negs	r7, r7
 80024b8:	403d      	ands	r5, r7
 80024ba:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 80024be:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 80024c0:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 80024c2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 80024c4:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 80024c6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
 80024ca:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
 80024cc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 80024d0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
 80024d4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
 80024d8:	d208      	bcs.n	80024ec <sys_heap_aligned_alloc+0xc8>
		split_chunks(h, c0, c);
 80024da:	4601      	mov	r1, r0
 80024dc:	463a      	mov	r2, r7
 80024de:	4630      	mov	r0, r6
 80024e0:	f008 ff07 	bl	800b2f2 <split_chunks>
		free_list_add(h, c0);
 80024e4:	4641      	mov	r1, r8
 80024e6:	4630      	mov	r0, r6
 80024e8:	f008 fe88 	bl	800b1fc <free_list_add>
	return c + chunk_size(h, c);
 80024ec:	4639      	mov	r1, r7
 80024ee:	4630      	mov	r0, r6
 80024f0:	f008 fe7f 	bl	800b1f2 <chunk_size>
 80024f4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
 80024f6:	4284      	cmp	r4, r0
 80024f8:	d207      	bcs.n	800250a <sys_heap_aligned_alloc+0xe6>
		split_chunks(h, c, c_end);
 80024fa:	4630      	mov	r0, r6
 80024fc:	4622      	mov	r2, r4
 80024fe:	f008 fef8 	bl	800b2f2 <split_chunks>
		free_list_add(h, c_end);
 8002502:	4621      	mov	r1, r4
 8002504:	4630      	mov	r0, r6
 8002506:	f008 fe79 	bl	800b1fc <free_list_add>
	void *cmem = &buf[c];
 800250a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800250e:	8873      	ldrh	r3, [r6, #2]
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	8073      	strh	r3, [r6, #2]
 8002516:	e79c      	b.n	8002452 <sys_heap_aligned_alloc+0x2e>
 8002518:	08011a6f 	.word	0x08011a6f
 800251c:	080119a3 	.word	0x080119a3
 8002520:	080118c5 	.word	0x080118c5
 8002524:	08011a8a 	.word	0x08011a8a

08002528 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
 8002528:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
 8002530:	d30e      	bcc.n	8002550 <sys_heap_init+0x28>
 8002532:	493b      	ldr	r1, [pc, #236]	; (8002620 <sys_heap_init+0xf8>)
 8002534:	4a3b      	ldr	r2, [pc, #236]	; (8002624 <sys_heap_init+0xfc>)
 8002536:	483c      	ldr	r0, [pc, #240]	; (8002628 <sys_heap_init+0x100>)
 8002538:	f240 13eb 	movw	r3, #491	; 0x1eb
 800253c:	f008 ff69 	bl	800b412 <assert_print>
 8002540:	483a      	ldr	r0, [pc, #232]	; (800262c <sys_heap_init+0x104>)
 8002542:	f008 ff66 	bl	800b412 <assert_print>
 8002546:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
 800254a:	4836      	ldr	r0, [pc, #216]	; (8002624 <sys_heap_init+0xfc>)
 800254c:	f008 ff5a 	bl	800b404 <assert_post_action>
 8002550:	2a04      	cmp	r2, #4
 8002552:	d80c      	bhi.n	800256e <sys_heap_init+0x46>
 8002554:	4936      	ldr	r1, [pc, #216]	; (8002630 <sys_heap_init+0x108>)
 8002556:	4a33      	ldr	r2, [pc, #204]	; (8002624 <sys_heap_init+0xfc>)
 8002558:	4833      	ldr	r0, [pc, #204]	; (8002628 <sys_heap_init+0x100>)
 800255a:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 800255e:	f008 ff58 	bl	800b412 <assert_print>
 8002562:	4834      	ldr	r0, [pc, #208]	; (8002634 <sys_heap_init+0x10c>)
 8002564:	f008 ff55 	bl	800b412 <assert_print>
 8002568:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800256c:	e7ed      	b.n	800254a <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
 800256e:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8002570:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8002572:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8002574:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8002578:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800257c:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
 800257e:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8002580:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
 8002584:	d80c      	bhi.n	80025a0 <sys_heap_init+0x78>
 8002586:	492c      	ldr	r1, [pc, #176]	; (8002638 <sys_heap_init+0x110>)
 8002588:	4a26      	ldr	r2, [pc, #152]	; (8002624 <sys_heap_init+0xfc>)
 800258a:	4827      	ldr	r0, [pc, #156]	; (8002628 <sys_heap_init+0x100>)
 800258c:	f240 13fb 	movw	r3, #507	; 0x1fb
 8002590:	f008 ff3f 	bl	800b412 <assert_print>
 8002594:	4827      	ldr	r0, [pc, #156]	; (8002634 <sys_heap_init+0x10c>)
 8002596:	f008 ff3c 	bl	800b412 <assert_print>
 800259a:	f240 11fb 	movw	r1, #507	; 0x1fb
 800259e:	e7d4      	b.n	800254a <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 80025a0:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 80025a4:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 80025a8:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
 80025ac:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80025ae:	3107      	adds	r1, #7
 80025b0:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
 80025b2:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
 80025b4:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
 80025b6:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
 80025b8:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
 80025bc:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
 80025be:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
 80025c0:	d90c      	bls.n	80025dc <sys_heap_init+0xb4>
 80025c2:	491e      	ldr	r1, [pc, #120]	; (800263c <sys_heap_init+0x114>)
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <sys_heap_init+0xfc>)
 80025c6:	4818      	ldr	r0, [pc, #96]	; (8002628 <sys_heap_init+0x100>)
 80025c8:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80025cc:	f008 ff21 	bl	800b412 <assert_print>
 80025d0:	4818      	ldr	r0, [pc, #96]	; (8002634 <sys_heap_init+0x10c>)
 80025d2:	f008 ff1e 	bl	800b412 <assert_print>
 80025d6:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80025da:	e7b6      	b.n	800254a <sys_heap_init+0x22>
 80025dc:	f100 050c 	add.w	r5, r0, #12
 80025e0:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
 80025e4:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
 80025e8:	42b5      	cmp	r5, r6
 80025ea:	d1fb      	bne.n	80025e4 <sys_heap_init+0xbc>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80025ec:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80025ee:	f045 0501 	orr.w	r5, r5, #1
 80025f2:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
 80025f4:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 80025f8:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80025fa:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
 80025fc:	8004      	strh	r4, [r0, #0]
 80025fe:	8077      	strh	r7, [r6, #2]
 8002600:	1886      	adds	r6, r0, r2
 8002602:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
 8002606:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
 800260a:	8074      	strh	r4, [r6, #2]
 800260c:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800260e:	885a      	ldrh	r2, [r3, #2]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
 8002616:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 800261a:	f008 bdef 	b.w	800b1fc <free_list_add>
 800261e:	bf00      	nop
 8002620:	08011aa7 	.word	0x08011aa7
 8002624:	080119a3 	.word	0x080119a3
 8002628:	080118c5 	.word	0x080118c5
 800262c:	08011abd 	.word	0x08011abd
 8002630:	08011ad4 	.word	0x08011ad4
 8002634:	08011af5 	.word	0x08011af5
 8002638:	08011b0e 	.word	0x08011b0e
 800263c:	08011b37 	.word	0x08011b37

08002640 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
 8002642:	4e09      	ldr	r6, [pc, #36]	; (8002668 <extract_decimal+0x28>)
 8002644:	6801      	ldr	r1, [r0, #0]
{
 8002646:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
 8002648:	270a      	movs	r7, #10
	size_t val = 0;
 800264a:	2000      	movs	r0, #0
 800264c:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
 800264e:	3101      	adds	r1, #1
 8002650:	781c      	ldrb	r4, [r3, #0]
 8002652:	5d35      	ldrb	r5, [r6, r4]
 8002654:	076d      	lsls	r5, r5, #29
 8002656:	d401      	bmi.n	800265c <extract_decimal+0x1c>
	}
	*str = sp;
 8002658:	6013      	str	r3, [r2, #0]
	return val;
}
 800265a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 800265c:	fb07 4300 	mla	r3, r7, r0, r4
 8002660:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002664:	e7f2      	b.n	800264c <extract_decimal+0xc>
 8002666:	bf00      	nop
 8002668:	0801361f 	.word	0x0801361f

0800266c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 800266c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002670:	4615      	mov	r5, r2
 8002672:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8002674:	78d3      	ldrb	r3, [r2, #3]
 8002676:	4a22      	ldr	r2, [pc, #136]	; (8002700 <encode_uint+0x94>)
 8002678:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
 800267c:	2b6f      	cmp	r3, #111	; 0x6f
{
 800267e:	4680      	mov	r8, r0
 8002680:	460f      	mov	r7, r1
 8002682:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8002686:	d029      	beq.n	80026dc <encode_uint+0x70>
 8002688:	d824      	bhi.n	80026d4 <encode_uint+0x68>
		return 10;
 800268a:	2b58      	cmp	r3, #88	; 0x58
 800268c:	bf0c      	ite	eq
 800268e:	2610      	moveq	r6, #16
 8002690:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8002692:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
 8002696:	4632      	mov	r2, r6
 8002698:	2300      	movs	r3, #0
 800269a:	4640      	mov	r0, r8
 800269c:	4639      	mov	r1, r7
 800269e:	f7fe fa63 	bl	8000b68 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
 80026a2:	2a09      	cmp	r2, #9
 80026a4:	b2d4      	uxtb	r4, r2
 80026a6:	d81e      	bhi.n	80026e6 <encode_uint+0x7a>
 80026a8:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
 80026aa:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80026ac:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 80026ae:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80026b2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 80026b6:	d301      	bcc.n	80026bc <encode_uint+0x50>
 80026b8:	45d1      	cmp	r9, sl
 80026ba:	d811      	bhi.n	80026e0 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 80026bc:	782b      	ldrb	r3, [r5, #0]
 80026be:	069b      	lsls	r3, r3, #26
 80026c0:	d505      	bpl.n	80026ce <encode_uint+0x62>
		if (radix == 8) {
 80026c2:	2e08      	cmp	r6, #8
 80026c4:	d115      	bne.n	80026f2 <encode_uint+0x86>
			conv->altform_0 = true;
 80026c6:	78ab      	ldrb	r3, [r5, #2]
 80026c8:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
 80026cc:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
 80026ce:	4648      	mov	r0, r9
 80026d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 80026d4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 80026d8:	2b70      	cmp	r3, #112	; 0x70
 80026da:	e7d7      	b.n	800268c <encode_uint+0x20>
	switch (specifier) {
 80026dc:	2608      	movs	r6, #8
 80026de:	e7d8      	b.n	8002692 <encode_uint+0x26>
		value /= radix;
 80026e0:	4680      	mov	r8, r0
 80026e2:	460f      	mov	r7, r1
 80026e4:	e7d7      	b.n	8002696 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80026e6:	f1bb 0f01 	cmp.w	fp, #1
 80026ea:	bf0c      	ite	eq
 80026ec:	3437      	addeq	r4, #55	; 0x37
 80026ee:	3457      	addne	r4, #87	; 0x57
 80026f0:	e7db      	b.n	80026aa <encode_uint+0x3e>
		} else if (radix == 16) {
 80026f2:	2e10      	cmp	r6, #16
 80026f4:	d1eb      	bne.n	80026ce <encode_uint+0x62>
			conv->altform_0c = true;
 80026f6:	78ab      	ldrb	r3, [r5, #2]
 80026f8:	f043 0310 	orr.w	r3, r3, #16
 80026fc:	e7e6      	b.n	80026cc <encode_uint+0x60>
 80026fe:	bf00      	nop
 8002700:	0801361f 	.word	0x0801361f

08002704 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8002704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002708:	b09f      	sub	sp, #124	; 0x7c
 800270a:	4682      	mov	sl, r0
 800270c:	9103      	str	r1, [sp, #12]
 800270e:	4616      	mov	r6, r2
 8002710:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8002712:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8002714:	7830      	ldrb	r0, [r6, #0]
 8002716:	b910      	cbnz	r0, 800271e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8002718:	4628      	mov	r0, r5
 800271a:	f000 bd87 	b.w	800322c <z_cbvprintf_impl+0xb28>
			OUTC(*fp++);
 800271e:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
 8002720:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8002722:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
 8002724:	d006      	beq.n	8002734 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
 8002726:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
 8002728:	47d0      	blx	sl
 800272a:	2800      	cmp	r0, #0
 800272c:	f2c0 857e 	blt.w	800322c <z_cbvprintf_impl+0xb28>
 8002730:	3501      	adds	r5, #1
		if (bps == NULL) {
 8002732:	e21f      	b.n	8002b74 <z_cbvprintf_impl+0x470>
		} state = {
 8002734:	2218      	movs	r2, #24
 8002736:	2100      	movs	r1, #0
 8002738:	a810      	add	r0, sp, #64	; 0x40
 800273a:	f009 fdee 	bl	800c31a <memset>
	if (*sp == '%') {
 800273e:	7873      	ldrb	r3, [r6, #1]
 8002740:	2b25      	cmp	r3, #37	; 0x25
 8002742:	f000 80bc 	beq.w	80028be <z_cbvprintf_impl+0x1ba>
 8002746:	2300      	movs	r3, #0
 8002748:	1c71      	adds	r1, r6, #1
 800274a:	4698      	mov	r8, r3
 800274c:	469e      	mov	lr, r3
 800274e:	469c      	mov	ip, r3
 8002750:	4618      	mov	r0, r3
 8002752:	460f      	mov	r7, r1
		switch (*sp) {
 8002754:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002758:	2a2b      	cmp	r2, #43	; 0x2b
 800275a:	f000 80df 	beq.w	800291c <z_cbvprintf_impl+0x218>
 800275e:	f200 80d6 	bhi.w	800290e <z_cbvprintf_impl+0x20a>
 8002762:	2a20      	cmp	r2, #32
 8002764:	f000 80dd 	beq.w	8002922 <z_cbvprintf_impl+0x21e>
 8002768:	2a23      	cmp	r2, #35	; 0x23
 800276a:	f000 80dd 	beq.w	8002928 <z_cbvprintf_impl+0x224>
 800276e:	b12b      	cbz	r3, 800277c <z_cbvprintf_impl+0x78>
 8002770:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002778:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800277c:	f1b8 0f00 	cmp.w	r8, #0
 8002780:	d005      	beq.n	800278e <z_cbvprintf_impl+0x8a>
 8002782:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002786:	f043 0320 	orr.w	r3, r3, #32
 800278a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800278e:	f1be 0f00 	cmp.w	lr, #0
 8002792:	d005      	beq.n	80027a0 <z_cbvprintf_impl+0x9c>
 8002794:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002798:	f043 0310 	orr.w	r3, r3, #16
 800279c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 80027a0:	f1bc 0f00 	cmp.w	ip, #0
 80027a4:	d005      	beq.n	80027b2 <z_cbvprintf_impl+0xae>
 80027a6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80027aa:	f043 0308 	orr.w	r3, r3, #8
 80027ae:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 80027b2:	b128      	cbz	r0, 80027c0 <z_cbvprintf_impl+0xbc>
 80027b4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
 80027c0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80027c4:	f003 0144 	and.w	r1, r3, #68	; 0x44
 80027c8:	2944      	cmp	r1, #68	; 0x44
 80027ca:	d103      	bne.n	80027d4 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
 80027cc:	f36f 1386 	bfc	r3, #6, #1
 80027d0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
 80027d4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80027d8:	970e      	str	r7, [sp, #56]	; 0x38
 80027da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
 80027de:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 80027e0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
 80027e4:	f040 80a5 	bne.w	8002932 <z_cbvprintf_impl+0x22e>
		conv->width_star = true;
 80027e8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
 80027f4:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	2a2e      	cmp	r2, #46	; 0x2e
 80027fa:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 80027fe:	bf0c      	ite	eq
 8002800:	2101      	moveq	r1, #1
 8002802:	2100      	movne	r1, #0
 8002804:	f361 0241 	bfi	r2, r1, #1, #1
 8002808:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
 800280c:	d10c      	bne.n	8002828 <z_cbvprintf_impl+0x124>
	++sp;
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
 8002812:	785a      	ldrb	r2, [r3, #1]
 8002814:	2a2a      	cmp	r2, #42	; 0x2a
 8002816:	f040 809c 	bne.w	8002952 <z_cbvprintf_impl+0x24e>
		conv->prec_star = true;
 800281a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800281e:	f042 0204 	orr.w	r2, r2, #4
 8002822:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
 8002826:	3302      	adds	r3, #2
	switch (*sp) {
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	2a6c      	cmp	r2, #108	; 0x6c
 800282c:	f000 80bd 	beq.w	80029aa <z_cbvprintf_impl+0x2a6>
 8002830:	f200 809f 	bhi.w	8002972 <z_cbvprintf_impl+0x26e>
 8002834:	2a68      	cmp	r2, #104	; 0x68
 8002836:	f000 80a5 	beq.w	8002984 <z_cbvprintf_impl+0x280>
 800283a:	2a6a      	cmp	r2, #106	; 0x6a
 800283c:	f000 80be 	beq.w	80029bc <z_cbvprintf_impl+0x2b8>
 8002840:	2a4c      	cmp	r2, #76	; 0x4c
 8002842:	f000 80c3 	beq.w	80029cc <z_cbvprintf_impl+0x2c8>
	conv->specifier = *sp++;
 8002846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800284a:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
 800284c:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 800284e:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
 8002852:	f200 8105 	bhi.w	8002a60 <z_cbvprintf_impl+0x35c>
 8002856:	2a6d      	cmp	r2, #109	; 0x6d
 8002858:	f200 80c5 	bhi.w	80029e6 <z_cbvprintf_impl+0x2e2>
 800285c:	2a69      	cmp	r2, #105	; 0x69
 800285e:	f200 80ff 	bhi.w	8002a60 <z_cbvprintf_impl+0x35c>
 8002862:	2a57      	cmp	r2, #87	; 0x57
 8002864:	f200 80de 	bhi.w	8002a24 <z_cbvprintf_impl+0x320>
 8002868:	2a41      	cmp	r2, #65	; 0x41
 800286a:	d004      	beq.n	8002876 <z_cbvprintf_impl+0x172>
 800286c:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8002870:	2b02      	cmp	r3, #2
 8002872:	f200 80f5 	bhi.w	8002a60 <z_cbvprintf_impl+0x35c>
		conv->specifier_cat = SPECIFIER_FP;
 8002876:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
 800287a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
 800287e:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
 8002880:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
 8002884:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
 8002888:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
 800288c:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
 8002890:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
 8002894:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
 8002898:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
 800289c:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
 800289e:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
 80028a2:	b2cb      	uxtb	r3, r1
 80028a4:	f100 811b 	bmi.w	8002ade <z_cbvprintf_impl+0x3da>
		if (conv->length_mod == LENGTH_L) {
 80028a8:	f003 0278 	and.w	r2, r3, #120	; 0x78
 80028ac:	2a18      	cmp	r2, #24
 80028ae:	f040 8105 	bne.w	8002abc <z_cbvprintf_impl+0x3b8>
			conv->length_mod = LENGTH_NONE;
 80028b2:	f36f 03c6 	bfc	r3, #3, #4
 80028b6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e0f4      	b.n	8002aa8 <z_cbvprintf_impl+0x3a4>
		conv->specifier = *sp++;
 80028be:	1cb2      	adds	r2, r6, #2
 80028c0:	9206      	str	r2, [sp, #24]
 80028c2:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
 80028c6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 80028ca:	07df      	lsls	r7, r3, #31
 80028cc:	f140 8109 	bpl.w	8002ae2 <z_cbvprintf_impl+0x3de>
			width = va_arg(ap, int);
 80028d0:	f854 2b04 	ldr.w	r2, [r4], #4
 80028d4:	9204      	str	r2, [sp, #16]
			if (width < 0) {
 80028d6:	2a00      	cmp	r2, #0
 80028d8:	da08      	bge.n	80028ec <z_cbvprintf_impl+0x1e8>
				conv->flag_dash = true;
 80028da:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80028de:	f042 0204 	orr.w	r2, r2, #4
 80028e2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
 80028e6:	9a04      	ldr	r2, [sp, #16]
 80028e8:	4252      	negs	r2, r2
		int width = -1;
 80028ea:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
 80028ec:	0758      	lsls	r0, r3, #29
 80028ee:	f140 8100 	bpl.w	8002af2 <z_cbvprintf_impl+0x3ee>
			int arg = va_arg(ap, int);
 80028f2:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
 80028f6:	2f00      	cmp	r7, #0
 80028f8:	f280 80ff 	bge.w	8002afa <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
 80028fc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8002900:	f36f 0341 	bfc	r3, #1, #1
 8002904:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
 8002908:	f04f 37ff 	mov.w	r7, #4294967295
 800290c:	e0f5      	b.n	8002afa <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
 800290e:	2a2d      	cmp	r2, #45	; 0x2d
 8002910:	d00d      	beq.n	800292e <z_cbvprintf_impl+0x22a>
 8002912:	2a30      	cmp	r2, #48	; 0x30
 8002914:	f47f af2b 	bne.w	800276e <z_cbvprintf_impl+0x6a>
 8002918:	2301      	movs	r3, #1
	} while (loop);
 800291a:	e71a      	b.n	8002752 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
 800291c:	f04f 0c01 	mov.w	ip, #1
 8002920:	e717      	b.n	8002752 <z_cbvprintf_impl+0x4e>
 8002922:	f04f 0e01 	mov.w	lr, #1
 8002926:	e714      	b.n	8002752 <z_cbvprintf_impl+0x4e>
 8002928:	f04f 0801 	mov.w	r8, #1
 800292c:	e711      	b.n	8002752 <z_cbvprintf_impl+0x4e>
 800292e:	2001      	movs	r0, #1
 8002930:	e70f      	b.n	8002752 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
 8002932:	a80e      	add	r0, sp, #56	; 0x38
 8002934:	f7ff fe84 	bl	8002640 <extract_decimal>
	if (sp != wp) {
 8002938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800293a:	42bb      	cmp	r3, r7
 800293c:	f43f af5b 	beq.w	80027f6 <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
 8002940:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
 8002944:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
 8002946:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
 8002948:	f360 0241 	bfi	r2, r0, #1, #1
 800294c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 8002950:	e751      	b.n	80027f6 <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
 8002952:	a80e      	add	r0, sp, #56	; 0x38
 8002954:	f7ff fe74 	bl	8002640 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8002958:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
 800295c:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
 800295e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002962:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
 8002966:	f362 0341 	bfi	r3, r2, #1, #1
 800296a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
 800296e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002970:	e75a      	b.n	8002828 <z_cbvprintf_impl+0x124>
	switch (*sp) {
 8002972:	2a74      	cmp	r2, #116	; 0x74
 8002974:	d026      	beq.n	80029c4 <z_cbvprintf_impl+0x2c0>
 8002976:	2a7a      	cmp	r2, #122	; 0x7a
 8002978:	f47f af65 	bne.w	8002846 <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
 800297c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8002980:	2106      	movs	r1, #6
 8002982:	e00c      	b.n	800299e <z_cbvprintf_impl+0x29a>
		if (*++sp == 'h') {
 8002984:	785a      	ldrb	r2, [r3, #1]
 8002986:	2a68      	cmp	r2, #104	; 0x68
 8002988:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800298c:	d106      	bne.n	800299c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_HH;
 800298e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8002990:	f361 02c6 	bfi	r2, r1, #3, #4
 8002994:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
 8002998:	3302      	adds	r3, #2
 800299a:	e754      	b.n	8002846 <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
 800299c:	2102      	movs	r1, #2
 800299e:	f361 02c6 	bfi	r2, r1, #3, #4
 80029a2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
 80029a6:	3301      	adds	r3, #1
 80029a8:	e74d      	b.n	8002846 <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
 80029aa:	785a      	ldrb	r2, [r3, #1]
 80029ac:	2a6c      	cmp	r2, #108	; 0x6c
 80029ae:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 80029b2:	d101      	bne.n	80029b8 <z_cbvprintf_impl+0x2b4>
			conv->length_mod = LENGTH_LL;
 80029b4:	2104      	movs	r1, #4
 80029b6:	e7eb      	b.n	8002990 <z_cbvprintf_impl+0x28c>
			conv->length_mod = LENGTH_L;
 80029b8:	2103      	movs	r1, #3
 80029ba:	e7f0      	b.n	800299e <z_cbvprintf_impl+0x29a>
		conv->length_mod = LENGTH_J;
 80029bc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 80029c0:	2105      	movs	r1, #5
 80029c2:	e7ec      	b.n	800299e <z_cbvprintf_impl+0x29a>
		conv->length_mod = LENGTH_T;
 80029c4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 80029c8:	2107      	movs	r1, #7
 80029ca:	e7e8      	b.n	800299e <z_cbvprintf_impl+0x29a>
		conv->unsupported = true;
 80029cc:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80029d0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80029d4:	f022 0202 	bic.w	r2, r2, #2
 80029d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029dc:	f042 0202 	orr.w	r2, r2, #2
 80029e0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
 80029e4:	e7df      	b.n	80029a6 <z_cbvprintf_impl+0x2a2>
	switch (conv->specifier) {
 80029e6:	3a6e      	subs	r2, #110	; 0x6e
 80029e8:	b2d3      	uxtb	r3, r2
 80029ea:	2201      	movs	r2, #1
 80029ec:	409a      	lsls	r2, r3
 80029ee:	f240 4382 	movw	r3, #1154	; 0x482
 80029f2:	421a      	tst	r2, r3
 80029f4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 80029f8:	d139      	bne.n	8002a6e <z_cbvprintf_impl+0x36a>
 80029fa:	f012 0f24 	tst.w	r2, #36	; 0x24
 80029fe:	d161      	bne.n	8002ac4 <z_cbvprintf_impl+0x3c0>
 8002a00:	07d1      	lsls	r1, r2, #31
 8002a02:	d52d      	bpl.n	8002a60 <z_cbvprintf_impl+0x35c>
		conv->specifier_cat = SPECIFIER_PTR;
 8002a04:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002a08:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8002a0c:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 8002a10:	2103      	movs	r1, #3
 8002a12:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002a16:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
 8002a1a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002a1e:	eb43 030c 	adc.w	r3, r3, ip
 8002a22:	e041      	b.n	8002aa8 <z_cbvprintf_impl+0x3a4>
	switch (conv->specifier) {
 8002a24:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 8002a28:	b2c9      	uxtb	r1, r1
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	fa00 f101 	lsl.w	r1, r0, r1
 8002a30:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 8002a34:	f47f af1f 	bne.w	8002876 <z_cbvprintf_impl+0x172>
 8002a38:	f640 0301 	movw	r3, #2049	; 0x801
 8002a3c:	4219      	tst	r1, r3
 8002a3e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8002a42:	d11a      	bne.n	8002a7a <z_cbvprintf_impl+0x376>
 8002a44:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 8002a48:	d00a      	beq.n	8002a60 <z_cbvprintf_impl+0x35c>
		conv->specifier_cat = SPECIFIER_SINT;
 8002a4a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8002a4e:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002a52:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8002a56:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8002a58:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002a5c:	f47f af2d 	bne.w	80028ba <z_cbvprintf_impl+0x1b6>
		conv->invalid = true;
 8002a60:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
 8002a6c:	e725      	b.n	80028ba <z_cbvprintf_impl+0x1b6>
		conv->specifier_cat = SPECIFIER_UINT;
 8002a6e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8002a72:	2102      	movs	r1, #2
 8002a74:	f361 0202 	bfi	r2, r1, #0, #3
 8002a78:	e7eb      	b.n	8002a52 <z_cbvprintf_impl+0x34e>
 8002a7a:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 8002a7e:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002a80:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8002a84:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002a88:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8002a8a:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
 8002a8e:	bf02      	ittt	eq
 8002a90:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
 8002a94:	f041 0101 	orreq.w	r1, r1, #1
 8002a98:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
 8002a9c:	2a63      	cmp	r2, #99	; 0x63
 8002a9e:	f47f af0c 	bne.w	80028ba <z_cbvprintf_impl+0x1b6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8002aa2:	3b00      	subs	r3, #0
 8002aa4:	bf18      	it	ne
 8002aa6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8002aa8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8002aac:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	f363 0241 	bfi	r2, r3, #1, #1
 8002ab6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
 8002aba:	e704      	b.n	80028c6 <z_cbvprintf_impl+0x1c2>
		} else if ((conv->length_mod != LENGTH_NONE)
 8002abc:	f013 0f38 	tst.w	r3, #56	; 0x38
 8002ac0:	d1ce      	bne.n	8002a60 <z_cbvprintf_impl+0x35c>
 8002ac2:	e6fa      	b.n	80028ba <z_cbvprintf_impl+0x1b6>
		conv->specifier_cat = SPECIFIER_PTR;
 8002ac4:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8002ac8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 8002aca:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8002ace:	f361 0202 	bfi	r2, r1, #0, #3
 8002ad2:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	e7e4      	b.n	8002aa8 <z_cbvprintf_impl+0x3a4>
			unsupported = true;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e7e2      	b.n	8002aa8 <z_cbvprintf_impl+0x3a4>
		} else if (conv->width_present) {
 8002ae2:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
 8002ae6:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8002ae8:	bfb4      	ite	lt
 8002aea:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
 8002aec:	f04f 32ff 	movge.w	r2, #4294967295
 8002af0:	e6fb      	b.n	80028ea <z_cbvprintf_impl+0x1e6>
		} else if (conv->prec_present) {
 8002af2:	0799      	lsls	r1, r3, #30
 8002af4:	f57f af08 	bpl.w	8002908 <z_cbvprintf_impl+0x204>
			precision = conv->prec_value;
 8002af8:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
 8002afa:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
 8002afe:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8002b00:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
 8002b04:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 8002b08:	f003 0207 	and.w	r2, r3, #7
 8002b0c:	2a04      	cmp	r2, #4
 8002b0e:	d107      	bne.n	8002b20 <z_cbvprintf_impl+0x41c>
		    && !conv->prec_present) {
 8002b10:	078a      	lsls	r2, r1, #30
 8002b12:	d405      	bmi.n	8002b20 <z_cbvprintf_impl+0x41c>
			if (conv->specifier_a) {
 8002b14:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	bfac      	ite	ge
 8002b1c:	2706      	movge	r7, #6
 8002b1e:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
 8002b20:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8002b24:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8002b26:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8002b2a:	d133      	bne.n	8002b94 <z_cbvprintf_impl+0x490>
			switch (length_mod) {
 8002b2c:	1ecb      	subs	r3, r1, #3
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d804      	bhi.n	8002b3c <z_cbvprintf_impl+0x438>
 8002b32:	e8df f003 	tbb	[pc, r3]
 8002b36:	4621      	.short	0x4621
 8002b38:	2146      	.short	0x2146
 8002b3a:	21          	.byte	0x21
 8002b3b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8002b3c:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 8002b3e:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 8002b40:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8002b44:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
 8002b48:	d11c      	bne.n	8002b84 <z_cbvprintf_impl+0x480>
				value->sint = (signed char)value->sint;
 8002b4a:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
 8002b4e:	17da      	asrs	r2, r3, #31
 8002b50:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
 8002b54:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 8002b56:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002b5a:	9307      	str	r3, [sp, #28]
 8002b5c:	079b      	lsls	r3, r3, #30
 8002b5e:	d050      	beq.n	8002c02 <z_cbvprintf_impl+0x4fe>
			OUTS(sp, fp);
 8002b60:	9b06      	ldr	r3, [sp, #24]
 8002b62:	9903      	ldr	r1, [sp, #12]
 8002b64:	4632      	mov	r2, r6
 8002b66:	4650      	mov	r0, sl
 8002b68:	f008 fc35 	bl	800b3d6 <outs>
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	f2c0 835d 	blt.w	800322c <z_cbvprintf_impl+0xb28>
 8002b72:	4405      	add	r5, r0
			continue;
 8002b74:	9e06      	ldr	r6, [sp, #24]
 8002b76:	e5cd      	b.n	8002714 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8002b78:	f854 3b04 	ldr.w	r3, [r4], #4
 8002b7c:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 8002b7e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8002b82:	e7e8      	b.n	8002b56 <z_cbvprintf_impl+0x452>
			} else if (length_mod == LENGTH_H) {
 8002b84:	2902      	cmp	r1, #2
 8002b86:	d1e5      	bne.n	8002b54 <z_cbvprintf_impl+0x450>
				value->sint = (short)value->sint;
 8002b88:	b21a      	sxth	r2, r3
 8002b8a:	f343 33c0 	sbfx	r3, r3, #15, #1
 8002b8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002b92:	e7df      	b.n	8002b54 <z_cbvprintf_impl+0x450>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d124      	bne.n	8002be2 <z_cbvprintf_impl+0x4de>
			switch (length_mod) {
 8002b98:	1ecb      	subs	r3, r1, #3
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d804      	bhi.n	8002ba8 <z_cbvprintf_impl+0x4a4>
 8002b9e:	e8df f003 	tbb	[pc, r3]
 8002ba2:	1018      	.short	0x1018
 8002ba4:	1810      	.short	0x1810
 8002ba6:	18          	.byte	0x18
 8002ba7:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8002ba8:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
 8002baa:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	d014      	beq.n	8002bde <z_cbvprintf_impl+0x4da>
			} else if (length_mod == LENGTH_H) {
 8002bb4:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 8002bb6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
 8002bba:	d1cc      	bne.n	8002b56 <z_cbvprintf_impl+0x452>
				value->uint = (unsigned short)value->uint;
 8002bbc:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 8002bbe:	9310      	str	r3, [sp, #64]	; 0x40
 8002bc0:	e7c9      	b.n	8002b56 <z_cbvprintf_impl+0x452>
					(uint_value_type)va_arg(ap,
 8002bc2:	3407      	adds	r4, #7
 8002bc4:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8002bc8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8002bcc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
 8002bd0:	e7c1      	b.n	8002b56 <z_cbvprintf_impl+0x452>
					(uint_value_type)va_arg(ap, size_t);
 8002bd2:	f854 3b04 	ldr.w	r3, [r4], #4
 8002bd6:	9310      	str	r3, [sp, #64]	; 0x40
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
 8002bdc:	e7bb      	b.n	8002b56 <z_cbvprintf_impl+0x452>
				value->uint = (unsigned char)value->uint;
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	e7cd      	b.n	8002b7e <z_cbvprintf_impl+0x47a>
		} else if (specifier_cat == SPECIFIER_FP) {
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d108      	bne.n	8002bf8 <z_cbvprintf_impl+0x4f4>
					(sint_value_type)va_arg(ap, long long);
 8002be6:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 8002be8:	f024 0407 	bic.w	r4, r4, #7
 8002bec:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002bf0:	3408      	adds	r4, #8
 8002bf2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002bf6:	e7ae      	b.n	8002b56 <z_cbvprintf_impl+0x452>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d1ac      	bne.n	8002b56 <z_cbvprintf_impl+0x452>
			value->ptr = va_arg(ap, void *);
 8002bfc:	f854 3b04 	ldr.w	r3, [r4], #4
 8002c00:	e7dd      	b.n	8002bbe <z_cbvprintf_impl+0x4ba>
		switch (conv->specifier) {
 8002c02:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
 8002c06:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
 8002c0a:	d8b3      	bhi.n	8002b74 <z_cbvprintf_impl+0x470>
 8002c0c:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
 8002c10:	d849      	bhi.n	8002ca6 <z_cbvprintf_impl+0x5a2>
 8002c12:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8002c16:	f000 8091 	beq.w	8002d3c <z_cbvprintf_impl+0x638>
 8002c1a:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
 8002c1e:	d9a9      	bls.n	8002b74 <z_cbvprintf_impl+0x470>
 8002c20:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
 8002c24:	d003      	beq.n	8002c2e <z_cbvprintf_impl+0x52a>
 8002c26:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
 8002c2a:	2a02      	cmp	r2, #2
 8002c2c:	d8a2      	bhi.n	8002b74 <z_cbvprintf_impl+0x470>
	} u = {
 8002c2e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	f2c0 8136 	blt.w	8002ea4 <z_cbvprintf_impl+0x7a0>
	} else if (conv->flag_plus) {
 8002c38:	9b07      	ldr	r3, [sp, #28]
 8002c3a:	0718      	lsls	r0, r3, #28
 8002c3c:	f100 8135 	bmi.w	8002eaa <z_cbvprintf_impl+0x7a6>
	} else if (conv->flag_space) {
 8002c40:	f3c3 1900 	ubfx	r9, r3, #4, #1
 8002c44:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8002c48:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 8002c4c:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
 8002c50:	2800      	cmp	r0, #0
 8002c52:	f040 812d 	bne.w	8002eb0 <z_cbvprintf_impl+0x7ac>
 8002c56:	ea51 0602 	orrs.w	r6, r1, r2
 8002c5a:	bf14      	ite	ne
 8002c5c:	2601      	movne	r6, #1
 8002c5e:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
 8002c60:	02d2      	lsls	r2, r2, #11
 8002c62:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
 8002c66:	02c9      	lsls	r1, r1, #11
		c = 'f';
 8002c68:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
 8002c6c:	ea40 0e01 	orr.w	lr, r0, r1
 8002c70:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
 8002c74:	bf08      	it	eq
 8002c76:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
 8002c7a:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 8002c7e:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
 8002c82:	f000 819e 	beq.w	8002fc2 <z_cbvprintf_impl+0x8be>
		if (is_subnormal) {
 8002c86:	2e00      	cmp	r6, #0
 8002c88:	f040 8149 	bne.w	8002f1e <z_cbvprintf_impl+0x81a>
		fract |= BIT_63;
 8002c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002c8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8002c92:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
 8002c96:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8002c98:	2000      	movs	r0, #0
 8002c9a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8002c9e:	4606      	mov	r6, r0
		fract *= 5U;
 8002ca0:	f04f 0c05 	mov.w	ip, #5
 8002ca4:	e155      	b.n	8002f52 <z_cbvprintf_impl+0x84e>
		switch (conv->specifier) {
 8002ca6:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
 8002caa:	2a20      	cmp	r2, #32
 8002cac:	f63f af62 	bhi.w	8002b74 <z_cbvprintf_impl+0x470>
 8002cb0:	a001      	add	r0, pc, #4	; (adr r0, 8002cb8 <z_cbvprintf_impl+0x5b4>)
 8002cb2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002e43 	.word	0x08002e43
 8002cbc:	08002b75 	.word	0x08002b75
 8002cc0:	08002b75 	.word	0x08002b75
 8002cc4:	08002b75 	.word	0x08002b75
 8002cc8:	08002b75 	.word	0x08002b75
 8002ccc:	08002b75 	.word	0x08002b75
 8002cd0:	08002b75 	.word	0x08002b75
 8002cd4:	08002b75 	.word	0x08002b75
 8002cd8:	08002b75 	.word	0x08002b75
 8002cdc:	08002c2f 	.word	0x08002c2f
 8002ce0:	08002b75 	.word	0x08002b75
 8002ce4:	08002dc7 	.word	0x08002dc7
 8002ce8:	08002ddb 	.word	0x08002ddb
 8002cec:	08002c2f 	.word	0x08002c2f
 8002cf0:	08002c2f 	.word	0x08002c2f
 8002cf4:	08002c2f 	.word	0x08002c2f
 8002cf8:	08002b75 	.word	0x08002b75
 8002cfc:	08002ddb 	.word	0x08002ddb
 8002d00:	08002b75 	.word	0x08002b75
 8002d04:	08002b75 	.word	0x08002b75
 8002d08:	08002b75 	.word	0x08002b75
 8002d0c:	08002b75 	.word	0x08002b75
 8002d10:	08002e7d 	.word	0x08002e7d
 8002d14:	08002e43 	.word	0x08002e43
 8002d18:	08002e49 	.word	0x08002e49
 8002d1c:	08002b75 	.word	0x08002b75
 8002d20:	08002b75 	.word	0x08002b75
 8002d24:	08002d43 	.word	0x08002d43
 8002d28:	08002b75 	.word	0x08002b75
 8002d2c:	08002e43 	.word	0x08002e43
 8002d30:	08002b75 	.word	0x08002b75
 8002d34:	08002b75 	.word	0x08002b75
 8002d38:	08002e43 	.word	0x08002e43
			OUTC('%');
 8002d3c:	9903      	ldr	r1, [sp, #12]
 8002d3e:	4658      	mov	r0, fp
 8002d40:	e4f2      	b.n	8002728 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
 8002d42:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
 8002d44:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
 8002d46:	db3a      	blt.n	8002dbe <z_cbvprintf_impl+0x6ba>
				len = strnlen(bps, precision);
 8002d48:	4639      	mov	r1, r7
 8002d4a:	4630      	mov	r0, r6
 8002d4c:	f009 fc4f 	bl	800c5ee <strnlen>
			bpe = bps + len;
 8002d50:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
 8002d52:	2e00      	cmp	r6, #0
 8002d54:	f43f af0e 	beq.w	8002b74 <z_cbvprintf_impl+0x470>
		char sign = 0;
 8002d58:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
 8002d5c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8002d60:	f013 0210 	ands.w	r2, r3, #16
 8002d64:	9205      	str	r2, [sp, #20]
 8002d66:	f000 8256 	beq.w	8003216 <z_cbvprintf_impl+0xb12>
			nj_len += 2U;
 8002d6a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8002d6c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
 8002d70:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
 8002d74:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
 8002d76:	bf18      	it	ne
 8002d78:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
 8002d7a:	f8cd 801c 	str.w	r8, [sp, #28]
 8002d7e:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
 8002d80:	bf18      	it	ne
 8002d82:	18c0      	addne	r0, r0, r3
		if (width > 0) {
 8002d84:	9b04      	ldr	r3, [sp, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f340 8260 	ble.w	800324c <z_cbvprintf_impl+0xb48>
			if (!conv->flag_dash) {
 8002d8c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
 8002d90:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
 8002d92:	0750      	lsls	r0, r2, #29
			width -= (int)nj_len;
 8002d94:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
 8002d96:	f3c2 0b80 	ubfx	fp, r2, #2, #1
 8002d9a:	f100 8257 	bmi.w	800324c <z_cbvprintf_impl+0xb48>
				if (conv->flag_zero) {
 8002d9e:	0651      	lsls	r1, r2, #25
 8002da0:	f140 8247 	bpl.w	8003232 <z_cbvprintf_impl+0xb2e>
					if (sign != 0) {
 8002da4:	f1b9 0f00 	cmp.w	r9, #0
 8002da8:	d007      	beq.n	8002dba <z_cbvprintf_impl+0x6b6>
						OUTC(sign);
 8002daa:	9903      	ldr	r1, [sp, #12]
 8002dac:	4648      	mov	r0, r9
 8002dae:	47d0      	blx	sl
 8002db0:	2800      	cmp	r0, #0
 8002db2:	f2c0 823b 	blt.w	800322c <z_cbvprintf_impl+0xb28>
 8002db6:	3501      	adds	r5, #1
						sign = 0;
 8002db8:	46d9      	mov	r9, fp
					pad = '0';
 8002dba:	2230      	movs	r2, #48	; 0x30
 8002dbc:	e23a      	b.n	8003234 <z_cbvprintf_impl+0xb30>
				len = strlen(bps);
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f7fe f902 	bl	8000fc8 <strlen>
 8002dc4:	e7c4      	b.n	8002d50 <z_cbvprintf_impl+0x64c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8002dc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002dc8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
 8002dcc:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
 8002dd0:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
 8002dd4:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	e7c0      	b.n	8002d5c <z_cbvprintf_impl+0x658>
			if (conv->flag_plus) {
 8002dda:	9b07      	ldr	r3, [sp, #28]
 8002ddc:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
 8002dde:	bf58      	it	pl
 8002de0:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
 8002de4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
 8002de8:	bf54      	ite	pl
 8002dea:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
 8002dee:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	da06      	bge.n	8002e04 <z_cbvprintf_impl+0x700>
				value->uint = (uint_value_type)-sint;
 8002df6:	4252      	negs	r2, r2
 8002df8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002dfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
 8002e00:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 8002e04:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002e0e:	ab17      	add	r3, sp, #92	; 0x5c
 8002e10:	aa12      	add	r2, sp, #72	; 0x48
 8002e12:	f7ff fc2b 	bl	800266c <encode_uint>
 8002e16:	4606      	mov	r6, r0
			if (precision >= 0) {
 8002e18:	2f00      	cmp	r7, #0
 8002e1a:	db0c      	blt.n	8002e36 <z_cbvprintf_impl+0x732>
				conv->flag_zero = false;
 8002e1c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
 8002e20:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8002e24:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
 8002e26:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8002e2a:	429f      	cmp	r7, r3
				conv->flag_zero = false;
 8002e2c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
 8002e30:	d901      	bls.n	8002e36 <z_cbvprintf_impl+0x732>
					conv->pad0_value = precision - (int)len;
 8002e32:	1afb      	subs	r3, r7, r3
 8002e34:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
 8002e36:	2e00      	cmp	r6, #0
 8002e38:	f43f ae9c 	beq.w	8002b74 <z_cbvprintf_impl+0x470>
 8002e3c:	f10d 0775 	add.w	r7, sp, #117	; 0x75
 8002e40:	e05b      	b.n	8002efa <z_cbvprintf_impl+0x7f6>
		switch (conv->specifier) {
 8002e42:	f04f 0900 	mov.w	r9, #0
 8002e46:	e7dd      	b.n	8002e04 <z_cbvprintf_impl+0x700>
			if (value->ptr != NULL) {
 8002e48:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	f000 81de 	beq.w	800320c <z_cbvprintf_impl+0xb08>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002e50:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	aa12      	add	r2, sp, #72	; 0x48
 8002e58:	ab17      	add	r3, sp, #92	; 0x5c
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	f7ff fc06 	bl	800266c <encode_uint>
				conv->altform_0c = true;
 8002e60:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8002e64:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002e68:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8002e6c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002e70:	4606      	mov	r6, r0
				conv->altform_0c = true;
 8002e72:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
 8002e76:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
 8002e7a:	e7cd      	b.n	8002e18 <z_cbvprintf_impl+0x714>
				store_count(conv, value->ptr, count);
 8002e7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
 8002e7e:	2907      	cmp	r1, #7
 8002e80:	f63f ae78 	bhi.w	8002b74 <z_cbvprintf_impl+0x470>
 8002e84:	e8df f001 	tbb	[pc, r1]
 8002e88:	0c06040c 	.word	0x0c06040c
 8002e8c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8002e90:	701d      	strb	r5, [r3, #0]
		break;
 8002e92:	e66f      	b.n	8002b74 <z_cbvprintf_impl+0x470>
		*(short *)dp = (short)count;
 8002e94:	801d      	strh	r5, [r3, #0]
		break;
 8002e96:	e66d      	b.n	8002b74 <z_cbvprintf_impl+0x470>
		*(intmax_t *)dp = (intmax_t)count;
 8002e98:	17ea      	asrs	r2, r5, #31
 8002e9a:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8002e9e:	e669      	b.n	8002b74 <z_cbvprintf_impl+0x470>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8002ea0:	601d      	str	r5, [r3, #0]
		break;
 8002ea2:	e667      	b.n	8002b74 <z_cbvprintf_impl+0x470>
		*sign = '-';
 8002ea4:	f04f 092d 	mov.w	r9, #45	; 0x2d
 8002ea8:	e6ce      	b.n	8002c48 <z_cbvprintf_impl+0x544>
		*sign = '+';
 8002eaa:	f04f 092b 	mov.w	r9, #43	; 0x2b
 8002eae:	e6cb      	b.n	8002c48 <z_cbvprintf_impl+0x544>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8002eb0:	f240 76ff 	movw	r6, #2047	; 0x7ff
 8002eb4:	42b0      	cmp	r0, r6
 8002eb6:	d12f      	bne.n	8002f18 <z_cbvprintf_impl+0x814>
			if (isupper((unsigned char)c)) {
 8002eb8:	f10b 0301 	add.w	r3, fp, #1
 8002ebc:	489e      	ldr	r0, [pc, #632]	; (8003138 <z_cbvprintf_impl+0xa34>)
 8002ebe:	b2db      	uxtb	r3, r3
		if (fract == 0) {
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	5cc3      	ldrb	r3, [r0, r3]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	d11e      	bne.n	8002f08 <z_cbvprintf_impl+0x804>
			if (isupper((unsigned char)c)) {
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	bf0b      	itete	eq
 8002ece:	2349      	moveq	r3, #73	; 0x49
 8002ed0:	2369      	movne	r3, #105	; 0x69
 8002ed2:	214e      	moveq	r1, #78	; 0x4e
 8002ed4:	216e      	movne	r1, #110	; 0x6e
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2246      	moveq	r2, #70	; 0x46
 8002eda:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
 8002edc:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
 8002ee0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
 8002ee4:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
 8002ee8:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
 8002eec:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
 8002ef0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
 8002ef4:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
 8002ef8:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
 8002efa:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
 8002efc:	f1b9 0f00 	cmp.w	r9, #0
 8002f00:	f43f af2c 	beq.w	8002d5c <z_cbvprintf_impl+0x658>
			nj_len += 1U;
 8002f04:	3001      	adds	r0, #1
 8002f06:	e729      	b.n	8002d5c <z_cbvprintf_impl+0x658>
			if (isupper((unsigned char)c)) {
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	bf15      	itete	ne
 8002f0c:	236e      	movne	r3, #110	; 0x6e
 8002f0e:	234e      	moveq	r3, #78	; 0x4e
 8002f10:	2161      	movne	r1, #97	; 0x61
 8002f12:	2141      	moveq	r1, #65	; 0x41
 8002f14:	461a      	mov	r2, r3
 8002f16:	e7e1      	b.n	8002edc <z_cbvprintf_impl+0x7d8>
	bool is_subnormal = (expo == 0) && (fract != 0);
 8002f18:	2600      	movs	r6, #0
 8002f1a:	e6a1      	b.n	8002c60 <z_cbvprintf_impl+0x55c>
				expo--;
 8002f1c:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 8002f1e:	1849      	adds	r1, r1, r1
 8002f20:	4152      	adcs	r2, r2
 8002f22:	2a00      	cmp	r2, #0
 8002f24:	dafa      	bge.n	8002f1c <z_cbvprintf_impl+0x818>
 8002f26:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8002f2a:	e6af      	b.n	8002c8c <z_cbvprintf_impl+0x588>
			fract >>= 1;
 8002f2c:	0849      	lsrs	r1, r1, #1
 8002f2e:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
 8002f32:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8002f34:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
 8002f38:	4640      	mov	r0, r8
			expo++;
 8002f3a:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8002f3e:	d2f5      	bcs.n	8002f2c <z_cbvprintf_impl+0x828>
		fract *= 5U;
 8002f40:	fb0c fe02 	mul.w	lr, ip, r2
 8002f44:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
 8002f48:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
 8002f4c:	4472      	add	r2, lr
		decexp--;
 8002f4e:	3e01      	subs	r6, #1
 8002f50:	2001      	movs	r0, #1
	while (expo < -2) {
 8002f52:	f118 0f02 	cmn.w	r8, #2
 8002f56:	dbe9      	blt.n	8002f2c <z_cbvprintf_impl+0x828>
 8002f58:	b108      	cbz	r0, 8002f5e <z_cbvprintf_impl+0x85a>
 8002f5a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
 8002f5e:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
 8002f62:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
 8002f66:	dc2f      	bgt.n	8002fc8 <z_cbvprintf_impl+0x8c4>
	fract >>= (4 - expo);
 8002f68:	f1c8 0004 	rsb	r0, r8, #4
 8002f6c:	f108 081c 	add.w	r8, r8, #28
 8002f70:	f1a0 0c20 	sub.w	ip, r0, #32
 8002f74:	40c2      	lsrs	r2, r0
 8002f76:	fa21 f300 	lsr.w	r3, r1, r0
 8002f7a:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
 8002f7e:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
 8002f82:	ea42 0208 	orr.w	r2, r2, r8
 8002f86:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
 8002f8a:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
 8002f8c:	ea42 020c 	orr.w	r2, r2, ip
 8002f90:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
 8002f92:	d13a      	bne.n	800300a <z_cbvprintf_impl+0x906>
		if (decexp < (-4 + 1) || decexp > precision) {
 8002f94:	1cf3      	adds	r3, r6, #3
 8002f96:	db01      	blt.n	8002f9c <z_cbvprintf_impl+0x898>
 8002f98:	42b7      	cmp	r7, r6
 8002f9a:	da2b      	bge.n	8002ff4 <z_cbvprintf_impl+0x8f0>
			c += 'e' - 'g';  /* e or E */
 8002f9c:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
 8002fa0:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
 8002fa2:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
 8002fa6:	dd7f      	ble.n	80030a8 <z_cbvprintf_impl+0x9a4>
		if (!conv->flag_hash && (precision > 0)) {
 8002fa8:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8002fac:	0680      	lsls	r0, r0, #26
				precision--;
 8002fae:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
 8002fb2:	d479      	bmi.n	80030a8 <z_cbvprintf_impl+0x9a4>
 8002fb4:	1e3b      	subs	r3, r7, #0
 8002fb6:	bf18      	it	ne
 8002fb8:	2301      	movne	r3, #1
	bool prune_zero = false;
 8002fba:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
 8002fbc:	f107 0801 	add.w	r8, r7, #1
 8002fc0:	e02d      	b.n	800301e <z_cbvprintf_impl+0x91a>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8002fc2:	f04f 0800 	mov.w	r8, #0
 8002fc6:	e667      	b.n	8002c98 <z_cbvprintf_impl+0x594>
		fract += 2;
 8002fc8:	3202      	adds	r2, #2
 8002fca:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
 8002fce:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
 8002fd0:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
 8002fd4:	f008 f9d0 	bl	800b378 <_ldiv5>
		expo--;
 8002fd8:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 8002fdc:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
 8002fe0:	3601      	adds	r6, #1
			fract <<= 1;
 8002fe2:	1892      	adds	r2, r2, r2
 8002fe4:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
 8002fe6:	2900      	cmp	r1, #0
			expo--;
 8002fe8:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
 8002fec:	daf9      	bge.n	8002fe2 <z_cbvprintf_impl+0x8de>
 8002fee:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
 8002ff2:	e7b4      	b.n	8002f5e <z_cbvprintf_impl+0x85a>
		if (!conv->flag_hash && (precision > 0)) {
 8002ff4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002ff8:	0699      	lsls	r1, r3, #26
			precision -= decexp;
 8002ffa:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
 8002ffe:	d451      	bmi.n	80030a4 <z_cbvprintf_impl+0x9a0>
 8003000:	1e3b      	subs	r3, r7, #0
 8003002:	bf18      	it	ne
 8003004:	2301      	movne	r3, #1
	bool prune_zero = false;
 8003006:	9305      	str	r3, [sp, #20]
 8003008:	e004      	b.n	8003014 <z_cbvprintf_impl+0x910>
 800300a:	2300      	movs	r3, #0
	if (c == 'f') {
 800300c:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
 8003010:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
 8003012:	d1d3      	bne.n	8002fbc <z_cbvprintf_impl+0x8b8>
		if (decimals < 0) {
 8003014:	eb17 0806 	adds.w	r8, r7, r6
 8003018:	f04f 0b66 	mov.w	fp, #102	; 0x66
 800301c:	d446      	bmi.n	80030ac <z_cbvprintf_impl+0x9a8>
	if (decimals > 16) {
 800301e:	f1b8 0f10 	cmp.w	r8, #16
 8003022:	bfa8      	it	ge
 8003024:	f04f 0810 	movge.w	r8, #16
 8003028:	2010      	movs	r0, #16
 800302a:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
 800302c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003030:	2000      	movs	r0, #0
 8003032:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
 8003036:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
 800303a:	f1b8 0f00 	cmp.w	r8, #0
 800303e:	d138      	bne.n	80030b2 <z_cbvprintf_impl+0x9ae>
	fract += round;
 8003040:	9908      	ldr	r1, [sp, #32]
 8003042:	1812      	adds	r2, r2, r0
 8003044:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
 8003048:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800304c:	d23f      	bcs.n	80030ce <z_cbvprintf_impl+0x9ca>
	fract += round;
 800304e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
 8003052:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
 8003054:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
 8003058:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
 800305c:	f040 80b5 	bne.w	80031ca <z_cbvprintf_impl+0xac6>
		if (decexp > 0) {
 8003060:	2e00      	cmp	r6, #0
 8003062:	dc3f      	bgt.n	80030e4 <z_cbvprintf_impl+0x9e0>
			*buf++ = '0';
 8003064:	2130      	movs	r1, #48	; 0x30
 8003066:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
 800306a:	2a00      	cmp	r2, #0
 800306c:	d166      	bne.n	800313c <z_cbvprintf_impl+0xa38>
 800306e:	2f00      	cmp	r7, #0
 8003070:	f340 81af 	ble.w	80033d2 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
 8003074:	222e      	movs	r2, #46	; 0x2e
 8003076:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
 800307a:	b186      	cbz	r6, 800309e <z_cbvprintf_impl+0x99a>
			conv->pad0_value = -decexp;
 800307c:	4272      	negs	r2, r6
 800307e:	42ba      	cmp	r2, r7
 8003080:	bfa8      	it	ge
 8003082:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
 8003084:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 8003088:	9213      	str	r2, [sp, #76]	; 0x4c
 800308a:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
 800308c:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
 8003090:	bfd4      	ite	le
 8003092:	2200      	movle	r2, #0
 8003094:	2201      	movgt	r2, #1
 8003096:	f362 1145 	bfi	r1, r2, #5, #1
 800309a:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
 800309e:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
 80030a2:	e037      	b.n	8003114 <z_cbvprintf_impl+0xa10>
	bool prune_zero = false;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e7ae      	b.n	8003006 <z_cbvprintf_impl+0x902>
 80030a8:	2300      	movs	r3, #0
 80030aa:	e786      	b.n	8002fba <z_cbvprintf_impl+0x8b6>
			decimals = 0;
 80030ac:	f04f 0800 	mov.w	r8, #0
 80030b0:	e7ba      	b.n	8003028 <z_cbvprintf_impl+0x924>
	*v >>= 1;
 80030b2:	0840      	lsrs	r0, r0, #1
 80030b4:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
 80030be:	a80e      	add	r0, sp, #56	; 0x38
 80030c0:	9209      	str	r2, [sp, #36]	; 0x24
 80030c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80030c6:	f008 f957 	bl	800b378 <_ldiv5>
 80030ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
 80030cc:	e7b3      	b.n	8003036 <z_cbvprintf_impl+0x932>
	*v >>= 1;
 80030ce:	0852      	lsrs	r2, r2, #1
 80030d0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
 80030d4:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
 80030d6:	0849      	lsrs	r1, r1, #1
 80030d8:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
 80030dc:	3601      	adds	r6, #1
	_ldiv5(v);
 80030de:	f008 f94b 	bl	800b378 <_ldiv5>
		decexp++;
 80030e2:	e7b6      	b.n	8003052 <z_cbvprintf_impl+0x94e>
	char *buf = bps;
 80030e4:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
 80030e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030ea:	2900      	cmp	r1, #0
 80030ec:	dd09      	ble.n	8003102 <z_cbvprintf_impl+0x9fe>
				*buf++ = _get_digit(&fract, &digit_count);
 80030ee:	a90b      	add	r1, sp, #44	; 0x2c
 80030f0:	a80c      	add	r0, sp, #48	; 0x30
 80030f2:	9207      	str	r2, [sp, #28]
 80030f4:	f008 f958 	bl	800b3a8 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 80030f8:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
 80030fa:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
 80030fe:	9a07      	ldr	r2, [sp, #28]
 8003100:	d1f2      	bne.n	80030e8 <z_cbvprintf_impl+0x9e4>
			conv->pad0_value = decexp;
 8003102:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
 8003104:	b99a      	cbnz	r2, 800312e <z_cbvprintf_impl+0xa2a>
 8003106:	2f00      	cmp	r7, #0
 8003108:	f340 8161 	ble.w	80033ce <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
 800310c:	212e      	movs	r1, #46	; 0x2e
 800310e:	f808 1b01 	strb.w	r1, [r8], #1
 8003112:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
 8003114:	2f00      	cmp	r7, #0
 8003116:	dd1a      	ble.n	800314e <z_cbvprintf_impl+0xa4a>
 8003118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800311a:	2a00      	cmp	r2, #0
 800311c:	dd17      	ble.n	800314e <z_cbvprintf_impl+0xa4a>
		*buf++ = _get_digit(&fract, &digit_count);
 800311e:	a90b      	add	r1, sp, #44	; 0x2c
 8003120:	a80c      	add	r0, sp, #48	; 0x30
 8003122:	f008 f941 	bl	800b3a8 <_get_digit>
		precision--;
 8003126:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
 8003128:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
 800312c:	e7f2      	b.n	8003114 <z_cbvprintf_impl+0xa10>
			*buf++ = '.';
 800312e:	222e      	movs	r2, #46	; 0x2e
 8003130:	f808 2b01 	strb.w	r2, [r8], #1
 8003134:	e7ed      	b.n	8003112 <z_cbvprintf_impl+0xa0e>
 8003136:	bf00      	nop
 8003138:	0801361e 	.word	0x0801361e
 800313c:	222e      	movs	r2, #46	; 0x2e
 800313e:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
 8003142:	2e00      	cmp	r6, #0
 8003144:	d0ab      	beq.n	800309e <z_cbvprintf_impl+0x99a>
 8003146:	2f00      	cmp	r7, #0
 8003148:	dc98      	bgt.n	800307c <z_cbvprintf_impl+0x978>
			*buf++ = '.';
 800314a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
 800314e:	9b05      	ldr	r3, [sp, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d14e      	bne.n	80031f2 <z_cbvprintf_impl+0xaee>
	conv->pad0_pre_exp = precision;
 8003154:	9714      	str	r7, [sp, #80]	; 0x50
 8003156:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
 8003158:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800315c:	2a45      	cmp	r2, #69	; 0x45
 800315e:	d123      	bne.n	80031a8 <z_cbvprintf_impl+0xaa4>
		if (decexp < 0) {
 8003160:	2e00      	cmp	r6, #0
			decexp = -decexp;
 8003162:	bfba      	itte	lt
 8003164:	4276      	neglt	r6, r6
			*buf++ = '-';
 8003166:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
 8003168:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
 800316a:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
 800316c:	bfc8      	it	gt
 800316e:	2164      	movgt	r1, #100	; 0x64
 8003170:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
 8003172:	bfd1      	iteee	le
 8003174:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
 8003176:	fbb6 f3f1 	udivgt	r3, r6, r1
 800317a:	1cfa      	addgt	r2, r7, #3
 800317c:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
 8003180:	bfc8      	it	gt
 8003182:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
 8003186:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
 800318a:	bfc8      	it	gt
 800318c:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
 800318e:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
 8003192:	fbb6 f3f1 	udiv	r3, r6, r1
 8003196:	4617      	mov	r7, r2
 8003198:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 800319c:	fb01 6313 	mls	r3, r1, r3, r6
 80031a0:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 80031a2:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
 80031a6:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
 80031a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	dc2c      	bgt.n	8003208 <z_cbvprintf_impl+0xb04>
 80031ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bfd4      	ite	le
 80031b4:	2300      	movle	r3, #0
 80031b6:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 80031b8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 80031bc:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 80031c0:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 80031c2:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
 80031c6:	703b      	strb	r3, [r7, #0]
	return bps;
 80031c8:	e696      	b.n	8002ef8 <z_cbvprintf_impl+0x7f4>
		*buf = _get_digit(&fract, &digit_count);
 80031ca:	a90b      	add	r1, sp, #44	; 0x2c
 80031cc:	a80c      	add	r0, sp, #48	; 0x30
 80031ce:	9207      	str	r2, [sp, #28]
 80031d0:	f008 f8ea 	bl	800b3a8 <_get_digit>
		if (*buf++ != '0') {
 80031d4:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
 80031d6:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
 80031da:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 80031dc:	bf18      	it	ne
 80031de:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
 80031e2:	b912      	cbnz	r2, 80031ea <z_cbvprintf_impl+0xae6>
 80031e4:	2f00      	cmp	r7, #0
 80031e6:	f340 80f4 	ble.w	80033d2 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
 80031ea:	222e      	movs	r2, #46	; 0x2e
 80031ec:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 80031f0:	e755      	b.n	800309e <z_cbvprintf_impl+0x99a>
		while (*--buf == '0') {
 80031f2:	4647      	mov	r7, r8
 80031f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80031f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80031fc:	2a30      	cmp	r2, #48	; 0x30
 80031fe:	d0f8      	beq.n	80031f2 <z_cbvprintf_impl+0xaee>
 8003200:	2a2e      	cmp	r2, #46	; 0x2e
 8003202:	bf08      	it	eq
 8003204:	4647      	moveq	r7, r8
 8003206:	e7a7      	b.n	8003158 <z_cbvprintf_impl+0xa54>
		|| (conv->pad0_pre_exp > 0);
 8003208:	2301      	movs	r3, #1
 800320a:	e7d5      	b.n	80031b8 <z_cbvprintf_impl+0xab4>
			bpe = bps + 5;
 800320c:	4f72      	ldr	r7, [pc, #456]	; (80033d8 <z_cbvprintf_impl+0xcd4>)
		char sign = 0;
 800320e:	4681      	mov	r9, r0
			bps = "(nil)";
 8003210:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
 8003212:	2005      	movs	r0, #5
 8003214:	e5a2      	b.n	8002d5c <z_cbvprintf_impl+0x658>
		} else if (conv->altform_0) {
 8003216:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8003218:	bf48      	it	mi
 800321a:	3001      	addmi	r0, #1
 800321c:	e5a6      	b.n	8002d6c <z_cbvprintf_impl+0x668>
					OUTC(pad);
 800321e:	4610      	mov	r0, r2
 8003220:	9209      	str	r2, [sp, #36]	; 0x24
 8003222:	9903      	ldr	r1, [sp, #12]
 8003224:	47d0      	blx	sl
 8003226:	2800      	cmp	r0, #0
 8003228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800322a:	da05      	bge.n	8003238 <z_cbvprintf_impl+0xb34>
#undef OUTS
#undef OUTC
}
 800322c:	b01f      	add	sp, #124	; 0x7c
 800322e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8003232:	2220      	movs	r2, #32
					pad = '0';
 8003234:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
 8003238:	4659      	mov	r1, fp
 800323a:	2900      	cmp	r1, #0
 800323c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003240:	dced      	bgt.n	800321e <z_cbvprintf_impl+0xb1a>
 8003242:	9b04      	ldr	r3, [sp, #16]
 8003244:	f8cd b010 	str.w	fp, [sp, #16]
 8003248:	442b      	add	r3, r5
 800324a:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
 800324c:	f1b9 0f00 	cmp.w	r9, #0
 8003250:	d005      	beq.n	800325e <z_cbvprintf_impl+0xb5a>
			OUTC(sign);
 8003252:	9903      	ldr	r1, [sp, #12]
 8003254:	4648      	mov	r0, r9
 8003256:	47d0      	blx	sl
 8003258:	2800      	cmp	r0, #0
 800325a:	dbe7      	blt.n	800322c <z_cbvprintf_impl+0xb28>
 800325c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 800325e:	9b08      	ldr	r3, [sp, #32]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d079      	beq.n	8003358 <z_cbvprintf_impl+0xc54>
			if (conv->specifier_a) {
 8003264:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
 8003268:	2b00      	cmp	r3, #0
 800326a:	db29      	blt.n	80032c0 <z_cbvprintf_impl+0xbbc>
				while (isdigit((unsigned char)*cp)) {
 800326c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80033dc <z_cbvprintf_impl+0xcd8>
			if (conv->specifier_a) {
 8003270:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp)) {
 8003272:	7818      	ldrb	r0, [r3, #0]
 8003274:	f819 2000 	ldrb.w	r2, [r9, r0]
 8003278:	0752      	lsls	r2, r2, #29
 800327a:	469b      	mov	fp, r3
 800327c:	f103 0301 	add.w	r3, r3, #1
 8003280:	d43f      	bmi.n	8003302 <z_cbvprintf_impl+0xbfe>
				if (!conv->pad_postdp) {
 8003282:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8003286:	1bae      	subs	r6, r5, r6
 8003288:	0698      	lsls	r0, r3, #26
 800328a:	445e      	add	r6, fp
 800328c:	d407      	bmi.n	800329e <z_cbvprintf_impl+0xb9a>
					while (pad_len-- > 0) {
 800328e:	4642      	mov	r2, r8
 8003290:	2a00      	cmp	r2, #0
 8003292:	f108 38ff 	add.w	r8, r8, #4294967295
 8003296:	dc3b      	bgt.n	8003310 <z_cbvprintf_impl+0xc0c>
 8003298:	9b07      	ldr	r3, [sp, #28]
 800329a:	4433      	add	r3, r6
 800329c:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
 800329e:	f89b 0000 	ldrb.w	r0, [fp]
 80032a2:	282e      	cmp	r0, #46	; 0x2e
 80032a4:	d10a      	bne.n	80032bc <z_cbvprintf_impl+0xbb8>
					OUTC(*cp++);
 80032a6:	9903      	ldr	r1, [sp, #12]
 80032a8:	47d0      	blx	sl
						OUTC('0');
 80032aa:	2800      	cmp	r0, #0
 80032ac:	dbbe      	blt.n	800322c <z_cbvprintf_impl+0xb28>
					while (pad_len-- > 0) {
 80032ae:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
 80032b2:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
 80032b6:	dc31      	bgt.n	800331c <z_cbvprintf_impl+0xc18>
					OUTC(*cp++);
 80032b8:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
 80032bc:	465d      	mov	r5, fp
 80032be:	e038      	b.n	8003332 <z_cbvprintf_impl+0xc2e>
 80032c0:	46b1      	mov	r9, r6
				while (*cp != 'p') {
 80032c2:	f899 0000 	ldrb.w	r0, [r9]
 80032c6:	2870      	cmp	r0, #112	; 0x70
 80032c8:	46c8      	mov	r8, r9
 80032ca:	f109 0901 	add.w	r9, r9, #1
 80032ce:	d113      	bne.n	80032f8 <z_cbvprintf_impl+0xbf4>
 80032d0:	1bae      	subs	r6, r5, r6
 80032d2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80032d4:	4446      	add	r6, r8
			while (pad_len-- > 0) {
 80032d6:	4435      	add	r5, r6
 80032d8:	1bab      	subs	r3, r5, r6
 80032da:	2b00      	cmp	r3, #0
 80032dc:	dc34      	bgt.n	8003348 <z_cbvprintf_impl+0xc44>
			OUTS(cp, bpe);
 80032de:	9903      	ldr	r1, [sp, #12]
 80032e0:	463b      	mov	r3, r7
 80032e2:	4642      	mov	r2, r8
 80032e4:	4650      	mov	r0, sl
 80032e6:	f008 f876 	bl	800b3d6 <outs>
 80032ea:	2800      	cmp	r0, #0
 80032ec:	db9e      	blt.n	800322c <z_cbvprintf_impl+0xb28>
 80032ee:	4430      	add	r0, r6
 80032f0:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
 80032f2:	4605      	mov	r5, r0
 80032f4:	4406      	add	r6, r0
 80032f6:	e065      	b.n	80033c4 <z_cbvprintf_impl+0xcc0>
					OUTC(*cp++);
 80032f8:	9903      	ldr	r1, [sp, #12]
 80032fa:	47d0      	blx	sl
 80032fc:	2800      	cmp	r0, #0
 80032fe:	dae0      	bge.n	80032c2 <z_cbvprintf_impl+0xbbe>
 8003300:	e794      	b.n	800322c <z_cbvprintf_impl+0xb28>
 8003302:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
 8003304:	9903      	ldr	r1, [sp, #12]
 8003306:	47d0      	blx	sl
 8003308:	2800      	cmp	r0, #0
 800330a:	9b05      	ldr	r3, [sp, #20]
 800330c:	dab1      	bge.n	8003272 <z_cbvprintf_impl+0xb6e>
 800330e:	e78d      	b.n	800322c <z_cbvprintf_impl+0xb28>
						OUTC('0');
 8003310:	9903      	ldr	r1, [sp, #12]
 8003312:	2030      	movs	r0, #48	; 0x30
 8003314:	47d0      	blx	sl
 8003316:	2800      	cmp	r0, #0
 8003318:	dab9      	bge.n	800328e <z_cbvprintf_impl+0xb8a>
 800331a:	e787      	b.n	800322c <z_cbvprintf_impl+0xb28>
						OUTC('0');
 800331c:	9903      	ldr	r1, [sp, #12]
 800331e:	2030      	movs	r0, #48	; 0x30
 8003320:	47d0      	blx	sl
 8003322:	f108 38ff 	add.w	r8, r8, #4294967295
 8003326:	e7c0      	b.n	80032aa <z_cbvprintf_impl+0xba6>
					OUTC(*cp++);
 8003328:	9903      	ldr	r1, [sp, #12]
 800332a:	47d0      	blx	sl
 800332c:	2800      	cmp	r0, #0
 800332e:	f6ff af7d 	blt.w	800322c <z_cbvprintf_impl+0xb28>
				while (isdigit((unsigned char)*cp)) {
 8003332:	7828      	ldrb	r0, [r5, #0]
 8003334:	f819 3000 	ldrb.w	r3, [r9, r0]
 8003338:	0759      	lsls	r1, r3, #29
 800333a:	46a8      	mov	r8, r5
 800333c:	f105 0501 	add.w	r5, r5, #1
 8003340:	d4f2      	bmi.n	8003328 <z_cbvprintf_impl+0xc24>
 8003342:	eba6 060b 	sub.w	r6, r6, fp
 8003346:	e7c4      	b.n	80032d2 <z_cbvprintf_impl+0xbce>
				OUTC('0');
 8003348:	9903      	ldr	r1, [sp, #12]
 800334a:	2030      	movs	r0, #48	; 0x30
 800334c:	47d0      	blx	sl
 800334e:	2800      	cmp	r0, #0
 8003350:	f6ff af6c 	blt.w	800322c <z_cbvprintf_impl+0xb28>
 8003354:	3601      	adds	r6, #1
 8003356:	e7bf      	b.n	80032d8 <z_cbvprintf_impl+0xbd4>
			if (conv->altform_0c | conv->altform_0) {
 8003358:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800335c:	06da      	lsls	r2, r3, #27
 800335e:	d401      	bmi.n	8003364 <z_cbvprintf_impl+0xc60>
 8003360:	071b      	lsls	r3, r3, #28
 8003362:	d506      	bpl.n	8003372 <z_cbvprintf_impl+0xc6e>
				OUTC('0');
 8003364:	9903      	ldr	r1, [sp, #12]
 8003366:	2030      	movs	r0, #48	; 0x30
 8003368:	47d0      	blx	sl
 800336a:	2800      	cmp	r0, #0
 800336c:	f6ff af5e 	blt.w	800322c <z_cbvprintf_impl+0xb28>
 8003370:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8003372:	9b05      	ldr	r3, [sp, #20]
 8003374:	b13b      	cbz	r3, 8003386 <z_cbvprintf_impl+0xc82>
				OUTC(conv->specifier);
 8003376:	9903      	ldr	r1, [sp, #12]
 8003378:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 800337c:	47d0      	blx	sl
 800337e:	2800      	cmp	r0, #0
 8003380:	f6ff af54 	blt.w	800322c <z_cbvprintf_impl+0xb28>
 8003384:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8003386:	44a8      	add	r8, r5
 8003388:	e006      	b.n	8003398 <z_cbvprintf_impl+0xc94>
				OUTC('0');
 800338a:	9903      	ldr	r1, [sp, #12]
 800338c:	2030      	movs	r0, #48	; 0x30
 800338e:	47d0      	blx	sl
 8003390:	2800      	cmp	r0, #0
 8003392:	f6ff af4b 	blt.w	800322c <z_cbvprintf_impl+0xb28>
 8003396:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8003398:	eba8 0305 	sub.w	r3, r8, r5
 800339c:	2b00      	cmp	r3, #0
 800339e:	dcf4      	bgt.n	800338a <z_cbvprintf_impl+0xc86>
			OUTS(bps, bpe);
 80033a0:	9903      	ldr	r1, [sp, #12]
 80033a2:	463b      	mov	r3, r7
 80033a4:	4632      	mov	r2, r6
 80033a6:	4650      	mov	r0, sl
 80033a8:	f008 f815 	bl	800b3d6 <outs>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	f6ff af3d 	blt.w	800322c <z_cbvprintf_impl+0xb28>
 80033b2:	4428      	add	r0, r5
 80033b4:	e79c      	b.n	80032f0 <z_cbvprintf_impl+0xbec>
			OUTC(' ');
 80033b6:	9903      	ldr	r1, [sp, #12]
 80033b8:	2020      	movs	r0, #32
 80033ba:	47d0      	blx	sl
 80033bc:	2800      	cmp	r0, #0
 80033be:	f6ff af35 	blt.w	800322c <z_cbvprintf_impl+0xb28>
 80033c2:	3501      	adds	r5, #1
		while (width > 0) {
 80033c4:	1b73      	subs	r3, r6, r5
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	dcf5      	bgt.n	80033b6 <z_cbvprintf_impl+0xcb2>
 80033ca:	f7ff bbd3 	b.w	8002b74 <z_cbvprintf_impl+0x470>
			decexp = 0;
 80033ce:	4616      	mov	r6, r2
 80033d0:	e6bd      	b.n	800314e <z_cbvprintf_impl+0xa4a>
		if (*buf++ != '0') {
 80033d2:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
 80033d6:	e6ba      	b.n	800314e <z_cbvprintf_impl+0xa4a>
 80033d8:	08011b67 	.word	0x08011b67
 80033dc:	0801361f 	.word	0x0801361f

080033e0 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	460d      	mov	r5, r1
 80033e4:	4604      	mov	r4, r0
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 80033e6:	2220      	movs	r2, #32
 80033e8:	2100      	movs	r1, #0
 80033ea:	f008 ff96 	bl	800c31a <memset>
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
 80033ee:	68eb      	ldr	r3, [r5, #12]
 80033f0:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
 80033f2:	68ab      	ldr	r3, [r5, #8]
 80033f4:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
 80033fa:	686b      	ldr	r3, [r5, #4]
 80033fc:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->max_usage = 0;
 80033fe:	2200      	movs	r2, #0
 8003400:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->flags = cfg->flags;
 8003402:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 8003404:	b123      	cbz	r3, 8003410 <mpsc_pbuf_init+0x30>
 8003406:	1e59      	subs	r1, r3, #1
 8003408:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 800340a:	bf08      	it	eq
 800340c:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
 8003410:	6122      	str	r2, [r4, #16]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
 8003412:	2201      	movs	r2, #1
 8003414:	2100      	movs	r1, #0
 8003416:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800341a:	f008 fee0 	bl	800c1de <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
 800341e:	b148      	cbz	r0, 8003434 <mpsc_pbuf_init+0x54>
 8003420:	4905      	ldr	r1, [pc, #20]	; (8003438 <mpsc_pbuf_init+0x58>)
 8003422:	4806      	ldr	r0, [pc, #24]	; (800343c <mpsc_pbuf_init+0x5c>)
 8003424:	4a06      	ldr	r2, [pc, #24]	; (8003440 <mpsc_pbuf_init+0x60>)
 8003426:	232e      	movs	r3, #46	; 0x2e
 8003428:	f007 fff3 	bl	800b412 <assert_print>
 800342c:	4804      	ldr	r0, [pc, #16]	; (8003440 <mpsc_pbuf_init+0x60>)
 800342e:	212e      	movs	r1, #46	; 0x2e
 8003430:	f007 ffe8 	bl	800b404 <assert_post_action>
	ARG_UNUSED(err);
}
 8003434:	bd38      	pop	{r3, r4, r5, pc}
 8003436:	bf00      	nop
 8003438:	08011b8e 	.word	0x08011b8e
 800343c:	080118c5 	.word	0x080118c5
 8003440:	08011b68 	.word	0x08011b68

08003444 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 8003444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003448:	b087      	sub	sp, #28
 800344a:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 800344e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003450:	3b01      	subs	r3, #1
 8003452:	428b      	cmp	r3, r1
{
 8003454:	4604      	mov	r4, r0
 8003456:	460f      	mov	r7, r1
	if (wlen > (buffer->size - 1)) {
 8003458:	f0c0 80a0 	bcc.w	800359c <mpsc_pbuf_alloc+0x158>
	union mpsc_pbuf_generic *dropped_item = NULL;
 800345c:	2600      	movs	r6, #0
	union mpsc_pbuf_generic *item = NULL;
 800345e:	46b2      	mov	sl, r6
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
 8003460:	f100 0514 	add.w	r5, r0, #20
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8003464:	f04f 0310 	mov.w	r3, #16
 8003468:	f3ef 8b11 	mrs	fp, BASEPRI
 800346c:	f383 8812 	msr	BASEPRI_MAX, r3
 8003470:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8003474:	4628      	mov	r0, r5
	k.key = arch_irq_lock();
 8003476:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8003478:	f004 f972 	bl	8007760 <z_spin_lock_valid>
 800347c:	b958      	cbnz	r0, 8003496 <mpsc_pbuf_alloc+0x52>
 800347e:	4a4a      	ldr	r2, [pc, #296]	; (80035a8 <mpsc_pbuf_alloc+0x164>)
 8003480:	494a      	ldr	r1, [pc, #296]	; (80035ac <mpsc_pbuf_alloc+0x168>)
 8003482:	484b      	ldr	r0, [pc, #300]	; (80035b0 <mpsc_pbuf_alloc+0x16c>)
 8003484:	238e      	movs	r3, #142	; 0x8e
 8003486:	f007 ffc4 	bl	800b412 <assert_print>
 800348a:	4629      	mov	r1, r5
 800348c:	4849      	ldr	r0, [pc, #292]	; (80035b4 <mpsc_pbuf_alloc+0x170>)
 800348e:	f007 ffc0 	bl	800b412 <assert_print>
 8003492:	218e      	movs	r1, #142	; 0x8e
 8003494:	e050      	b.n	8003538 <mpsc_pbuf_alloc+0xf4>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
 8003496:	4628      	mov	r0, r5
 8003498:	f004 f980 	bl	800779c <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
 800349c:	a905      	add	r1, sp, #20
 800349e:	4620      	mov	r0, r4
 80034a0:	f007 ffc4 	bl	800b42c <free_space>

		if (free_wlen >= wlen) {
 80034a4:	9905      	ldr	r1, [sp, #20]
 80034a6:	42b9      	cmp	r1, r7
		wrap = free_space(buffer, &free_wlen);
 80034a8:	4680      	mov	r8, r0
		if (free_wlen >= wlen) {
 80034aa:	d328      	bcc.n	80034fe <mpsc_pbuf_alloc+0xba>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 80034ac:	6822      	ldr	r2, [r4, #0]
			item =
 80034ae:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
 80034b0:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 80034b4:	f021 0103 	bic.w	r1, r1, #3
 80034b8:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
 80034bc:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
 80034c0:	6821      	ldr	r1, [r4, #0]
 80034c2:	463a      	mov	r2, r7
 80034c4:	4620      	mov	r0, r4
 80034c6:	f007 ffd3 	bl	800b470 <idx_inc>
		cont = false;
 80034ca:	f04f 0800 	mov.w	r8, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
 80034ce:	6020      	str	r0, [r4, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80034d0:	4628      	mov	r0, r5
 80034d2:	f004 f953 	bl	800777c <z_spin_unlock_valid>
 80034d6:	b320      	cbz	r0, 8003522 <mpsc_pbuf_alloc+0xde>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80034d8:	f389 8811 	msr	BASEPRI, r9
 80034dc:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
 80034e0:	f1b8 0f00 	cmp.w	r8, #0
 80034e4:	d05c      	beq.n	80035a0 <mpsc_pbuf_alloc+0x15c>
 80034e6:	b146      	cbz	r6, 80034fa <mpsc_pbuf_alloc+0xb6>
 80034e8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0b9      	beq.n	8003464 <mpsc_pbuf_alloc+0x20>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
 80034f0:	69a3      	ldr	r3, [r4, #24]
 80034f2:	b113      	cbz	r3, 80034fa <mpsc_pbuf_alloc+0xb6>
				buffer->notify_drop(buffer, dropped_item);
 80034f4:	4631      	mov	r1, r6
 80034f6:	4620      	mov	r0, r4
 80034f8:	4798      	blx	r3
{
 80034fa:	2600      	movs	r6, #0
 80034fc:	e7b2      	b.n	8003464 <mpsc_pbuf_alloc+0x20>
		} else if (wrap) {
 80034fe:	b118      	cbz	r0, 8003508 <mpsc_pbuf_alloc+0xc4>
			add_skip_item(buffer, free_wlen);
 8003500:	4620      	mov	r0, r4
 8003502:	f007 ffc3 	bl	800b48c <add_skip_item>
			cont = true;
 8003506:	e7e3      	b.n	80034d0 <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8003508:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800350c:	4313      	orrs	r3, r2
 800350e:	d036      	beq.n	800357e <mpsc_pbuf_alloc+0x13a>
 8003510:	9103      	str	r1, [sp, #12]
			   !k_is_in_isr()) {
 8003512:	f008 fe4a 	bl	800c1aa <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8003516:	9903      	ldr	r1, [sp, #12]
 8003518:	bb88      	cbnz	r0, 800357e <mpsc_pbuf_alloc+0x13a>
 800351a:	4628      	mov	r0, r5
 800351c:	f004 f92e 	bl	800777c <z_spin_unlock_valid>
 8003520:	b968      	cbnz	r0, 800353e <mpsc_pbuf_alloc+0xfa>
 8003522:	4a21      	ldr	r2, [pc, #132]	; (80035a8 <mpsc_pbuf_alloc+0x164>)
 8003524:	4924      	ldr	r1, [pc, #144]	; (80035b8 <mpsc_pbuf_alloc+0x174>)
 8003526:	4822      	ldr	r0, [pc, #136]	; (80035b0 <mpsc_pbuf_alloc+0x16c>)
 8003528:	23b9      	movs	r3, #185	; 0xb9
 800352a:	f007 ff72 	bl	800b412 <assert_print>
 800352e:	4629      	mov	r1, r5
 8003530:	4822      	ldr	r0, [pc, #136]	; (80035bc <mpsc_pbuf_alloc+0x178>)
 8003532:	f007 ff6e 	bl	800b412 <assert_print>
 8003536:	21b9      	movs	r1, #185	; 0xb9
 8003538:	481b      	ldr	r0, [pc, #108]	; (80035a8 <mpsc_pbuf_alloc+0x164>)
 800353a:	f007 ff63 	bl	800b404 <assert_post_action>
 800353e:	f38b 8811 	msr	BASEPRI, fp
 8003542:	f3bf 8f6f 	isb	sy
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 8003546:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800354a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800354e:	f004 faed 	bl	8007b2c <z_impl_k_sem_take>
 8003552:	4680      	mov	r8, r0
	__asm__ volatile(
 8003554:	f04f 0310 	mov.w	r3, #16
 8003558:	f3ef 8911 	mrs	r9, BASEPRI
 800355c:	f383 8812 	msr	BASEPRI_MAX, r3
 8003560:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8003564:	4628      	mov	r0, r5
 8003566:	f004 f8fb 	bl	8007760 <z_spin_lock_valid>
 800356a:	2800      	cmp	r0, #0
 800356c:	d087      	beq.n	800347e <mpsc_pbuf_alloc+0x3a>
	z_spin_lock_set_owner(l);
 800356e:	4628      	mov	r0, r5
			if (err == 0) {
 8003570:	fab8 f888 	clz	r8, r8
 8003574:	f004 f912 	bl	800779c <z_spin_lock_set_owner>
 8003578:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800357c:	e7a8      	b.n	80034d0 <mpsc_pbuf_alloc+0x8c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 800357e:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 8003580:	f10d 0313 	add.w	r3, sp, #19
 8003584:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8003588:	4620      	mov	r0, r4
 800358a:	f007 ffa2 	bl	800b4d2 <drop_item_locked>
			cont = dropped_item != NULL;
 800358e:	f1b0 0800 	subs.w	r8, r0, #0
 8003592:	4606      	mov	r6, r0
 8003594:	bf18      	it	ne
 8003596:	f04f 0801 	movne.w	r8, #1
 800359a:	e799      	b.n	80034d0 <mpsc_pbuf_alloc+0x8c>
		return NULL;
 800359c:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 80035a0:	4650      	mov	r0, sl
 80035a2:	b007      	add	sp, #28
 80035a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035a8:	08011b97 	.word	0x08011b97
 80035ac:	08011bc4 	.word	0x08011bc4
 80035b0:	080118c5 	.word	0x080118c5
 80035b4:	08011bd9 	.word	0x08011bd9
 80035b8:	08011bf1 	.word	0x08011bf1
 80035bc:	08011c08 	.word	0x08011c08

080035c0 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 80035c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c4:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 80035c6:	69c3      	ldr	r3, [r0, #28]
 80035c8:	4608      	mov	r0, r1
{
 80035ca:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
 80035cc:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
 80035ce:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
 80035d2:	4607      	mov	r7, r0
 80035d4:	f04f 0310 	mov.w	r3, #16
 80035d8:	f3ef 8811 	mrs	r8, BASEPRI
 80035dc:	f383 8812 	msr	BASEPRI_MAX, r3
 80035e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80035e4:	4628      	mov	r0, r5
 80035e6:	f004 f8bb 	bl	8007760 <z_spin_lock_valid>
 80035ea:	b968      	cbnz	r0, 8003608 <mpsc_pbuf_commit+0x48>
 80035ec:	4a19      	ldr	r2, [pc, #100]	; (8003654 <mpsc_pbuf_commit+0x94>)
 80035ee:	491a      	ldr	r1, [pc, #104]	; (8003658 <mpsc_pbuf_commit+0x98>)
 80035f0:	481a      	ldr	r0, [pc, #104]	; (800365c <mpsc_pbuf_commit+0x9c>)
 80035f2:	238e      	movs	r3, #142	; 0x8e
 80035f4:	f007 ff0d 	bl	800b412 <assert_print>
 80035f8:	4629      	mov	r1, r5
 80035fa:	4819      	ldr	r0, [pc, #100]	; (8003660 <mpsc_pbuf_commit+0xa0>)
 80035fc:	f007 ff09 	bl	800b412 <assert_print>
 8003600:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8003602:	4814      	ldr	r0, [pc, #80]	; (8003654 <mpsc_pbuf_commit+0x94>)
 8003604:	f007 fefe 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8003608:	4628      	mov	r0, r5
 800360a:	f004 f8c7 	bl	800779c <z_spin_lock_set_owner>

	item->hdr.valid = 1;
 800360e:	7833      	ldrb	r3, [r6, #0]
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8003616:	6861      	ldr	r1, [r4, #4]
 8003618:	463a      	mov	r2, r7
 800361a:	4620      	mov	r0, r4
 800361c:	f007 ff28 	bl	800b470 <idx_inc>
 8003620:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
 8003622:	4620      	mov	r0, r4
 8003624:	f007 ff48 	bl	800b4b8 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8003628:	4628      	mov	r0, r5
 800362a:	f004 f8a7 	bl	800777c <z_spin_unlock_valid>
 800362e:	b958      	cbnz	r0, 8003648 <mpsc_pbuf_commit+0x88>
 8003630:	4a08      	ldr	r2, [pc, #32]	; (8003654 <mpsc_pbuf_commit+0x94>)
 8003632:	490c      	ldr	r1, [pc, #48]	; (8003664 <mpsc_pbuf_commit+0xa4>)
 8003634:	4809      	ldr	r0, [pc, #36]	; (800365c <mpsc_pbuf_commit+0x9c>)
 8003636:	23b9      	movs	r3, #185	; 0xb9
 8003638:	f007 feeb 	bl	800b412 <assert_print>
 800363c:	4629      	mov	r1, r5
 800363e:	480a      	ldr	r0, [pc, #40]	; (8003668 <mpsc_pbuf_commit+0xa8>)
 8003640:	f007 fee7 	bl	800b412 <assert_print>
 8003644:	21b9      	movs	r1, #185	; 0xb9
 8003646:	e7dc      	b.n	8003602 <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
 8003648:	f388 8811 	msr	BASEPRI, r8
 800364c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 8003650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003654:	08011b97 	.word	0x08011b97
 8003658:	08011bc4 	.word	0x08011bc4
 800365c:	080118c5 	.word	0x080118c5
 8003660:	08011bd9 	.word	0x08011bd9
 8003664:	08011bf1 	.word	0x08011bf1
 8003668:	08011c08 	.word	0x08011c08

0800366c <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 800366c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003670:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
 8003672:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
 8003676:	f04f 0310 	mov.w	r3, #16
 800367a:	f3ef 8811 	mrs	r8, BASEPRI
 800367e:	f383 8812 	msr	BASEPRI_MAX, r3
 8003682:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8003686:	4638      	mov	r0, r7
 8003688:	f004 f86a 	bl	8007760 <z_spin_lock_valid>
 800368c:	4605      	mov	r5, r0
 800368e:	b968      	cbnz	r0, 80036ac <mpsc_pbuf_claim+0x40>
 8003690:	4a33      	ldr	r2, [pc, #204]	; (8003760 <mpsc_pbuf_claim+0xf4>)
 8003692:	4934      	ldr	r1, [pc, #208]	; (8003764 <mpsc_pbuf_claim+0xf8>)
 8003694:	4834      	ldr	r0, [pc, #208]	; (8003768 <mpsc_pbuf_claim+0xfc>)
 8003696:	238e      	movs	r3, #142	; 0x8e
 8003698:	f007 febb 	bl	800b412 <assert_print>
 800369c:	4639      	mov	r1, r7
 800369e:	4833      	ldr	r0, [pc, #204]	; (800376c <mpsc_pbuf_claim+0x100>)
 80036a0:	f007 feb7 	bl	800b412 <assert_print>
 80036a4:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80036a6:	482e      	ldr	r0, [pc, #184]	; (8003760 <mpsc_pbuf_claim+0xf4>)
 80036a8:	f007 feac 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 80036ac:	4638      	mov	r0, r7
 80036ae:	f004 f875 	bl	800779c <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 80036b2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80036b6:	429a      	cmp	r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
 80036b8:	bf88      	it	hi
 80036ba:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
 80036bc:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d03f      	beq.n	8003742 <mpsc_pbuf_claim+0xd6>
		item = (union mpsc_pbuf_generic *)
 80036c2:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
 80036c4:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
 80036c8:	f013 0003 	ands.w	r0, r3, #3
		item = (union mpsc_pbuf_generic *)
 80036cc:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
 80036d0:	d03a      	beq.n	8003748 <mpsc_pbuf_claim+0xdc>
	if (item->hdr.busy && !item->hdr.valid) {
 80036d2:	2802      	cmp	r0, #2
 80036d4:	d103      	bne.n	80036de <mpsc_pbuf_claim+0x72>
		return item->skip.len;
 80036d6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
 80036da:	08b6      	lsrs	r6, r6, #2
 80036dc:	d105      	bne.n	80036ea <mpsc_pbuf_claim+0x7e>
 80036de:	07d8      	lsls	r0, r3, #31
 80036e0:	d41f      	bmi.n	8003722 <mpsc_pbuf_claim+0xb6>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
 80036e2:	69e3      	ldr	r3, [r4, #28]
 80036e4:	4648      	mov	r0, r9
 80036e6:	4798      	blx	r3
 80036e8:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 80036ea:	68a1      	ldr	r1, [r4, #8]
 80036ec:	4632      	mov	r2, r6
 80036ee:	4620      	mov	r0, r4
 80036f0:	f007 febe 	bl	800b470 <idx_inc>
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
 80036f4:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
 80036f6:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
 80036f8:	4632      	mov	r2, r6
 80036fa:	4620      	mov	r0, r4
 80036fc:	f007 feb8 	bl	800b470 <idx_inc>
				buffer->rd_idx =
 8003700:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8003702:	4638      	mov	r0, r7
 8003704:	f004 f83a 	bl	800777c <z_spin_unlock_valid>
 8003708:	bb00      	cbnz	r0, 800374c <mpsc_pbuf_claim+0xe0>
 800370a:	4a15      	ldr	r2, [pc, #84]	; (8003760 <mpsc_pbuf_claim+0xf4>)
 800370c:	4918      	ldr	r1, [pc, #96]	; (8003770 <mpsc_pbuf_claim+0x104>)
 800370e:	4816      	ldr	r0, [pc, #88]	; (8003768 <mpsc_pbuf_claim+0xfc>)
 8003710:	23b9      	movs	r3, #185	; 0xb9
 8003712:	f007 fe7e 	bl	800b412 <assert_print>
 8003716:	4639      	mov	r1, r7
 8003718:	4816      	ldr	r0, [pc, #88]	; (8003774 <mpsc_pbuf_claim+0x108>)
 800371a:	f007 fe7a 	bl	800b412 <assert_print>
 800371e:	21b9      	movs	r1, #185	; 0xb9
 8003720:	e7c1      	b.n	80036a6 <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
 8003722:	f043 0302 	orr.w	r3, r3, #2
 8003726:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
 800372a:	4648      	mov	r0, r9
 800372c:	69e3      	ldr	r3, [r4, #28]
 800372e:	68a5      	ldr	r5, [r4, #8]
 8003730:	4798      	blx	r3
 8003732:	4629      	mov	r1, r5
 8003734:	4602      	mov	r2, r0
 8003736:	4620      	mov	r0, r4
 8003738:	f007 fe9a 	bl	800b470 <idx_inc>
		cont = false;
 800373c:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
 800373e:	60a0      	str	r0, [r4, #8]
 8003740:	e7df      	b.n	8003702 <mpsc_pbuf_claim+0x96>
		cont = false;
 8003742:	461d      	mov	r5, r3
			item = NULL;
 8003744:	46a9      	mov	r9, r5
 8003746:	e7dc      	b.n	8003702 <mpsc_pbuf_claim+0x96>
		cont = false;
 8003748:	4605      	mov	r5, r0
 800374a:	e7fb      	b.n	8003744 <mpsc_pbuf_claim+0xd8>
	__asm__ volatile(
 800374c:	f388 8811 	msr	BASEPRI, r8
 8003750:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
 8003754:	2d00      	cmp	r5, #0
 8003756:	d18e      	bne.n	8003676 <mpsc_pbuf_claim+0xa>

	return item;
}
 8003758:	4648      	mov	r0, r9
 800375a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800375e:	bf00      	nop
 8003760:	08011b97 	.word	0x08011b97
 8003764:	08011bc4 	.word	0x08011bc4
 8003768:	080118c5 	.word	0x080118c5
 800376c:	08011bd9 	.word	0x08011bd9
 8003770:	08011bf1 	.word	0x08011bf1
 8003774:	08011c08 	.word	0x08011c08

08003778 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 8003778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800377c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 800377e:	69c3      	ldr	r3, [r0, #28]
 8003780:	4608      	mov	r0, r1
{
 8003782:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 8003784:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
 8003786:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
 800378a:	4607      	mov	r7, r0
	__asm__ volatile(
 800378c:	f04f 0310 	mov.w	r3, #16
 8003790:	f3ef 8811 	mrs	r8, BASEPRI
 8003794:	f383 8812 	msr	BASEPRI_MAX, r3
 8003798:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800379c:	4630      	mov	r0, r6
 800379e:	f003 ffdf 	bl	8007760 <z_spin_lock_valid>
 80037a2:	b968      	cbnz	r0, 80037c0 <mpsc_pbuf_free+0x48>
 80037a4:	4a23      	ldr	r2, [pc, #140]	; (8003834 <mpsc_pbuf_free+0xbc>)
 80037a6:	4924      	ldr	r1, [pc, #144]	; (8003838 <mpsc_pbuf_free+0xc0>)
 80037a8:	4824      	ldr	r0, [pc, #144]	; (800383c <mpsc_pbuf_free+0xc4>)
 80037aa:	238e      	movs	r3, #142	; 0x8e
 80037ac:	f007 fe31 	bl	800b412 <assert_print>
 80037b0:	4631      	mov	r1, r6
 80037b2:	4823      	ldr	r0, [pc, #140]	; (8003840 <mpsc_pbuf_free+0xc8>)
 80037b4:	f007 fe2d 	bl	800b412 <assert_print>
 80037b8:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80037ba:	481e      	ldr	r0, [pc, #120]	; (8003834 <mpsc_pbuf_free+0xbc>)
 80037bc:	f007 fe22 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 80037c0:	4630      	mov	r0, r6
 80037c2:	f003 ffeb 	bl	800779c <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 80037c6:	782b      	ldrb	r3, [r5, #0]
 80037c8:	f36f 0300 	bfc	r3, #0, #1
 80037cc:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	079b      	lsls	r3, r3, #30
 80037d2:	d505      	bpl.n	80037e0 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 80037d4:	68e2      	ldr	r2, [r4, #12]
 80037d6:	6a23      	ldr	r3, [r4, #32]
 80037d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 80037dc:	429d      	cmp	r5, r3
 80037de:	d119      	bne.n	8003814 <mpsc_pbuf_free+0x9c>
		witem->hdr.busy = 0;
 80037e0:	782b      	ldrb	r3, [r5, #0]
 80037e2:	f36f 0341 	bfc	r3, #1, #1
 80037e6:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 80037e8:	68e1      	ldr	r1, [r4, #12]
 80037ea:	463a      	mov	r2, r7
 80037ec:	4620      	mov	r0, r4
 80037ee:	f007 fe3f 	bl	800b470 <idx_inc>
 80037f2:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80037f4:	4630      	mov	r0, r6
 80037f6:	f003 ffc1 	bl	800777c <z_spin_unlock_valid>
 80037fa:	b980      	cbnz	r0, 800381e <mpsc_pbuf_free+0xa6>
 80037fc:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <mpsc_pbuf_free+0xbc>)
 80037fe:	4911      	ldr	r1, [pc, #68]	; (8003844 <mpsc_pbuf_free+0xcc>)
 8003800:	480e      	ldr	r0, [pc, #56]	; (800383c <mpsc_pbuf_free+0xc4>)
 8003802:	23b9      	movs	r3, #185	; 0xb9
 8003804:	f007 fe05 	bl	800b412 <assert_print>
 8003808:	4631      	mov	r1, r6
 800380a:	480f      	ldr	r0, [pc, #60]	; (8003848 <mpsc_pbuf_free+0xd0>)
 800380c:	f007 fe01 	bl	800b412 <assert_print>
 8003810:	21b9      	movs	r1, #185	; 0xb9
 8003812:	e7d2      	b.n	80037ba <mpsc_pbuf_free+0x42>
	} else {
		witem->skip.len = wlen;
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	f367 039f 	bfi	r3, r7, #2, #30
 800381a:	602b      	str	r3, [r5, #0]
 800381c:	e7ea      	b.n	80037f4 <mpsc_pbuf_free+0x7c>
	__asm__ volatile(
 800381e:	f388 8811 	msr	BASEPRI, r8
 8003822:	f3bf 8f6f 	isb	sy
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8003826:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
 800382a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800382e:	f004 b93f 	b.w	8007ab0 <z_impl_k_sem_give>
 8003832:	bf00      	nop
 8003834:	08011b97 	.word	0x08011b97
 8003838:	08011bc4 	.word	0x08011bc4
 800383c:	080118c5 	.word	0x080118c5
 8003840:	08011bd9 	.word	0x08011bd9
 8003844:	08011bf1 	.word	0x08011bf1
 8003848:	08011c08 	.word	0x08011c08

0800384c <stm32f3_init>:
	__asm__ volatile(
 800384c:	f04f 0210 	mov.w	r2, #16
 8003850:	f3ef 8311 	mrs	r3, BASEPRI
 8003854:	f382 8812 	msr	BASEPRI_MAX, r2
 8003858:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 8 MHz from HSI */
	SystemCoreClock = 8000000;
 8003864:	4b02      	ldr	r3, [pc, #8]	; (8003870 <stm32f3_init+0x24>)
 8003866:	4a03      	ldr	r2, [pc, #12]	; (8003874 <stm32f3_init+0x28>)
 8003868:	601a      	str	r2, [r3, #0]

	return 0;
}
 800386a:	2000      	movs	r0, #0
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000104 	.word	0x20000104
 8003874:	007a1200 	.word	0x007a1200

08003878 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8003878:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 800387a:	4910      	ldr	r1, [pc, #64]	; (80038bc <enable_logger+0x44>)
 800387c:	4810      	ldr	r0, [pc, #64]	; (80038c0 <enable_logger+0x48>)
{
 800387e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8003880:	2200      	movs	r2, #0
 8003882:	f008 fd07 	bl	800c294 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8003886:	4d0f      	ldr	r5, [pc, #60]	; (80038c4 <enable_logger+0x4c>)
 8003888:	490f      	ldr	r1, [pc, #60]	; (80038c8 <enable_logger+0x50>)
 800388a:	2200      	movs	r2, #0
 800388c:	2300      	movs	r3, #0
 800388e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003892:	2400      	movs	r4, #0
 8003894:	230e      	movs	r3, #14
 8003896:	e9cd 3403 	strd	r3, r4, [sp, #12]
 800389a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <enable_logger+0x54>)
 80038a0:	9400      	str	r4, [sp, #0]
 80038a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038a6:	4628      	mov	r0, r5
 80038a8:	f003 fea2 	bl	80075f0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 80038ac:	4908      	ldr	r1, [pc, #32]	; (80038d0 <enable_logger+0x58>)
 80038ae:	4628      	mov	r0, r5
 80038b0:	f008 fc81 	bl	800c1b6 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
 80038b4:	4620      	mov	r0, r4
 80038b6:	b009      	add	sp, #36	; 0x24
 80038b8:	bd30      	pop	{r4, r5, pc}
 80038ba:	bf00      	nop
 80038bc:	08003a05 	.word	0x08003a05
 80038c0:	200008b0 	.word	0x200008b0
 80038c4:	20000430 	.word	0x20000430
 80038c8:	20001080 	.word	0x20001080
 80038cc:	08003c0d 	.word	0x08003c0d
 80038d0:	08011c1d 	.word	0x08011c1d

080038d4 <activate_foreach_backend>:
{
 80038d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 80038d8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8003934 <activate_foreach_backend+0x60>
{
 80038dc:	4604      	mov	r4, r0
	while (mask_cpy) {
 80038de:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
 80038e0:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
 80038e4:	b914      	cbnz	r4, 80038ec <activate_foreach_backend+0x18>
}
 80038e6:	4638      	mov	r0, r7
 80038e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
 80038ec:	fa94 f5a4 	rbit	r5, r4
 80038f0:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
 80038f4:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 80038f8:	012e      	lsls	r6, r5, #4
 80038fa:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
 80038fe:	ea6f 0a03 	mvn.w	sl, r3
 8003902:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8003906:	7b2b      	ldrb	r3, [r5, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0eb      	beq.n	80038e4 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
 800390c:	f858 3006 	ldr.w	r3, [r8, r6]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	b94b      	cbnz	r3, 8003928 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
 8003914:	4446      	add	r6, r8
			log_backend_enable(backend,
 8003916:	2204      	movs	r2, #4
 8003918:	6873      	ldr	r3, [r6, #4]
 800391a:	4628      	mov	r0, r5
 800391c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
 800391e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
 8003922:	f000 fa6f 	bl	8003e04 <log_backend_enable>
 8003926:	e7dd      	b.n	80038e4 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
 8003928:	4628      	mov	r0, r5
 800392a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 800392c:	2800      	cmp	r0, #0
 800392e:	d1d9      	bne.n	80038e4 <activate_foreach_backend+0x10>
 8003930:	e7f0      	b.n	8003914 <activate_foreach_backend+0x40>
 8003932:	bf00      	nop
 8003934:	0800d1e0 	.word	0x0800d1e0

08003938 <z_log_init>:
{
 8003938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 800393c:	4d2b      	ldr	r5, [pc, #172]	; (80039ec <z_log_init+0xb4>)
 800393e:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <z_log_init+0xb8>)
 8003940:	1b5b      	subs	r3, r3, r5
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
 8003942:	2b90      	cmp	r3, #144	; 0x90
{
 8003944:	4681      	mov	r9, r0
 8003946:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
 8003948:	d90b      	bls.n	8003962 <z_log_init+0x2a>
 800394a:	492a      	ldr	r1, [pc, #168]	; (80039f4 <z_log_init+0xbc>)
 800394c:	482a      	ldr	r0, [pc, #168]	; (80039f8 <z_log_init+0xc0>)
 800394e:	4a2b      	ldr	r2, [pc, #172]	; (80039fc <z_log_init+0xc4>)
 8003950:	f44f 7384 	mov.w	r3, #264	; 0x108
 8003954:	f007 fd5d 	bl	800b412 <assert_print>
 8003958:	4828      	ldr	r0, [pc, #160]	; (80039fc <z_log_init+0xc4>)
 800395a:	f44f 7184 	mov.w	r1, #264	; 0x108
 800395e:	f007 fd51 	bl	800b404 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003962:	4a27      	ldr	r2, [pc, #156]	; (8003a00 <z_log_init+0xc8>)
 8003964:	f3bf 8f5b 	dmb	ish
 8003968:	e852 4f00 	ldrex	r4, [r2]
 800396c:	1c61      	adds	r1, r4, #1
 800396e:	e842 1000 	strex	r0, r1, [r2]
 8003972:	2800      	cmp	r0, #0
 8003974:	d1f8      	bne.n	8003968 <z_log_init+0x30>
 8003976:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 800397a:	b11c      	cbz	r4, 8003984 <z_log_init+0x4c>
	for (i = 0; i < log_backend_count_get(); i++) {
 800397c:	2400      	movs	r4, #0
}
 800397e:	4620      	mov	r0, r4
 8003980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003984:	111f      	asrs	r7, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8003986:	4626      	mov	r6, r4
				mask |= BIT(i);
 8003988:	f04f 0a01 	mov.w	sl, #1
	for (i = 0; i < log_backend_count_get(); i++) {
 800398c:	42be      	cmp	r6, r7
 800398e:	db10      	blt.n	80039b2 <z_log_init+0x7a>
	if (blocking) {
 8003990:	f1b9 0f00 	cmp.w	r9, #0
 8003994:	d0f3      	beq.n	800397e <z_log_init+0x46>
		while (mask) {
 8003996:	2c00      	cmp	r4, #0
 8003998:	d0f0      	beq.n	800397c <z_log_init+0x44>
			mask = activate_foreach_backend(mask);
 800399a:	4620      	mov	r0, r4
 800399c:	f7ff ff9a 	bl	80038d4 <activate_foreach_backend>
 80039a0:	4604      	mov	r4, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
 80039a2:	f1b8 0f00 	cmp.w	r8, #0
 80039a6:	d0f6      	beq.n	8003996 <z_log_init+0x5e>
	return z_impl_k_sleep(timeout);
 80039a8:	2100      	movs	r1, #0
 80039aa:	2064      	movs	r0, #100	; 0x64
 80039ac:	f005 f948 	bl	8008c40 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 80039b0:	e7f1      	b.n	8003996 <z_log_init+0x5e>
		if (backend->autostart) {
 80039b2:	7b2b      	ldrb	r3, [r5, #12]
 80039b4:	b17b      	cbz	r3, 80039d6 <z_log_init+0x9e>
	if (backend->api->init) {
 80039b6:	f8d5 b000 	ldr.w	fp, [r5]
 80039ba:	f8db 300c 	ldr.w	r3, [fp, #12]
 80039be:	b10b      	cbz	r3, 80039c4 <z_log_init+0x8c>
		backend->api->init(backend);
 80039c0:	4628      	mov	r0, r5
 80039c2:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
 80039c4:	f8db 3010 	ldr.w	r3, [fp, #16]
 80039c8:	b943      	cbnz	r3, 80039dc <z_log_init+0xa4>
				log_backend_enable(backend,
 80039ca:	686b      	ldr	r3, [r5, #4]
 80039cc:	2204      	movs	r2, #4
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	4628      	mov	r0, r5
 80039d2:	f000 fa17 	bl	8003e04 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 80039d6:	3601      	adds	r6, #1
 80039d8:	3510      	adds	r5, #16
 80039da:	e7d7      	b.n	800398c <z_log_init+0x54>
		return backend->api->is_ready(backend);
 80039dc:	4628      	mov	r0, r5
 80039de:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d0f2      	beq.n	80039ca <z_log_init+0x92>
				mask |= BIT(i);
 80039e4:	fa0a f306 	lsl.w	r3, sl, r6
 80039e8:	431c      	orrs	r4, r3
 80039ea:	e7f4      	b.n	80039d6 <z_log_init+0x9e>
 80039ec:	0800d1e0 	.word	0x0800d1e0
 80039f0:	0800d1f0 	.word	0x0800d1f0
 80039f4:	08011c52 	.word	0x08011c52
 80039f8:	080118c5 	.word	0x080118c5
 80039fc:	08011c25 	.word	0x08011c25
 8003a00:	20000a60 	.word	0x20000a60

08003a04 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
 8003a04:	4801      	ldr	r0, [pc, #4]	; (8003a0c <log_process_thread_timer_expiry_fn+0x8>)
 8003a06:	f004 b853 	b.w	8007ab0 <z_impl_k_sem_give>
 8003a0a:	bf00      	nop
 8003a0c:	2000039c 	.word	0x2000039c

08003a10 <log_format_func_t_get>:
}
 8003a10:	4b01      	ldr	r3, [pc, #4]	; (8003a18 <log_format_func_t_get+0x8>)
 8003a12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003a16:	4770      	bx	lr
 8003a18:	0800d3cc 	.word	0x0800d3cc

08003a1c <z_log_notify_backend_enabled>:
{
 8003a1c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8003a1e:	4c04      	ldr	r4, [pc, #16]	; (8003a30 <z_log_notify_backend_enabled+0x14>)
 8003a20:	7823      	ldrb	r3, [r4, #0]
 8003a22:	b913      	cbnz	r3, 8003a2a <z_log_notify_backend_enabled+0xe>
 8003a24:	4803      	ldr	r0, [pc, #12]	; (8003a34 <z_log_notify_backend_enabled+0x18>)
 8003a26:	f004 f843 	bl	8007ab0 <z_impl_k_sem_give>
	backend_attached = true;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	7023      	strb	r3, [r4, #0]
}
 8003a2e:	bd10      	pop	{r4, pc}
 8003a30:	20000c34 	.word	0x20000c34
 8003a34:	2000039c 	.word	0x2000039c

08003a38 <z_log_dropped>:
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <z_log_dropped+0x34>)
 8003a3a:	f3bf 8f5b 	dmb	ish
 8003a3e:	e853 1f00 	ldrex	r1, [r3]
 8003a42:	3101      	adds	r1, #1
 8003a44:	e843 1200 	strex	r2, r1, [r3]
 8003a48:	2a00      	cmp	r2, #0
 8003a4a:	d1f8      	bne.n	8003a3e <z_log_dropped+0x6>
 8003a4c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 8003a50:	b158      	cbz	r0, 8003a6a <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003a52:	f3bf 8f5b 	dmb	ish
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <z_log_dropped+0x38>)
 8003a58:	e853 1f00 	ldrex	r1, [r3]
 8003a5c:	3901      	subs	r1, #1
 8003a5e:	e843 1200 	strex	r2, r1, [r3]
 8003a62:	2a00      	cmp	r2, #0
 8003a64:	d1f8      	bne.n	8003a58 <z_log_dropped+0x20>
 8003a66:	f3bf 8f5b 	dmb	ish
}
 8003a6a:	4770      	bx	lr
 8003a6c:	20000a58 	.word	0x20000a58
 8003a70:	20000a5c 	.word	0x20000a5c

08003a74 <z_log_dropped_read_and_clear>:
}
 8003a74:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <z_log_dropped_read_and_clear+0x1c>)
 8003a78:	f3bf 8f5b 	dmb	ish
 8003a7c:	4601      	mov	r1, r0
 8003a7e:	e853 0f00 	ldrex	r0, [r3]
 8003a82:	e843 1200 	strex	r2, r1, [r3]
 8003a86:	2a00      	cmp	r2, #0
 8003a88:	d1f9      	bne.n	8003a7e <z_log_dropped_read_and_clear+0xa>
 8003a8a:	f3bf 8f5b 	dmb	ish
 8003a8e:	4770      	bx	lr
 8003a90:	20000a58 	.word	0x20000a58

08003a94 <dropped_notify>:
{
 8003a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8003a96:	f7ff ffed 	bl	8003a74 <z_log_dropped_read_and_clear>
	return __log_backends_end - __log_backends_start;
 8003a9a:	4c0a      	ldr	r4, [pc, #40]	; (8003ac4 <dropped_notify+0x30>)
 8003a9c:	4d0a      	ldr	r5, [pc, #40]	; (8003ac8 <dropped_notify+0x34>)
 8003a9e:	1b2d      	subs	r5, r5, r4
 8003aa0:	4607      	mov	r7, r0
 8003aa2:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003aa4:	2600      	movs	r6, #0
 8003aa6:	42ae      	cmp	r6, r5
 8003aa8:	db00      	blt.n	8003aac <dropped_notify+0x18>
}
 8003aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8003aac:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8003aae:	795b      	ldrb	r3, [r3, #5]
 8003ab0:	b12b      	cbz	r3, 8003abe <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	b113      	cbz	r3, 8003abe <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
 8003ab8:	4639      	mov	r1, r7
 8003aba:	4620      	mov	r0, r4
 8003abc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003abe:	3601      	adds	r6, #1
 8003ac0:	3410      	adds	r4, #16
 8003ac2:	e7f0      	b.n	8003aa6 <dropped_notify+0x12>
 8003ac4:	0800d1e0 	.word	0x0800d1e0
 8003ac8:	0800d1f0 	.word	0x0800d1f0

08003acc <z_log_msg_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 8003acc:	4901      	ldr	r1, [pc, #4]	; (8003ad4 <z_log_msg_init+0x8>)
 8003ace:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <z_log_msg_init+0xc>)
 8003ad0:	f7ff bc86 	b.w	80033e0 <mpsc_pbuf_init>
 8003ad4:	0800d3b8 	.word	0x0800d3b8
 8003ad8:	20000a18 	.word	0x20000a18

08003adc <log_core_init>:
	panic_mode = false;
 8003adc:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <log_core_init+0x24>)
{
 8003ade:	b508      	push	{r3, lr}
	panic_mode = false;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 8003ae4:	4a07      	ldr	r2, [pc, #28]	; (8003b04 <log_core_init+0x28>)
 8003ae6:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <log_core_init+0x2c>)
 8003aea:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <log_core_init+0x30>)
 8003aec:	601a      	str	r2, [r3, #0]
		log_output_timestamp_freq_set(freq);
 8003aee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003af2:	f000 fc2b 	bl	800434c <log_output_timestamp_freq_set>
}
 8003af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
 8003afa:	f7ff bfe7 	b.w	8003acc <z_log_msg_init>
 8003afe:	bf00      	nop
 8003b00:	20000c35 	.word	0x20000c35
 8003b04:	20000a58 	.word	0x20000a58
 8003b08:	200000a4 	.word	0x200000a4
 8003b0c:	0800b5c7 	.word	0x0800b5c7

08003b10 <z_log_msg_alloc>:
{
 8003b10:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
 8003b12:	2200      	movs	r2, #0
 8003b14:	4801      	ldr	r0, [pc, #4]	; (8003b1c <z_log_msg_alloc+0xc>)
 8003b16:	2300      	movs	r3, #0
 8003b18:	f7ff bc94 	b.w	8003444 <mpsc_pbuf_alloc>
 8003b1c:	20000a18 	.word	0x20000a18

08003b20 <z_log_msg_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
 8003b20:	4801      	ldr	r0, [pc, #4]	; (8003b28 <z_log_msg_claim+0x8>)
 8003b22:	f7ff bda3 	b.w	800366c <mpsc_pbuf_claim>
 8003b26:	bf00      	nop
 8003b28:	20000a18 	.word	0x20000a18

08003b2c <z_log_msg_free>:
{
 8003b2c:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8003b2e:	4801      	ldr	r0, [pc, #4]	; (8003b34 <z_log_msg_free+0x8>)
 8003b30:	f7ff be22 	b.w	8003778 <mpsc_pbuf_free>
 8003b34:	20000a18 	.word	0x20000a18

08003b38 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
 8003b38:	4801      	ldr	r0, [pc, #4]	; (8003b40 <z_log_msg_pending+0x8>)
 8003b3a:	f007 bd24 	b.w	800b586 <mpsc_pbuf_is_pending>
 8003b3e:	bf00      	nop
 8003b40:	20000a18 	.word	0x20000a18

08003b44 <z_impl_log_process>:
{
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!backend_attached) {
 8003b46:	4b19      	ldr	r3, [pc, #100]	; (8003bac <z_impl_log_process+0x68>)
 8003b48:	7818      	ldrb	r0, [r3, #0]
 8003b4a:	b370      	cbz	r0, 8003baa <z_impl_log_process+0x66>
	msg = z_log_msg_claim();
 8003b4c:	f7ff ffe8 	bl	8003b20 <z_log_msg_claim>
	if (msg) {
 8003b50:	4605      	mov	r5, r0
 8003b52:	b1a8      	cbz	r0, 8003b80 <z_impl_log_process+0x3c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003b54:	f3bf 8f5b 	dmb	ish
 8003b58:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <z_impl_log_process+0x6c>)
 8003b5a:	e853 1f00 	ldrex	r1, [r3]
 8003b5e:	3901      	subs	r1, #1
 8003b60:	e843 1200 	strex	r2, r1, [r3]
 8003b64:	2a00      	cmp	r2, #0
 8003b66:	d1f8      	bne.n	8003b5a <z_impl_log_process+0x16>
 8003b68:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
 8003b6c:	4c11      	ldr	r4, [pc, #68]	; (8003bb4 <z_impl_log_process+0x70>)
 8003b6e:	4e12      	ldr	r6, [pc, #72]	; (8003bb8 <z_impl_log_process+0x74>)
 8003b70:	1b36      	subs	r6, r6, r4
 8003b72:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003b74:	2700      	movs	r7, #0
 8003b76:	42b7      	cmp	r7, r6
 8003b78:	db0c      	blt.n	8003b94 <z_impl_log_process+0x50>
		z_log_msg_free(msg);
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f7ff ffd6 	bl	8003b2c <z_log_msg_free>
	return dropped_cnt > 0;
 8003b80:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <z_impl_log_process+0x78>)
	if (z_log_dropped_pending()) {
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	dd01      	ble.n	8003b8c <z_impl_log_process+0x48>
		dropped_notify();
 8003b88:	f7ff ff84 	bl	8003a94 <dropped_notify>
}
 8003b8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return z_log_msg_pending();
 8003b90:	f7ff bfd2 	b.w	8003b38 <z_log_msg_pending>
	return backend->cb->active;
 8003b94:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
 8003b96:	795b      	ldrb	r3, [r3, #5]
 8003b98:	b123      	cbz	r3, 8003ba4 <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003ba4:	3701      	adds	r7, #1
 8003ba6:	3410      	adds	r4, #16
 8003ba8:	e7e5      	b.n	8003b76 <z_impl_log_process+0x32>
}
 8003baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bac:	20000c34 	.word	0x20000c34
 8003bb0:	20000a5c 	.word	0x20000a5c
 8003bb4:	0800d1e0 	.word	0x0800d1e0
 8003bb8:	0800d1f0 	.word	0x0800d1f0
 8003bbc:	20000a58 	.word	0x20000a58

08003bc0 <z_impl_log_panic>:
{
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 8003bc2:	4f0f      	ldr	r7, [pc, #60]	; (8003c00 <z_impl_log_panic+0x40>)
 8003bc4:	783d      	ldrb	r5, [r7, #0]
 8003bc6:	b97d      	cbnz	r5, 8003be8 <z_impl_log_panic+0x28>
	return __log_backends_end - __log_backends_start;
 8003bc8:	4c0e      	ldr	r4, [pc, #56]	; (8003c04 <z_impl_log_panic+0x44>)
 8003bca:	4e0f      	ldr	r6, [pc, #60]	; (8003c08 <z_impl_log_panic+0x48>)
	(void)z_log_init(true, false);
 8003bcc:	4629      	mov	r1, r5
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f7ff feb2 	bl	8003938 <z_log_init>
 8003bd4:	1b36      	subs	r6, r6, r4
 8003bd6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003bd8:	42b5      	cmp	r5, r6
 8003bda:	db06      	blt.n	8003bea <z_impl_log_panic+0x2a>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
 8003bdc:	f7ff ffb2 	bl	8003b44 <z_impl_log_process>
		while (log_process() == true) {
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d1fb      	bne.n	8003bdc <z_impl_log_panic+0x1c>
	panic_mode = true;
 8003be4:	2301      	movs	r3, #1
 8003be6:	703b      	strb	r3, [r7, #0]
}
 8003be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 8003bea:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8003bec:	795b      	ldrb	r3, [r3, #5]
 8003bee:	b11b      	cbz	r3, 8003bf8 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003bf8:	3501      	adds	r5, #1
 8003bfa:	3410      	adds	r4, #16
 8003bfc:	e7ec      	b.n	8003bd8 <z_impl_log_panic+0x18>
 8003bfe:	bf00      	nop
 8003c00:	20000c35 	.word	0x20000c35
 8003c04:	0800d1e0 	.word	0x0800d1e0
 8003c08:	0800d1f0 	.word	0x0800d1f0

08003c0c <log_process_thread_func>:
{
 8003c0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __log_backends_end - __log_backends_start;
 8003c10:	4d2a      	ldr	r5, [pc, #168]	; (8003cbc <log_process_thread_func+0xb0>)
 8003c12:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <log_process_thread_func+0xb4>)
 8003c14:	1aed      	subs	r5, r5, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
 8003c16:	2d00      	cmp	r5, #0
 8003c18:	dc0b      	bgt.n	8003c32 <log_process_thread_func+0x26>
 8003c1a:	492a      	ldr	r1, [pc, #168]	; (8003cc4 <log_process_thread_func+0xb8>)
 8003c1c:	482a      	ldr	r0, [pc, #168]	; (8003cc8 <log_process_thread_func+0xbc>)
 8003c1e:	4a2b      	ldr	r2, [pc, #172]	; (8003ccc <log_process_thread_func+0xc0>)
 8003c20:	f240 238f 	movw	r3, #655	; 0x28f
 8003c24:	f007 fbf5 	bl	800b412 <assert_print>
 8003c28:	4828      	ldr	r0, [pc, #160]	; (8003ccc <log_process_thread_func+0xc0>)
 8003c2a:	f240 218f 	movw	r1, #655	; 0x28f
 8003c2e:	f007 fbe9 	bl	800b404 <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
 8003c32:	2100      	movs	r1, #0
 8003c34:	4608      	mov	r0, r1
 8003c36:	f7ff fe7f 	bl	8003938 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	b368      	cbz	r0, 8003c9a <log_process_thread_func+0x8e>
 8003c3e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8003c42:	2700      	movs	r7, #0
	return z_impl_z_current_get();
 8003c44:	f005 f82e 	bl	8008ca4 <z_impl_z_current_get>
	proc_tid = process_tid;
 8003c48:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <log_process_thread_func+0xc4>)
 8003c4a:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8003c4c:	b130      	cbz	r0, 8003c5c <log_process_thread_func+0x50>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8003c4e:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <log_process_thread_func+0xc8>)
	    process_tid &&
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b09      	cmp	r3, #9
 8003c54:	dd02      	ble.n	8003c5c <log_process_thread_func+0x50>
	z_impl_k_sem_give(sem);
 8003c56:	4820      	ldr	r0, [pc, #128]	; (8003cd8 <log_process_thread_func+0xcc>)
 8003c58:	f003 ff2a 	bl	8007ab0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 8003c5c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8003cd8 <log_process_thread_func+0xcc>
 8003c60:	ea4f 1825 	mov.w	r8, r5, asr #4
 8003c64:	2500      	movs	r5, #0
		if (activate_mask) {
 8003c66:	b144      	cbz	r4, 8003c7a <log_process_thread_func+0x6e>
			activate_mask = activate_foreach_backend(activate_mask);
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f7ff fe33 	bl	80038d4 <activate_foreach_backend>
			if (!activate_mask) {
 8003c6e:	4604      	mov	r4, r0
 8003c70:	b918      	cbnz	r0, 8003c7a <log_process_thread_func+0x6e>
				timeout = K_FOREVER;
 8003c72:	f04f 36ff 	mov.w	r6, #4294967295
 8003c76:	f04f 37ff 	mov.w	r7, #4294967295
 8003c7a:	f7ff ff63 	bl	8003b44 <z_impl_log_process>
		if (log_process() == false) {
 8003c7e:	4681      	mov	r9, r0
 8003c80:	b948      	cbnz	r0, 8003c96 <log_process_thread_func+0x8a>
			if (processed_any) {
 8003c82:	b11d      	cbz	r5, 8003c8c <log_process_thread_func+0x80>
 8003c84:	4d0e      	ldr	r5, [pc, #56]	; (8003cc0 <log_process_thread_func+0xb4>)
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003c86:	4682      	mov	sl, r0
 8003c88:	45c2      	cmp	sl, r8
 8003c8a:	db0b      	blt.n	8003ca4 <log_process_thread_func+0x98>
 8003c8c:	4632      	mov	r2, r6
 8003c8e:	463b      	mov	r3, r7
 8003c90:	4658      	mov	r0, fp
 8003c92:	f003 ff4b 	bl	8007b2c <z_impl_k_sem_take>
 8003c96:	464d      	mov	r5, r9
 8003c98:	e7e5      	b.n	8003c66 <log_process_thread_func+0x5a>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8003c9a:	f04f 36ff 	mov.w	r6, #4294967295
 8003c9e:	f04f 37ff 	mov.w	r7, #4294967295
 8003ca2:	e7cf      	b.n	8003c44 <log_process_thread_func+0x38>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	b11b      	cbz	r3, 8003cb2 <log_process_thread_func+0xa6>
		backend->api->notify(backend, event, arg);
 8003caa:	2200      	movs	r2, #0
 8003cac:	4611      	mov	r1, r2
 8003cae:	4628      	mov	r0, r5
 8003cb0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003cb2:	f10a 0a01 	add.w	sl, sl, #1
 8003cb6:	3510      	adds	r5, #16
 8003cb8:	e7e6      	b.n	8003c88 <log_process_thread_func+0x7c>
 8003cba:	bf00      	nop
 8003cbc:	0800d1f0 	.word	0x0800d1f0
 8003cc0:	0800d1e0 	.word	0x0800d1e0
 8003cc4:	08011c76 	.word	0x08011c76
 8003cc8:	080118c5 	.word	0x080118c5
 8003ccc:	08011c25 	.word	0x08011c25
 8003cd0:	20000a54 	.word	0x20000a54
 8003cd4:	20000a5c 	.word	0x20000a5c
 8003cd8:	2000039c 	.word	0x2000039c

08003cdc <z_log_msg_commit>:
{
 8003cdc:	b513      	push	{r0, r1, r4, lr}
	msg->hdr.timestamp = timestamp_func();
 8003cde:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <z_log_msg_commit+0xd4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
{
 8003ce2:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8003ce4:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, &m->buf);
 8003ce6:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
 8003ce8:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
 8003cea:	4832      	ldr	r0, [pc, #200]	; (8003db4 <z_log_msg_commit+0xd8>)
 8003cec:	f7ff fc68 	bl	80035c0 <mpsc_pbuf_commit>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003cf0:	f3bf 8f5b 	dmb	ish
 8003cf4:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <z_log_msg_commit+0xdc>)
 8003cf6:	e853 2f00 	ldrex	r2, [r3]
 8003cfa:	1c51      	adds	r1, r2, #1
 8003cfc:	e843 1000 	strex	r0, r1, [r3]
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d1f8      	bne.n	8003cf6 <z_log_msg_commit+0x1a>
 8003d04:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8003d08:	4b2c      	ldr	r3, [pc, #176]	; (8003dbc <z_log_msg_commit+0xe0>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d034      	beq.n	8003d7a <z_log_msg_commit+0x9e>
	__asm__ volatile(
 8003d10:	f04f 0310 	mov.w	r3, #16
 8003d14:	f3ef 8411 	mrs	r4, BASEPRI
 8003d18:	f383 8812 	msr	BASEPRI_MAX, r3
 8003d1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8003d20:	4827      	ldr	r0, [pc, #156]	; (8003dc0 <z_log_msg_commit+0xe4>)
 8003d22:	f003 fd1d 	bl	8007760 <z_spin_lock_valid>
 8003d26:	b968      	cbnz	r0, 8003d44 <z_log_msg_commit+0x68>
 8003d28:	4a26      	ldr	r2, [pc, #152]	; (8003dc4 <z_log_msg_commit+0xe8>)
 8003d2a:	4927      	ldr	r1, [pc, #156]	; (8003dc8 <z_log_msg_commit+0xec>)
 8003d2c:	4827      	ldr	r0, [pc, #156]	; (8003dcc <z_log_msg_commit+0xf0>)
 8003d2e:	238e      	movs	r3, #142	; 0x8e
 8003d30:	f007 fb6f 	bl	800b412 <assert_print>
 8003d34:	4922      	ldr	r1, [pc, #136]	; (8003dc0 <z_log_msg_commit+0xe4>)
 8003d36:	4826      	ldr	r0, [pc, #152]	; (8003dd0 <z_log_msg_commit+0xf4>)
 8003d38:	f007 fb6b 	bl	800b412 <assert_print>
 8003d3c:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8003d3e:	4821      	ldr	r0, [pc, #132]	; (8003dc4 <z_log_msg_commit+0xe8>)
 8003d40:	f007 fb60 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8003d44:	481e      	ldr	r0, [pc, #120]	; (8003dc0 <z_log_msg_commit+0xe4>)
 8003d46:	f003 fd29 	bl	800779c <z_spin_lock_set_owner>
 8003d4a:	f7ff fefb 	bl	8003b44 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8003d4e:	481c      	ldr	r0, [pc, #112]	; (8003dc0 <z_log_msg_commit+0xe4>)
 8003d50:	f003 fd14 	bl	800777c <z_spin_unlock_valid>
 8003d54:	b958      	cbnz	r0, 8003d6e <z_log_msg_commit+0x92>
 8003d56:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <z_log_msg_commit+0xe8>)
 8003d58:	491e      	ldr	r1, [pc, #120]	; (8003dd4 <z_log_msg_commit+0xf8>)
 8003d5a:	481c      	ldr	r0, [pc, #112]	; (8003dcc <z_log_msg_commit+0xf0>)
 8003d5c:	23b9      	movs	r3, #185	; 0xb9
 8003d5e:	f007 fb58 	bl	800b412 <assert_print>
 8003d62:	4917      	ldr	r1, [pc, #92]	; (8003dc0 <z_log_msg_commit+0xe4>)
 8003d64:	481c      	ldr	r0, [pc, #112]	; (8003dd8 <z_log_msg_commit+0xfc>)
 8003d66:	f007 fb54 	bl	800b412 <assert_print>
 8003d6a:	21b9      	movs	r1, #185	; 0xb9
 8003d6c:	e7e7      	b.n	8003d3e <z_log_msg_commit+0x62>
	__asm__ volatile(
 8003d6e:	f384 8811 	msr	BASEPRI, r4
 8003d72:	f3bf 8f6f 	isb	sy
}
 8003d76:	b002      	add	sp, #8
 8003d78:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
 8003d7a:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <z_log_msg_commit+0x100>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f9      	beq.n	8003d76 <z_log_msg_commit+0x9a>
		if (cnt == 0) {
 8003d82:	b952      	cbnz	r2, 8003d9a <z_log_msg_commit+0xbe>
	z_impl_k_timer_start(timer, duration, period);
 8003d84:	2200      	movs	r2, #0
 8003d86:	2300      	movs	r3, #0
 8003d88:	e9cd 2300 	strd	r2, r3, [sp]
 8003d8c:	4814      	ldr	r0, [pc, #80]	; (8003de0 <z_log_msg_commit+0x104>)
 8003d8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d92:	2300      	movs	r3, #0
 8003d94:	f005 fbd2 	bl	800953c <z_impl_k_timer_start>
 8003d98:	e7ed      	b.n	8003d76 <z_log_msg_commit+0x9a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8003d9a:	2a0a      	cmp	r2, #10
 8003d9c:	d1eb      	bne.n	8003d76 <z_log_msg_commit+0x9a>
	z_impl_k_timer_stop(timer);
 8003d9e:	4810      	ldr	r0, [pc, #64]	; (8003de0 <z_log_msg_commit+0x104>)
 8003da0:	f008 fa84 	bl	800c2ac <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8003da4:	480f      	ldr	r0, [pc, #60]	; (8003de4 <z_log_msg_commit+0x108>)
}
 8003da6:	b002      	add	sp, #8
 8003da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dac:	f003 be80 	b.w	8007ab0 <z_impl_k_sem_give>
 8003db0:	200000a4 	.word	0x200000a4
 8003db4:	20000a18 	.word	0x20000a18
 8003db8:	20000a5c 	.word	0x20000a5c
 8003dbc:	20000c35 	.word	0x20000c35
 8003dc0:	20000a14 	.word	0x20000a14
 8003dc4:	08011b97 	.word	0x08011b97
 8003dc8:	08011bc4 	.word	0x08011bc4
 8003dcc:	080118c5 	.word	0x080118c5
 8003dd0:	08011bd9 	.word	0x08011bd9
 8003dd4:	08011bf1 	.word	0x08011bf1
 8003dd8:	08011c08 	.word	0x08011c08
 8003ddc:	20000a54 	.word	0x20000a54
 8003de0:	200008b0 	.word	0x200008b0
 8003de4:	2000039c 	.word	0x2000039c

08003de8 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 8003de8:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <log_source_name_get+0x14>)
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <log_source_name_get+0x18>)
 8003dec:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8003dee:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 8003df2:	bf34      	ite	cc
 8003df4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8003df8:	2000      	movcs	r0, #0
}
 8003dfa:	4770      	bx	lr
 8003dfc:	0800d180 	.word	0x0800d180
 8003e00:	0800d1e0 	.word	0x0800d1e0

08003e04 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 8003e04:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <log_backend_enable+0x38>)
 8003e08:	1ac3      	subs	r3, r0, r3
 8003e0a:	111b      	asrs	r3, r3, #4
 8003e0c:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
 8003e0e:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
 8003e10:	b948      	cbnz	r0, 8003e26 <log_backend_enable+0x22>
 8003e12:	490b      	ldr	r1, [pc, #44]	; (8003e40 <log_backend_enable+0x3c>)
 8003e14:	480b      	ldr	r0, [pc, #44]	; (8003e44 <log_backend_enable+0x40>)
 8003e16:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <log_backend_enable+0x44>)
 8003e18:	23de      	movs	r3, #222	; 0xde
 8003e1a:	f007 fafa 	bl	800b412 <assert_print>
 8003e1e:	480a      	ldr	r0, [pc, #40]	; (8003e48 <log_backend_enable+0x44>)
 8003e20:	21de      	movs	r1, #222	; 0xde
 8003e22:	f007 faef 	bl	800b404 <assert_post_action>
	backend->cb->id = id;
 8003e26:	6842      	ldr	r2, [r0, #4]
 8003e28:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 8003e2a:	6843      	ldr	r3, [r0, #4]
 8003e2c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8003e2e:	6843      	ldr	r3, [r0, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
 8003e34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_log_notify_backend_enabled();
 8003e38:	f7ff bdf0 	b.w	8003a1c <z_log_notify_backend_enabled>
 8003e3c:	0800d1e0 	.word	0x0800d1e0
 8003e40:	08011d26 	.word	0x08011d26
 8003e44:	080118c5 	.word	0x080118c5
 8003e48:	08011cee 	.word	0x08011cee

08003e4c <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
 8003e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e50:	b08f      	sub	sp, #60	; 0x3c
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 8003e52:	f3c1 44cb 	ubfx	r4, r1, #19, #12
 8003e56:	f3c1 2649 	ubfx	r6, r1, #9, #10
 8003e5a:	9005      	str	r0, [sp, #20]
 8003e5c:	460d      	mov	r5, r1
 8003e5e:	4690      	mov	r8, r2
 8003e60:	4699      	mov	r9, r3
 8003e62:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
 8003e64:	2e00      	cmp	r6, #0
 8003e66:	d03e      	beq.n	8003ee6 <z_impl_z_log_msg_static_create+0x9a>
	return cbprintf_package_convert(in_packaged, in_len,
 8003e68:	f04f 0a02 	mov.w	sl, #2
 8003e6c:	f04f 0b04 	mov.w	fp, #4
 8003e70:	af09      	add	r7, sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
 8003e72:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
 8003e74:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
 8003e76:	ab0b      	add	r3, sp, #44	; 0x2c
 8003e78:	f8cd b008 	str.w	fp, [sp, #8]
 8003e7c:	9701      	str	r7, [sp, #4]
 8003e7e:	f8cd a000 	str.w	sl, [sp]
 8003e82:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
 8003e84:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
 8003e88:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
 8003e8a:	9607      	str	r6, [sp, #28]
 8003e8c:	f7fe f8e4 	bl	8002058 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
 8003e90:	f3c0 0309 	ubfx	r3, r0, #0, #10
 8003e94:	1918      	adds	r0, r3, r4
 8003e96:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 8003e9a:	fa20 f00a 	lsr.w	r0, r0, sl
		out_desc.package_len = len;
 8003e9e:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 8003ea0:	f363 2552 	bfi	r5, r3, #9, #10
 8003ea4:	9306      	str	r3, [sp, #24]
 8003ea6:	f7ff fe33 	bl	8003b10 <z_log_msg_alloc>
		if (msg) {
 8003eaa:	4604      	mov	r4, r0
 8003eac:	b308      	cbz	r0, 8003ef2 <z_impl_z_log_msg_static_create+0xa6>
	struct z_cbprintf_buf_desc buf_desc = {
 8003eae:	9b06      	ldr	r3, [sp, #24]
 8003eb0:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
 8003eb2:	3010      	adds	r0, #16
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	900b      	str	r0, [sp, #44]	; 0x2c
 8003eb8:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
 8003eba:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 8003ebe:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <z_impl_z_log_msg_static_create+0xbc>)
 8003ec0:	9907      	ldr	r1, [sp, #28]
 8003ec2:	f8cd a000 	str.w	sl, [sp]
 8003ec6:	ab0b      	add	r3, sp, #44	; 0x2c
 8003ec8:	4640      	mov	r0, r8
 8003eca:	f7fe f8c5 	bl	8002058 <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	da0f      	bge.n	8003ef2 <z_impl_z_log_msg_static_create+0xa6>
 8003ed2:	490e      	ldr	r1, [pc, #56]	; (8003f0c <z_impl_z_log_msg_static_create+0xc0>)
 8003ed4:	480e      	ldr	r0, [pc, #56]	; (8003f10 <z_impl_z_log_msg_static_create+0xc4>)
 8003ed6:	4a0f      	ldr	r2, [pc, #60]	; (8003f14 <z_impl_z_log_msg_static_create+0xc8>)
 8003ed8:	2348      	movs	r3, #72	; 0x48
 8003eda:	f007 fa9a 	bl	800b412 <assert_print>
 8003ede:	480d      	ldr	r0, [pc, #52]	; (8003f14 <z_impl_z_log_msg_static_create+0xc8>)
 8003ee0:	2148      	movs	r1, #72	; 0x48
 8003ee2:	f007 fa8f 	bl	800b404 <assert_post_action>
 8003ee6:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 8003eea:	0880      	lsrs	r0, r0, #2
 8003eec:	f7ff fe10 	bl	8003b10 <z_log_msg_alloc>
 8003ef0:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
 8003ef2:	f366 2552 	bfi	r5, r6, #9, #10
 8003ef6:	9905      	ldr	r1, [sp, #20]
 8003ef8:	464b      	mov	r3, r9
 8003efa:	462a      	mov	r2, r5
 8003efc:	4620      	mov	r0, r4
}
 8003efe:	b00f      	add	sp, #60	; 0x3c
 8003f00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
 8003f04:	f007 bb82 	b.w	800b60c <z_log_msg_finalize>
 8003f08:	0800b5e1 	.word	0x0800b5e1
 8003f0c:	08011d69 	.word	0x08011d69
 8003f10:	080118c5 	.word	0x080118c5
 8003f14:	08011d3d 	.word	0x08011d3d

08003f18 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8003f18:	b40e      	push	{r1, r2, r3}
 8003f1a:	b503      	push	{r0, r1, lr}
 8003f1c:	ab03      	add	r3, sp, #12
 8003f1e:	4601      	mov	r1, r0
 8003f20:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8003f24:	4804      	ldr	r0, [pc, #16]	; (8003f38 <print_formatted+0x20>)
	va_start(args, fmt);
 8003f26:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8003f28:	f007 fb97 	bl	800b65a <cbvprintf>
	va_end(args);

	return length;
}
 8003f2c:	b002      	add	sp, #8
 8003f2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f32:	b003      	add	sp, #12
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	08003f59 	.word	0x08003f59

08003f3c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8003f3c:	06ca      	lsls	r2, r1, #27
 8003f3e:	d405      	bmi.n	8003f4c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8003f40:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
 8003f42:	bf4c      	ite	mi
 8003f44:	4902      	ldrmi	r1, [pc, #8]	; (8003f50 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
 8003f46:	4903      	ldrpl	r1, [pc, #12]	; (8003f54 <newline_print+0x18>)
 8003f48:	f7ff bfe6 	b.w	8003f18 <print_formatted>
	}
}
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	080132a0 	.word	0x080132a0
 8003f54:	08011d72 	.word	0x08011d72

08003f58 <out_func>:
{
 8003f58:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 8003f5a:	684b      	ldr	r3, [r1, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68cb      	ldr	r3, [r1, #12]
 8003f60:	429a      	cmp	r2, r3
{
 8003f62:	4605      	mov	r5, r0
 8003f64:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 8003f66:	d102      	bne.n	8003f6e <out_func+0x16>
		log_output_flush(out_ctx);
 8003f68:	4608      	mov	r0, r1
 8003f6a:	f007 fb7d 	bl	800b668 <log_output_flush>
 8003f6e:	6863      	ldr	r3, [r4, #4]
 8003f70:	f3bf 8f5b 	dmb	ish
 8003f74:	e853 2f00 	ldrex	r2, [r3]
 8003f78:	1c51      	adds	r1, r2, #1
 8003f7a:	e843 1000 	strex	r0, r1, [r3]
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d1f8      	bne.n	8003f74 <out_func+0x1c>
 8003f82:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 8003f86:	68a3      	ldr	r3, [r4, #8]
 8003f88:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
 8003f8a:	6863      	ldr	r3, [r4, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68e3      	ldr	r3, [r4, #12]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d909      	bls.n	8003fa8 <out_func+0x50>
 8003f94:	4905      	ldr	r1, [pc, #20]	; (8003fac <out_func+0x54>)
 8003f96:	4806      	ldr	r0, [pc, #24]	; (8003fb0 <out_func+0x58>)
 8003f98:	4a06      	ldr	r2, [pc, #24]	; (8003fb4 <out_func+0x5c>)
 8003f9a:	2379      	movs	r3, #121	; 0x79
 8003f9c:	f007 fa39 	bl	800b412 <assert_print>
 8003fa0:	4804      	ldr	r0, [pc, #16]	; (8003fb4 <out_func+0x5c>)
 8003fa2:	2179      	movs	r1, #121	; 0x79
 8003fa4:	f007 fa2e 	bl	800b404 <assert_post_action>
}
 8003fa8:	2000      	movs	r0, #0
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	08011da4 	.word	0x08011da4
 8003fb0:	080118c5 	.word	0x080118c5
 8003fb4:	08011d75 	.word	0x08011d75

08003fb8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
 8003fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fbc:	b089      	sub	sp, #36	; 0x24
 8003fbe:	469a      	mov	sl, r3
 8003fc0:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
 8003fc4:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
 8003fc8:	9305      	str	r3, [sp, #20]
 8003fca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003fcc:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8003fce:	9206      	str	r2, [sp, #24]
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	460d      	mov	r5, r1
 8003fd4:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
 8003fd6:	f1bb 0f00 	cmp.w	fp, #0
 8003fda:	f000 8085 	beq.w	80040e8 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8003fde:	f006 0308 	and.w	r3, r6, #8
 8003fe2:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
 8003fe4:	f007 fafa 	bl	800b5dc <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 8003fe8:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
 8003fec:	4602      	mov	r2, r0
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	d049      	beq.n	8004086 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
 8003ff2:	498d      	ldr	r1, [pc, #564]	; (8004228 <log_output_process+0x270>)
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f7ff ff8f 	bl	8003f18 <print_formatted>
 8003ffa:	4680      	mov	r8, r0
	if (stamp) {
 8003ffc:	f1b9 0f00 	cmp.w	r9, #0
 8004000:	d008      	beq.n	8004014 <log_output_process+0x5c>
	if (!format) {
 8004002:	f016 0f44 	tst.w	r6, #68	; 0x44
 8004006:	d140      	bne.n	800408a <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
 8004008:	4988      	ldr	r1, [pc, #544]	; (800422c <log_output_process+0x274>)
 800400a:	462a      	mov	r2, r5
 800400c:	4620      	mov	r0, r4
 800400e:	f7ff ff83 	bl	8003f18 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 8004012:	4480      	add	r8, r0
	if (color) {
 8004014:	f006 0301 	and.w	r3, r6, #1
 8004018:	b153      	cbz	r3, 8004030 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
 800401a:	4b85      	ldr	r3, [pc, #532]	; (8004230 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
 800401c:	4985      	ldr	r1, [pc, #532]	; (8004234 <log_output_process+0x27c>)
		const char *log_color = start && (colors[level] != NULL) ?
 800401e:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
 8004022:	4b85      	ldr	r3, [pc, #532]	; (8004238 <log_output_process+0x280>)
 8004024:	4620      	mov	r0, r4
 8004026:	2a00      	cmp	r2, #0
 8004028:	bf08      	it	eq
 800402a:	461a      	moveq	r2, r3
 800402c:	f7ff ff74 	bl	8003f18 <print_formatted>
	if (level_on) {
 8004030:	f006 0308 	and.w	r3, r6, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d054      	beq.n	80040e2 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
 8004038:	4b80      	ldr	r3, [pc, #512]	; (800423c <log_output_process+0x284>)
 800403a:	4981      	ldr	r1, [pc, #516]	; (8004240 <log_output_process+0x288>)
 800403c:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
 8004040:	4620      	mov	r0, r4
 8004042:	f7ff ff69 	bl	8003f18 <print_formatted>
 8004046:	4605      	mov	r5, r0
	if (domain) {
 8004048:	9b06      	ldr	r3, [sp, #24]
 800404a:	b12b      	cbz	r3, 8004058 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
 800404c:	497d      	ldr	r1, [pc, #500]	; (8004244 <log_output_process+0x28c>)
 800404e:	461a      	mov	r2, r3
 8004050:	4620      	mov	r0, r4
 8004052:	f7ff ff61 	bl	8003f18 <print_formatted>
 8004056:	4405      	add	r5, r0
	if (source) {
 8004058:	f1ba 0f00 	cmp.w	sl, #0
 800405c:	d005      	beq.n	800406a <log_output_process+0xb2>
		total += print_formatted(output,
 800405e:	497a      	ldr	r1, [pc, #488]	; (8004248 <log_output_process+0x290>)
 8004060:	4652      	mov	r2, sl
 8004062:	4620      	mov	r0, r4
 8004064:	f7ff ff58 	bl	8003f18 <print_formatted>
 8004068:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
 800406a:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
 800406c:	2f00      	cmp	r7, #0
 800406e:	d149      	bne.n	8004104 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
 8004070:	9b04      	ldr	r3, [sp, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d160      	bne.n	8004138 <log_output_process+0x180>
	if (color) {
 8004076:	07f3      	lsls	r3, r6, #31
 8004078:	f100 80cf 	bmi.w	800421a <log_output_process+0x262>
	newline_print(output, flags);
 800407c:	4631      	mov	r1, r6
 800407e:	4620      	mov	r0, r4
 8004080:	f7ff ff5c 	bl	8003f3c <newline_print>
}
 8004084:	e0c3      	b.n	800420e <log_output_process+0x256>
	uint32_t length = 0U;
 8004086:	4680      	mov	r8, r0
 8004088:	e7b8      	b.n	8003ffc <log_output_process+0x44>
	} else if (freq != 0U) {
 800408a:	4b70      	ldr	r3, [pc, #448]	; (800424c <log_output_process+0x294>)
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	2800      	cmp	r0, #0
 8004090:	d0bf      	beq.n	8004012 <log_output_process+0x5a>
		timestamp /= timestamp_div;
 8004092:	4b6f      	ldr	r3, [pc, #444]	; (8004250 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
 8004094:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
 800409e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80040a2:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
 80040a6:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
 80040aa:	fb09 f505 	mul.w	r5, r9, r5
		mins = seconds / 60U;
 80040ae:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80040b2:	fbb3 f2f1 	udiv	r2, r3, r1
 80040b6:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80040ba:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
 80040be:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80040c2:	fb00 551e 	mls	r5, r0, lr, r5
				length = print_formatted(output,
 80040c6:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80040ca:	fb09 f505 	mul.w	r5, r9, r5
				length = print_formatted(output,
 80040ce:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80040d0:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
 80040d4:	495f      	ldr	r1, [pc, #380]	; (8004254 <log_output_process+0x29c>)
 80040d6:	e9cd e501 	strd	lr, r5, [sp, #4]
 80040da:	4620      	mov	r0, r4
 80040dc:	f7ff ff1c 	bl	8003f18 <print_formatted>
 80040e0:	e797      	b.n	8004012 <log_output_process+0x5a>
	int total = 0;
 80040e2:	f006 0508 	and.w	r5, r6, #8
 80040e6:	e7af      	b.n	8004048 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 80040e8:	f1ba 0f01 	cmp.w	sl, #1
 80040ec:	d106      	bne.n	80040fc <log_output_process+0x144>
	if (package) {
 80040ee:	b9ef      	cbnz	r7, 800412c <log_output_process+0x174>
	if (data_len) {
 80040f0:	9b04      	ldr	r3, [sp, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 808b 	beq.w	800420e <log_output_process+0x256>
		prefix_offset = 0;
 80040f8:	2500      	movs	r5, #0
 80040fa:	e01d      	b.n	8004138 <log_output_process+0x180>
	if (package) {
 80040fc:	2f00      	cmp	r7, #0
 80040fe:	d0f7      	beq.n	80040f0 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8004100:	4855      	ldr	r0, [pc, #340]	; (8004258 <log_output_process+0x2a0>)
 8004102:	e014      	b.n	800412e <log_output_process+0x176>
		cb = out_func;
 8004104:	4855      	ldr	r0, [pc, #340]	; (800425c <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8004106:	4956      	ldr	r1, [pc, #344]	; (8004260 <log_output_process+0x2a8>)
 8004108:	463b      	mov	r3, r7
 800410a:	4622      	mov	r2, r4
 800410c:	f007 f80b 	bl	800b126 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
 8004110:	2800      	cmp	r0, #0
 8004112:	da0e      	bge.n	8004132 <log_output_process+0x17a>
 8004114:	4953      	ldr	r1, [pc, #332]	; (8004264 <log_output_process+0x2ac>)
 8004116:	4854      	ldr	r0, [pc, #336]	; (8004268 <log_output_process+0x2b0>)
 8004118:	4a54      	ldr	r2, [pc, #336]	; (800426c <log_output_process+0x2b4>)
 800411a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800411e:	f007 f978 	bl	800b412 <assert_print>
 8004122:	4852      	ldr	r0, [pc, #328]	; (800426c <log_output_process+0x2b4>)
 8004124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004128:	f007 f96c 	bl	800b404 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 800412c:	484b      	ldr	r0, [pc, #300]	; (800425c <log_output_process+0x2a4>)
		prefix_offset = 0;
 800412e:	465d      	mov	r5, fp
 8004130:	e7e9      	b.n	8004106 <log_output_process+0x14e>
	if (data_len) {
 8004132:	9b04      	ldr	r3, [sp, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d066      	beq.n	8004206 <log_output_process+0x24e>
		print_formatted(output, " ");
 8004138:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8004270 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
 800413c:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8004274 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8004140:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
 8004142:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8004144:	2f10      	cmp	r7, #16
	newline_print(output, flags);
 8004146:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8004148:	bf28      	it	cs
 800414a:	2710      	movcs	r7, #16
	newline_print(output, flags);
 800414c:	f7ff fef6 	bl	8003f3c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
 8004150:	f04f 0a00 	mov.w	sl, #0
 8004154:	4555      	cmp	r5, sl
 8004156:	dc43      	bgt.n	80041e0 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
 8004158:	9b05      	ldr	r3, [sp, #20]
 800415a:	4649      	mov	r1, r9
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	4620      	mov	r0, r4
 8004160:	f7ff feda 	bl	8003f18 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004164:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
 8004168:	f01a 0f07 	tst.w	sl, #7
 800416c:	d103      	bne.n	8004176 <log_output_process+0x1be>
			print_formatted(output, " ");
 800416e:	4641      	mov	r1, r8
 8004170:	4620      	mov	r0, r4
 8004172:	f7ff fed1 	bl	8003f18 <print_formatted>
		if (i < length) {
 8004176:	4557      	cmp	r7, sl
 8004178:	d939      	bls.n	80041ee <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
 800417a:	9b05      	ldr	r3, [sp, #20]
 800417c:	4649      	mov	r1, r9
 800417e:	f813 200a 	ldrb.w	r2, [r3, sl]
 8004182:	4620      	mov	r0, r4
 8004184:	f7ff fec8 	bl	8003f18 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004188:	f10a 0a01 	add.w	sl, sl, #1
 800418c:	f1ba 0f10 	cmp.w	sl, #16
 8004190:	d1ea      	bne.n	8004168 <log_output_process+0x1b0>
	print_formatted(output, "|");
 8004192:	4939      	ldr	r1, [pc, #228]	; (8004278 <log_output_process+0x2c0>)
 8004194:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004196:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
 800419a:	f7ff febd 	bl	8003f18 <print_formatted>
		if (i < length) {
 800419e:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
 80041a0:	9b05      	ldr	r3, [sp, #20]
 80041a2:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
 80041a4:	4b35      	ldr	r3, [pc, #212]	; (800427c <log_output_process+0x2c4>)
 80041a6:	5c99      	ldrb	r1, [r3, r2]
 80041a8:	f011 0f97 	tst.w	r1, #151	; 0x97
 80041ac:	bf08      	it	eq
 80041ae:	222e      	moveq	r2, #46	; 0x2e
 80041b0:	4933      	ldr	r1, [pc, #204]	; (8004280 <log_output_process+0x2c8>)
 80041b2:	4620      	mov	r0, r4
 80041b4:	f7ff feb0 	bl	8003f18 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80041b8:	f10a 0a01 	add.w	sl, sl, #1
 80041bc:	f1ba 0f10 	cmp.w	sl, #16
 80041c0:	d01a      	beq.n	80041f8 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
 80041c2:	f01a 0f07 	tst.w	sl, #7
 80041c6:	d103      	bne.n	80041d0 <log_output_process+0x218>
			print_formatted(output, " ");
 80041c8:	4641      	mov	r1, r8
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7ff fea4 	bl	8003f18 <print_formatted>
		if (i < length) {
 80041d0:	4557      	cmp	r7, sl
 80041d2:	4652      	mov	r2, sl
 80041d4:	d8e4      	bhi.n	80041a0 <log_output_process+0x1e8>
			print_formatted(output, " ");
 80041d6:	4641      	mov	r1, r8
 80041d8:	4620      	mov	r0, r4
 80041da:	f7ff fe9d 	bl	8003f18 <print_formatted>
 80041de:	e7eb      	b.n	80041b8 <log_output_process+0x200>
		print_formatted(output, " ");
 80041e0:	4641      	mov	r1, r8
 80041e2:	4620      	mov	r0, r4
 80041e4:	f7ff fe98 	bl	8003f18 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80041e8:	f10a 0a01 	add.w	sl, sl, #1
 80041ec:	e7b2      	b.n	8004154 <log_output_process+0x19c>
			print_formatted(output, "   ");
 80041ee:	4925      	ldr	r1, [pc, #148]	; (8004284 <log_output_process+0x2cc>)
 80041f0:	4620      	mov	r0, r4
 80041f2:	f7ff fe91 	bl	8003f18 <print_formatted>
 80041f6:	e7c7      	b.n	8004188 <log_output_process+0x1d0>
		data += length;
 80041f8:	9b05      	ldr	r3, [sp, #20]
 80041fa:	443b      	add	r3, r7
 80041fc:	9305      	str	r3, [sp, #20]
	} while (len);
 80041fe:	9b04      	ldr	r3, [sp, #16]
 8004200:	1bdb      	subs	r3, r3, r7
 8004202:	9304      	str	r3, [sp, #16]
 8004204:	d19c      	bne.n	8004140 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
 8004206:	f1bb 0f00 	cmp.w	fp, #0
 800420a:	f47f af34 	bne.w	8004076 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 800420e:	4620      	mov	r0, r4
}
 8004210:	b009      	add	sp, #36	; 0x24
 8004212:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
 8004216:	f007 ba27 	b.w	800b668 <log_output_flush>
		print_formatted(output, "%s", log_color);
 800421a:	4a07      	ldr	r2, [pc, #28]	; (8004238 <log_output_process+0x280>)
 800421c:	4905      	ldr	r1, [pc, #20]	; (8004234 <log_output_process+0x27c>)
 800421e:	4620      	mov	r0, r4
 8004220:	f7ff fe7a 	bl	8003f18 <print_formatted>
}
 8004224:	e72a      	b.n	800407c <log_output_process+0xc4>
 8004226:	bf00      	nop
 8004228:	08011dd9 	.word	0x08011dd9
 800422c:	08011ddd 	.word	0x08011ddd
 8004230:	0800d3d8 	.word	0x0800d3d8
 8004234:	08011e02 	.word	0x08011e02
 8004238:	08011dd4 	.word	0x08011dd4
 800423c:	0800d3ec 	.word	0x0800d3ec
 8004240:	08011e05 	.word	0x08011e05
 8004244:	08011e0b 	.word	0x08011e0b
 8004248:	08011e0f 	.word	0x08011e0f
 800424c:	20000a68 	.word	0x20000a68
 8004250:	20000a64 	.word	0x20000a64
 8004254:	08011de6 	.word	0x08011de6
 8004258:	0800b683 	.word	0x0800b683
 800425c:	08003f59 	.word	0x08003f59
 8004260:	0800b65b 	.word	0x0800b65b
 8004264:	08011e14 	.word	0x08011e14
 8004268:	080118c5 	.word	0x080118c5
 800426c:	08011d75 	.word	0x08011d75
 8004270:	0800d882 	.word	0x0800d882
 8004274:	08011e1d 	.word	0x08011e1d
 8004278:	08011e23 	.word	0x08011e23
 800427c:	0801361f 	.word	0x0801361f
 8004280:	08011e25 	.word	0x08011e25
 8004284:	0800d880 	.word	0x0800d880

08004288 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
 8004288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
 800428c:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
 800428e:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
 8004290:	688e      	ldr	r6, [r1, #8]
 8004292:	b086      	sub	sp, #24
 8004294:	4605      	mov	r5, r0
 8004296:	460c      	mov	r4, r1
 8004298:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
 800429a:	f3c7 1782 	ubfx	r7, r7, #6, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
 800429e:	b15b      	cbz	r3, 80042b8 <log_output_msg_process+0x30>
 80042a0:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <log_output_msg_process+0x68>)
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	f343 01cf 	sbfx	r1, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 80042a8:	2900      	cmp	r1, #0
 80042aa:	db1f      	blt.n	80042ec <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
 80042ac:	7820      	ldrb	r0, [r4, #0]
 80042ae:	f3c0 00c2 	ubfx	r0, r0, #3, #3
 80042b2:	f7ff fd99 	bl	8003de8 <log_source_name_get>
 80042b6:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 80042b8:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
 80042ba:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
 80042bc:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
 80042c0:	9700      	str	r7, [sp, #0]
 80042c2:	f3c2 2249 	ubfx	r2, r2, #9, #10
 80042c6:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
 80042c8:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
 80042cc:	f3c0 00cb 	ubfx	r0, r0, #3, #12
 80042d0:	bf08      	it	eq
 80042d2:	2100      	moveq	r1, #0
 80042d4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80042d8:	e9cd 1401 	strd	r1, r4, [sp, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	4631      	mov	r1, r6
 80042e0:	4628      	mov	r0, r5
 80042e2:	f7ff fe69 	bl	8003fb8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
 80042e6:	b006      	add	sp, #24
 80042e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e7e3      	b.n	80042b8 <log_output_msg_process+0x30>
 80042f0:	0800d180 	.word	0x0800d180

080042f4 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 80042f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80042f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80042fa:	428b      	cmp	r3, r1
 80042fc:	bf28      	it	cs
 80042fe:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 8004300:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8004302:	4a0f      	ldr	r2, [pc, #60]	; (8004340 <log_output_dropped_process+0x4c>)
{
 8004304:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8004306:	2105      	movs	r1, #5
 8004308:	4668      	mov	r0, sp
 800430a:	f006 ff5b 	bl	800b1c4 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 800430e:	6863      	ldr	r3, [r4, #4]
 8004310:	490c      	ldr	r1, [pc, #48]	; (8004344 <log_output_dropped_process+0x50>)
 8004312:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8004314:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8004316:	220b      	movs	r2, #11
 8004318:	4628      	mov	r0, r5
 800431a:	f007 f991 	bl	800b640 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 800431e:	6863      	ldr	r3, [r4, #4]
 8004320:	4632      	mov	r2, r6
 8004322:	4669      	mov	r1, sp
 8004324:	4628      	mov	r0, r5
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f007 f98a 	bl	800b640 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 800432c:	6863      	ldr	r3, [r4, #4]
 800432e:	4906      	ldr	r1, [pc, #24]	; (8004348 <log_output_dropped_process+0x54>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	221b      	movs	r2, #27
 8004334:	4628      	mov	r0, r5
 8004336:	f007 f983 	bl	800b640 <buffer_write>
		     output->control_block->ctx);
}
 800433a:	b002      	add	sp, #8
 800433c:	bd70      	pop	{r4, r5, r6, pc}
 800433e:	bf00      	nop
 8004340:	08012f31 	.word	0x08012f31
 8004344:	08011e44 	.word	0x08011e44
 8004348:	08011e28 	.word	0x08011e28

0800434c <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 800434c:	4a07      	ldr	r2, [pc, #28]	; (800436c <log_output_timestamp_freq_set+0x20>)
 800434e:	2100      	movs	r1, #0
 8004350:	2301      	movs	r3, #1
 8004352:	4290      	cmp	r0, r2
 8004354:	d806      	bhi.n	8004364 <log_output_timestamp_freq_set+0x18>
 8004356:	4a06      	ldr	r2, [pc, #24]	; (8004370 <log_output_timestamp_freq_set+0x24>)
 8004358:	b901      	cbnz	r1, 800435c <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
 800435a:	2301      	movs	r3, #1
 800435c:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <log_output_timestamp_freq_set+0x28>)
 8004360:	6018      	str	r0, [r3, #0]
}
 8004362:	4770      	bx	lr
		frequency /= 2U;
 8004364:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	2101      	movs	r1, #1
 800436a:	e7f2      	b.n	8004352 <log_output_timestamp_freq_set+0x6>
 800436c:	000f4240 	.word	0x000f4240
 8004370:	20000a64 	.word	0x20000a64
 8004374:	20000a68 	.word	0x20000a68

08004378 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
 8004378:	4b01      	ldr	r3, [pc, #4]	; (8004380 <format_set+0x8>)
	return 0;
}
 800437a:	2000      	movs	r0, #0
	log_format_current = log_type;
 800437c:	6019      	str	r1, [r3, #0]
}
 800437e:	4770      	bx	lr
 8004380:	20000a80 	.word	0x20000a80

08004384 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8004386:	4803      	ldr	r0, [pc, #12]	; (8004394 <panic+0x10>)
 8004388:	2201      	movs	r2, #1
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	f007 b96c 	b.w	800b668 <log_output_flush>
 8004390:	20000c37 	.word	0x20000c37
 8004394:	0800d41c 	.word	0x0800d41c

08004398 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8004398:	4801      	ldr	r0, [pc, #4]	; (80043a0 <dropped+0x8>)
 800439a:	f7ff bfab 	b.w	80042f4 <log_output_dropped_process>
 800439e:	bf00      	nop
 80043a0:	0800d41c 	.word	0x0800d41c

080043a4 <process>:
{
 80043a4:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <process+0x1c>)
 80043a8:	6818      	ldr	r0, [r3, #0]
{
 80043aa:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 80043ac:	f7ff fb30 	bl	8003a10 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
 80043b0:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 80043b2:	4603      	mov	r3, r0
}
 80043b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
 80043b8:	4802      	ldr	r0, [pc, #8]	; (80043c4 <process+0x20>)
 80043ba:	220f      	movs	r2, #15
 80043bc:	4718      	bx	r3
 80043be:	bf00      	nop
 80043c0:	20000a80 	.word	0x20000a80
 80043c4:	0800d41c 	.word	0x0800d41c

080043c8 <char_out>:
{
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80043ca:	4f07      	ldr	r7, [pc, #28]	; (80043e8 <char_out+0x20>)
 80043cc:	460d      	mov	r5, r1
 80043ce:	4604      	mov	r4, r0
 80043d0:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
 80043d2:	42b4      	cmp	r4, r6
 80043d4:	d101      	bne.n	80043da <char_out+0x12>
}
 80043d6:	4628      	mov	r0, r5
 80043d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
 80043da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4801      	ldr	r0, [pc, #4]	; (80043e8 <char_out+0x20>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 80043e6:	e7f4      	b.n	80043d2 <char_out+0xa>
 80043e8:	0800cde4 	.word	0x0800cde4

080043ec <log_backend_uart_init>:
{
 80043ec:	b508      	push	{r3, lr}
 80043ee:	4807      	ldr	r0, [pc, #28]	; (800440c <log_backend_uart_init+0x20>)
 80043f0:	f007 fec4 	bl	800c17c <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
 80043f4:	b948      	cbnz	r0, 800440a <log_backend_uart_init+0x1e>
 80043f6:	4906      	ldr	r1, [pc, #24]	; (8004410 <log_backend_uart_init+0x24>)
 80043f8:	4806      	ldr	r0, [pc, #24]	; (8004414 <log_backend_uart_init+0x28>)
 80043fa:	4a07      	ldr	r2, [pc, #28]	; (8004418 <log_backend_uart_init+0x2c>)
 80043fc:	236f      	movs	r3, #111	; 0x6f
 80043fe:	f007 f808 	bl	800b412 <assert_print>
 8004402:	4805      	ldr	r0, [pc, #20]	; (8004418 <log_backend_uart_init+0x2c>)
 8004404:	216f      	movs	r1, #111	; 0x6f
 8004406:	f006 fffd 	bl	800b404 <assert_post_action>
}
 800440a:	bd08      	pop	{r3, pc}
 800440c:	0800cde4 	.word	0x0800cde4
 8004410:	08011ea5 	.word	0x08011ea5
 8004414:	080118c5 	.word	0x080118c5
 8004418:	08011e70 	.word	0x08011e70

0800441c <cfb_print>:

	return fptr->width;
}

int cfb_print(const struct device *dev, char *str, uint16_t x, uint16_t y)
{
 800441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct char_framebuffer *fb = &char_fb;
	const struct cfb_font *fptr;

	if (!fb->fonts || !fb->buf) {
 8004420:	4c66      	ldr	r4, [pc, #408]	; (80045bc <cfb_print+0x1a0>)
{
 8004422:	b08f      	sub	sp, #60	; 0x3c
 8004424:	4616      	mov	r6, r2
	if (!fb->fonts || !fb->buf) {
 8004426:	68a2      	ldr	r2, [r4, #8]
{
 8004428:	9102      	str	r1, [sp, #8]
 800442a:	461f      	mov	r7, r3
	if (!fb->fonts || !fb->buf) {
 800442c:	2a00      	cmp	r2, #0
 800442e:	f000 80c2 	beq.w	80045b6 <cfb_print+0x19a>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80be 	beq.w	80045b6 <cfb_print+0x19a>
		return -ENODEV;
	}

	fptr = &(fb->fonts[fb->font_idx]);
 800443a:	7d23      	ldrb	r3, [r4, #20]
 800443c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004440:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004444:	9300      	str	r3, [sp, #0]

	if (fptr->height % 8) {
 8004446:	799b      	ldrb	r3, [r3, #6]
 8004448:	075d      	lsls	r5, r3, #29
 800444a:	d00f      	beq.n	800446c <cfb_print+0x50>
		LOG_ERR("Wrong font size");
 800444c:	4b5c      	ldr	r3, [pc, #368]	; (80045c0 <cfb_print+0x1a4>)
 800444e:	930d      	str	r3, [sp, #52]	; 0x34
 8004450:	2302      	movs	r3, #2
 8004452:	930c      	str	r3, [sp, #48]	; 0x30
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
 8004454:	485b      	ldr	r0, [pc, #364]	; (80045c4 <cfb_print+0x1a8>)
 8004456:	2300      	movs	r3, #0
 8004458:	aa0c      	add	r2, sp, #48	; 0x30
 800445a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800445e:	f7ff fcf5 	bl	8003e4c <z_impl_z_log_msg_static_create>
		return -EINVAL;
 8004462:	f06f 0015 	mvn.w	r0, #21
		return 0;
	}

	LOG_ERR("Unsupported framebuffer configuration");
	return -EINVAL;
}
 8004466:	b00f      	add	sp, #60	; 0x3c
 8004468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((fb->screen_info & SCREEN_INFO_MONO_VTILED) && !(y % 8)) {
 800446c:	7b63      	ldrb	r3, [r4, #13]
 800446e:	07d8      	lsls	r0, r3, #31
 8004470:	d502      	bpl.n	8004478 <cfb_print+0x5c>
 8004472:	f017 0807 	ands.w	r8, r7, #7
 8004476:	d03d      	beq.n	80044f4 <cfb_print+0xd8>
	LOG_ERR("Unsupported framebuffer configuration");
 8004478:	4b53      	ldr	r3, [pc, #332]	; (80045c8 <cfb_print+0x1ac>)
 800447a:	e7e8      	b.n	800444e <cfb_print+0x32>
			if (x + fptr->width > fb->x_res) {
 800447c:	9b00      	ldr	r3, [sp, #0]
 800447e:	89e2      	ldrh	r2, [r4, #14]
 8004480:	795b      	ldrb	r3, [r3, #5]
 8004482:	4433      	add	r3, r6
 8004484:	4293      	cmp	r3, r2
 8004486:	dd04      	ble.n	8004492 <cfb_print+0x76>
				y += fptr->height;
 8004488:	9b00      	ldr	r3, [sp, #0]
 800448a:	799b      	ldrb	r3, [r3, #6]
 800448c:	443b      	add	r3, r7
 800448e:	b29f      	uxth	r7, r3
				x = 0U;
 8004490:	2600      	movs	r6, #0
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
 8004492:	7d21      	ldrb	r1, [r4, #20]
 8004494:	68a0      	ldr	r0, [r4, #8]
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
 8004496:	f994 3015 	ldrsb.w	r3, [r4, #21]
			     != ((fptr->caps & CFB_FONT_MSB_FIRST) != 0));
 800449a:	7b62      	ldrb	r2, [r4, #13]
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
 800449c:	9303      	str	r3, [sp, #12]
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
 800449e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80044a2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
 80044a6:	9b02      	ldr	r3, [sp, #8]
	if (c < fptr->first_char || c > fptr->last_char) {
 80044a8:	f895 c007 	ldrb.w	ip, [r5, #7]
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
 80044ac:	f813 3008 	ldrb.w	r3, [r3, r8]
			     != ((fptr->caps & CFB_FONT_MSB_FIRST) != 0));
 80044b0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80044b4:	9204      	str	r2, [sp, #16]
 80044b6:	792a      	ldrb	r2, [r5, #4]
	if (c < fptr->first_char || c > fptr->last_char) {
 80044b8:	4563      	cmp	r3, ip
			     != ((fptr->caps & CFB_FONT_MSB_FIRST) != 0));
 80044ba:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80044be:	9205      	str	r2, [sp, #20]
	if (c < fptr->first_char || c > fptr->last_char) {
 80044c0:	d31f      	bcc.n	8004502 <cfb_print+0xe6>
 80044c2:	7a2a      	ldrb	r2, [r5, #8]
		c = ' ';
 80044c4:	429a      	cmp	r2, r3
 80044c6:	bf38      	it	cc
 80044c8:	2320      	movcc	r3, #32
	       (fptr->width * fptr->height / 8U);
 80044ca:	796a      	ldrb	r2, [r5, #5]
 80044cc:	f895 e006 	ldrb.w	lr, [r5, #6]
	return (uint8_t *)fptr->data +
 80044d0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	       (fptr->width * fptr->height / 8U);
 80044d4:	fb12 f20e 	smulbb	r2, r2, lr
 80044d8:	08d2      	lsrs	r2, r2, #3
	       (c - fptr->first_char) *
 80044da:	eba3 030c 	sub.w	r3, r3, ip
	return (uint8_t *)fptr->data +
 80044de:	fb03 1302 	mla	r3, r3, r2, r1
 80044e2:	9301      	str	r3, [sp, #4]
	if (!glyph_ptr) {
 80044e4:	b97b      	cbnz	r3, 8004506 <cfb_print+0xea>
		return 0;
 80044e6:	2300      	movs	r3, #0
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
 80044e8:	9a03      	ldr	r2, [sp, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	4433      	add	r3, r6
 80044ee:	b29e      	uxth	r6, r3
		for (size_t i = 0; i < strlen(str); i++) {
 80044f0:	f108 0801 	add.w	r8, r8, #1
 80044f4:	9802      	ldr	r0, [sp, #8]
 80044f6:	f7fc fd67 	bl	8000fc8 <strlen>
 80044fa:	4540      	cmp	r0, r8
 80044fc:	d8be      	bhi.n	800447c <cfb_print+0x60>
		return 0;
 80044fe:	2000      	movs	r0, #0
 8004500:	e7b1      	b.n	8004466 <cfb_print+0x4a>
		c = ' ';
 8004502:	2320      	movs	r3, #32
 8004504:	e7e1      	b.n	80044ca <cfb_print+0xae>
		uint32_t y_segment = y / 8U;
 8004506:	08fb      	lsrs	r3, r7, #3
 8004508:	9306      	str	r3, [sp, #24]
	for (size_t g_x = 0; g_x < fptr->width; g_x++) {
 800450a:	f04f 0900 	mov.w	r9, #0
 800450e:	796b      	ldrb	r3, [r5, #5]
 8004510:	4599      	cmp	r9, r3
 8004512:	d2e9      	bcs.n	80044e8 <cfb_print+0xcc>
 8004514:	482b      	ldr	r0, [pc, #172]	; (80045c4 <cfb_print+0x1a8>)
		for (size_t g_y = 0; g_y < fptr->height / 8U; g_y++) {
 8004516:	f04f 0a00 	mov.w	sl, #0
 800451a:	e02c      	b.n	8004576 <cfb_print+0x15a>
			uint32_t fb_y = (y_segment + g_y) * fb->x_res;
 800451c:	9b06      	ldr	r3, [sp, #24]
 800451e:	89e1      	ldrh	r1, [r4, #14]
 8004520:	4453      	add	r3, sl
			if ((fb_y + x + g_x) >= fb->size) {
 8004522:	eb06 0b09 	add.w	fp, r6, r9
 8004526:	fb01 bb03 	mla	fp, r1, r3, fp
 800452a:	6863      	ldr	r3, [r4, #4]
 800452c:	459b      	cmp	fp, r3
 800452e:	d2da      	bcs.n	80044e6 <cfb_print+0xca>
	if (fptr->caps & CFB_FONT_MONO_VPACKED) {
 8004530:	792b      	ldrb	r3, [r5, #4]
 8004532:	07d9      	lsls	r1, r3, #31
 8004534:	d528      	bpl.n	8004588 <cfb_print+0x16c>
		return glyph_ptr[x * (fptr->height / 8U) + y];
 8004536:	9b01      	ldr	r3, [sp, #4]
 8004538:	fb02 3209 	mla	r2, r2, r9, r3
 800453c:	f812 300a 	ldrb.w	r3, [r2, sl]
			if (need_reverse) {
 8004540:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8004544:	428a      	cmp	r2, r1
 8004546:	d011      	beq.n	800456c <cfb_print+0x150>
	b = (b & 0xf0) >> 4 | (b & 0x0f) << 4;
 8004548:	011a      	lsls	r2, r3, #4
 800454a:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
	b = (b & 0xcc) >> 2 | (b & 0x33) << 2;
 800454e:	f3c2 0385 	ubfx	r3, r2, #2, #6
 8004552:	0092      	lsls	r2, r2, #2
 8004554:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004558:	f002 02cc 	and.w	r2, r2, #204	; 0xcc
	b = (b & 0xaa) >> 1 | (b & 0x55) << 1;
 800455c:	431a      	orrs	r2, r3
 800455e:	1053      	asrs	r3, r2, #1
 8004560:	0052      	lsls	r2, r2, #1
 8004562:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8004566:	f002 02aa 	and.w	r2, r2, #170	; 0xaa
 800456a:	4313      	orrs	r3, r2
			fb->buf[fb_y + x + g_x] = byte;
 800456c:	6822      	ldr	r2, [r4, #0]
 800456e:	f802 300b 	strb.w	r3, [r2, fp]
		for (size_t g_y = 0; g_y < fptr->height / 8U; g_y++) {
 8004572:	f10a 0a01 	add.w	sl, sl, #1
 8004576:	79ab      	ldrb	r3, [r5, #6]
 8004578:	ebba 0fd3 	cmp.w	sl, r3, lsr #3
 800457c:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8004580:	d3cc      	bcc.n	800451c <cfb_print+0x100>
	for (size_t g_x = 0; g_x < fptr->width; g_x++) {
 8004582:	f109 0901 	add.w	r9, r9, #1
 8004586:	e7c2      	b.n	800450e <cfb_print+0xf2>
	} else if (fptr->caps & CFB_FONT_MONO_HPACKED) {
 8004588:	f013 0302 	ands.w	r3, r3, #2
 800458c:	d006      	beq.n	800459c <cfb_print+0x180>
		return glyph_ptr[y * (fptr->width) + x];
 800458e:	796b      	ldrb	r3, [r5, #5]
 8004590:	9a01      	ldr	r2, [sp, #4]
 8004592:	fb0a 2303 	mla	r3, sl, r3, r2
 8004596:	f813 3009 	ldrb.w	r3, [r3, r9]
 800459a:	e7d1      	b.n	8004540 <cfb_print+0x124>
	LOG_WRN("Unknown font type");
 800459c:	4a0b      	ldr	r2, [pc, #44]	; (80045cc <cfb_print+0x1b0>)
 800459e:	920d      	str	r2, [sp, #52]	; 0x34
 80045a0:	2202      	movs	r2, #2
 80045a2:	920c      	str	r2, [sp, #48]	; 0x30
 80045a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 80045a8:	aa0c      	add	r2, sp, #48	; 0x30
 80045aa:	9307      	str	r3, [sp, #28]
 80045ac:	f7ff fc4e 	bl	8003e4c <z_impl_z_log_msg_static_create>
 80045b0:	4804      	ldr	r0, [pc, #16]	; (80045c4 <cfb_print+0x1a8>)
	return 0;
 80045b2:	9b07      	ldr	r3, [sp, #28]
 80045b4:	e7c4      	b.n	8004540 <cfb_print+0x124>
		return -ENODEV;
 80045b6:	f06f 0012 	mvn.w	r0, #18
 80045ba:	e754      	b.n	8004466 <cfb_print+0x4a>
 80045bc:	20000a84 	.word	0x20000a84
 80045c0:	08011ed9 	.word	0x08011ed9
 80045c4:	0800d188 	.word	0x0800d188
 80045c8:	08011efb 	.word	0x08011efb
 80045cc:	08011ee9 	.word	0x08011ee9

080045d0 <cfb_framebuffer_clear>:

	return 0;
}

int cfb_framebuffer_clear(const struct device *dev, bool clear_display)
{
 80045d0:	b508      	push	{r3, lr}
	const struct char_framebuffer *fb = &char_fb;
	struct display_buffer_descriptor desc;

	if (!fb || !fb->buf) {
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <cfb_framebuffer_clear+0x1c>)
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	b128      	cbz	r0, 80045e4 <cfb_framebuffer_clear+0x14>
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	2100      	movs	r1, #0
 80045dc:	f007 fe9d 	bl	800c31a <memset>
	desc.width = fb->x_res;
	desc.height = fb->y_res;
	desc.pitch = fb->x_res;
	memset(fb->buf, 0, fb->size);

	return 0;
 80045e0:	2000      	movs	r0, #0
}
 80045e2:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80045e4:	f06f 0012 	mvn.w	r0, #18
 80045e8:	e7fb      	b.n	80045e2 <cfb_framebuffer_clear+0x12>
 80045ea:	bf00      	nop
 80045ec:	20000a84 	.word	0x20000a84

080045f0 <cfb_framebuffer_finalize>:

	return 0;
}

int cfb_framebuffer_finalize(const struct device *dev)
{
 80045f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct display_driver_api *api = dev->api;
	const struct char_framebuffer *fb = &char_fb;
	struct display_buffer_descriptor desc;

	if (!fb || !fb->buf) {
 80045f2:	4a17      	ldr	r2, [pc, #92]	; (8004650 <cfb_framebuffer_finalize+0x60>)
	const struct display_driver_api *api = dev->api;
 80045f4:	6885      	ldr	r5, [r0, #8]
	if (!fb || !fb->buf) {
 80045f6:	6814      	ldr	r4, [r2, #0]
{
 80045f8:	b087      	sub	sp, #28
	if (!fb || !fb->buf) {
 80045fa:	b334      	cbz	r4, 800464a <cfb_framebuffer_finalize+0x5a>
	desc.buf_size = fb->size;
	desc.width = fb->x_res;
	desc.height = fb->y_res;
	desc.pitch = fb->x_res;

	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
 80045fc:	7b11      	ldrb	r1, [r2, #12]
 80045fe:	7d96      	ldrb	r6, [r2, #22]
	desc.buf_size = fb->size;
 8004600:	6853      	ldr	r3, [r2, #4]
	desc.height = fb->y_res;
 8004602:	8a17      	ldrh	r7, [r2, #16]
	desc.buf_size = fb->size;
 8004604:	9303      	str	r3, [sp, #12]
	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
 8004606:	f081 0104 	eor.w	r1, r1, #4
	desc.width = fb->x_res;
 800460a:	89d3      	ldrh	r3, [r2, #14]
 800460c:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
 8004610:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8004614:	f086 0101 	eor.w	r1, r6, #1
 8004618:	428a      	cmp	r2, r1
	desc.height = fb->y_res;
 800461a:	f8ad 7012 	strh.w	r7, [sp, #18]
	desc.pitch = fb->x_res;
 800461e:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
 8004622:	d107      	bne.n	8004634 <cfb_framebuffer_finalize+0x44>
		cfb_invert(fb);
	}

	return api->write(dev, 0, 0, &desc, fb->buf);
 8004624:	9400      	str	r4, [sp, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	68ac      	ldr	r4, [r5, #8]
 800462a:	ab03      	add	r3, sp, #12
 800462c:	4611      	mov	r1, r2
 800462e:	47a0      	blx	r4
}
 8004630:	b007      	add	sp, #28
 8004632:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < fb->x_res * fb->y_res / 8U; i++) {
 8004634:	437b      	muls	r3, r7
 8004636:	4622      	mov	r2, r4
 8004638:	eb04 03d3 	add.w	r3, r4, r3, lsr #3
 800463c:	429a      	cmp	r2, r3
 800463e:	d0f1      	beq.n	8004624 <cfb_framebuffer_finalize+0x34>
		fb->buf[i] = ~fb->buf[i];
 8004640:	7811      	ldrb	r1, [r2, #0]
 8004642:	43c9      	mvns	r1, r1
 8004644:	f802 1b01 	strb.w	r1, [r2], #1
	for (size_t i = 0; i < fb->x_res * fb->y_res / 8U; i++) {
 8004648:	e7f8      	b.n	800463c <cfb_framebuffer_finalize+0x4c>
		return -ENODEV;
 800464a:	f06f 0012 	mvn.w	r0, #18
 800464e:	e7ef      	b.n	8004630 <cfb_framebuffer_finalize+0x40>
 8004650:	20000a84 	.word	0x20000a84

08004654 <cfb_framebuffer_set_font>:

int cfb_framebuffer_set_font(const struct device *dev, uint8_t idx)
{
	struct char_framebuffer *fb = &char_fb;

	if (idx >= fb->numof_fonts) {
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <cfb_framebuffer_set_font+0x14>)
 8004656:	7cda      	ldrb	r2, [r3, #19]
 8004658:	428a      	cmp	r2, r1
		return -EINVAL;
	}

	fb->font_idx = idx;

	return 0;
 800465a:	bf86      	itte	hi
 800465c:	2000      	movhi	r0, #0
	fb->font_idx = idx;
 800465e:	7519      	strbhi	r1, [r3, #20]
		return -EINVAL;
 8004660:	f06f 0015 	mvnls.w	r0, #21
}
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000a84 	.word	0x20000a84

0800466c <cfb_framebuffer_init>:

	return fb->numof_fonts;
}

int cfb_framebuffer_init(const struct device *dev)
{
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	b085      	sub	sp, #20
	const struct display_driver_api *api = dev->api;
	struct char_framebuffer *fb = &char_fb;
	struct display_capabilities cfg;

	api->get_capabilities(dev, &cfg);
 8004670:	6883      	ldr	r3, [r0, #8]

	fb->numof_fonts = __font_entry_end - __font_entry_start;
 8004672:	4d22      	ldr	r5, [pc, #136]	; (80046fc <cfb_framebuffer_init+0x90>)
	api->get_capabilities(dev, &cfg);
 8004674:	69db      	ldr	r3, [r3, #28]
	fb->numof_fonts = __font_entry_end - __font_entry_start;
 8004676:	4c22      	ldr	r4, [pc, #136]	; (8004700 <cfb_framebuffer_init+0x94>)
{
 8004678:	af00      	add	r7, sp, #0
	api->get_capabilities(dev, &cfg);
 800467a:	4639      	mov	r1, r7
 800467c:	4798      	blx	r3
	fb->numof_fonts = __font_entry_end - __font_entry_start;
 800467e:	4b21      	ldr	r3, [pc, #132]	; (8004704 <cfb_framebuffer_init+0x98>)
 8004680:	4a21      	ldr	r2, [pc, #132]	; (8004708 <cfb_framebuffer_init+0x9c>)
 8004682:	1b5b      	subs	r3, r3, r5
 8004684:	109b      	asrs	r3, r3, #2
 8004686:	4353      	muls	r3, r2
	LOG_DBG("number of fonts %d", fb->numof_fonts);
 8004688:	466e      	mov	r6, sp
 800468a:	b088      	sub	sp, #32
	fb->numof_fonts = __font_entry_end - __font_entry_start;
 800468c:	74e3      	strb	r3, [r4, #19]
	LOG_DBG("number of fonts %d", fb->numof_fonts);
 800468e:	466a      	mov	r2, sp
 8004690:	491e      	ldr	r1, [pc, #120]	; (800470c <cfb_framebuffer_init+0xa0>)
 8004692:	6151      	str	r1, [r2, #20]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	61d3      	str	r3, [r2, #28]
 8004698:	491d      	ldr	r1, [pc, #116]	; (8004710 <cfb_framebuffer_init+0xa4>)
 800469a:	6191      	str	r1, [r2, #24]
 800469c:	2304      	movs	r3, #4
 800469e:	f842 3f10 	str.w	r3, [r2, #16]!
 80046a2:	2300      	movs	r3, #0
 80046a4:	481b      	ldr	r0, [pc, #108]	; (8004714 <cfb_framebuffer_init+0xa8>)
 80046a6:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 80046aa:	f7ff fbcf 	bl	8003e4c <z_impl_z_log_msg_static_create>
	if (!fb->numof_fonts) {
 80046ae:	7ce3      	ldrb	r3, [r4, #19]
 80046b0:	46b5      	mov	sp, r6
 80046b2:	b1eb      	cbz	r3, 80046f0 <cfb_framebuffer_init+0x84>
		return -ENODEV;
	}

	fb->x_res = cfg.x_resolution;
 80046b4:	8838      	ldrh	r0, [r7, #0]
	fb->y_res = cfg.y_resolution;
 80046b6:	887b      	ldrh	r3, [r7, #2]
	fb->x_res = cfg.x_resolution;
 80046b8:	81e0      	strh	r0, [r4, #14]
	fb->ppt = 8U;
 80046ba:	2208      	movs	r2, #8
	fb->pixel_format = cfg.current_pixel_format;
	fb->screen_info = cfg.screen_info;
	fb->buf = NULL;
 80046bc:	2600      	movs	r6, #0
	fb->ppt = 8U;
 80046be:	74a2      	strb	r2, [r4, #18]
	fb->inverted = false;

	fb->fonts = __font_entry_start;
	fb->font_idx = 0U;

	fb->size = fb->x_res * fb->y_res / fb->ppt;
 80046c0:	4358      	muls	r0, r3
	fb->pixel_format = cfg.current_pixel_format;
 80046c2:	7b3a      	ldrb	r2, [r7, #12]
 80046c4:	7322      	strb	r2, [r4, #12]
	fb->size = fb->x_res * fb->y_res / fb->ppt;
 80046c6:	10c0      	asrs	r0, r0, #3
	fb->screen_info = cfg.screen_info;
 80046c8:	68ba      	ldr	r2, [r7, #8]
	fb->font_idx = 0U;
 80046ca:	82a6      	strh	r6, [r4, #20]
	fb->y_res = cfg.y_resolution;
 80046cc:	8223      	strh	r3, [r4, #16]
	fb->screen_info = cfg.screen_info;
 80046ce:	7362      	strb	r2, [r4, #13]
	fb->buf = NULL;
 80046d0:	6026      	str	r6, [r4, #0]
	fb->inverted = false;
 80046d2:	75a6      	strb	r6, [r4, #22]
	fb->fonts = __font_entry_start;
 80046d4:	60a5      	str	r5, [r4, #8]
	fb->size = fb->x_res * fb->y_res / fb->ppt;
 80046d6:	6060      	str	r0, [r4, #4]
	fb->buf = k_malloc(fb->size);
 80046d8:	f007 fe05 	bl	800c2e6 <k_malloc>
 80046dc:	6020      	str	r0, [r4, #0]
	if (!fb->buf) {
 80046de:	b150      	cbz	r0, 80046f6 <cfb_framebuffer_init+0x8a>
 80046e0:	6862      	ldr	r2, [r4, #4]
 80046e2:	4631      	mov	r1, r6
 80046e4:	f007 fe19 	bl	800c31a <memset>
		return -ENOMEM;
	}

	memset(fb->buf, 0, fb->size);

	return 0;
 80046e8:	4630      	mov	r0, r6
}
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENODEV;
 80046f0:	f06f 0012 	mvn.w	r0, #18
 80046f4:	e7f9      	b.n	80046ea <cfb_framebuffer_init+0x7e>
		return -ENOMEM;
 80046f6:	f06f 000b 	mvn.w	r0, #11
 80046fa:	e7f6      	b.n	80046ea <cfb_framebuffer_init+0x7e>
 80046fc:	0800d1f0 	.word	0x0800d1f0
 8004700:	20000a84 	.word	0x20000a84
 8004704:	0800d208 	.word	0x0800d208
 8004708:	aaaaaaab 	.word	0xaaaaaaab
 800470c:	08011f21 	.word	0x08011f21
 8004710:	08011f38 	.word	0x08011f38
 8004714:	0800d188 	.word	0x0800d188

08004718 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8004718:	4901      	ldr	r1, [pc, #4]	; (8004720 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 800471a:	2210      	movs	r2, #16
	str	r2, [r1]
 800471c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 800471e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8004720:	e000ed10 	.word	0xe000ed10

08004724 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8004724:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8004726:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8004728:	f380 8811 	msr	BASEPRI, r0
	isb
 800472c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8004730:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8004734:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8004736:	b662      	cpsie	i
	isb
 8004738:	f3bf 8f6f 	isb	sy

	bx	lr
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop

08004740 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8004740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004744:	4681      	mov	r9, r0
 8004746:	af00      	add	r7, sp, #0

	if (esf != NULL) {
 8004748:	460c      	mov	r4, r1
 800474a:	2900      	cmp	r1, #0
 800474c:	d04c      	beq.n	80047e8 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 800474e:	466e      	mov	r6, sp
 8004750:	b08a      	sub	sp, #40	; 0x28
 8004752:	e9d1 1200 	ldrd	r1, r2, [r1]
 8004756:	68a3      	ldr	r3, [r4, #8]
 8004758:	466d      	mov	r5, sp
 800475a:	4827      	ldr	r0, [pc, #156]	; (80047f8 <z_arm_fatal_error+0xb8>)
 800475c:	46a8      	mov	r8, r5
 800475e:	f04f 0a05 	mov.w	sl, #5
 8004762:	e9c5 0105 	strd	r0, r1, [r5, #20]
 8004766:	e9c5 2307 	strd	r2, r3, [r5, #28]
 800476a:	f848 af10 	str.w	sl, [r8, #16]!
 800476e:	4823      	ldr	r0, [pc, #140]	; (80047fc <z_arm_fatal_error+0xbc>)
 8004770:	4642      	mov	r2, r8
 8004772:	2300      	movs	r3, #0
 8004774:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8004778:	f7ff fb68 	bl	8003e4c <z_impl_z_log_msg_static_create>
 800477c:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 800477e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8004782:	6963      	ldr	r3, [r4, #20]
 8004784:	46ad      	mov	sp, r5
 8004786:	481e      	ldr	r0, [pc, #120]	; (8004800 <z_arm_fatal_error+0xc0>)
 8004788:	f8c5 a010 	str.w	sl, [r5, #16]
 800478c:	e9c5 0105 	strd	r0, r1, [r5, #20]
 8004790:	e9c5 2307 	strd	r2, r3, [r5, #28]
 8004794:	4819      	ldr	r0, [pc, #100]	; (80047fc <z_arm_fatal_error+0xbc>)
 8004796:	2300      	movs	r3, #0
 8004798:	4642      	mov	r2, r8
 800479a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 800479e:	f7ff fb55 	bl	8003e4c <z_impl_z_log_msg_static_create>
 80047a2:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 80047a4:	b088      	sub	sp, #32
 80047a6:	69e3      	ldr	r3, [r4, #28]
 80047a8:	466d      	mov	r5, sp
 80047aa:	4a16      	ldr	r2, [pc, #88]	; (8004804 <z_arm_fatal_error+0xc4>)
 80047ac:	46a8      	mov	r8, r5
 80047ae:	f04f 0a03 	mov.w	sl, #3
 80047b2:	e9c5 2305 	strd	r2, r3, [r5, #20]
 80047b6:	f848 af10 	str.w	sl, [r8, #16]!
 80047ba:	4810      	ldr	r0, [pc, #64]	; (80047fc <z_arm_fatal_error+0xbc>)
 80047bc:	2300      	movs	r3, #0
 80047be:	4642      	mov	r2, r8
 80047c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80047c4:	f7ff fb42 	bl	8003e4c <z_impl_z_log_msg_static_create>
 80047c8:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 80047ca:	69a3      	ldr	r3, [r4, #24]
 80047cc:	46ad      	mov	sp, r5
 80047ce:	4a0e      	ldr	r2, [pc, #56]	; (8004808 <z_arm_fatal_error+0xc8>)
 80047d0:	f8c5 a010 	str.w	sl, [r5, #16]
 80047d4:	e9c5 2305 	strd	r2, r3, [r5, #20]
 80047d8:	4808      	ldr	r0, [pc, #32]	; (80047fc <z_arm_fatal_error+0xbc>)
 80047da:	2300      	movs	r3, #0
 80047dc:	4642      	mov	r2, r8
 80047de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80047e2:	f7ff fb33 	bl	8003e4c <z_impl_z_log_msg_static_create>
 80047e6:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 80047e8:	4621      	mov	r1, r4
 80047ea:	4648      	mov	r0, r9
 80047ec:	f002 fd4a 	bl	8007284 <z_fatal_error>
}
 80047f0:	46bd      	mov	sp, r7
 80047f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f6:	bf00      	nop
 80047f8:	08011f51 	.word	0x08011f51
 80047fc:	0800d1c0 	.word	0x0800d1c0
 8004800:	08011f80 	.word	0x08011f80
 8004804:	08011faf 	.word	0x08011faf
 8004808:	08011fbe 	.word	0x08011fbe

0800480c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 800480c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800480e:	2800      	cmp	r0, #0
 8004810:	db07      	blt.n	8004822 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004812:	4a04      	ldr	r2, [pc, #16]	; (8004824 <arch_irq_enable+0x18>)
 8004814:	0941      	lsrs	r1, r0, #5
 8004816:	2301      	movs	r3, #1
 8004818:	f000 001f 	and.w	r0, r0, #31
 800481c:	4083      	lsls	r3, r0
 800481e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8004822:	4770      	bx	lr
 8004824:	e000e100 	.word	0xe000e100

08004828 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
 8004828:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
 800482a:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
 800482c:	2b0f      	cmp	r3, #15
{
 800482e:	4604      	mov	r4, r0
 8004830:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
 8004832:	d90f      	bls.n	8004854 <z_arm_irq_priority_set+0x2c>
 8004834:	4a11      	ldr	r2, [pc, #68]	; (800487c <z_arm_irq_priority_set+0x54>)
 8004836:	4912      	ldr	r1, [pc, #72]	; (8004880 <z_arm_irq_priority_set+0x58>)
 8004838:	4812      	ldr	r0, [pc, #72]	; (8004884 <z_arm_irq_priority_set+0x5c>)
 800483a:	235b      	movs	r3, #91	; 0x5b
 800483c:	f006 fde9 	bl	800b412 <assert_print>
 8004840:	4811      	ldr	r0, [pc, #68]	; (8004888 <z_arm_irq_priority_set+0x60>)
 8004842:	4629      	mov	r1, r5
 8004844:	230f      	movs	r3, #15
 8004846:	4622      	mov	r2, r4
 8004848:	f006 fde3 	bl	800b412 <assert_print>
 800484c:	480b      	ldr	r0, [pc, #44]	; (800487c <z_arm_irq_priority_set+0x54>)
 800484e:	215b      	movs	r1, #91	; 0x5b
 8004850:	f006 fdd8 	bl	800b404 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8004854:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004856:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004858:	bfac      	ite	ge
 800485a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800485e:	4a0b      	ldrlt	r2, [pc, #44]	; (800488c <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004860:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004864:	bfb8      	it	lt
 8004866:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800486a:	b2db      	uxtb	r3, r3
 800486c:	bfaa      	itet	ge
 800486e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004872:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004874:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
 8004878:	bd38      	pop	{r3, r4, r5, pc}
 800487a:	bf00      	nop
 800487c:	08011fec 	.word	0x08011fec
 8004880:	08012022 	.word	0x08012022
 8004884:	080118c5 	.word	0x080118c5
 8004888:	0801203d 	.word	0x0801203d
 800488c:	e000ed14 	.word	0xe000ed14

08004890 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8004890:	bf30      	wfi
    b z_SysNmiOnReset
 8004892:	f7ff bffd 	b.w	8004890 <z_SysNmiOnReset>
 8004896:	bf00      	nop

08004898 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8004898:	4a0f      	ldr	r2, [pc, #60]	; (80048d8 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 800489a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800489c:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <z_arm_prep_c+0x44>)
 800489e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80048a2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80048a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80048a8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 80048ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80048b0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80048b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80048b8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 80048bc:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80048c0:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80048c4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80048c8:	f002 fd8a 	bl	80073e0 <z_bss_zero>
	z_data_copy();
 80048cc:	f004 fab8 	bl	8008e40 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 80048d0:	f000 fc08 	bl	80050e4 <z_arm_interrupt_init>
	z_cstart();
 80048d4:	f002 fdc8 	bl	8007468 <z_cstart>
 80048d8:	08000000 	.word	0x08000000
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 80048e0:	4a09      	ldr	r2, [pc, #36]	; (8004908 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 80048e2:	490a      	ldr	r1, [pc, #40]	; (800490c <arch_swap+0x2c>)
	_current->arch.basepri = key;
 80048e4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 80048e6:	6809      	ldr	r1, [r1, #0]
 80048e8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80048ea:	4909      	ldr	r1, [pc, #36]	; (8004910 <arch_swap+0x30>)
	_current->arch.basepri = key;
 80048ec:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80048ee:	684b      	ldr	r3, [r1, #4]
 80048f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f4:	604b      	str	r3, [r1, #4]
 80048f6:	2300      	movs	r3, #0
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8004900:	6893      	ldr	r3, [r2, #8]
}
 8004902:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000be0 	.word	0x20000be0
 800490c:	0800d6ac 	.word	0x0800d6ac
 8004910:	e000ed00 	.word	0xe000ed00

08004914 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8004914:	4912      	ldr	r1, [pc, #72]	; (8004960 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8004916:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8004918:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 800491c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800491e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8004922:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8004926:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8004928:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 800492c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8004930:	4f0c      	ldr	r7, [pc, #48]	; (8004964 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8004932:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8004936:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8004938:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800493a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800493c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 800493e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8004940:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8004942:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8004946:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8004948:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 800494a:	f000 fc0f 	bl	800516c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 800494e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8004952:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8004956:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 800495a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 800495e:	4770      	bx	lr
    ldr r1, =_kernel
 8004960:	20000be0 	.word	0x20000be0
    ldr v4, =_SCS_ICSR
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8004968:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 800496c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 800496e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8004972:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8004976:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8004978:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 800497c:	2902      	cmp	r1, #2
    beq _oops
 800497e:	d0ff      	beq.n	8004980 <_oops>

08004980 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8004980:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8004982:	f006 fe8c 	bl	800b69e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8004986:	bd01      	pop	{r0, pc}

08004988 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8004988:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 800498c:	9b00      	ldr	r3, [sp, #0]
 800498e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8004992:	490a      	ldr	r1, [pc, #40]	; (80049bc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8004994:	9b01      	ldr	r3, [sp, #4]
 8004996:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 800499a:	9b02      	ldr	r3, [sp, #8]
 800499c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 80049a0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 80049a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049a8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 80049ac:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 80049b0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 80049b2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 80049b4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 80049b6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	0800b1df 	.word	0x0800b1df

080049c0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 80049c0:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <z_check_thread_stack_fail+0x28>)
{
 80049c2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 80049c4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 80049c6:	b170      	cbz	r0, 80049e6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80049c8:	f113 0f16 	cmn.w	r3, #22
 80049cc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80049ce:	d005      	beq.n	80049dc <z_check_thread_stack_fail+0x1c>
 80049d0:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d805      	bhi.n	80049e4 <z_check_thread_stack_fail+0x24>
 80049d8:	4283      	cmp	r3, r0
 80049da:	d203      	bcs.n	80049e4 <z_check_thread_stack_fail+0x24>
		return 0;
 80049dc:	4281      	cmp	r1, r0
 80049de:	bf28      	it	cs
 80049e0:	2000      	movcs	r0, #0
 80049e2:	4770      	bx	lr
 80049e4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 80049e6:	4770      	bx	lr
 80049e8:	20000be0 	.word	0x20000be0

080049ec <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80049ec:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <arch_switch_to_main_thread+0x28>)
 80049f0:	6098      	str	r0, [r3, #8]
{
 80049f2:	460d      	mov	r5, r1
 80049f4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80049f6:	f000 fbb9 	bl	800516c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80049fa:	4620      	mov	r0, r4
 80049fc:	f385 8809 	msr	PSP, r5
 8004a00:	2100      	movs	r1, #0
 8004a02:	b663      	cpsie	if
 8004a04:	f381 8811 	msr	BASEPRI, r1
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f006 fbe5 	bl	800b1de <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8004a14:	20000be0 	.word	0x20000be0

08004a18 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8004a18:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8004a1a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8004a1e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8004a22:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8004a26:	4904      	ldr	r1, [pc, #16]	; (8004a38 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8004a28:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8004a2a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8004a2c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8004a2e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8004a32:	4902      	ldr	r1, [pc, #8]	; (8004a3c <_isr_wrapper+0x24>)
	bx r1
 8004a34:	4708      	bx	r1
 8004a36:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8004a38:	0800ce5c 	.word	0x0800ce5c
	ldr r1, =z_arm_int_exit
 8004a3c:	08004a41 	.word	0x08004a41

08004a40 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8004a42:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8004a44:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8004a46:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8004a48:	d003      	beq.n	8004a52 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8004a4a:	4903      	ldr	r1, [pc, #12]	; (8004a58 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8004a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8004a50:	600a      	str	r2, [r1, #0]

08004a52 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8004a52:	4770      	bx	lr
	ldr r3, =_kernel
 8004a54:	20000be0 	.word	0x20000be0
	ldr r1, =_SCS_ICSR
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8004a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	4606      	mov	r6, r0
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
 8004a68:	4b3e      	ldr	r3, [pc, #248]	; (8004b64 <bus_fault.constprop.0+0x108>)
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	2402      	movs	r4, #2
 8004a6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004a72:	483d      	ldr	r0, [pc, #244]	; (8004b68 <bus_fault.constprop.0+0x10c>)
 8004a74:	613c      	str	r4, [r7, #16]
 8004a76:	f107 0210 	add.w	r2, r7, #16
 8004a7a:	f006 fe1f 	bl	800b6bc <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8004a7e:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <bus_fault.constprop.0+0x110>)
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	04d9      	lsls	r1, r3, #19
 8004a84:	d509      	bpl.n	8004a9a <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
 8004a86:	4b3a      	ldr	r3, [pc, #232]	; (8004b70 <bus_fault.constprop.0+0x114>)
 8004a88:	4837      	ldr	r0, [pc, #220]	; (8004b68 <bus_fault.constprop.0+0x10c>)
 8004a8a:	e9c7 4304 	strd	r4, r3, [r7, #16]
 8004a8e:	f107 0210 	add.w	r2, r7, #16
 8004a92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004a96:	f006 fe11 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8004a9a:	4b34      	ldr	r3, [pc, #208]	; (8004b6c <bus_fault.constprop.0+0x110>)
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	051a      	lsls	r2, r3, #20
 8004aa0:	d50a      	bpl.n	8004ab8 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
 8004aa2:	4b34      	ldr	r3, [pc, #208]	; (8004b74 <bus_fault.constprop.0+0x118>)
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	482f      	ldr	r0, [pc, #188]	; (8004b68 <bus_fault.constprop.0+0x10c>)
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	f107 0210 	add.w	r2, r7, #16
 8004ab0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ab4:	f006 fe02 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8004ab8:	4c2c      	ldr	r4, [pc, #176]	; (8004b6c <bus_fault.constprop.0+0x110>)
 8004aba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004abc:	059b      	lsls	r3, r3, #22
 8004abe:	d522      	bpl.n	8004b06 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
 8004ac0:	46e8      	mov	r8, sp
 8004ac2:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <bus_fault.constprop.0+0x11c>)
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	4827      	ldr	r0, [pc, #156]	; (8004b68 <bus_fault.constprop.0+0x10c>)
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	f107 0210 	add.w	r2, r7, #16
 8004ad0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ad4:	f006 fdf2 	bl	800b6bc <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8004ad8:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8004ada:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004adc:	0410      	lsls	r0, r2, #16
 8004ade:	d512      	bpl.n	8004b06 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8004ae0:	b088      	sub	sp, #32
 8004ae2:	466a      	mov	r2, sp
 8004ae4:	4925      	ldr	r1, [pc, #148]	; (8004b7c <bus_fault.constprop.0+0x120>)
 8004ae6:	4820      	ldr	r0, [pc, #128]	; (8004b68 <bus_fault.constprop.0+0x10c>)
 8004ae8:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8004aec:	2303      	movs	r3, #3
 8004aee:	f842 3f10 	str.w	r3, [r2, #16]!
 8004af2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004af6:	f006 fde1 	bl	800b6bc <z_log_msg_static_create.constprop.0>
 8004afa:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
 8004afc:	b11e      	cbz	r6, 8004b06 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8004afe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b04:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8004b06:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <bus_fault.constprop.0+0x110>)
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	0559      	lsls	r1, r3, #21
 8004b0c:	d50a      	bpl.n	8004b24 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
 8004b0e:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <bus_fault.constprop.0+0x124>)
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	2302      	movs	r3, #2
 8004b14:	4814      	ldr	r0, [pc, #80]	; (8004b68 <bus_fault.constprop.0+0x10c>)
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	f107 0210 	add.w	r2, r7, #16
 8004b1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004b20:	f006 fdcc 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8004b24:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <bus_fault.constprop.0+0x110>)
 8004b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b28:	05d2      	lsls	r2, r2, #23
 8004b2a:	d515      	bpl.n	8004b58 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
 8004b2c:	4b15      	ldr	r3, [pc, #84]	; (8004b84 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	2302      	movs	r3, #2
 8004b32:	480d      	ldr	r0, [pc, #52]	; (8004b68 <bus_fault.constprop.0+0x10c>)
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	f107 0210 	add.w	r2, r7, #16
 8004b3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004b3e:	f006 fdbd 	bl	800b6bc <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004b42:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <bus_fault.constprop.0+0x110>)
 8004b44:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8004b46:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004b48:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
 8004b4c:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004b4e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8004b50:	7028      	strb	r0, [r5, #0]
}
 8004b52:	46bd      	mov	sp, r7
 8004b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	049b      	lsls	r3, r3, #18
 8004b5c:	d5f1      	bpl.n	8004b42 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8004b5e:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <bus_fault.constprop.0+0x12c>)
 8004b60:	e7e5      	b.n	8004b2e <bus_fault.constprop.0+0xd2>
 8004b62:	bf00      	nop
 8004b64:	0801207d 	.word	0x0801207d
 8004b68:	0800d1c0 	.word	0x0800d1c0
 8004b6c:	e000ed00 	.word	0xe000ed00
 8004b70:	08012093 	.word	0x08012093
 8004b74:	080120a4 	.word	0x080120a4
 8004b78:	080120b7 	.word	0x080120b7
 8004b7c:	080120d0 	.word	0x080120d0
 8004b80:	080120e5 	.word	0x080120e5
 8004b84:	08012100 	.word	0x08012100
 8004b88:	08012118 	.word	0x08012118

08004b8c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8004b90:	4b33      	ldr	r3, [pc, #204]	; (8004c60 <usage_fault.constprop.0+0xd4>)
 8004b92:	4834      	ldr	r0, [pc, #208]	; (8004c64 <usage_fault.constprop.0+0xd8>)
 8004b94:	9305      	str	r3, [sp, #20]
 8004b96:	2402      	movs	r4, #2
 8004b98:	aa04      	add	r2, sp, #16
 8004b9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004b9e:	9404      	str	r4, [sp, #16]
 8004ba0:	f006 fd8c 	bl	800b6bc <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8004ba4:	4b30      	ldr	r3, [pc, #192]	; (8004c68 <usage_fault.constprop.0+0xdc>)
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	019b      	lsls	r3, r3, #6
 8004baa:	d508      	bpl.n	8004bbe <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
 8004bac:	4b2f      	ldr	r3, [pc, #188]	; (8004c6c <usage_fault.constprop.0+0xe0>)
 8004bae:	482d      	ldr	r0, [pc, #180]	; (8004c64 <usage_fault.constprop.0+0xd8>)
 8004bb0:	aa04      	add	r2, sp, #16
 8004bb2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004bb6:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004bba:	f006 fd7f 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8004bbe:	4b2a      	ldr	r3, [pc, #168]	; (8004c68 <usage_fault.constprop.0+0xdc>)
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	01dc      	lsls	r4, r3, #7
 8004bc4:	d509      	bpl.n	8004bda <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
 8004bc6:	4b2a      	ldr	r3, [pc, #168]	; (8004c70 <usage_fault.constprop.0+0xe4>)
 8004bc8:	9305      	str	r3, [sp, #20]
 8004bca:	4826      	ldr	r0, [pc, #152]	; (8004c64 <usage_fault.constprop.0+0xd8>)
 8004bcc:	2302      	movs	r3, #2
 8004bce:	aa04      	add	r2, sp, #16
 8004bd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004bd4:	9304      	str	r3, [sp, #16]
 8004bd6:	f006 fd71 	bl	800b6bc <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8004bda:	4b23      	ldr	r3, [pc, #140]	; (8004c68 <usage_fault.constprop.0+0xdc>)
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	0318      	lsls	r0, r3, #12
 8004be0:	d509      	bpl.n	8004bf6 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
 8004be2:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <usage_fault.constprop.0+0xe8>)
 8004be4:	9305      	str	r3, [sp, #20]
 8004be6:	481f      	ldr	r0, [pc, #124]	; (8004c64 <usage_fault.constprop.0+0xd8>)
 8004be8:	2302      	movs	r3, #2
 8004bea:	aa04      	add	r2, sp, #16
 8004bec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004bf0:	9304      	str	r3, [sp, #16]
 8004bf2:	f006 fd63 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8004bf6:	4b1c      	ldr	r3, [pc, #112]	; (8004c68 <usage_fault.constprop.0+0xdc>)
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	0359      	lsls	r1, r3, #13
 8004bfc:	d509      	bpl.n	8004c12 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	; (8004c78 <usage_fault.constprop.0+0xec>)
 8004c00:	9305      	str	r3, [sp, #20]
 8004c02:	4818      	ldr	r0, [pc, #96]	; (8004c64 <usage_fault.constprop.0+0xd8>)
 8004c04:	2302      	movs	r3, #2
 8004c06:	aa04      	add	r2, sp, #16
 8004c08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004c0c:	9304      	str	r3, [sp, #16]
 8004c0e:	f006 fd55 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8004c12:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <usage_fault.constprop.0+0xdc>)
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	039a      	lsls	r2, r3, #14
 8004c18:	d509      	bpl.n	8004c2e <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8004c1a:	4b18      	ldr	r3, [pc, #96]	; (8004c7c <usage_fault.constprop.0+0xf0>)
 8004c1c:	9305      	str	r3, [sp, #20]
 8004c1e:	4811      	ldr	r0, [pc, #68]	; (8004c64 <usage_fault.constprop.0+0xd8>)
 8004c20:	2302      	movs	r3, #2
 8004c22:	aa04      	add	r2, sp, #16
 8004c24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004c28:	9304      	str	r3, [sp, #16]
 8004c2a:	f006 fd47 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8004c2e:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <usage_fault.constprop.0+0xdc>)
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	03db      	lsls	r3, r3, #15
 8004c34:	d509      	bpl.n	8004c4a <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8004c36:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <usage_fault.constprop.0+0xf4>)
 8004c38:	9305      	str	r3, [sp, #20]
 8004c3a:	480a      	ldr	r0, [pc, #40]	; (8004c64 <usage_fault.constprop.0+0xd8>)
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	aa04      	add	r2, sp, #16
 8004c40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004c44:	9304      	str	r3, [sp, #16]
 8004c46:	f006 fd39 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8004c4a:	4a07      	ldr	r2, [pc, #28]	; (8004c68 <usage_fault.constprop.0+0xdc>)
 8004c4c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004c4e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004c52:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
 8004c56:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8004c58:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004c5a:	b006      	add	sp, #24
 8004c5c:	bd10      	pop	{r4, pc}
 8004c5e:	bf00      	nop
 8004c60:	08012147 	.word	0x08012147
 8004c64:	0800d1c0 	.word	0x0800d1c0
 8004c68:	e000ed00 	.word	0xe000ed00
 8004c6c:	0801215f 	.word	0x0801215f
 8004c70:	08012172 	.word	0x08012172
 8004c74:	0801218c 	.word	0x0801218c
 8004c78:	080121aa 	.word	0x080121aa
 8004c7c:	080121cf 	.word	0x080121cf
 8004c80:	080121e9 	.word	0x080121e9

08004c84 <mem_manage_fault>:
{
 8004c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	b086      	sub	sp, #24
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4688      	mov	r8, r1
 8004c90:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8004c92:	4b5b      	ldr	r3, [pc, #364]	; (8004e00 <mem_manage_fault+0x17c>)
 8004c94:	485b      	ldr	r0, [pc, #364]	; (8004e04 <mem_manage_fault+0x180>)
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	2502      	movs	r5, #2
 8004c9a:	613d      	str	r5, [r7, #16]
 8004c9c:	f107 0210 	add.w	r2, r7, #16
 8004ca0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ca4:	f006 fd0a 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8004ca8:	4b57      	ldr	r3, [pc, #348]	; (8004e08 <mem_manage_fault+0x184>)
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	06d8      	lsls	r0, r3, #27
 8004cae:	d509      	bpl.n	8004cc4 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8004cb0:	4b56      	ldr	r3, [pc, #344]	; (8004e0c <mem_manage_fault+0x188>)
 8004cb2:	4854      	ldr	r0, [pc, #336]	; (8004e04 <mem_manage_fault+0x180>)
 8004cb4:	e9c7 5304 	strd	r5, r3, [r7, #16]
 8004cb8:	f107 0210 	add.w	r2, r7, #16
 8004cbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004cc0:	f006 fcfc 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8004cc4:	4b50      	ldr	r3, [pc, #320]	; (8004e08 <mem_manage_fault+0x184>)
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	0719      	lsls	r1, r3, #28
 8004cca:	d50a      	bpl.n	8004ce2 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
 8004ccc:	4b50      	ldr	r3, [pc, #320]	; (8004e10 <mem_manage_fault+0x18c>)
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	484c      	ldr	r0, [pc, #304]	; (8004e04 <mem_manage_fault+0x180>)
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	f107 0210 	add.w	r2, r7, #16
 8004cda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004cde:	f006 fced 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8004ce2:	f8df a124 	ldr.w	sl, [pc, #292]	; 8004e08 <mem_manage_fault+0x184>
 8004ce6:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 8004cea:	079a      	lsls	r2, r3, #30
 8004cec:	d448      	bmi.n	8004d80 <mem_manage_fault+0xfc>
	uint32_t mmfar = -EINVAL;
 8004cee:	f06f 0515 	mvn.w	r5, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8004cf2:	4b45      	ldr	r3, [pc, #276]	; (8004e08 <mem_manage_fault+0x184>)
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	07d8      	lsls	r0, r3, #31
 8004cf8:	d50a      	bpl.n	8004d10 <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
 8004cfa:	4b46      	ldr	r3, [pc, #280]	; (8004e14 <mem_manage_fault+0x190>)
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	2302      	movs	r3, #2
 8004d00:	4840      	ldr	r0, [pc, #256]	; (8004e04 <mem_manage_fault+0x180>)
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	f107 0210 	add.w	r2, r7, #16
 8004d08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004d0c:	f006 fcd6 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8004d10:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <mem_manage_fault+0x184>)
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	0699      	lsls	r1, r3, #26
 8004d16:	d50a      	bpl.n	8004d2e <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
 8004d18:	4b3f      	ldr	r3, [pc, #252]	; (8004e18 <mem_manage_fault+0x194>)
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	4839      	ldr	r0, [pc, #228]	; (8004e04 <mem_manage_fault+0x180>)
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	f107 0210 	add.w	r2, r7, #16
 8004d26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004d2a:	f006 fcc7 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8004d2e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004e08 <mem_manage_fault+0x184>
 8004d32:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8004d36:	06da      	lsls	r2, r3, #27
 8004d38:	d403      	bmi.n	8004d42 <mem_manage_fault+0xbe>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8004d3a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8004d3e:	079b      	lsls	r3, r3, #30
 8004d40:	d55b      	bpl.n	8004dfa <mem_manage_fault+0x176>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8004d42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004d46:	0518      	lsls	r0, r3, #20
 8004d48:	d557      	bpl.n	8004dfa <mem_manage_fault+0x176>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f7ff fe37 	bl	80049c0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8004d52:	2800      	cmp	r0, #0
 8004d54:	d03e      	beq.n	8004dd4 <mem_manage_fault+0x150>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004d56:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8004d5a:	2002      	movs	r0, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8004d5c:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <mem_manage_fault+0x184>)
 8004d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d60:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8004d62:	bf42      	ittt	mi
 8004d64:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
 8004d66:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
 8004d6a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8004d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d6e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d74:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
 8004d76:	2300      	movs	r3, #0
 8004d78:	7023      	strb	r3, [r4, #0]
}
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
 8004d80:	46e9      	mov	r9, sp
 8004d82:	4b26      	ldr	r3, [pc, #152]	; (8004e1c <mem_manage_fault+0x198>)
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	2302      	movs	r3, #2
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	481e      	ldr	r0, [pc, #120]	; (8004e04 <mem_manage_fault+0x180>)
 8004d8c:	f107 0210 	add.w	r2, r7, #16
 8004d90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004d94:	f006 fc92 	bl	800b6bc <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
 8004d98:	f8da 5034 	ldr.w	r5, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8004d9c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 8004da0:	061b      	lsls	r3, r3, #24
 8004da2:	d5a4      	bpl.n	8004cee <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8004da4:	b088      	sub	sp, #32
 8004da6:	466a      	mov	r2, sp
 8004da8:	4b1d      	ldr	r3, [pc, #116]	; (8004e20 <mem_manage_fault+0x19c>)
 8004daa:	4816      	ldr	r0, [pc, #88]	; (8004e04 <mem_manage_fault+0x180>)
 8004dac:	e9c2 3505 	strd	r3, r5, [r2, #20]
 8004db0:	2303      	movs	r3, #3
 8004db2:	f842 3f10 	str.w	r3, [r2, #16]!
 8004db6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004dba:	f006 fc7f 	bl	800b6bc <z_log_msg_static_create.constprop.0>
 8004dbe:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
 8004dc0:	f1b8 0f00 	cmp.w	r8, #0
 8004dc4:	d095      	beq.n	8004cf2 <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8004dc6:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 8004dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dce:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
 8004dd2:	e78e      	b.n	8004cf2 <mem_manage_fault+0x6e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
 8004dd4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8004dd8:	06d9      	lsls	r1, r3, #27
 8004dda:	d50e      	bpl.n	8004dfa <mem_manage_fault+0x176>
 8004ddc:	4911      	ldr	r1, [pc, #68]	; (8004e24 <mem_manage_fault+0x1a0>)
 8004dde:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <mem_manage_fault+0x1a4>)
 8004de0:	4812      	ldr	r0, [pc, #72]	; (8004e2c <mem_manage_fault+0x1a8>)
 8004de2:	f240 1353 	movw	r3, #339	; 0x153
 8004de6:	f006 fb14 	bl	800b412 <assert_print>
 8004dea:	4811      	ldr	r0, [pc, #68]	; (8004e30 <mem_manage_fault+0x1ac>)
 8004dec:	f006 fb11 	bl	800b412 <assert_print>
 8004df0:	480d      	ldr	r0, [pc, #52]	; (8004e28 <mem_manage_fault+0x1a4>)
 8004df2:	f240 1153 	movw	r1, #339	; 0x153
 8004df6:	f006 fb05 	bl	800b404 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e7ae      	b.n	8004d5c <mem_manage_fault+0xd8>
 8004dfe:	bf00      	nop
 8004e00:	08012214 	.word	0x08012214
 8004e04:	0800d1c0 	.word	0x0800d1c0
 8004e08:	e000ed00 	.word	0xe000ed00
 8004e0c:	0801222a 	.word	0x0801222a
 8004e10:	080120a4 	.word	0x080120a4
 8004e14:	0801228b 	.word	0x0801228b
 8004e18:	08012118 	.word	0x08012118
 8004e1c:	0801225d 	.word	0x0801225d
 8004e20:	08012275 	.word	0x08012275
 8004e24:	080122e4 	.word	0x080122e4
 8004e28:	080122aa 	.word	0x080122aa
 8004e2c:	080118c5 	.word	0x080118c5
 8004e30:	0801232e 	.word	0x0801232e

08004e34 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8004e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8004e38:	4b8d      	ldr	r3, [pc, #564]	; (8005070 <z_arm_fault+0x23c>)
{
 8004e3a:	b08b      	sub	sp, #44	; 0x2c
 8004e3c:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8004e3e:	6858      	ldr	r0, [r3, #4]
{
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e46:	2600      	movs	r6, #0
 8004e48:	f386 8811 	msr	BASEPRI, r6
 8004e4c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8004e50:	f002 457f 	and.w	r5, r2, #4278190080	; 0xff000000
 8004e54:	f1b5 4f7f 	cmp.w	r5, #4278190080	; 0xff000000
 8004e58:	d10e      	bne.n	8004e78 <z_arm_fault+0x44>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8004e5a:	f002 050c 	and.w	r5, r2, #12
 8004e5e:	2d08      	cmp	r5, #8
 8004e60:	d119      	bne.n	8004e96 <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8004e62:	4b84      	ldr	r3, [pc, #528]	; (8005074 <z_arm_fault+0x240>)
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	2302      	movs	r3, #2
 8004e68:	4883      	ldr	r0, [pc, #524]	; (8005078 <z_arm_fault+0x244>)
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	f107 0218 	add.w	r2, r7, #24
 8004e70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004e74:	f006 fc22 	bl	800b6bc <z_log_msg_static_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
 8004e78:	4980      	ldr	r1, [pc, #512]	; (800507c <z_arm_fault+0x248>)
 8004e7a:	4a81      	ldr	r2, [pc, #516]	; (8005080 <z_arm_fault+0x24c>)
 8004e7c:	4881      	ldr	r0, [pc, #516]	; (8005084 <z_arm_fault+0x250>)
 8004e7e:	f240 431d 	movw	r3, #1053	; 0x41d
 8004e82:	f006 fac6 	bl	800b412 <assert_print>
 8004e86:	4880      	ldr	r0, [pc, #512]	; (8005088 <z_arm_fault+0x254>)
 8004e88:	f006 fac3 	bl	800b412 <assert_print>
 8004e8c:	f240 411d 	movw	r1, #1053	; 0x41d
			__ASSERT(0,
 8004e90:	487b      	ldr	r0, [pc, #492]	; (8005080 <z_arm_fault+0x24c>)
 8004e92:	f006 fab7 	bl	800b404 <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8004e96:	0715      	lsls	r5, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8004e98:	bf4c      	ite	mi
 8004e9a:	460c      	movmi	r4, r1
			*nested_exc = true;
 8004e9c:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
 8004e9e:	2c00      	cmp	r4, #0
 8004ea0:	d0ea      	beq.n	8004e78 <z_arm_fault+0x44>
	*recoverable = false;
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	71fa      	strb	r2, [r7, #7]
	switch (fault) {
 8004ea6:	1eda      	subs	r2, r3, #3
 8004ea8:	2a09      	cmp	r2, #9
 8004eaa:	f200 80c1 	bhi.w	8005030 <z_arm_fault+0x1fc>
 8004eae:	e8df f002 	tbb	[pc, r2]
 8004eb2:	b405      	.short	0xb405
 8004eb4:	bfbf97b7 	.word	0xbfbf97b7
 8004eb8:	babfbfbf 	.word	0xbabfbfbf
	PR_FAULT_INFO("***** HARD FAULT *****");
 8004ebc:	46e9      	mov	r9, sp
 8004ebe:	4b73      	ldr	r3, [pc, #460]	; (800508c <z_arm_fault+0x258>)
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	f04f 0802 	mov.w	r8, #2
 8004ec6:	f107 0218 	add.w	r2, r7, #24
 8004eca:	486b      	ldr	r0, [pc, #428]	; (8005078 <z_arm_fault+0x244>)
 8004ecc:	f8c7 8018 	str.w	r8, [r7, #24]
 8004ed0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ed4:	f006 fbf2 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	*recoverable = false;
 8004ed8:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004eda:	4d65      	ldr	r5, [pc, #404]	; (8005070 <z_arm_fault+0x23c>)
	*recoverable = false;
 8004edc:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004ede:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004ee0:	079a      	lsls	r2, r3, #30
 8004ee2:	d50b      	bpl.n	8004efc <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
 8004ee4:	4b6a      	ldr	r3, [pc, #424]	; (8005090 <z_arm_fault+0x25c>)
		PR_EXC("  Debug event");
 8004ee6:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
 8004eea:	4863      	ldr	r0, [pc, #396]	; (8005078 <z_arm_fault+0x244>)
 8004eec:	f107 0218 	add.w	r2, r7, #24
 8004ef0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ef4:	f006 fbe2 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e038      	b.n	8004f6e <z_arm_fault+0x13a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8004efc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	da01      	bge.n	8004f06 <z_arm_fault+0xd2>
		PR_EXC("  Debug event");
 8004f02:	4b64      	ldr	r3, [pc, #400]	; (8005094 <z_arm_fault+0x260>)
 8004f04:	e7ef      	b.n	8004ee6 <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8004f06:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	d579      	bpl.n	8005000 <z_arm_fault+0x1cc>
		PR_EXC("  Fault escalation (see below)");
 8004f0c:	4b62      	ldr	r3, [pc, #392]	; (8005098 <z_arm_fault+0x264>)
 8004f0e:	485a      	ldr	r0, [pc, #360]	; (8005078 <z_arm_fault+0x244>)
 8004f10:	e9c7 8306 	strd	r8, r3, [r7, #24]
 8004f14:	f107 0218 	add.w	r2, r7, #24
 8004f18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004f1c:	f006 fbce 	bl	800b6bc <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8004f20:	696b      	ldr	r3, [r5, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8004f22:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8004f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f28:	616b      	str	r3, [r5, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004f2e:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8004f32:	696b      	ldr	r3, [r5, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8004f34:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8004f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f3c:	616b      	str	r3, [r5, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004f42:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8004f46:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d131      	bne.n	8004fb2 <z_arm_fault+0x17e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8004f4e:	b088      	sub	sp, #32
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	466a      	mov	r2, sp
 8004f54:	4951      	ldr	r1, [pc, #324]	; (800509c <z_arm_fault+0x268>)
 8004f56:	4848      	ldr	r0, [pc, #288]	; (8005078 <z_arm_fault+0x244>)
 8004f58:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	f842 3f10 	str.w	r3, [r2, #16]!
 8004f62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004f66:	f006 fba9 	bl	800b6bc <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8004f6e:	79fa      	ldrb	r2, [r7, #7]
 8004f70:	b9da      	cbnz	r2, 8004faa <z_arm_fault+0x176>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8004f72:	f107 0508 	add.w	r5, r7, #8
 8004f76:	f104 0c20 	add.w	ip, r4, #32
 8004f7a:	6820      	ldr	r0, [r4, #0]
 8004f7c:	6861      	ldr	r1, [r4, #4]
 8004f7e:	462a      	mov	r2, r5
 8004f80:	c203      	stmia	r2!, {r0, r1}
 8004f82:	3408      	adds	r4, #8
 8004f84:	4564      	cmp	r4, ip
 8004f86:	4615      	mov	r5, r2
 8004f88:	d1f7      	bne.n	8004f7a <z_arm_fault+0x146>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	2e00      	cmp	r6, #0
 8004f8e:	d06a      	beq.n	8005066 <z_arm_fault+0x232>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8004f90:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004f94:	b921      	cbnz	r1, 8004fa0 <z_arm_fault+0x16c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8004f96:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 8004f9a:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8004f9e:	627a      	str	r2, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8004fa0:	f107 0108 	add.w	r1, r7, #8
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fbcb 	bl	8004740 <z_arm_fatal_error>
}
 8004faa:	372c      	adds	r7, #44	; 0x2c
 8004fac:	46bd      	mov	sp, r7
 8004fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 8004fb2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	b133      	cbz	r3, 8004fc6 <z_arm_fault+0x192>
			reason = mem_manage_fault(esf, 1, recoverable);
 8004fb8:	1dfa      	adds	r2, r7, #7
 8004fba:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f7ff fe61 	bl	8004c84 <mem_manage_fault>
 8004fc2:	4603      	mov	r3, r0
		break;
 8004fc4:	e7d3      	b.n	8004f6e <z_arm_fault+0x13a>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8004fc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004fc8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8004fcc:	d004      	beq.n	8004fd8 <z_arm_fault+0x1a4>
			reason = bus_fault(esf, 1, recoverable);
 8004fce:	1df9      	adds	r1, r7, #7
 8004fd0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8004fd2:	f7ff fd43 	bl	8004a5c <bus_fault.constprop.0>
 8004fd6:	e7f4      	b.n	8004fc2 <z_arm_fault+0x18e>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8004fd8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fde:	d302      	bcc.n	8004fe6 <z_arm_fault+0x1b2>
		reason = usage_fault(esf);
 8004fe0:	f7ff fdd4 	bl	8004b8c <usage_fault.constprop.0>
 8004fe4:	e7ed      	b.n	8004fc2 <z_arm_fault+0x18e>
			__ASSERT(0,
 8004fe6:	492e      	ldr	r1, [pc, #184]	; (80050a0 <z_arm_fault+0x26c>)
 8004fe8:	4a25      	ldr	r2, [pc, #148]	; (8005080 <z_arm_fault+0x24c>)
 8004fea:	4826      	ldr	r0, [pc, #152]	; (8005084 <z_arm_fault+0x250>)
 8004fec:	f240 23ef 	movw	r3, #751	; 0x2ef
 8004ff0:	f006 fa0f 	bl	800b412 <assert_print>
 8004ff4:	482b      	ldr	r0, [pc, #172]	; (80050a4 <z_arm_fault+0x270>)
 8004ff6:	f006 fa0c 	bl	800b412 <assert_print>
 8004ffa:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004ffe:	e747      	b.n	8004e90 <z_arm_fault+0x5c>
		__ASSERT(0,
 8005000:	4927      	ldr	r1, [pc, #156]	; (80050a0 <z_arm_fault+0x26c>)
 8005002:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <z_arm_fault+0x24c>)
 8005004:	481f      	ldr	r0, [pc, #124]	; (8005084 <z_arm_fault+0x250>)
 8005006:	f240 23f3 	movw	r3, #755	; 0x2f3
 800500a:	f006 fa02 	bl	800b412 <assert_print>
 800500e:	4826      	ldr	r0, [pc, #152]	; (80050a8 <z_arm_fault+0x274>)
 8005010:	f006 f9ff 	bl	800b412 <assert_print>
 8005014:	f240 21f3 	movw	r1, #755	; 0x2f3
 8005018:	e73a      	b.n	8004e90 <z_arm_fault+0x5c>
		reason = mem_manage_fault(esf, 0, recoverable);
 800501a:	1dfa      	adds	r2, r7, #7
 800501c:	2100      	movs	r1, #0
 800501e:	e7cd      	b.n	8004fbc <z_arm_fault+0x188>
		reason = bus_fault(esf, 0, recoverable);
 8005020:	1df9      	adds	r1, r7, #7
 8005022:	2000      	movs	r0, #0
 8005024:	e7d5      	b.n	8004fd2 <z_arm_fault+0x19e>
	PR_FAULT_INFO(
 8005026:	4b21      	ldr	r3, [pc, #132]	; (80050ac <z_arm_fault+0x278>)
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	2302      	movs	r3, #2
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e75c      	b.n	8004eea <z_arm_fault+0xb6>
	PR_FAULT_INFO("***** %s %d) *****",
 8005030:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <z_arm_fault+0x27c>)
 8005032:	4920      	ldr	r1, [pc, #128]	; (80050b4 <z_arm_fault+0x280>)
 8005034:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
 8005038:	466d      	mov	r5, sp
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	bf18      	it	ne
 800503e:	4611      	movne	r1, r2
 8005040:	466a      	mov	r2, sp
 8005042:	3b10      	subs	r3, #16
 8005044:	61d3      	str	r3, [r2, #28]
 8005046:	481c      	ldr	r0, [pc, #112]	; (80050b8 <z_arm_fault+0x284>)
 8005048:	2302      	movs	r3, #2
 800504a:	f882 3020 	strb.w	r3, [r2, #32]
 800504e:	4b1b      	ldr	r3, [pc, #108]	; (80050bc <z_arm_fault+0x288>)
 8005050:	e9c2 0105 	strd	r0, r1, [r2, #20]
 8005054:	f842 3f10 	str.w	r3, [r2, #16]!
 8005058:	4807      	ldr	r0, [pc, #28]	; (8005078 <z_arm_fault+0x244>)
 800505a:	f44f 5109 	mov.w	r1, #8768	; 0x2240
 800505e:	f006 fb2d 	bl	800b6bc <z_log_msg_static_create.constprop.0>
 8005062:	46ad      	mov	sp, r5
}
 8005064:	e748      	b.n	8004ef8 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8005066:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800506a:	f022 0201 	bic.w	r2, r2, #1
 800506e:	e796      	b.n	8004f9e <z_arm_fault+0x16a>
 8005070:	e000ed00 	.word	0xe000ed00
 8005074:	0801237f 	.word	0x0801237f
 8005078:	0800d1c0 	.word	0x0800d1c0
 800507c:	080123aa 	.word	0x080123aa
 8005080:	080122aa 	.word	0x080122aa
 8005084:	080118c5 	.word	0x080118c5
 8005088:	080123bd 	.word	0x080123bd
 800508c:	080123fb 	.word	0x080123fb
 8005090:	08012412 	.word	0x08012412
 8005094:	08012433 	.word	0x08012433
 8005098:	08012441 	.word	0x08012441
 800509c:	08012460 	.word	0x08012460
 80050a0:	0801352e 	.word	0x0801352e
 80050a4:	0801247c 	.word	0x0801247c
 80050a8:	080124a0 	.word	0x080124a0
 80050ac:	080124d0 	.word	0x080124d0
 80050b0:	08012366 	.word	0x08012366
 80050b4:	08012351 	.word	0x08012351
 80050b8:	080124f4 	.word	0x080124f4
 80050bc:	01000004 	.word	0x01000004

080050c0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80050c0:	4a02      	ldr	r2, [pc, #8]	; (80050cc <z_arm_fault_init+0xc>)
 80050c2:	6953      	ldr	r3, [r2, #20]
 80050c4:	f043 0310 	orr.w	r3, r3, #16
 80050c8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 80050ca:	4770      	bx	lr
 80050cc:	e000ed00 	.word	0xe000ed00

080050d0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80050d0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80050d4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80050d8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80050da:	4672      	mov	r2, lr
	bl z_arm_fault
 80050dc:	f7ff feaa 	bl	8004e34 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80050e0:	bd01      	pop	{r0, pc}
 80050e2:	bf00      	nop

080050e4 <z_arm_interrupt_init>:
 80050e4:	4804      	ldr	r0, [pc, #16]	; (80050f8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	2110      	movs	r1, #16
 80050ea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80050ec:	3301      	adds	r3, #1
 80050ee:	2b55      	cmp	r3, #85	; 0x55
 80050f0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80050f4:	d1f9      	bne.n	80050ea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80050f6:	4770      	bx	lr
 80050f8:	e000e100 	.word	0xe000e100

080050fc <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80050fc:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80050fe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8005102:	4808      	ldr	r0, [pc, #32]	; (8005124 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8005104:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 8005108:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800510a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800510e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8005112:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8005114:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8005116:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800511a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800511e:	f7ff fbbb 	bl	8004898 <z_arm_prep_c>
 8005122:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8005124:	200018c0 	.word	0x200018c0

08005128 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8005128:	4b08      	ldr	r3, [pc, #32]	; (800514c <z_impl_k_thread_abort+0x24>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	4283      	cmp	r3, r0
 800512e:	d10b      	bne.n	8005148 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005130:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8005134:	b143      	cbz	r3, 8005148 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <z_impl_k_thread_abort+0x28>)
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800513e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8005140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005146:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 8005148:	f003 bdb2 	b.w	8008cb0 <z_thread_abort>
 800514c:	20000be0 	.word	0x20000be0
 8005150:	e000ed00 	.word	0xe000ed00

08005154 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8005154:	4b02      	ldr	r3, [pc, #8]	; (8005160 <z_arm_configure_static_mpu_regions+0xc>)
 8005156:	4a03      	ldr	r2, [pc, #12]	; (8005164 <z_arm_configure_static_mpu_regions+0x10>)
 8005158:	4803      	ldr	r0, [pc, #12]	; (8005168 <z_arm_configure_static_mpu_regions+0x14>)
 800515a:	2101      	movs	r1, #1
 800515c:	f000 b892 	b.w	8005284 <arm_core_mpu_configure_static_mpu_regions>
 8005160:	20010000 	.word	0x20010000
 8005164:	20000000 	.word	0x20000000
 8005168:	0800d42c 	.word	0x0800d42c

0800516c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 800516c:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 800516e:	4b05      	ldr	r3, [pc, #20]	; (8005184 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8005170:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 8005172:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8005174:	4a04      	ldr	r2, [pc, #16]	; (8005188 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8005176:	2140      	movs	r1, #64	; 0x40
 8005178:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 800517c:	4618      	mov	r0, r3
 800517e:	2101      	movs	r1, #1
 8005180:	f000 b8a6 	b.w	80052d0 <arm_core_mpu_configure_dynamic_mpu_regions>
 8005184:	20000a9c 	.word	0x20000a9c
 8005188:	150b0000 	.word	0x150b0000

0800518c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 800518c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8005190:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8005248 <mpu_configure_regions+0xbc>
 8005194:	469c      	mov	ip, r3
 8005196:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
 8005198:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
 800519a:	2300      	movs	r3, #0
 800519c:	428b      	cmp	r3, r1
 800519e:	da1a      	bge.n	80051d6 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
 80051a0:	6844      	ldr	r4, [r0, #4]
 80051a2:	2c00      	cmp	r4, #0
 80051a4:	d04d      	beq.n	8005242 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 80051a6:	f1bc 0f00 	cmp.w	ip, #0
 80051aa:	d01d      	beq.n	80051e8 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 80051ac:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 80051ae:	4234      	tst	r4, r6
 80051b0:	d015      	beq.n	80051de <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 80051b2:	466c      	mov	r4, sp
 80051b4:	b088      	sub	sp, #32
 80051b6:	466a      	mov	r2, sp
 80051b8:	4924      	ldr	r1, [pc, #144]	; (800524c <mpu_configure_regions+0xc0>)
 80051ba:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80051be:	2303      	movs	r3, #3
 80051c0:	f842 3f10 	str.w	r3, [r2, #16]!
 80051c4:	4822      	ldr	r0, [pc, #136]	; (8005250 <mpu_configure_regions+0xc4>)
 80051c6:	2300      	movs	r3, #0
 80051c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80051cc:	f7fe fe3e 	bl	8003e4c <z_impl_z_log_msg_static_create>
			return -EINVAL;
 80051d0:	f06f 0515 	mvn.w	r5, #21
 80051d4:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80051d6:	4628      	mov	r0, r5
 80051d8:	46bd      	mov	sp, r7
 80051da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
 80051de:	2c1f      	cmp	r4, #31
 80051e0:	d9e7      	bls.n	80051b2 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
 80051e2:	6802      	ldr	r2, [r0, #0]
		&&
 80051e4:	4216      	tst	r6, r2
 80051e6:	d1e4      	bne.n	80051b2 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80051e8:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 80051ea:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80051ec:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80051ee:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
 80051f2:	d914      	bls.n	800521e <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
 80051f4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80051f8:	d813      	bhi.n	8005222 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80051fa:	3c01      	subs	r4, #1
 80051fc:	fab4 f484 	clz	r4, r4
 8005200:	f1c4 041f 	rsb	r4, r4, #31
 8005204:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8005206:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800520a:	ea46 0604 	orr.w	r6, r6, r4
 800520e:	d90a      	bls.n	8005226 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8005210:	466c      	mov	r4, sp
 8005212:	b088      	sub	sp, #32
 8005214:	466a      	mov	r2, sp
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <mpu_configure_regions+0xc8>)
 8005218:	e9c2 3505 	strd	r3, r5, [r2, #20]
 800521c:	e7cf      	b.n	80051be <mpu_configure_regions+0x32>
		return REGION_32B;
 800521e:	2408      	movs	r4, #8
 8005220:	e7f1      	b.n	8005206 <mpu_configure_regions+0x7a>
		return REGION_4G;
 8005222:	243e      	movs	r4, #62	; 0x3e
 8005224:	e7ef      	b.n	8005206 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8005226:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
 800522a:	432a      	orrs	r2, r5
 800522c:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8005230:	f046 0601 	orr.w	r6, r6, #1
 8005234:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8005238:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
 800523c:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800523e:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 8005242:	3301      	adds	r3, #1
 8005244:	300c      	adds	r0, #12
 8005246:	e7a9      	b.n	800519c <mpu_configure_regions+0x10>
 8005248:	e000ed00 	.word	0xe000ed00
 800524c:	0801250b 	.word	0x0801250b
 8005250:	0800d1b8 	.word	0x0800d1b8
 8005254:	0801252e 	.word	0x0801252e

08005258 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8005258:	4b04      	ldr	r3, [pc, #16]	; (800526c <arm_core_mpu_enable+0x14>)
 800525a:	2205      	movs	r2, #5
 800525c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8005260:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005264:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	e000ed00 	.word	0xe000ed00

08005270 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005270:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8005274:	4b02      	ldr	r3, [pc, #8]	; (8005280 <arm_core_mpu_disable+0x10>)
 8005276:	2200      	movs	r2, #0
 8005278:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000ed00 	.word	0xe000ed00

08005284 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8005284:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8005286:	4d0d      	ldr	r5, [pc, #52]	; (80052bc <arm_core_mpu_configure_static_mpu_regions+0x38>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8005288:	2301      	movs	r3, #1
 800528a:	782a      	ldrb	r2, [r5, #0]
 800528c:	460c      	mov	r4, r1
 800528e:	f7ff ff7d 	bl	800518c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8005292:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 8005294:	3016      	adds	r0, #22
 8005296:	d10f      	bne.n	80052b8 <arm_core_mpu_configure_static_mpu_regions+0x34>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
 8005298:	4a09      	ldr	r2, [pc, #36]	; (80052c0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
 800529a:	490a      	ldr	r1, [pc, #40]	; (80052c4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
 800529c:	480a      	ldr	r0, [pc, #40]	; (80052c8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
 800529e:	f44f 738b 	mov.w	r3, #278	; 0x116
 80052a2:	f006 f8b6 	bl	800b412 <assert_print>
 80052a6:	4809      	ldr	r0, [pc, #36]	; (80052cc <arm_core_mpu_configure_static_mpu_regions+0x48>)
 80052a8:	4621      	mov	r1, r4
 80052aa:	f006 f8b2 	bl	800b412 <assert_print>
 80052ae:	4804      	ldr	r0, [pc, #16]	; (80052c0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
 80052b0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80052b4:	f006 f8a6 	bl	800b404 <assert_post_action>
			regions_num);
	}
}
 80052b8:	bd38      	pop	{r3, r4, r5, pc}
 80052ba:	bf00      	nop
 80052bc:	20000c38 	.word	0x20000c38
 80052c0:	08012554 	.word	0x08012554
 80052c4:	0801352e 	.word	0x0801352e
 80052c8:	080118c5 	.word	0x080118c5
 80052cc:	0801258b 	.word	0x0801258b

080052d0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 80052d0:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80052d2:	4a12      	ldr	r2, [pc, #72]	; (800531c <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
 80052d4:	2300      	movs	r3, #0
 80052d6:	7812      	ldrb	r2, [r2, #0]
 80052d8:	460c      	mov	r4, r1
 80052da:	f7ff ff57 	bl	800518c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80052de:	f110 0f16 	cmn.w	r0, #22
 80052e2:	d004      	beq.n	80052ee <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80052e4:	4b0e      	ldr	r3, [pc, #56]	; (8005320 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
 80052e6:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80052e8:	2807      	cmp	r0, #7
 80052ea:	dd10      	ble.n	800530e <arm_core_mpu_configure_dynamic_mpu_regions+0x3e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 80052ec:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
 80052ee:	4a0d      	ldr	r2, [pc, #52]	; (8005324 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
 80052f0:	490d      	ldr	r1, [pc, #52]	; (8005328 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
 80052f2:	480e      	ldr	r0, [pc, #56]	; (800532c <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
 80052f4:	f240 1335 	movw	r3, #309	; 0x135
 80052f8:	f006 f88b 	bl	800b412 <assert_print>
 80052fc:	480c      	ldr	r0, [pc, #48]	; (8005330 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
 80052fe:	4621      	mov	r1, r4
 8005300:	f006 f887 	bl	800b412 <assert_print>
 8005304:	4807      	ldr	r0, [pc, #28]	; (8005324 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
 8005306:	f240 1135 	movw	r1, #309	; 0x135
 800530a:	f006 f87b 	bl	800b404 <assert_post_action>
  MPU->RNR = rnr;
 800530e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
 8005312:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005316:	3001      	adds	r0, #1
 8005318:	e7e6      	b.n	80052e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
 800531a:	bf00      	nop
 800531c:	20000c38 	.word	0x20000c38
 8005320:	e000ed00 	.word	0xe000ed00
 8005324:	08012554 	.word	0x08012554
 8005328:	0801352e 	.word	0x0801352e
 800532c:	080118c5 	.word	0x080118c5
 8005330:	080125b7 	.word	0x080125b7

08005334 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8005334:	4925      	ldr	r1, [pc, #148]	; (80053cc <z_arm_mpu_init+0x98>)
{
 8005336:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8005338:	680c      	ldr	r4, [r1, #0]
 800533a:	2c08      	cmp	r4, #8
 800533c:	d910      	bls.n	8005360 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
 800533e:	4a24      	ldr	r2, [pc, #144]	; (80053d0 <z_arm_mpu_init+0x9c>)
 8005340:	4924      	ldr	r1, [pc, #144]	; (80053d4 <z_arm_mpu_init+0xa0>)
 8005342:	4825      	ldr	r0, [pc, #148]	; (80053d8 <z_arm_mpu_init+0xa4>)
 8005344:	f240 134d 	movw	r3, #333	; 0x14d
 8005348:	f006 f863 	bl	800b412 <assert_print>
 800534c:	4621      	mov	r1, r4
 800534e:	4823      	ldr	r0, [pc, #140]	; (80053dc <z_arm_mpu_init+0xa8>)
 8005350:	2208      	movs	r2, #8
 8005352:	f006 f85e 	bl	800b412 <assert_print>
 8005356:	f240 114d 	movw	r1, #333	; 0x14d

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
 800535a:	481d      	ldr	r0, [pc, #116]	; (80053d0 <z_arm_mpu_init+0x9c>)
 800535c:	f006 f852 	bl	800b404 <assert_post_action>
	arm_core_mpu_disable();
 8005360:	f7ff ff86 	bl	8005270 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8005364:	6848      	ldr	r0, [r1, #4]
 8005366:	491e      	ldr	r1, [pc, #120]	; (80053e0 <z_arm_mpu_init+0xac>)
 8005368:	2200      	movs	r2, #0
 800536a:	4294      	cmp	r4, r2
 800536c:	f100 000c 	add.w	r0, r0, #12
 8005370:	d116      	bne.n	80053a0 <z_arm_mpu_init+0x6c>
	static_regions_num = mpu_config.num_regions;
 8005372:	4b1c      	ldr	r3, [pc, #112]	; (80053e4 <z_arm_mpu_init+0xb0>)
 8005374:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
 8005376:	f7ff ff6f 	bl	8005258 <arm_core_mpu_enable>
	__ASSERT(
 800537a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800537e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005382:	2b08      	cmp	r3, #8
 8005384:	d01f      	beq.n	80053c6 <z_arm_mpu_init+0x92>
 8005386:	4918      	ldr	r1, [pc, #96]	; (80053e8 <z_arm_mpu_init+0xb4>)
 8005388:	4a11      	ldr	r2, [pc, #68]	; (80053d0 <z_arm_mpu_init+0x9c>)
 800538a:	4813      	ldr	r0, [pc, #76]	; (80053d8 <z_arm_mpu_init+0xa4>)
 800538c:	f240 13ad 	movw	r3, #429	; 0x1ad
 8005390:	f006 f83f 	bl	800b412 <assert_print>
 8005394:	4815      	ldr	r0, [pc, #84]	; (80053ec <z_arm_mpu_init+0xb8>)
 8005396:	f006 f83c 	bl	800b412 <assert_print>
 800539a:	f240 11ad 	movw	r1, #429	; 0x1ad
 800539e:	e7dc      	b.n	800535a <z_arm_mpu_init+0x26>
 80053a0:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80053a4:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 80053a8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80053b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80053b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80053c2:	3201      	adds	r2, #1
 80053c4:	e7d1      	b.n	800536a <z_arm_mpu_init+0x36>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
 80053c6:	2000      	movs	r0, #0
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	bf00      	nop
 80053cc:	0800d438 	.word	0x0800d438
 80053d0:	08012554 	.word	0x08012554
 80053d4:	0801352e 	.word	0x0801352e
 80053d8:	080118c5 	.word	0x080118c5
 80053dc:	080125e4 	.word	0x080125e4
 80053e0:	e000ed00 	.word	0xe000ed00
 80053e4:	20000c38 	.word	0x20000c38
 80053e8:	08012618 	.word	0x08012618
 80053ec:	08012668 	.word	0x08012668

080053f0 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
 80053f0:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
 80053f2:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <malloc_prepare+0x30>)
 80053f4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80053f8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80053fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005400:	d20c      	bcs.n	800541c <malloc_prepare+0x2c>
 8005402:	4908      	ldr	r1, [pc, #32]	; (8005424 <malloc_prepare+0x34>)
 8005404:	4a08      	ldr	r2, [pc, #32]	; (8005428 <malloc_prepare+0x38>)
 8005406:	4809      	ldr	r0, [pc, #36]	; (800542c <malloc_prepare+0x3c>)
 8005408:	2381      	movs	r3, #129	; 0x81
 800540a:	f006 f802 	bl	800b412 <assert_print>
 800540e:	4808      	ldr	r0, [pc, #32]	; (8005430 <malloc_prepare+0x40>)
 8005410:	f005 ffff 	bl	800b412 <assert_print>
 8005414:	4804      	ldr	r0, [pc, #16]	; (8005428 <malloc_prepare+0x38>)
 8005416:	2181      	movs	r1, #129	; 0x81
 8005418:	f005 fff4 	bl	800b404 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
 800541c:	2000      	movs	r0, #0
 800541e:	bd08      	pop	{r3, pc}
 8005420:	200066c0 	.word	0x200066c0
 8005424:	080126b9 	.word	0x080126b9
 8005428:	08012689 	.word	0x08012689
 800542c:	080118c5 	.word	0x080118c5
 8005430:	080126ff 	.word	0x080126ff

08005434 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8005434:	4b01      	ldr	r3, [pc, #4]	; (800543c <__stdout_hook_install+0x8>)
 8005436:	6018      	str	r0, [r3, #0]
}
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	200000ac 	.word	0x200000ac

08005440 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
 8005442:	4f08      	ldr	r7, [pc, #32]	; (8005464 <z_impl_zephyr_read_stdin+0x24>)
{
 8005444:	4606      	mov	r6, r0
 8005446:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
 8005448:	2400      	movs	r4, #0
 800544a:	42ac      	cmp	r4, r5
 800544c:	da08      	bge.n	8005460 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8005452:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 8005454:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
 8005456:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 800545a:	d001      	beq.n	8005460 <z_impl_zephyr_read_stdin+0x20>
 800545c:	280d      	cmp	r0, #13
 800545e:	d1f4      	bne.n	800544a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
 8005460:	4620      	mov	r0, r4
 8005462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005464:	200000a8 	.word	0x200000a8

08005468 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8005468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546a:	4f0a      	ldr	r7, [pc, #40]	; (8005494 <z_impl_zephyr_write_stdout+0x2c>)
 800546c:	460d      	mov	r5, r1
 800546e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8005470:	f1c0 0401 	rsb	r4, r0, #1
 8005474:	19a3      	adds	r3, r4, r6
 8005476:	429d      	cmp	r5, r3
 8005478:	dc01      	bgt.n	800547e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 800547a:	4628      	mov	r0, r5
 800547c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 800547e:	7873      	ldrb	r3, [r6, #1]
 8005480:	2b0a      	cmp	r3, #10
 8005482:	d102      	bne.n	800548a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	200d      	movs	r0, #13
 8005488:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8005490:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8005492:	e7ef      	b.n	8005474 <z_impl_zephyr_write_stdout+0xc>
 8005494:	200000ac 	.word	0x200000ac

08005498 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8005498:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800549a:	4802      	ldr	r0, [pc, #8]	; (80054a4 <_exit+0xc>)
 800549c:	2105      	movs	r1, #5
 800549e:	f7ff ffe3 	bl	8005468 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
 80054a2:	e7fe      	b.n	80054a2 <_exit+0xa>
 80054a4:	08012786 	.word	0x08012786

080054a8 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 80054a8:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 80054aa:	4c07      	ldr	r4, [pc, #28]	; (80054c8 <_sbrk+0x20>)
 80054ac:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80054ae:	18c2      	adds	r2, r0, r3
 80054b0:	4806      	ldr	r0, [pc, #24]	; (80054cc <_sbrk+0x24>)
 80054b2:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
 80054b6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80054ba:	428a      	cmp	r2, r1
		heap_sz += count;
 80054bc:	bf3a      	itte	cc
 80054be:	6022      	strcc	r2, [r4, #0]
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80054c0:	18c0      	addcc	r0, r0, r3

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 80054c2:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
 80054c6:	bd10      	pop	{r4, pc}
 80054c8:	20000aa8 	.word	0x20000aa8
 80054cc:	200066c0 	.word	0x200066c0

080054d0 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80054d0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
 80054d2:	4604      	mov	r4, r0
 80054d4:	b958      	cbnz	r0, 80054ee <__retarget_lock_init_recursive+0x1e>
 80054d6:	4911      	ldr	r1, [pc, #68]	; (800551c <__retarget_lock_init_recursive+0x4c>)
 80054d8:	4a11      	ldr	r2, [pc, #68]	; (8005520 <__retarget_lock_init_recursive+0x50>)
 80054da:	4812      	ldr	r0, [pc, #72]	; (8005524 <__retarget_lock_init_recursive+0x54>)
 80054dc:	f240 1377 	movw	r3, #375	; 0x177
 80054e0:	f005 ff97 	bl	800b412 <assert_print>
 80054e4:	f240 1177 	movw	r1, #375	; 0x177
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
 80054e8:	480d      	ldr	r0, [pc, #52]	; (8005520 <__retarget_lock_init_recursive+0x50>)
 80054ea:	f005 ff8b 	bl	800b404 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
 80054ee:	2014      	movs	r0, #20
 80054f0:	f004 f9bc 	bl	800986c <malloc>
 80054f4:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
 80054f6:	b960      	cbnz	r0, 8005512 <__retarget_lock_init_recursive+0x42>
 80054f8:	490b      	ldr	r1, [pc, #44]	; (8005528 <__retarget_lock_init_recursive+0x58>)
 80054fa:	4a09      	ldr	r2, [pc, #36]	; (8005520 <__retarget_lock_init_recursive+0x50>)
 80054fc:	4809      	ldr	r0, [pc, #36]	; (8005524 <__retarget_lock_init_recursive+0x54>)
 80054fe:	f240 137f 	movw	r3, #383	; 0x17f
 8005502:	f005 ff86 	bl	800b412 <assert_print>
 8005506:	4809      	ldr	r0, [pc, #36]	; (800552c <__retarget_lock_init_recursive+0x5c>)
 8005508:	f005 ff83 	bl	800b412 <assert_print>
 800550c:	f240 117f 	movw	r1, #383	; 0x17f
 8005510:	e7ea      	b.n	80054e8 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
 8005512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
 8005516:	f006 be5b 	b.w	800c1d0 <z_impl_k_mutex_init>
 800551a:	bf00      	nop
 800551c:	0801278d 	.word	0x0801278d
 8005520:	08012689 	.word	0x08012689
 8005524:	080118c5 	.word	0x080118c5
 8005528:	0801278c 	.word	0x0801278c
 800552c:	080127c8 	.word	0x080127c8

08005530 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8005530:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
 8005532:	b958      	cbnz	r0, 800554c <__retarget_lock_acquire_recursive+0x1c>
 8005534:	4909      	ldr	r1, [pc, #36]	; (800555c <__retarget_lock_acquire_recursive+0x2c>)
 8005536:	480a      	ldr	r0, [pc, #40]	; (8005560 <__retarget_lock_acquire_recursive+0x30>)
 8005538:	4a0a      	ldr	r2, [pc, #40]	; (8005564 <__retarget_lock_acquire_recursive+0x34>)
 800553a:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800553e:	f005 ff68 	bl	800b412 <assert_print>
 8005542:	4808      	ldr	r0, [pc, #32]	; (8005564 <__retarget_lock_acquire_recursive+0x34>)
 8005544:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8005548:	f005 ff5c 	bl	800b404 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
 800554c:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 8005550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005554:	f04f 33ff 	mov.w	r3, #4294967295
 8005558:	f002 b94c 	b.w	80077f4 <z_impl_k_mutex_lock>
 800555c:	0801278d 	.word	0x0801278d
 8005560:	080118c5 	.word	0x080118c5
 8005564:	08012689 	.word	0x08012689

08005568 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8005568:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
 800556a:	b958      	cbnz	r0, 8005584 <__retarget_lock_release_recursive+0x1c>
 800556c:	4907      	ldr	r1, [pc, #28]	; (800558c <__retarget_lock_release_recursive+0x24>)
 800556e:	4808      	ldr	r0, [pc, #32]	; (8005590 <__retarget_lock_release_recursive+0x28>)
 8005570:	4a08      	ldr	r2, [pc, #32]	; (8005594 <__retarget_lock_release_recursive+0x2c>)
 8005572:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005576:	f005 ff4c 	bl	800b412 <assert_print>
 800557a:	4806      	ldr	r0, [pc, #24]	; (8005594 <__retarget_lock_release_recursive+0x2c>)
 800557c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005580:	f005 ff40 	bl	800b404 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
 8005584:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 8005588:	f002 ba04 	b.w	8007994 <z_impl_k_mutex_unlock>
 800558c:	0801278d 	.word	0x0801278d
 8005590:	080118c5 	.word	0x080118c5
 8005594:	08012689 	.word	0x08012689

08005598 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 8005598:	b508      	push	{r3, lr}
 800559a:	211d      	movs	r1, #29
 800559c:	4804      	ldr	r0, [pc, #16]	; (80055b0 <__chk_fail+0x18>)
 800559e:	f7ff ff63 	bl	8005468 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
 80055a2:	4040      	eors	r0, r0
 80055a4:	f380 8811 	msr	BASEPRI, r0
 80055a8:	f04f 0003 	mov.w	r0, #3
 80055ac:	df02      	svc	2
	CODE_UNREACHABLE;
 80055ae:	bf00      	nop
 80055b0:	080127eb 	.word	0x080127eb

080055b4 <smf_set_state>:
		init_state->entry(ctx);
	}
}

void smf_set_state(struct smf_ctx *const ctx, const struct smf_state *target)
{
 80055b4:	b5b0      	push	{r4, r5, r7, lr}
	/*
	 * It does not make sense to call set_state in an exit phase of a state
	 * since we are already in a transition; we would always ignore the
	 * intended state to transition into.
	 */
	if (internal->exit) {
 80055b6:	7b03      	ldrb	r3, [r0, #12]
 80055b8:	075a      	lsls	r2, r3, #29
{
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	4604      	mov	r4, r0
 80055be:	460d      	mov	r5, r1
	if (internal->exit) {
 80055c0:	d514      	bpl.n	80055ec <smf_set_state+0x38>
		LOG_WRN("Calling %s from exit action", __func__);
 80055c2:	466c      	mov	r4, sp
 80055c4:	b088      	sub	sp, #32
 80055c6:	466a      	mov	r2, sp
 80055c8:	4b14      	ldr	r3, [pc, #80]	; (800561c <smf_set_state+0x68>)
 80055ca:	6153      	str	r3, [r2, #20]
 80055cc:	4b14      	ldr	r3, [pc, #80]	; (8005620 <smf_set_state+0x6c>)
 80055ce:	6193      	str	r3, [r2, #24]
 80055d0:	2302      	movs	r3, #2
 80055d2:	7713      	strb	r3, [r2, #28]
 80055d4:	4b13      	ldr	r3, [pc, #76]	; (8005624 <smf_set_state+0x70>)
 80055d6:	f842 3f10 	str.w	r3, [r2, #16]!
 80055da:	4813      	ldr	r0, [pc, #76]	; (8005628 <smf_set_state+0x74>)
 80055dc:	2300      	movs	r3, #0
 80055de:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
 80055e2:	f7fe fc33 	bl	8003e4c <z_impl_z_log_msg_static_create>
 80055e6:	46a5      	mov	sp, r4
		/*
		 * If terminate was set, it will be handled in the
		 * smf_run_state function
		 */
	}
}
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bdb0      	pop	{r4, r5, r7, pc}
	internal->exit = true;
 80055ec:	f043 0304 	orr.w	r3, r3, #4
 80055f0:	7303      	strb	r3, [r0, #12]
	if (ctx->current->exit) {
 80055f2:	6803      	ldr	r3, [r0, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	b963      	cbnz	r3, 8005612 <smf_set_state+0x5e>
	internal->exit = false;
 80055f8:	7b23      	ldrb	r3, [r4, #12]
 80055fa:	f36f 0382 	bfc	r3, #2, #1
 80055fe:	7323      	strb	r3, [r4, #12]
	ctx->previous = ctx->current;
 8005600:	6823      	ldr	r3, [r4, #0]
	ctx->current = target;
 8005602:	e9c4 5300 	strd	r5, r3, [r4]
	if (ctx->current->entry) {
 8005606:	682b      	ldr	r3, [r5, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0ed      	beq.n	80055e8 <smf_set_state+0x34>
		ctx->current->entry(ctx);
 800560c:	4620      	mov	r0, r4
 800560e:	4798      	blx	r3
 8005610:	e7ea      	b.n	80055e8 <smf_set_state+0x34>
		ctx->current->exit(ctx);
 8005612:	4798      	blx	r3
		if (internal->terminate) {
 8005614:	7b23      	ldrb	r3, [r4, #12]
 8005616:	079b      	lsls	r3, r3, #30
 8005618:	d5ee      	bpl.n	80055f8 <smf_set_state+0x44>
 800561a:	e7e5      	b.n	80055e8 <smf_set_state+0x34>
 800561c:	08012809 	.word	0x08012809
 8005620:	08012825 	.word	0x08012825
 8005624:	01000003 	.word	0x01000003
 8005628:	0800d1c8 	.word	0x0800d1c8

0800562c <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 800562c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8005630:	4f0d      	ldr	r7, [pc, #52]	; (8005668 <__stm32_exti_isr.isra.0+0x3c>)
 8005632:	4604      	mov	r4, r0
 8005634:	460e      	mov	r6, r1
 8005636:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8005638:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800563c:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8005640:	42b4      	cmp	r4, r6
 8005642:	db01      	blt.n	8005648 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8005644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005648:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800564a:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 800564e:	ea33 0202 	bics.w	r2, r3, r2
 8005652:	d107      	bne.n	8005664 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8005654:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8005656:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 800565a:	b11b      	cbz	r3, 8005664 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 800565c:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8005660:	4620      	mov	r0, r4
 8005662:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8005664:	3401      	adds	r4, #1
 8005666:	e7eb      	b.n	8005640 <__stm32_exti_isr.isra.0+0x14>
 8005668:	40010400 	.word	0x40010400

0800566c <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 800566c:	4a04      	ldr	r2, [pc, #16]	; (8005680 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 800566e:	2301      	movs	r3, #1
 8005670:	6811      	ldr	r1, [r2, #0]
 8005672:	4083      	lsls	r3, r0
 8005674:	430b      	orrs	r3, r1
 8005676:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8005678:	4b02      	ldr	r3, [pc, #8]	; (8005684 <stm32_exti_enable+0x18>)
 800567a:	5618      	ldrsb	r0, [r3, r0]
 800567c:	f7ff b8c6 	b.w	800480c <arch_irq_enable>
 8005680:	40010400 	.word	0x40010400
 8005684:	08012864 	.word	0x08012864

08005688 <stm32_exti_disable>:
	if (line < 32) {
 8005688:	281f      	cmp	r0, #31
 800568a:	dc06      	bgt.n	800569a <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800568c:	4903      	ldr	r1, [pc, #12]	; (800569c <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 800568e:	2201      	movs	r2, #1
 8005690:	680b      	ldr	r3, [r1, #0]
 8005692:	4082      	lsls	r2, r0
 8005694:	ea23 0302 	bic.w	r3, r3, r2
 8005698:	600b      	str	r3, [r1, #0]
}
 800569a:	4770      	bx	lr
 800569c:	40010400 	.word	0x40010400

080056a0 <stm32_exti_trigger>:
	switch (trigger) {
 80056a0:	2903      	cmp	r1, #3
 80056a2:	d82a      	bhi.n	80056fa <stm32_exti_trigger+0x5a>
 80056a4:	e8df f001 	tbb	[pc, r1]
 80056a8:	1f140e02 	.word	0x1f140e02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80056ac:	4b13      	ldr	r3, [pc, #76]	; (80056fc <stm32_exti_trigger+0x5c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 80056ae:	2201      	movs	r2, #1
 80056b0:	6899      	ldr	r1, [r3, #8]
 80056b2:	4082      	lsls	r2, r0
 80056b4:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 80056b8:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80056ba:	68d9      	ldr	r1, [r3, #12]
 80056bc:	ea21 0202 	bic.w	r2, r1, r2
 80056c0:	60da      	str	r2, [r3, #12]
}
 80056c2:	4770      	bx	lr
  SET_BIT(EXTI->RTSR, ExtiLine);
 80056c4:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80056c6:	2201      	movs	r2, #1
 80056c8:	6899      	ldr	r1, [r3, #8]
 80056ca:	4082      	lsls	r2, r0
 80056cc:	4311      	orrs	r1, r2
 80056ce:	e7f3      	b.n	80056b8 <stm32_exti_trigger+0x18>
  SET_BIT(EXTI->FTSR, ExtiLine);
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80056d2:	2201      	movs	r2, #1
 80056d4:	68d9      	ldr	r1, [r3, #12]
 80056d6:	4082      	lsls	r2, r0
 80056d8:	4311      	orrs	r1, r2
 80056da:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80056dc:	6899      	ldr	r1, [r3, #8]
 80056de:	ea21 0202 	bic.w	r2, r1, r2
 80056e2:	609a      	str	r2, [r3, #8]
}
 80056e4:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80056e6:	2301      	movs	r3, #1
 80056e8:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80056ec:	4b03      	ldr	r3, [pc, #12]	; (80056fc <stm32_exti_trigger+0x5c>)
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	4302      	orrs	r2, r0
 80056f2:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	4310      	orrs	r0, r2
 80056f8:	60d8      	str	r0, [r3, #12]
}
 80056fa:	4770      	bx	lr
 80056fc:	40010400 	.word	0x40010400

08005700 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 8005700:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8005702:	4b07      	ldr	r3, [pc, #28]	; (8005720 <stm32_exti_set_callback+0x20>)
{
 8005704:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 8005706:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800570a:	b928      	cbnz	r0, 8005718 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 800570c:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8005710:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005714:	605a      	str	r2, [r3, #4]

	return 0;
}
 8005716:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8005718:	f06f 000f 	mvn.w	r0, #15
 800571c:	e7fb      	b.n	8005716 <stm32_exti_set_callback+0x16>
 800571e:	bf00      	nop
 8005720:	20000aac 	.word	0x20000aac

08005724 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8005724:	4b03      	ldr	r3, [pc, #12]	; (8005734 <stm32_exti_unset_callback+0x10>)
 8005726:	2200      	movs	r2, #0
 8005728:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 800572c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8005730:	605a      	str	r2, [r3, #4]
}
 8005732:	4770      	bx	lr
 8005734:	20000aac 	.word	0x20000aac

08005738 <adc_stm32_channel_setup>:
#endif
}

static int adc_stm32_channel_setup(const struct device *dev,
				   const struct adc_channel_cfg *channel_cfg)
{
 8005738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800573a:	b087      	sub	sp, #28
	 defined(CONFIG_SOC_SERIES_STM32L0X)
	struct adc_stm32_data *data = dev->data;
#endif
	int acq_time_index;

	if (channel_cfg->channel_id >= STM32_CHANNEL_COUNT) {
 800573c:	790e      	ldrb	r6, [r1, #4]
 800573e:	f006 041f 	and.w	r4, r6, #31
 8005742:	2c13      	cmp	r4, #19
{
 8005744:	af00      	add	r7, sp, #0
	if (channel_cfg->channel_id >= STM32_CHANNEL_COUNT) {
 8005746:	d913      	bls.n	8005770 <adc_stm32_channel_setup+0x38>
		LOG_ERR("Channel %d is not valid", channel_cfg->channel_id);
 8005748:	466d      	mov	r5, sp
 800574a:	b088      	sub	sp, #32
 800574c:	466a      	mov	r2, sp
 800574e:	4b40      	ldr	r3, [pc, #256]	; (8005850 <adc_stm32_channel_setup+0x118>)
 8005750:	4840      	ldr	r0, [pc, #256]	; (8005854 <adc_stm32_channel_setup+0x11c>)
 8005752:	e9c2 3405 	strd	r3, r4, [r2, #20]
 8005756:	2303      	movs	r3, #3
 8005758:	f842 3f10 	str.w	r3, [r2, #16]!
 800575c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8005760:	f006 f857 	bl	800b812 <z_log_msg_static_create.constprop.0>
 8005764:	46ad      	mov	sp, r5
		return -EINVAL;
 8005766:	f06f 0015 	mvn.w	r0, #21
				  acq_time_index);

	LOG_DBG("Channel setup succeeded!");

	return 0;
}
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				channel_cfg->acquisition_time);
 8005770:	884b      	ldrh	r3, [r1, #2]
	if (acq_time == ADC_ACQ_TIME_MAX) {
 8005772:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005776:	4293      	cmp	r3, r2
 8005778:	d018      	beq.n	80057ac <adc_stm32_channel_setup+0x74>
 800577a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8005858 <adc_stm32_channel_setup+0x120>
	for (int i = 0; i < 8; i++) {
 800577e:	2200      	movs	r2, #0
		if (acq_time == ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS,
 8005780:	f83c 5b02 	ldrh.w	r5, [ip], #2
 8005784:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 8005788:	42ab      	cmp	r3, r5
 800578a:	d010      	beq.n	80057ae <adc_stm32_channel_setup+0x76>
	for (int i = 0; i < 8; i++) {
 800578c:	3201      	adds	r2, #1
 800578e:	2a08      	cmp	r2, #8
 8005790:	d1f6      	bne.n	8005780 <adc_stm32_channel_setup+0x48>
	if (acq_time == ADC_ACQ_TIME_DEFAULT) {
 8005792:	b183      	cbz	r3, 80057b6 <adc_stm32_channel_setup+0x7e>
	LOG_ERR("Conversion time not supported.");
 8005794:	4b31      	ldr	r3, [pc, #196]	; (800585c <adc_stm32_channel_setup+0x124>)
		LOG_ERR("Differential channels are not supported");
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	2302      	movs	r3, #2
 800579a:	482e      	ldr	r0, [pc, #184]	; (8005854 <adc_stm32_channel_setup+0x11c>)
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	f107 0210 	add.w	r2, r7, #16
 80057a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80057a6:	f006 f834 	bl	800b812 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
 80057aa:	e7dc      	b.n	8005766 <adc_stm32_channel_setup+0x2e>
		return ARRAY_SIZE(acq_time_tbl) - 1;
 80057ac:	2207      	movs	r2, #7
	if (channel_cfg->differential) {
 80057ae:	06b3      	lsls	r3, r6, #26
 80057b0:	d503      	bpl.n	80057ba <adc_stm32_channel_setup+0x82>
		LOG_ERR("Differential channels are not supported");
 80057b2:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <adc_stm32_channel_setup+0x128>)
 80057b4:	e7ef      	b.n	8005796 <adc_stm32_channel_setup+0x5e>
		return 0;
 80057b6:	461a      	mov	r2, r3
 80057b8:	e7f9      	b.n	80057ae <adc_stm32_channel_setup+0x76>
	if (channel_cfg->gain != ADC_GAIN_1) {
 80057ba:	780b      	ldrb	r3, [r1, #0]
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d001      	beq.n	80057c4 <adc_stm32_channel_setup+0x8c>
		LOG_ERR("Invalid channel gain");
 80057c0:	4b28      	ldr	r3, [pc, #160]	; (8005864 <adc_stm32_channel_setup+0x12c>)
 80057c2:	e7e8      	b.n	8005796 <adc_stm32_channel_setup+0x5e>
	if (channel_cfg->reference != ADC_REF_INTERNAL) {
 80057c4:	784b      	ldrb	r3, [r1, #1]
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	f04f 0302 	mov.w	r3, #2
 80057cc:	d002      	beq.n	80057d4 <adc_stm32_channel_setup+0x9c>
		LOG_ERR("Invalid channel reference");
 80057ce:	4a26      	ldr	r2, [pc, #152]	; (8005868 <adc_stm32_channel_setup+0x130>)
 80057d0:	617a      	str	r2, [r7, #20]
 80057d2:	e7e2      	b.n	800579a <adc_stm32_channel_setup+0x62>
	ADC_TypeDef *adc = config->base;
 80057d4:	6841      	ldr	r1, [r0, #4]
	LL_ADC_SetChannelSamplingTime(adc,
 80057d6:	2c09      	cmp	r4, #9
	ADC_TypeDef *adc = config->base;
 80057d8:	6808      	ldr	r0, [r1, #0]
		__LL_ADC_DECIMAL_NB_TO_CHANNEL(id),
 80057da:	fa03 f304 	lsl.w	r3, r3, r4
 80057de:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80057e2:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
 80057e6:	bf86      	itte	hi
 80057e8:	391e      	subhi	r1, #30
 80057ea:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
	LL_ADC_SetChannelSamplingTime(adc,
 80057ee:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
		table_samp_time[acq_time_index]);
 80057f2:	491e      	ldr	r1, [pc, #120]	; (800586c <adc_stm32_channel_setup+0x134>)
	LL_ADC_SetChannelSamplingTime(adc,
 80057f4:	bf88      	it	hi
 80057f6:	f043 7300 	orrhi.w	r3, r3, #33554432	; 0x2000000
		table_samp_time[acq_time_index]);
 80057fa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80057fe:	f003 7400 	and.w	r4, r3, #33554432	; 0x2000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005806:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800580a:	fab2 f282 	clz	r2, r2
 800580e:	3014      	adds	r0, #20
 8005810:	40d4      	lsrs	r4, r2

  MODIFY_REG(*preg,
 8005812:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005816:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800581a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800581e:	fab2 f282 	clz	r2, r2
 8005822:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8005826:	fa23 f202 	lsr.w	r2, r3, r2
 800582a:	2607      	movs	r6, #7
 800582c:	fa06 f202 	lsl.w	r2, r6, r2
 8005830:	ea25 0502 	bic.w	r5, r5, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005834:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8005838:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800583c:	fab2 f282 	clz	r2, r2
 8005840:	40d3      	lsrs	r3, r2
 8005842:	fa01 f303 	lsl.w	r3, r1, r3
 8005846:	432b      	orrs	r3, r5
 8005848:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
	return 0;
 800584c:	2000      	movs	r0, #0
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800584e:	e78c      	b.n	800576a <adc_stm32_channel_setup+0x32>
 8005850:	08012874 	.word	0x08012874
 8005854:	0800d180 	.word	0x0800d180
 8005858:	0800d734 	.word	0x0800d734
 800585c:	0801288c 	.word	0x0801288c
 8005860:	080128ab 	.word	0x080128ab
 8005864:	080128d3 	.word	0x080128d3
 8005868:	080128e8 	.word	0x080128e8
 800586c:	0800d4ac 	.word	0x0800d4ac

08005870 <adc_stm32_unset_common_path.isra.0>:
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 8005870:	6803      	ldr	r3, [r0, #0]
	const uint32_t currentPath = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(adc));
 8005872:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
	PathInternal = ~PathInternal & currentPath;
 8005876:	ea6f 0101 	mvn.w	r1, r1
	const uint32_t currentPath = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(adc));
 800587a:	d00e      	beq.n	800589a <adc_stm32_unset_common_path.isra.0+0x2a>
 800587c:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <adc_stm32_unset_common_path.isra.0+0x30>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00b      	beq.n	800589a <adc_stm32_unset_common_path.isra.0+0x2a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005882:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8005886:	6893      	ldr	r3, [r2, #8]
	PathInternal = ~PathInternal & currentPath;
 8005888:	400b      	ands	r3, r1
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800588a:	6891      	ldr	r1, [r2, #8]
 800588c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8005890:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005894:	430b      	orrs	r3, r1
 8005896:	6093      	str	r3, [r2, #8]
}
 8005898:	4770      	bx	lr
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800589a:	4a02      	ldr	r2, [pc, #8]	; (80058a4 <adc_stm32_unset_common_path.isra.0+0x34>)
 800589c:	e7f3      	b.n	8005886 <adc_stm32_unset_common_path.isra.0+0x16>
 800589e:	bf00      	nop
 80058a0:	50000100 	.word	0x50000100
 80058a4:	50000300 	.word	0x50000300

080058a8 <adc_stm32_set_common_path.isra.0>:
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 80058a8:	6803      	ldr	r3, [r0, #0]
	PathInternal |= LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(adc));
 80058aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058ae:	d00d      	beq.n	80058cc <adc_stm32_set_common_path.isra.0+0x24>
 80058b0:	4a07      	ldr	r2, [pc, #28]	; (80058d0 <adc_stm32_set_common_path.isra.0+0x28>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00a      	beq.n	80058cc <adc_stm32_set_common_path.isra.0+0x24>
 80058b6:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <adc_stm32_set_common_path.isra.0+0x2c>)
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	f002 72e0 	and.w	r2, r2, #29360128	; 0x1c00000
 80058be:	4311      	orrs	r1, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80058c6:	430a      	orrs	r2, r1
 80058c8:	609a      	str	r2, [r3, #8]
}
 80058ca:	4770      	bx	lr
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80058cc:	4b02      	ldr	r3, [pc, #8]	; (80058d8 <adc_stm32_set_common_path.isra.0+0x30>)
 80058ce:	e7f3      	b.n	80058b8 <adc_stm32_set_common_path.isra.0+0x10>
 80058d0:	50000100 	.word	0x50000100
 80058d4:	50000700 	.word	0x50000700
 80058d8:	50000300 	.word	0x50000300

080058dc <adc_stm32_read>:
{
 80058dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e0:	b08b      	sub	sp, #44	; 0x2c

static inline void adc_context_lock(struct adc_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
	k_sem_take(&ctx->lock, K_FOREVER);
 80058e2:	6903      	ldr	r3, [r0, #16]
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	3340      	adds	r3, #64	; 0x40
 80058e8:	4606      	mov	r6, r0
 80058ea:	4688      	mov	r8, r1
 80058ec:	607b      	str	r3, [r7, #4]
	return z_impl_k_sem_take(sem, timeout);
 80058ee:	f04f 33ff 	mov.w	r3, #4294967295
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f04f 32ff 	mov.w	r2, #4294967295
 80058f8:	f002 f918 	bl	8007b2c <z_impl_k_sem_take>
	switch (sequence->resolution) {
 80058fc:	f898 3010 	ldrb.w	r3, [r8, #16]
	const struct adc_stm32_cfg *config = dev->config;
 8005900:	f8d6 9004 	ldr.w	r9, [r6, #4]
	struct adc_stm32_data *data = dev->data;
 8005904:	6934      	ldr	r4, [r6, #16]
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 8005906:	f8d9 b000 	ldr.w	fp, [r9]
	switch (sequence->resolution) {
 800590a:	3b06      	subs	r3, #6
 800590c:	2b06      	cmp	r3, #6
 800590e:	d826      	bhi.n	800595e <adc_stm32_read+0x82>
 8005910:	e8df f003 	tbb	[pc, r3]
 8005914:	253d253a 	.word	0x253d253a
 8005918:	2504      	.short	0x2504
 800591a:	22          	.byte	0x22
 800591b:	00          	.byte	0x00
		resolution = table_resolution[2];
 800591c:	f04f 0a08 	mov.w	sl, #8
	uint32_t channels = sequence->channels;
 8005920:	f8d8 1004 	ldr.w	r1, [r8, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8005924:	2900      	cmp	r1, #0
 8005926:	fa91 f5a1 	rbit	r5, r1
 800592a:	fab5 f585 	clz	r5, r5
	if (channels > BIT(index)) {
 800592e:	f04f 0301 	mov.w	r3, #1
	uint8_t index = find_lsb_set(channels) - 1;
 8005932:	bf08      	it	eq
 8005934:	25ff      	moveq	r5, #255	; 0xff
	if (channels > BIT(index)) {
 8005936:	40ab      	lsls	r3, r5
 8005938:	4299      	cmp	r1, r3
 800593a:	d92b      	bls.n	8005994 <adc_stm32_read+0xb8>
		LOG_ERR("Only single channel supported");
 800593c:	4baa      	ldr	r3, [pc, #680]	; (8005be8 <adc_stm32_read+0x30c>)
		LOG_ERR("Oversampling not supported");
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	2302      	movs	r3, #2
 8005942:	48aa      	ldr	r0, [pc, #680]	; (8005bec <adc_stm32_read+0x310>)
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	f107 0218 	add.w	r2, r7, #24
 800594a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800594e:	f005 ff60 	bl	800b812 <z_log_msg_static_create.constprop.0>
		return -ENOTSUP;
 8005952:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8005956:	e00f      	b.n	8005978 <adc_stm32_read+0x9c>
		resolution = table_resolution[3];
 8005958:	f04f 0a00 	mov.w	sl, #0
		break;
 800595c:	e7e0      	b.n	8005920 <adc_stm32_read+0x44>
		LOG_ERR("Invalid resolution");
 800595e:	4ba4      	ldr	r3, [pc, #656]	; (8005bf0 <adc_stm32_read+0x314>)
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	2302      	movs	r3, #2
 8005964:	48a1      	ldr	r0, [pc, #644]	; (8005bec <adc_stm32_read+0x310>)
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	f107 0218 	add.w	r2, r7, #24
 800596c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
 8005970:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("Invalid resolution");
 8005974:	f005 ff4d 	bl	800b812 <z_log_msg_static_create.constprop.0>
	z_impl_k_sem_give(sem);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f002 f899 	bl	8007ab0 <z_impl_k_sem_give>
}
 800597e:	4620      	mov	r0, r4
 8005980:	3724      	adds	r7, #36	; 0x24
 8005982:	46bd      	mov	sp, r7
 8005984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		resolution = table_resolution[0];
 8005988:	f04f 0a18 	mov.w	sl, #24
 800598c:	e7c8      	b.n	8005920 <adc_stm32_read+0x44>
	switch (sequence->resolution) {
 800598e:	f04f 0a10 	mov.w	sl, #16
 8005992:	e7c5      	b.n	8005920 <adc_stm32_read+0x44>
	if (config->has_temp_channel &&
 8005994:	f899 3014 	ldrb.w	r3, [r9, #20]
 8005998:	b193      	cbz	r3, 80059c0 <adc_stm32_read+0xe4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599a:	4b96      	ldr	r3, [pc, #600]	; (8005bf4 <adc_stm32_read+0x318>)
 800599c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80059a0:	b173      	cbz	r3, 80059c0 <adc_stm32_read+0xe4>
 80059a2:	fab3 f383 	clz	r3, r3
 80059a6:	429d      	cmp	r5, r3
 80059a8:	d10a      	bne.n	80059c0 <adc_stm32_read+0xe4>
		adc_stm32_disable(adc);
 80059aa:	4658      	mov	r0, fp
 80059ac:	f005 ff22 	bl	800b7f4 <adc_stm32_disable>
		adc_stm32_set_common_path(dev, LL_ADC_PATH_INTERNAL_TEMPSENSOR);
 80059b0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80059b4:	6870      	ldr	r0, [r6, #4]
 80059b6:	f7ff ff77 	bl	80058a8 <adc_stm32_set_common_path.isra.0>
	return z_impl_k_usleep(us);
 80059ba:	2078      	movs	r0, #120	; 0x78
 80059bc:	f006 fc31 	bl	800c222 <z_impl_k_usleep>
	if (config->has_vref_channel &&
 80059c0:	f899 3015 	ldrb.w	r3, [r9, #21]
 80059c4:	b193      	cbz	r3, 80059ec <adc_stm32_read+0x110>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c6:	4b8c      	ldr	r3, [pc, #560]	; (8005bf8 <adc_stm32_read+0x31c>)
 80059c8:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80059cc:	b173      	cbz	r3, 80059ec <adc_stm32_read+0x110>
 80059ce:	fab3 f383 	clz	r3, r3
 80059d2:	429d      	cmp	r5, r3
 80059d4:	d10a      	bne.n	80059ec <adc_stm32_read+0x110>
		adc_stm32_disable(adc);
 80059d6:	4658      	mov	r0, fp
 80059d8:	f005 ff0c 	bl	800b7f4 <adc_stm32_disable>
		adc_stm32_set_common_path(dev, LL_ADC_PATH_INTERNAL_VREFINT);
 80059dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059e0:	6870      	ldr	r0, [r6, #4]
 80059e2:	f7ff ff61 	bl	80058a8 <adc_stm32_set_common_path.isra.0>
 80059e6:	200c      	movs	r0, #12
 80059e8:	f006 fc1b 	bl	800c222 <z_impl_k_usleep>
	if (config->has_vbat_channel &&
 80059ec:	f899 3016 	ldrb.w	r3, [r9, #22]
 80059f0:	b17b      	cbz	r3, 8005a12 <adc_stm32_read+0x136>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f2:	4b82      	ldr	r3, [pc, #520]	; (8005bfc <adc_stm32_read+0x320>)
 80059f4:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80059f8:	b15b      	cbz	r3, 8005a12 <adc_stm32_read+0x136>
 80059fa:	fab3 f383 	clz	r3, r3
 80059fe:	429d      	cmp	r5, r3
 8005a00:	d107      	bne.n	8005a12 <adc_stm32_read+0x136>
		adc_stm32_disable(adc);
 8005a02:	4658      	mov	r0, fp
 8005a04:	f005 fef6 	bl	800b7f4 <adc_stm32_disable>
		adc_stm32_set_common_path(dev, LL_ADC_PATH_INTERNAL_VBAT);
 8005a08:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8005a0c:	6870      	ldr	r0, [r6, #4]
 8005a0e:	f7ff ff4b 	bl	80058a8 <adc_stm32_set_common_path.isra.0>
	data->buffer = sequence->buffer;
 8005a12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a16:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	uint32_t channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL(index);
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8005a20:	2d09      	cmp	r5, #9
 8005a22:	fa03 f305 	lsl.w	r3, r3, r5
 8005a26:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
 8005a2a:	bf85      	ittet	hi
 8005a2c:	3a1e      	subhi	r2, #30
 8005a2e:	ea43 5302 	orrhi.w	r3, r3, r2, lsl #20
 8005a32:	ea43 5302 	orrls.w	r3, r3, r2, lsl #20
 8005a36:	f043 7300 	orrhi.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8005a3a:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 8005a3e:	0d1b      	lsrs	r3, r3, #20
 8005a40:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005a44:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005a4e:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8005a52:	f023 030f 	bic.w	r3, r3, #15
 8005a56:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
	data->channel_count = 1;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	if (sequence->options) {
 8005a60:	f8d8 3000 	ldr.w	r3, [r8]
 8005a64:	b1cb      	cbz	r3, 8005a9a <adc_stm32_read+0x1be>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
 8005a66:	899b      	ldrh	r3, [r3, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	005b      	lsls	r3, r3, #1
	if (sequence->buffer_size < needed_buffer_size) {
 8005a6c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8005a70:	4299      	cmp	r1, r3
 8005a72:	d214      	bcs.n	8005a9e <adc_stm32_read+0x1c2>
		LOG_ERR("Provided buffer is too small (%u/%u)",
 8005a74:	466c      	mov	r4, sp
 8005a76:	b088      	sub	sp, #32
 8005a78:	aa02      	add	r2, sp, #8
 8005a7a:	4861      	ldr	r0, [pc, #388]	; (8005c00 <adc_stm32_read+0x324>)
 8005a7c:	61d3      	str	r3, [r2, #28]
 8005a7e:	2304      	movs	r3, #4
 8005a80:	e9c2 0105 	strd	r0, r1, [r2, #20]
 8005a84:	f842 3f10 	str.w	r3, [r2, #16]!
 8005a88:	4858      	ldr	r0, [pc, #352]	; (8005bec <adc_stm32_read+0x310>)
 8005a8a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8005a8e:	f005 fec0 	bl	800b812 <z_log_msg_static_create.constprop.0>
 8005a92:	46a5      	mov	sp, r4
		return -ENOMEM;
 8005a94:	f06f 040b 	mvn.w	r4, #11
 8005a98:	e76e      	b.n	8005978 <adc_stm32_read+0x9c>
	needed_buffer_size = active_channels * sizeof(uint16_t);
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e7e6      	b.n	8005a6c <adc_stm32_read+0x190>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
 8005a9e:	f8db 300c 	ldr.w	r3, [fp, #12]
 8005aa2:	f023 0318 	bic.w	r3, r3, #24
 8005aa6:	ea43 030a 	orr.w	r3, r3, sl
 8005aaa:	f8cb 300c 	str.w	r3, [fp, #12]
	if (sequence->oversampling) {
 8005aae:	f898 3011 	ldrb.w	r3, [r8, #17]
 8005ab2:	b10b      	cbz	r3, 8005ab8 <adc_stm32_read+0x1dc>
		LOG_ERR("Oversampling not supported");
 8005ab4:	4b53      	ldr	r3, [pc, #332]	; (8005c04 <adc_stm32_read+0x328>)
 8005ab6:	e742      	b.n	800593e <adc_stm32_read+0x62>
	if (sequence->calibrate) {
 8005ab8:	f898 3012 	ldrb.w	r3, [r8, #18]
 8005abc:	b12b      	cbz	r3, 8005aca <adc_stm32_read+0x1ee>
		adc_stm32_disable(adc);
 8005abe:	4658      	mov	r0, fp
 8005ac0:	f005 fe98 	bl	800b7f4 <adc_stm32_disable>
		adc_stm32_calib(dev);
 8005ac4:	6870      	ldr	r0, [r6, #4]
 8005ac6:	f005 fea7 	bl	800b818 <adc_stm32_calib.isra.0>
	adc_stm32_enable(adc);
 8005aca:	4658      	mov	r0, fp
 8005acc:	f005 fe7a 	bl	800b7c4 <adc_stm32_enable>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8005ad0:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005ad4:	f043 0304 	orr.w	r3, r3, #4
 8005ad8:	f8cb 3004 	str.w	r3, [fp, #4]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
 8005adc:	46c6      	mov	lr, r8
 8005ade:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005ae2:	f104 0c64 	add.w	ip, r4, #100	; 0x64
 8005ae6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005aea:	f8de 3000 	ldr.w	r3, [lr]
 8005aee:	f8cc 3000 	str.w	r3, [ip]
	ctx->status = 0;
 8005af2:	f04f 0e00 	mov.w	lr, #0
 8005af6:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60

	if (sequence->options) {
 8005afa:	f8d8 3000 	ldr.w	r3, [r8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d06e      	beq.n	8005be0 <adc_stm32_read+0x304>
		ctx->options = *sequence->options;
 8005b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b04:	f104 0c78 	add.w	ip, r4, #120	; 0x78
 8005b08:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
 8005b0c:	f8c4 c064 	str.w	ip, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
 8005b10:	f8a4 e088 	strh.w	lr, [r4, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d063      	beq.n	8005be0 <adc_stm32_read+0x304>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005b18:	f3bf 8f5b 	dmb	ish
 8005b1c:	e854 3f00 	ldrex	r3, [r4]
 8005b20:	e844 e200 	strex	r2, lr, [r4]
 8005b24:	2a00      	cmp	r2, #0
 8005b26:	d1f9      	bne.n	8005b1c <adc_stm32_read+0x240>
 8005b28:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
 8005b2c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	 * the same mathematical relationship, each expressed with and
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
 8005b2e:	3063      	adds	r0, #99	; 0x63
 8005b30:	f14e 0100 	adc.w	r1, lr, #0
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 8005b34:	2264      	movs	r2, #100	; 0x64
 8005b36:	2300      	movs	r3, #0
 8005b38:	f7fb f816 	bl	8000b68 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	e9cd 0100 	strd	r0, r1, [sp]
 8005b42:	2300      	movs	r3, #0
 8005b44:	f104 0008 	add.w	r0, r4, #8
 8005b48:	f003 fcf8 	bl	800953c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b54:	f04f 32ff 	mov.w	r2, #4294967295
 8005b58:	f001 ffe8 	bl	8007b2c <z_impl_k_sem_take>
	const struct adc_stm32_cfg *config = dev->config;
 8005b5c:	f8d6 a004 	ldr.w	sl, [r6, #4]
	return ctx->status;
 8005b60:	6e24      	ldr	r4, [r4, #96]	; 0x60
	if (config->has_temp_channel &&
 8005b62:	f89a 3014 	ldrb.w	r3, [sl, #20]
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 8005b66:	f8da 8000 	ldr.w	r8, [sl]
	if (config->has_temp_channel &&
 8005b6a:	b17b      	cbz	r3, 8005b8c <adc_stm32_read+0x2b0>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6c:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <adc_stm32_read+0x318>)
 8005b6e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005b72:	b15b      	cbz	r3, 8005b8c <adc_stm32_read+0x2b0>
 8005b74:	fab3 f383 	clz	r3, r3
 8005b78:	429d      	cmp	r5, r3
 8005b7a:	d107      	bne.n	8005b8c <adc_stm32_read+0x2b0>
		adc_stm32_disable(adc);
 8005b7c:	4640      	mov	r0, r8
 8005b7e:	f005 fe39 	bl	800b7f4 <adc_stm32_disable>
		adc_stm32_unset_common_path(dev, LL_ADC_PATH_INTERNAL_TEMPSENSOR);
 8005b82:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8005b86:	6870      	ldr	r0, [r6, #4]
 8005b88:	f7ff fe72 	bl	8005870 <adc_stm32_unset_common_path.isra.0>
	if (config->has_vref_channel &&
 8005b8c:	f89a 3015 	ldrb.w	r3, [sl, #21]
 8005b90:	b17b      	cbz	r3, 8005bb2 <adc_stm32_read+0x2d6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b92:	4b19      	ldr	r3, [pc, #100]	; (8005bf8 <adc_stm32_read+0x31c>)
 8005b94:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005b98:	b15b      	cbz	r3, 8005bb2 <adc_stm32_read+0x2d6>
 8005b9a:	fab3 f383 	clz	r3, r3
 8005b9e:	429d      	cmp	r5, r3
 8005ba0:	d107      	bne.n	8005bb2 <adc_stm32_read+0x2d6>
		adc_stm32_disable(adc);
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	f005 fe26 	bl	800b7f4 <adc_stm32_disable>
		adc_stm32_unset_common_path(dev, LL_ADC_PATH_INTERNAL_VREFINT);
 8005ba8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bac:	6870      	ldr	r0, [r6, #4]
 8005bae:	f7ff fe5f 	bl	8005870 <adc_stm32_unset_common_path.isra.0>
	if (config->has_vbat_channel &&
 8005bb2:	f89a 3016 	ldrb.w	r3, [sl, #22]
 8005bb6:	b17b      	cbz	r3, 8005bd8 <adc_stm32_read+0x2fc>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb8:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <adc_stm32_read+0x320>)
 8005bba:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005bbe:	b15b      	cbz	r3, 8005bd8 <adc_stm32_read+0x2fc>
 8005bc0:	fab3 f383 	clz	r3, r3
 8005bc4:	429d      	cmp	r5, r3
 8005bc6:	d107      	bne.n	8005bd8 <adc_stm32_read+0x2fc>
		adc_stm32_disable(adc);
 8005bc8:	4640      	mov	r0, r8
 8005bca:	f005 fe13 	bl	800b7f4 <adc_stm32_disable>
		adc_stm32_unset_common_path(dev, LL_ADC_PATH_INTERNAL_VBAT);
 8005bce:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8005bd2:	6870      	ldr	r0, [r6, #4]
 8005bd4:	f7ff fe4c 	bl	8005870 <adc_stm32_unset_common_path.isra.0>
	adc_stm32_enable(adc);
 8005bd8:	4640      	mov	r0, r8
 8005bda:	f005 fdf3 	bl	800b7c4 <adc_stm32_enable>
}
 8005bde:	e6cb      	b.n	8005978 <adc_stm32_read+0x9c>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
 8005be0:	4620      	mov	r0, r4
 8005be2:	f005 fe26 	bl	800b832 <adc_context_start_sampling>
 8005be6:	e7b1      	b.n	8005b4c <adc_stm32_read+0x270>
 8005be8:	08012915 	.word	0x08012915
 8005bec:	0800d180 	.word	0x0800d180
 8005bf0:	08012902 	.word	0x08012902
 8005bf4:	c3210000 	.word	0xc3210000
 8005bf8:	cb840000 	.word	0xcb840000
 8005bfc:	c7520000 	.word	0xc7520000
 8005c00:	08012933 	.word	0x08012933
 8005c04:	08012958 	.word	0x08012958

08005c08 <adc_stm32_init>:

static int adc_stm32_init(const struct device *dev)
{
 8005c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0c:	b08b      	sub	sp, #44	; 0x2c
	struct adc_stm32_data *data = dev->data;
	const struct adc_stm32_cfg *config = dev->config;
 8005c0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct adc_stm32_data *data = dev->data;
 8005c12:	f8d0 a010 	ldr.w	sl, [r0, #16]
	const struct device *const clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 8005c16:	f8d8 5000 	ldr.w	r5, [r8]
{
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8005d44 <adc_stm32_init+0x13c>
 8005c22:	4648      	mov	r0, r9
 8005c24:	f006 faaa 	bl	800c17c <z_device_is_ready>
	int err;

	LOG_DBG("Initializing....");

	if (!device_is_ready(clk)) {
 8005c28:	b988      	cbnz	r0, 8005c4e <adc_stm32_init+0x46>
		LOG_ERR("clock control device not ready");
 8005c2a:	4b47      	ldr	r3, [pc, #284]	; (8005d48 <adc_stm32_init+0x140>)
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2e:	2302      	movs	r3, #2
 8005c30:	4846      	ldr	r0, [pc, #280]	; (8005d4c <adc_stm32_init+0x144>)
 8005c32:	623b      	str	r3, [r7, #32]
 8005c34:	f107 0220 	add.w	r2, r7, #32
 8005c38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
 8005c3c:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("clock control device not ready");
 8005c40:	f005 fde7 	bl	800b812 <z_log_msg_static_create.constprop.0>
	}
#endif
	adc_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8005c44:	4620      	mov	r0, r4
 8005c46:	372c      	adds	r7, #44	; 0x2c
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8005c4e:	f8d9 3008 	ldr.w	r3, [r9, #8]
	data->dev = dev;
 8005c52:	f8ca 6090 	str.w	r6, [sl, #144]	; 0x90
		(clock_control_subsys_t *) &config->pclken) != 0) {
 8005c56:	f108 0b08 	add.w	fp, r8, #8
 8005c5a:	4659      	mov	r1, fp
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4648      	mov	r0, r9
 8005c60:	4798      	blx	r3
	if (clock_control_on(clk,
 8005c62:	4601      	mov	r1, r0
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d16a      	bne.n	8005d3e <adc_stm32_init+0x136>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	f107 0210 	add.w	r2, r7, #16
 8005c6e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8005c72:	f006 fa5b 	bl	800c12c <pinctrl_lookup_state>
	if (ret < 0) {
 8005c76:	1e04      	subs	r4, r0, #0
 8005c78:	db08      	blt.n	8005c8c <adc_stm32_init+0x84>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8005c7a:	693b      	ldr	r3, [r7, #16]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	460a      	mov	r2, r1
 8005c82:	7919      	ldrb	r1, [r3, #4]
 8005c84:	f001 f9cc 	bl	8007020 <pinctrl_configure_pins>
	if (err < 0) {
 8005c88:	1e04      	subs	r4, r0, #0
 8005c8a:	da0f      	bge.n	8005cac <adc_stm32_init+0xa4>
		LOG_ERR("ADC pinctrl setup failed (%d)", err);
 8005c8c:	466d      	mov	r5, sp
 8005c8e:	b088      	sub	sp, #32
 8005c90:	466a      	mov	r2, sp
 8005c92:	4b2f      	ldr	r3, [pc, #188]	; (8005d50 <adc_stm32_init+0x148>)
 8005c94:	482d      	ldr	r0, [pc, #180]	; (8005d4c <adc_stm32_init+0x144>)
 8005c96:	e9c2 3405 	strd	r3, r4, [r2, #20]
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	f842 3f10 	str.w	r3, [r2, #16]!
 8005ca0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8005ca4:	f005 fdb5 	bl	800b812 <z_log_msg_static_create.constprop.0>
 8005ca8:	46ad      	mov	sp, r5
		return err;
 8005caa:	e7cb      	b.n	8005c44 <adc_stm32_init+0x3c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005cac:	68ab      	ldr	r3, [r5, #8]
 8005cae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005cb2:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CR,
 8005cb4:	68ab      	ldr	r3, [r5, #8]
 8005cb6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005cba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc2:	60ab      	str	r3, [r5, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8005cc4:	200a      	movs	r0, #10
 8005cc6:	f003 fb73 	bl	80093b0 <z_impl_k_busy_wait>
	LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(adc),
 8005cca:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
 8005cce:	d02c      	beq.n	8005d2a <adc_stm32_init+0x122>
 8005cd0:	4920      	ldr	r1, [pc, #128]	; (8005d54 <adc_stm32_init+0x14c>)
 8005cd2:	4b21      	ldr	r3, [pc, #132]	; (8005d58 <adc_stm32_init+0x150>)
 8005cd4:	4a21      	ldr	r2, [pc, #132]	; (8005d5c <adc_stm32_init+0x154>)
 8005cd6:	428d      	cmp	r5, r1
 8005cd8:	bf08      	it	eq
 8005cda:	4613      	moveq	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE, CommonClock);
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8005ce2:	609a      	str	r2, [r3, #8]
	adc_stm32_calib(dev);
 8005ce4:	6870      	ldr	r0, [r6, #4]
 8005ce6:	f005 fd97 	bl	800b818 <adc_stm32_calib.isra.0>
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8005cea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	b9eb      	cbnz	r3, 8005d2e <adc_stm32_init+0x126>
		LOG_ERR("ADC clock rate get error.");
 8005cf2:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <adc_stm32_init+0x158>)
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	4814      	ldr	r0, [pc, #80]	; (8005d4c <adc_stm32_init+0x144>)
 8005cfa:	623b      	str	r3, [r7, #32]
 8005cfc:	f107 0220 	add.w	r2, r7, #32
 8005d00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005d04:	f005 fd85 	bl	800b812 <z_log_msg_static_create.constprop.0>
	err = adc_stm32_enable(adc);
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f005 fd5b 	bl	800b7c4 <adc_stm32_enable>
	if (err < 0) {
 8005d0e:	1e04      	subs	r4, r0, #0
 8005d10:	db98      	blt.n	8005c44 <adc_stm32_init+0x3c>
	config->irq_cfg_func();
 8005d12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005d16:	4798      	blx	r3
	if (!k_sem_count_get(&ctx->lock)) {
 8005d18:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8005d1c:	b91b      	cbnz	r3, 8005d26 <adc_stm32_init+0x11e>
	z_impl_k_sem_give(sem);
 8005d1e:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8005d22:	f001 fec5 	bl	8007ab0 <z_impl_k_sem_give>
	return 0;
 8005d26:	2400      	movs	r4, #0
 8005d28:	e78c      	b.n	8005c44 <adc_stm32_init+0x3c>
	LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(adc),
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <adc_stm32_init+0x154>)
 8005d2c:	e7d6      	b.n	8005cdc <adc_stm32_init+0xd4>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8005d2e:	4805      	ldr	r0, [pc, #20]	; (8005d44 <adc_stm32_init+0x13c>)
 8005d30:	f107 020c 	add.w	r2, r7, #12
 8005d34:	4659      	mov	r1, fp
 8005d36:	4798      	blx	r3
	if (clock_control_get_rate(clk,
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	dae5      	bge.n	8005d08 <adc_stm32_init+0x100>
 8005d3c:	e7d9      	b.n	8005cf2 <adc_stm32_init+0xea>
		return -EIO;
 8005d3e:	f06f 0404 	mvn.w	r4, #4
 8005d42:	e77f      	b.n	8005c44 <adc_stm32_init+0x3c>
 8005d44:	0800cd24 	.word	0x0800cd24
 8005d48:	08012973 	.word	0x08012973
 8005d4c:	0800d180 	.word	0x0800d180
 8005d50:	08012992 	.word	0x08012992
 8005d54:	50000100 	.word	0x50000100
 8005d58:	50000700 	.word	0x50000700
 8005d5c:	50000300 	.word	0x50000300
 8005d60:	080129b0 	.word	0x080129b0

08005d64 <stm32_clock_control_get_subsys_rate>:
}

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8005d64:	b510      	push	{r4, lr}
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8005d66:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <stm32_clock_control_get_subsys_rate+0x50>)
 8005d68:	6818      	ldr	r0, [r3, #0]
	/* AHB3 bus exists, but w/o dedicated prescaler */
	uint32_t ahb3_clock = ahb_clock;
#endif

#if defined(STM32_SRC_PCLK)
	if (pclken->bus == STM32_SRC_PCLK) {
 8005d6a:	680b      	ldr	r3, [r1, #0]
 8005d6c:	2b05      	cmp	r3, #5
{
 8005d6e:	4614      	mov	r4, r2
	if (pclken->bus == STM32_SRC_PCLK) {
 8005d70:	d005      	beq.n	8005d7e <stm32_clock_control_get_subsys_rate+0x1a>
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8005d72:	2b06      	cmp	r3, #6
 8005d74:	d015      	beq.n	8005da2 <stm32_clock_control_get_subsys_rate+0x3e>
 8005d76:	d80a      	bhi.n	8005d8e <stm32_clock_control_get_subsys_rate+0x2a>
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d803      	bhi.n	8005d84 <stm32_clock_control_get_subsys_rate+0x20>
 8005d7c:	b96b      	cbnz	r3, 8005d9a <stm32_clock_control_get_subsys_rate+0x36>
 8005d7e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005d82:	e003      	b.n	8005d8c <stm32_clock_control_get_subsys_rate+0x28>
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d1fa      	bne.n	8005d7e <stm32_clock_control_get_subsys_rate+0x1a>
	case STM32_CLOCK_BUS_AHB2:
#endif
#if defined(STM32_CLOCK_BUS_IOP)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8005d88:	6020      	str	r0, [r4, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8005d8a:	2000      	movs	r0, #0
}
 8005d8c:	bd10      	pop	{r4, pc}
	switch (pclken->bus) {
 8005d8e:	2b18      	cmp	r3, #24
 8005d90:	d0fa      	beq.n	8005d88 <stm32_clock_control_get_subsys_rate+0x24>
 8005d92:	2b1c      	cmp	r3, #28
 8005d94:	d003      	beq.n	8005d9e <stm32_clock_control_get_subsys_rate+0x3a>
 8005d96:	2b14      	cmp	r3, #20
 8005d98:	e7f5      	b.n	8005d86 <stm32_clock_control_get_subsys_rate+0x22>
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	e7f4      	b.n	8005d88 <stm32_clock_control_get_subsys_rate+0x24>
	return clock / prescaler;
 8005d9e:	0840      	lsrs	r0, r0, #1
		break;
 8005da0:	e7f2      	b.n	8005d88 <stm32_clock_control_get_subsys_rate+0x24>
		if (get_pllout_frequency() == 0) {
 8005da2:	f000 f88b 	bl	8005ebc <get_pllout_frequency>
 8005da6:	b110      	cbz	r0, 8005dae <stm32_clock_control_get_subsys_rate+0x4a>
		*rate = get_pllout_frequency();
 8005da8:	f000 f888 	bl	8005ebc <get_pllout_frequency>
		break;
 8005dac:	e7ec      	b.n	8005d88 <stm32_clock_control_get_subsys_rate+0x24>
			return -EIO;
 8005dae:	f06f 0004 	mvn.w	r0, #4
 8005db2:	e7eb      	b.n	8005d8c <stm32_clock_control_get_subsys_rate+0x28>
 8005db4:	20000104 	.word	0x20000104

08005db8 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8005db8:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005dba:	4c34      	ldr	r4, [pc, #208]	; (8005e8c <stm32_clock_control_init+0xd4>)

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8005dbc:	4e34      	ldr	r6, [pc, #208]	; (8005e90 <stm32_clock_control_init+0xd8>)
	config_enable_default_clocks();
 8005dbe:	f005 fde2 	bl	800b986 <config_enable_default_clocks>
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 8005dc2:	f001 f987 	bl	80070d4 <HAL_RCC_GetSysClockFreq>
 8005dc6:	6863      	ldr	r3, [r4, #4]
 8005dc8:	4a32      	ldr	r2, [pc, #200]	; (8005e94 <stm32_clock_control_init+0xdc>)
 8005dca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005dce:	5cd3      	ldrb	r3, [r2, r3]
 8005dd0:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8005dd4:	42b5      	cmp	r5, r6
 8005dd6:	d802      	bhi.n	8005dde <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8005dd8:	482f      	ldr	r0, [pc, #188]	; (8005e98 <stm32_clock_control_init+0xe0>)
 8005dda:	f001 f9f3 	bl	80071c4 <LL_SetFlashLatency>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005de4:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dec:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8005dee:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 8005df0:	0398      	lsls	r0, r3, #14
 8005df2:	d5fc      	bpl.n	8005dee <stm32_clock_control_init+0x36>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005df4:	6863      	ldr	r3, [r4, #4]
 8005df6:	f003 030c 	and.w	r3, r3, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d115      	bne.n	8005e2a <stm32_clock_control_init+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e04:	6063      	str	r3, [r4, #4]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8005e06:	6823      	ldr	r3, [r4, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8005e08:	0799      	lsls	r1, r3, #30
 8005e0a:	d406      	bmi.n	8005e1a <stm32_clock_control_init+0x62>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8005e14:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8005e16:	079a      	lsls	r2, r3, #30
 8005e18:	d5fc      	bpl.n	8005e14 <stm32_clock_control_init+0x5c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005e1a:	6863      	ldr	r3, [r4, #4]
 8005e1c:	f023 0303 	bic.w	r3, r3, #3
 8005e20:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e22:	6863      	ldr	r3, [r4, #4]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8005e24:	f013 0f0c 	tst.w	r3, #12
 8005e28:	d1fb      	bne.n	8005e22 <stm32_clock_control_init+0x6a>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e30:	6023      	str	r3, [r4, #0]
	config_pll_sysclock();
 8005e32:	f000 f835 	bl	8005ea0 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e3c:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8005e3e:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 8005e40:	019b      	lsls	r3, r3, #6
 8005e42:	d5fc      	bpl.n	8005e3e <stm32_clock_control_init+0x86>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005e44:	6863      	ldr	r3, [r4, #4]
 8005e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e4a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005e4c:	6863      	ldr	r3, [r4, #4]
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	f043 0302 	orr.w	r3, r3, #2
 8005e56:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e58:	6863      	ldr	r3, [r4, #4]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d1fa      	bne.n	8005e58 <stm32_clock_control_init+0xa0>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8005e62:	42b5      	cmp	r5, r6
 8005e64:	d902      	bls.n	8005e6c <stm32_clock_control_init+0xb4>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8005e66:	480c      	ldr	r0, [pc, #48]	; (8005e98 <stm32_clock_control_init+0xe0>)
 8005e68:	f001 f9ac 	bl	80071c4 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <stm32_clock_control_init+0xe4>)
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	; (8005e98 <stm32_clock_control_init+0xe0>)
 8005e70:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005e78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e7c:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005e7e:	6863      	ldr	r3, [r4, #4]
 8005e80:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005e84:	6063      	str	r3, [r4, #4]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8005e86:	2000      	movs	r0, #0
 8005e88:	bd70      	pop	{r4, r5, r6, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	044aa1ff 	.word	0x044aa1ff
 8005e94:	08012eb7 	.word	0x08012eb7
 8005e98:	044aa200 	.word	0x044aa200
 8005e9c:	20000104 	.word	0x20000104

08005ea0 <config_pll_sysclock>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8005ea0:	4a05      	ldr	r2, [pc, #20]	; (8005eb8 <config_pll_sysclock+0x18>)
 8005ea2:	6853      	ldr	r3, [r2, #4]
 8005ea4:	f423 1376 	bic.w	r3, r3, #4030464	; 0x3d8000
 8005ea8:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8005eac:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 8005eae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005eb0:	f023 030f 	bic.w	r3, r3, #15
 8005eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
		__ASSERT(0, "Invalid source");
	}

	LL_RCC_PLL_ConfigDomain_SYS(pll_source, pll_mul);
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8005eb6:	4770      	bx	lr
 8005eb8:	40021000 	.word	0x40021000

08005ebc <get_pllout_frequency>:
		pll_input_freq = STM32_HSI_FREQ;
	} else {
		return 0;
	}

	return __LL_RCC_CALC_PLLCLK_FREQ(pll_input_freq, pll_mul, pll_div);
 8005ebc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005ec4:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005ec8:	fab2 f282 	clz	r2, r2
 8005ecc:	40d3      	lsrs	r3, r2
		return 0;
	}

	return __LL_RCC_CALC_PLLCLK_FREQ(pll_input_freq, pll_mul);
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8005ece:	4802      	ldr	r0, [pc, #8]	; (8005ed8 <get_pllout_frequency+0x1c>)
	return __LL_RCC_CALC_PLLCLK_FREQ(pll_input_freq, pll_mul, pll_div);
 8005ed0:	3302      	adds	r3, #2
}
 8005ed2:	4358      	muls	r0, r3
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	007a1200 	.word	0x007a1200

08005edc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8005edc:	b508      	push	{r3, lr}
 8005ede:	4807      	ldr	r0, [pc, #28]	; (8005efc <uart_console_init+0x20>)
 8005ee0:	f006 f94c 	bl	800c17c <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
 8005ee4:	b138      	cbz	r0, 8005ef6 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 8005ee6:	4806      	ldr	r0, [pc, #24]	; (8005f00 <uart_console_init+0x24>)
 8005ee8:	f7ff faa4 	bl	8005434 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8005eec:	4804      	ldr	r0, [pc, #16]	; (8005f00 <uart_console_init+0x24>)
 8005eee:	f7fc fa6f 	bl	80023d0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 8005ef2:	2000      	movs	r0, #0
}
 8005ef4:	bd08      	pop	{r3, pc}
		return -ENODEV;
 8005ef6:	f06f 0012 	mvn.w	r0, #18
 8005efa:	e7fb      	b.n	8005ef4 <uart_console_init+0x18>
 8005efc:	0800cde4 	.word	0x0800cde4
 8005f00:	08005f05 	.word	0x08005f05

08005f04 <console_out>:
	if ('\n' == c) {
 8005f04:	280a      	cmp	r0, #10
{
 8005f06:	b538      	push	{r3, r4, r5, lr}
 8005f08:	4d07      	ldr	r5, [pc, #28]	; (8005f28 <console_out+0x24>)
 8005f0a:	4604      	mov	r4, r0
	if ('\n' == c) {
 8005f0c:	d104      	bne.n	8005f18 <console_out+0x14>
 8005f0e:	68ab      	ldr	r3, [r5, #8]
 8005f10:	210d      	movs	r1, #13
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	4628      	mov	r0, r5
 8005f16:	4798      	blx	r3
 8005f18:	68ab      	ldr	r3, [r5, #8]
 8005f1a:	4803      	ldr	r0, [pc, #12]	; (8005f28 <console_out+0x24>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	b2e1      	uxtb	r1, r4
 8005f20:	4798      	blx	r3
}
 8005f22:	4620      	mov	r0, r4
 8005f24:	bd38      	pop	{r3, r4, r5, pc}
 8005f26:	bf00      	nop
 8005f28:	0800cde4 	.word	0x0800cde4

08005f2c <ssd1306_get_capabilities>:
 8005f2c:	2300      	movs	r3, #0
				     struct display_capabilities *caps)
{
	memset(caps, 0, sizeof(struct display_capabilities));
	caps->x_resolution = DT_INST_PROP(0, width);
	caps->y_resolution = DT_INST_PROP(0, height);
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
 8005f2e:	4a05      	ldr	r2, [pc, #20]	; (8005f44 <ssd1306_get_capabilities+0x18>)
 8005f30:	f8a1 300d 	strh.w	r3, [r1, #13]
 8005f34:	73cb      	strb	r3, [r1, #15]
 8005f36:	2304      	movs	r3, #4
 8005f38:	e9c1 2300 	strd	r2, r3, [r1]
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
	caps->screen_info = SCREEN_INFO_MONO_VTILED;
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	608a      	str	r2, [r1, #8]
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
 8005f40:	730b      	strb	r3, [r1, #12]
}
 8005f42:	4770      	bx	lr
 8005f44:	00400080 	.word	0x00400080

08005f48 <ssd1306_read>:
{
 8005f48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Unsupported");
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <ssd1306_read+0x20>)
 8005f4c:	9305      	str	r3, [sp, #20]
 8005f4e:	4807      	ldr	r0, [pc, #28]	; (8005f6c <ssd1306_read+0x24>)
 8005f50:	2302      	movs	r3, #2
 8005f52:	aa04      	add	r2, sp, #16
 8005f54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005f58:	9304      	str	r3, [sp, #16]
 8005f5a:	f005 fd15 	bl	800b988 <z_log_msg_static_create.constprop.0>
}
 8005f5e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005f62:	b007      	add	sp, #28
 8005f64:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f68:	080129ee 	.word	0x080129ee
 8005f6c:	0800d1d0 	.word	0x0800d1d0

08005f70 <ssd1306_get_framebuffer>:
{
 8005f70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Unsupported");
 8005f72:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <ssd1306_get_framebuffer+0x20>)
 8005f74:	9305      	str	r3, [sp, #20]
 8005f76:	4807      	ldr	r0, [pc, #28]	; (8005f94 <ssd1306_get_framebuffer+0x24>)
 8005f78:	2302      	movs	r3, #2
 8005f7a:	aa04      	add	r2, sp, #16
 8005f7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005f80:	9304      	str	r3, [sp, #16]
 8005f82:	f005 fd01 	bl	800b988 <z_log_msg_static_create.constprop.0>
}
 8005f86:	2000      	movs	r0, #0
 8005f88:	b007      	add	sp, #28
 8005f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f8e:	bf00      	nop
 8005f90:	080129ee 	.word	0x080129ee
 8005f94:	0800d1d0 	.word	0x0800d1d0

08005f98 <ssd1306_set_brightness>:
{
 8005f98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_WRN("Unsupported");
 8005f9a:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <ssd1306_set_brightness+0x20>)
 8005f9c:	9305      	str	r3, [sp, #20]
 8005f9e:	4807      	ldr	r0, [pc, #28]	; (8005fbc <ssd1306_set_brightness+0x24>)
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	aa04      	add	r2, sp, #16
 8005fa4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8005fa8:	9304      	str	r3, [sp, #16]
 8005faa:	f005 fced 	bl	800b988 <z_log_msg_static_create.constprop.0>
}
 8005fae:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005fb2:	b007      	add	sp, #28
 8005fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fb8:	080129ee 	.word	0x080129ee
 8005fbc:	0800d1d0 	.word	0x0800d1d0

08005fc0 <ssd1306_set_pixel_format.part.0>:
{
	LOG_ERR("Unsupported");
	return -ENOTSUP;
}

static int ssd1306_set_pixel_format(const struct device *dev,
 8005fc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
				    const enum display_pixel_format pf)
{
	if (pf == PIXEL_FORMAT_MONO10) {
		return 0;
	}
	LOG_ERR("Unsupported");
 8005fc2:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <ssd1306_set_pixel_format.part.0+0x20>)
 8005fc4:	9305      	str	r3, [sp, #20]
 8005fc6:	4807      	ldr	r0, [pc, #28]	; (8005fe4 <ssd1306_set_pixel_format.part.0+0x24>)
 8005fc8:	2302      	movs	r3, #2
 8005fca:	aa04      	add	r2, sp, #16
 8005fcc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005fd0:	9304      	str	r3, [sp, #16]
 8005fd2:	f005 fcd9 	bl	800b988 <z_log_msg_static_create.constprop.0>
	return -ENOTSUP;
}
 8005fd6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005fda:	b007      	add	sp, #28
 8005fdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fe0:	080129ee 	.word	0x080129ee
 8005fe4:	0800d1d0 	.word	0x0800d1d0

08005fe8 <ssd1306_set_orientation>:
{
 8005fe8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Unsupported");
 8005fea:	4b07      	ldr	r3, [pc, #28]	; (8006008 <ssd1306_set_orientation+0x20>)
 8005fec:	9305      	str	r3, [sp, #20]
 8005fee:	4807      	ldr	r0, [pc, #28]	; (800600c <ssd1306_set_orientation+0x24>)
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	aa04      	add	r2, sp, #16
 8005ff4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005ff8:	9304      	str	r3, [sp, #16]
 8005ffa:	f005 fcc5 	bl	800b988 <z_log_msg_static_create.constprop.0>
}
 8005ffe:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006002:	b007      	add	sp, #28
 8006004:	f85d fb04 	ldr.w	pc, [sp], #4
 8006008:	080129ee 	.word	0x080129ee
 800600c:	0800d1d0 	.word	0x0800d1d0

08006010 <ssd1306_write>:
{
 8006010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006014:	461c      	mov	r4, r3
	if (desc->pitch < desc->width) {
 8006016:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800601a:	889b      	ldrh	r3, [r3, #4]
{
 800601c:	b088      	sub	sp, #32
	if (desc->pitch < desc->width) {
 800601e:	459c      	cmp	ip, r3
{
 8006020:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006022:	4606      	mov	r6, r0
	if (desc->pitch < desc->width) {
 8006024:	d20e      	bcs.n	8006044 <ssd1306_write+0x34>
		LOG_ERR("Pitch is smaller then width");
 8006026:	4b2b      	ldr	r3, [pc, #172]	; (80060d4 <ssd1306_write+0xc4>)
		LOG_ERR("Display buffer is not available");
 8006028:	9307      	str	r3, [sp, #28]
 800602a:	482b      	ldr	r0, [pc, #172]	; (80060d8 <ssd1306_write+0xc8>)
 800602c:	2302      	movs	r3, #2
 800602e:	aa06      	add	r2, sp, #24
 8006030:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006034:	9306      	str	r3, [sp, #24]
 8006036:	f005 fca7 	bl	800b988 <z_log_msg_static_create.constprop.0>
		return -1;
 800603a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800603e:	b008      	add	sp, #32
 8006040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf_len = MIN(desc->buf_size, desc->height * desc->width / 8);
 8006044:	88e5      	ldrh	r5, [r4, #6]
 8006046:	6820      	ldr	r0, [r4, #0]
 8006048:	435d      	muls	r5, r3
 800604a:	10ed      	asrs	r5, r5, #3
 800604c:	4285      	cmp	r5, r0
 800604e:	bf28      	it	cs
 8006050:	4605      	movcs	r5, r0
	if (buf == NULL || buf_len == 0U) {
 8006052:	b107      	cbz	r7, 8006056 <ssd1306_write+0x46>
 8006054:	b90d      	cbnz	r5, 800605a <ssd1306_write+0x4a>
		LOG_ERR("Display buffer is not available");
 8006056:	4b21      	ldr	r3, [pc, #132]	; (80060dc <ssd1306_write+0xcc>)
 8006058:	e7e6      	b.n	8006028 <ssd1306_write+0x18>
	if (desc->pitch > desc->width) {
 800605a:	459c      	cmp	ip, r3
 800605c:	d901      	bls.n	8006062 <ssd1306_write+0x52>
		LOG_ERR("Unsupported mode");
 800605e:	4b20      	ldr	r3, [pc, #128]	; (80060e0 <ssd1306_write+0xd0>)
 8006060:	e7e2      	b.n	8006028 <ssd1306_write+0x18>
	if ((y & 0x7) != 0U) {
 8006062:	f012 0907 	ands.w	r9, r2, #7
 8006066:	d001      	beq.n	800606c <ssd1306_write+0x5c>
		LOG_ERR("Unsupported origin");
 8006068:	4b1e      	ldr	r3, [pc, #120]	; (80060e4 <ssd1306_write+0xd4>)
 800606a:	e7dd      	b.n	8006028 <ssd1306_write+0x18>
	uint8_t x_offset = x + DT_INST_PROP(0, segment_offset);
 800606c:	3102      	adds	r1, #2
		SSD1306_SET_LOWER_COL_ADDRESS |
 800606e:	f001 030f 	and.w	r3, r1, #15
		SSD1306_SET_HIGHER_COL_ADDRESS |
 8006072:	f3c1 1103 	ubfx	r1, r1, #4, #4
	uint8_t cmd_buf[] = {
 8006076:	f041 0110 	orr.w	r1, r1, #16
 800607a:	f88d 3004 	strb.w	r3, [sp, #4]
 800607e:	f88d 1005 	strb.w	r1, [sp, #5]
 8006082:	f3c2 08c7 	ubfx	r8, r2, #3, #8
	for (uint8_t n = 0; n < desc->height / 8; n++) {
 8006086:	46ba      	mov	sl, r7
 8006088:	88e2      	ldrh	r2, [r4, #6]
 800608a:	fa5f f389 	uxtb.w	r3, r9
 800608e:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8006092:	d301      	bcc.n	8006098 <ssd1306_write+0x88>
	return 0;
 8006094:	2000      	movs	r0, #0
 8006096:	e7d2      	b.n	800603e <ssd1306_write+0x2e>
			SSD1306_SET_PAGE_START_ADDRESS | (n + (y / 8));
 8006098:	4443      	add	r3, r8
		cmd_buf[sizeof(cmd_buf) - 1] =
 800609a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800609e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
 80060a2:	6870      	ldr	r0, [r6, #4]
 80060a4:	2301      	movs	r3, #1
 80060a6:	2203      	movs	r2, #3
 80060a8:	a901      	add	r1, sp, #4
 80060aa:	f005 fc76 	bl	800b99a <ssd1306_write_bus.isra.0>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d1c2      	bne.n	800603a <ssd1306_write+0x2a>
		if (ssd1306_write_bus(dev, buf_ptr, desc->width, false)) {
 80060b4:	88a2      	ldrh	r2, [r4, #4]
 80060b6:	6870      	ldr	r0, [r6, #4]
 80060b8:	4651      	mov	r1, sl
 80060ba:	f005 fc6e 	bl	800b99a <ssd1306_write_bus.isra.0>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d1bb      	bne.n	800603a <ssd1306_write+0x2a>
		buf_ptr = buf_ptr + desc->width;
 80060c2:	88a3      	ldrh	r3, [r4, #4]
 80060c4:	449a      	add	sl, r3
		if (buf_ptr > ((uint8_t *)buf + buf_len)) {
 80060c6:	197b      	adds	r3, r7, r5
 80060c8:	459a      	cmp	sl, r3
 80060ca:	f109 0901 	add.w	r9, r9, #1
 80060ce:	d9db      	bls.n	8006088 <ssd1306_write+0x78>
			LOG_ERR("Exceeded buffer length");
 80060d0:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <ssd1306_write+0xd8>)
 80060d2:	e7a9      	b.n	8006028 <ssd1306_write+0x18>
 80060d4:	080129fa 	.word	0x080129fa
 80060d8:	0800d1d0 	.word	0x0800d1d0
 80060dc:	08012a16 	.word	0x08012a16
 80060e0:	08012a36 	.word	0x08012a36
 80060e4:	08012a47 	.word	0x08012a47
 80060e8:	08012a5a 	.word	0x08012a5a

080060ec <gpio_pin_set.isra.0>:
 *
 * @retval 0 If successful.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
 80060ec:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 80060ee:	2301      	movs	r3, #1
 80060f0:	fa03 f101 	lsl.w	r1, r3, r1
 80060f4:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
 80060f6:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4219      	tst	r1, r3
 80060fc:	d10e      	bne.n	800611c <gpio_pin_set.isra.0+0x30>
 80060fe:	490e      	ldr	r1, [pc, #56]	; (8006138 <gpio_pin_set.isra.0+0x4c>)
 8006100:	4a0e      	ldr	r2, [pc, #56]	; (800613c <gpio_pin_set.isra.0+0x50>)
 8006102:	480f      	ldr	r0, [pc, #60]	; (8006140 <gpio_pin_set.isra.0+0x54>)
 8006104:	f240 5325 	movw	r3, #1317	; 0x525
 8006108:	f005 f983 	bl	800b412 <assert_print>
 800610c:	480d      	ldr	r0, [pc, #52]	; (8006144 <gpio_pin_set.isra.0+0x58>)
 800610e:	f005 f980 	bl	800b412 <assert_print>
 8006112:	480a      	ldr	r0, [pc, #40]	; (800613c <gpio_pin_set.isra.0+0x50>)
 8006114:	f240 5125 	movw	r1, #1317	; 0x525
 8006118:	f005 f974 	bl	800b404 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8006120:	bf18      	it	ne
 8006122:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8006126:	b122      	cbz	r2, 8006132 <gpio_pin_set.isra.0+0x46>
	return api->port_set_bits_raw(port, pins);
 8006128:	6883      	ldr	r3, [r0, #8]
 800612a:	68db      	ldr	r3, [r3, #12]
	}

	return gpio_pin_set_raw(port, pin, value);
}
 800612c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
 8006130:	4718      	bx	r3
 8006132:	6883      	ldr	r3, [r0, #8]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	e7f9      	b.n	800612c <gpio_pin_set.isra.0+0x40>
 8006138:	08012aa2 	.word	0x08012aa2
 800613c:	08012a71 	.word	0x08012a71
 8006140:	080118c5 	.word	0x080118c5
 8006144:	08012ae0 	.word	0x08012ae0

08006148 <ssd1306_init>:

	return 0;
}

static int ssd1306_init(const struct device *dev)
{
 8006148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800614a:	b089      	sub	sp, #36	; 0x24
	const struct ssd1306_config *config = dev->config;
 800614c:	6845      	ldr	r5, [r0, #4]
{
 800614e:	af00      	add	r7, sp, #0
 8006150:	4604      	mov	r4, r0
	return device_is_ready(config->bus.bus);
 8006152:	6828      	ldr	r0, [r5, #0]
 8006154:	f006 f812 	bl	800c17c <z_device_is_ready>

	LOG_DBG("");

	if (!ssd1306_bus_ready(dev)) {
 8006158:	b9c0      	cbnz	r0, 800618c <ssd1306_init+0x44>
		LOG_ERR("Bus device %s not ready!", config->bus.bus->name);
 800615a:	682b      	ldr	r3, [r5, #0]
 800615c:	466c      	mov	r4, sp
 800615e:	b088      	sub	sp, #32
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	466a      	mov	r2, sp
 8006164:	4971      	ldr	r1, [pc, #452]	; (800632c <ssd1306_init+0x1e4>)
 8006166:	4872      	ldr	r0, [pc, #456]	; (8006330 <ssd1306_init+0x1e8>)
 8006168:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800616c:	2302      	movs	r3, #2
 800616e:	7713      	strb	r3, [r2, #28]
 8006170:	4b70      	ldr	r3, [pc, #448]	; (8006334 <ssd1306_init+0x1ec>)
 8006172:	f842 3f10 	str.w	r3, [r2, #16]!
 8006176:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
 800617a:	f005 fc05 	bl	800b988 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
 800617e:	f06f 0515 	mvn.w	r5, #21
 8006182:	46a5      	mov	sp, r4
		LOG_ERR("Failed to initialize device!");
		return -EIO;
	}

	return 0;
}
 8006184:	4628      	mov	r0, r5
 8006186:	3724      	adds	r7, #36	; 0x24
 8006188:	46bd      	mov	sp, r7
 800618a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (config->reset.port) {
 800618c:	68a8      	ldr	r0, [r5, #8]
 800618e:	b9c8      	cbnz	r0, 80061c4 <ssd1306_init+0x7c>
	const struct ssd1306_config *config = dev->config;
 8006190:	6865      	ldr	r5, [r4, #4]
	uint8_t cmd_buf[] = {
 8006192:	f24a 73a4 	movw	r3, #42916	; 0xa7a4
 8006196:	80bb      	strh	r3, [r7, #4]
	if (config->reset.port) {
 8006198:	68ab      	ldr	r3, [r5, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d162      	bne.n	8006264 <ssd1306_init+0x11c>
	if (ssd1306_suspend(dev)) {
 800619e:	4620      	mov	r0, r4
 80061a0:	f005 fc28 	bl	800b9f4 <ssd1306_suspend>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d070      	beq.n	800628a <ssd1306_init+0x142>
		LOG_ERR("Failed to initialize device!");
 80061a8:	4b63      	ldr	r3, [pc, #396]	; (8006338 <ssd1306_init+0x1f0>)
 80061aa:	61fb      	str	r3, [r7, #28]
 80061ac:	2302      	movs	r3, #2
 80061ae:	4860      	ldr	r0, [pc, #384]	; (8006330 <ssd1306_init+0x1e8>)
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	f107 0218 	add.w	r2, r7, #24
 80061b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80061ba:	f005 fbe5 	bl	800b988 <z_log_msg_static_create.constprop.0>
		return -EIO;
 80061be:	f06f 0504 	mvn.w	r5, #4
 80061c2:	e7df      	b.n	8006184 <ssd1306_init+0x3c>
				  spec->pin,
 80061c4:	7b29      	ldrb	r1, [r5, #12]
				  spec->dt_flags | extra_flags);
 80061c6:	89eb      	ldrh	r3, [r5, #14]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
 80061c8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80061cc:	2a30      	cmp	r2, #48	; 0x30
	__unused const struct gpio_driver_config *const cfg =
 80061ce:	e9d0 5e01 	ldrd	r5, lr, [r0, #4]
	struct gpio_driver_data *data =
 80061d2:	f8d0 c010 	ldr.w	ip, [r0, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
 80061d6:	d10e      	bne.n	80061f6 <ssd1306_init+0xae>
 80061d8:	4958      	ldr	r1, [pc, #352]	; (800633c <ssd1306_init+0x1f4>)
 80061da:	4a59      	ldr	r2, [pc, #356]	; (8006340 <ssd1306_init+0x1f8>)
 80061dc:	4859      	ldr	r0, [pc, #356]	; (8006344 <ssd1306_init+0x1fc>)
 80061de:	f240 23bf 	movw	r3, #703	; 0x2bf
 80061e2:	f005 f916 	bl	800b412 <assert_print>
 80061e6:	4858      	ldr	r0, [pc, #352]	; (8006348 <ssd1306_init+0x200>)
 80061e8:	f005 f913 	bl	800b412 <assert_print>
 80061ec:	f240 21bf 	movw	r1, #703	; 0x2bf
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
 80061f0:	4853      	ldr	r0, [pc, #332]	; (8006340 <ssd1306_init+0x1f8>)
 80061f2:	f005 f907 	bl	800b404 <assert_post_action>
 80061f6:	f003 0206 	and.w	r2, r3, #6
 80061fa:	2a04      	cmp	r2, #4
 80061fc:	d109      	bne.n	8006212 <ssd1306_init+0xca>
 80061fe:	4953      	ldr	r1, [pc, #332]	; (800634c <ssd1306_init+0x204>)
 8006200:	4a4f      	ldr	r2, [pc, #316]	; (8006340 <ssd1306_init+0x1f8>)
 8006202:	4850      	ldr	r0, [pc, #320]	; (8006344 <ssd1306_init+0x1fc>)
 8006204:	f240 23c7 	movw	r3, #711	; 0x2c7
 8006208:	f005 f903 	bl	800b412 <assert_print>
 800620c:	f240 21c7 	movw	r1, #711	; 0x2c7
 8006210:	e7ee      	b.n	80061f0 <ssd1306_init+0xa8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8006212:	682d      	ldr	r5, [r5, #0]
 8006214:	2601      	movs	r6, #1
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8006216:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8006218:	fa06 f601 	lsl.w	r6, r6, r1
	return gpio_pin_configure(spec->port,
 800621c:	bf54      	ite	pl
 800621e:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8006222:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8006226:	422e      	tst	r6, r5
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8006228:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 800622c:	d10c      	bne.n	8006248 <ssd1306_init+0x100>
 800622e:	4948      	ldr	r1, [pc, #288]	; (8006350 <ssd1306_init+0x208>)
 8006230:	4a43      	ldr	r2, [pc, #268]	; (8006340 <ssd1306_init+0x1f8>)
 8006232:	4844      	ldr	r0, [pc, #272]	; (8006344 <ssd1306_init+0x1fc>)
 8006234:	f240 23da 	movw	r3, #730	; 0x2da
 8006238:	f005 f8eb 	bl	800b412 <assert_print>
 800623c:	4845      	ldr	r0, [pc, #276]	; (8006354 <ssd1306_init+0x20c>)
 800623e:	f005 f8e8 	bl	800b412 <assert_print>
 8006242:	f240 21da 	movw	r1, #730	; 0x2da
 8006246:	e7d3      	b.n	80061f0 <ssd1306_init+0xa8>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006248:	f8dc 5000 	ldr.w	r5, [ip]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800624c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800624e:	bf4c      	ite	mi
 8006250:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8006252:	43b5      	bicpl	r5, r6
 8006254:	f8cc 5000 	str.w	r5, [ip]
	return api->pin_configure(port, pin, flags);
 8006258:	f8de 3000 	ldr.w	r3, [lr]
 800625c:	4798      	blx	r3
		if (ret < 0) {
 800625e:	1e05      	subs	r5, r0, #0
 8006260:	da96      	bge.n	8006190 <ssd1306_init+0x48>
 8006262:	e78f      	b.n	8006184 <ssd1306_init+0x3c>
	return z_impl_k_sleep(timeout);
 8006264:	2100      	movs	r1, #0
 8006266:	200a      	movs	r0, #10
 8006268:	f002 fcea 	bl	8008c40 <z_impl_k_sleep>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
 800626c:	7b29      	ldrb	r1, [r5, #12]
 800626e:	68a8      	ldr	r0, [r5, #8]
 8006270:	2201      	movs	r2, #1
 8006272:	f7ff ff3b 	bl	80060ec <gpio_pin_set.isra.0>
 8006276:	2100      	movs	r1, #0
 8006278:	200a      	movs	r0, #10
 800627a:	f002 fce1 	bl	8008c40 <z_impl_k_sleep>
 800627e:	7b29      	ldrb	r1, [r5, #12]
 8006280:	68a8      	ldr	r0, [r5, #8]
 8006282:	2200      	movs	r2, #0
 8006284:	f7ff ff32 	bl	80060ec <gpio_pin_set.isra.0>
 8006288:	e789      	b.n	800619e <ssd1306_init+0x56>
	uint8_t cmd_buf[] = {
 800628a:	4b33      	ldr	r3, [pc, #204]	; (8006358 <ssd1306_init+0x210>)
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	889b      	ldrh	r3, [r3, #4]
 8006290:	60b8      	str	r0, [r7, #8]
 8006292:	81bb      	strh	r3, [r7, #12]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 8006294:	6860      	ldr	r0, [r4, #4]
 8006296:	2301      	movs	r3, #1
 8006298:	2206      	movs	r2, #6
 800629a:	f107 0108 	add.w	r1, r7, #8
 800629e:	f005 fb7c 	bl	800b99a <ssd1306_write_bus.isra.0>
	if (ssd1306_set_timing_setting(dev)) {
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d180      	bne.n	80061a8 <ssd1306_init+0x60>
	uint8_t cmd_buf[] = {
 80062a6:	4b2d      	ldr	r3, [pc, #180]	; (800635c <ssd1306_init+0x214>)
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	889a      	ldrh	r2, [r3, #4]
 80062ac:	799b      	ldrb	r3, [r3, #6]
 80062ae:	60b8      	str	r0, [r7, #8]
 80062b0:	81ba      	strh	r2, [r7, #12]
 80062b2:	73bb      	strb	r3, [r7, #14]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 80062b4:	6860      	ldr	r0, [r4, #4]
 80062b6:	2301      	movs	r3, #1
 80062b8:	2207      	movs	r2, #7
 80062ba:	f107 0108 	add.w	r1, r7, #8
 80062be:	f005 fb6c 	bl	800b99a <ssd1306_write_bus.isra.0>
	if (ssd1306_set_hardware_config(dev)) {
 80062c2:	2800      	cmp	r0, #0
 80062c4:	f47f af70 	bne.w	80061a8 <ssd1306_init+0x60>
	uint8_t cmd_buf[] = {
 80062c8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
 80062cc:	813b      	strh	r3, [r7, #8]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 80062ce:	6860      	ldr	r0, [r4, #4]
 80062d0:	2301      	movs	r3, #1
 80062d2:	2202      	movs	r2, #2
 80062d4:	f107 0108 	add.w	r1, r7, #8
 80062d8:	f005 fb5f 	bl	800b99a <ssd1306_write_bus.isra.0>
	if (ssd1306_set_panel_orientation(dev)) {
 80062dc:	2800      	cmp	r0, #0
 80062de:	f47f af63 	bne.w	80061a8 <ssd1306_init+0x60>
	uint8_t cmd_buf[] = {
 80062e2:	4b1f      	ldr	r3, [pc, #124]	; (8006360 <ssd1306_init+0x218>)
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 80062e4:	6860      	ldr	r0, [r4, #4]
	uint8_t cmd_buf[] = {
 80062e6:	881a      	ldrh	r2, [r3, #0]
 80062e8:	789b      	ldrb	r3, [r3, #2]
 80062ea:	813a      	strh	r2, [r7, #8]
 80062ec:	72bb      	strb	r3, [r7, #10]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 80062ee:	2203      	movs	r2, #3
 80062f0:	2301      	movs	r3, #1
 80062f2:	f107 0108 	add.w	r1, r7, #8
 80062f6:	f005 fb50 	bl	800b99a <ssd1306_write_bus.isra.0>
	if (ssd1306_set_charge_pump(dev)) {
 80062fa:	2800      	cmp	r0, #0
 80062fc:	f47f af54 	bne.w	80061a8 <ssd1306_init+0x60>
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
 8006300:	6860      	ldr	r0, [r4, #4]
 8006302:	2301      	movs	r3, #1
 8006304:	2202      	movs	r2, #2
 8006306:	1d39      	adds	r1, r7, #4
 8006308:	f005 fb47 	bl	800b99a <ssd1306_write_bus.isra.0>
 800630c:	2800      	cmp	r0, #0
 800630e:	f47f af4b 	bne.w	80061a8 <ssd1306_init+0x60>
	if (ssd1306_set_contrast(dev, CONFIG_SSD1306_DEFAULT_CONTRAST)) {
 8006312:	2180      	movs	r1, #128	; 0x80
 8006314:	4620      	mov	r0, r4
 8006316:	f005 fb5e 	bl	800b9d6 <ssd1306_set_contrast>
 800631a:	4605      	mov	r5, r0
 800631c:	2800      	cmp	r0, #0
 800631e:	f47f af43 	bne.w	80061a8 <ssd1306_init+0x60>
	ssd1306_resume(dev);
 8006322:	4620      	mov	r0, r4
 8006324:	f005 fb73 	bl	800ba0e <ssd1306_resume>
	return 0;
 8006328:	e72c      	b.n	8006184 <ssd1306_init+0x3c>
 800632a:	bf00      	nop
 800632c:	08012af2 	.word	0x08012af2
 8006330:	0800d1d0 	.word	0x0800d1d0
 8006334:	01000003 	.word	0x01000003
 8006338:	08012bb4 	.word	0x08012bb4
 800633c:	08012b0b 	.word	0x08012b0b
 8006340:	08012a71 	.word	0x08012a71
 8006344:	080118c5 	.word	0x080118c5
 8006348:	08012b44 	.word	0x08012b44
 800634c:	08012b81 	.word	0x08012b81
 8006350:	08012aa2 	.word	0x08012aa2
 8006354:	08012ae0 	.word	0x08012ae0
 8006358:	08012bd1 	.word	0x08012bd1
 800635c:	0800d210 	.word	0x0800d210
 8006360:	08012bd8 	.word	0x08012bd8

08006364 <gpio_stm32_manage_callback>:
}

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 8006364:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 8006366:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
 8006368:	b961      	cbnz	r1, 8006384 <gpio_stm32_manage_callback+0x20>
 800636a:	4921      	ldr	r1, [pc, #132]	; (80063f0 <gpio_stm32_manage_callback+0x8c>)
 800636c:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <gpio_stm32_manage_callback+0x90>)
 800636e:	4822      	ldr	r0, [pc, #136]	; (80063f8 <gpio_stm32_manage_callback+0x94>)
 8006370:	232d      	movs	r3, #45	; 0x2d
 8006372:	f005 f84e 	bl	800b412 <assert_print>
 8006376:	4821      	ldr	r0, [pc, #132]	; (80063fc <gpio_stm32_manage_callback+0x98>)
 8006378:	f005 f84b 	bl	800b412 <assert_print>
 800637c:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(callback->handler, "No callback handler!");
 800637e:	481d      	ldr	r0, [pc, #116]	; (80063f4 <gpio_stm32_manage_callback+0x90>)
 8006380:	f005 f840 	bl	800b404 <assert_post_action>
 8006384:	6848      	ldr	r0, [r1, #4]
 8006386:	b950      	cbnz	r0, 800639e <gpio_stm32_manage_callback+0x3a>
 8006388:	491d      	ldr	r1, [pc, #116]	; (8006400 <gpio_stm32_manage_callback+0x9c>)
 800638a:	4a1a      	ldr	r2, [pc, #104]	; (80063f4 <gpio_stm32_manage_callback+0x90>)
 800638c:	481a      	ldr	r0, [pc, #104]	; (80063f8 <gpio_stm32_manage_callback+0x94>)
 800638e:	232e      	movs	r3, #46	; 0x2e
 8006390:	f005 f83f 	bl	800b412 <assert_print>
 8006394:	481b      	ldr	r0, [pc, #108]	; (8006404 <gpio_stm32_manage_callback+0xa0>)
 8006396:	f005 f83c 	bl	800b412 <assert_print>
 800639a:	212e      	movs	r1, #46	; 0x2e
 800639c:	e7ef      	b.n	800637e <gpio_stm32_manage_callback+0x1a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 800639e:	6898      	ldr	r0, [r3, #8]

	if (!sys_slist_is_empty(callbacks)) {
 80063a0:	b148      	cbz	r0, 80063b6 <gpio_stm32_manage_callback+0x52>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80063a2:	4288      	cmp	r0, r1
 80063a4:	d113      	bne.n	80063ce <gpio_stm32_manage_callback+0x6a>
Z_GENLIST_REMOVE(slist, snode)
 80063a6:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 80063a8:	6808      	ldr	r0, [r1, #0]
	list->head = node;
 80063aa:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 80063ac:	42a1      	cmp	r1, r4
 80063ae:	d100      	bne.n	80063b2 <gpio_stm32_manage_callback+0x4e>
	list->tail = node;
 80063b0:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 80063b2:	2000      	movs	r0, #0
 80063b4:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 80063b6:	b97a      	cbnz	r2, 80063d8 <gpio_stm32_manage_callback+0x74>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 80063b8:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 80063ba:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80063bc:	4281      	cmp	r1, r0
 80063be:	d106      	bne.n	80063ce <gpio_stm32_manage_callback+0x6a>
	return node->next;
 80063c0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 80063c2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 80063c4:	68d8      	ldr	r0, [r3, #12]
 80063c6:	4281      	cmp	r1, r0
 80063c8:	d1f3      	bne.n	80063b2 <gpio_stm32_manage_callback+0x4e>
	list->tail = node;
 80063ca:	60dc      	str	r4, [r3, #12]
}
 80063cc:	e7f1      	b.n	80063b2 <gpio_stm32_manage_callback+0x4e>
	return node->next;
 80063ce:	4604      	mov	r4, r0
 80063d0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80063d2:	2800      	cmp	r0, #0
 80063d4:	d1f2      	bne.n	80063bc <gpio_stm32_manage_callback+0x58>
			if (!set) {
 80063d6:	b13a      	cbz	r2, 80063e8 <gpio_stm32_manage_callback+0x84>
	return list->head;
 80063d8:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 80063da:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 80063dc:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 80063de:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 80063e0:	2a00      	cmp	r2, #0
 80063e2:	d1e9      	bne.n	80063b8 <gpio_stm32_manage_callback+0x54>
	list->tail = node;
 80063e4:	60d9      	str	r1, [r3, #12]
}
 80063e6:	e7e7      	b.n	80063b8 <gpio_stm32_manage_callback+0x54>
				return -EINVAL;
 80063e8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 80063ec:	e7e5      	b.n	80063ba <gpio_stm32_manage_callback+0x56>
 80063ee:	bf00      	nop
 80063f0:	08012c1c 	.word	0x08012c1c
 80063f4:	08012bef 	.word	0x08012bef
 80063f8:	080118c5 	.word	0x080118c5
 80063fc:	08012c25 	.word	0x08012c25
 8006400:	08012c34 	.word	0x08012c34
 8006404:	08012c46 	.word	0x08012c46

08006408 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8006408:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 800640a:	6903      	ldr	r3, [r0, #16]
{
 800640c:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 800640e:	6058      	str	r0, [r3, #4]
 8006410:	4d08      	ldr	r5, [pc, #32]	; (8006434 <gpio_stm32_init+0x2c>)
 8006412:	4628      	mov	r0, r5
 8006414:	f005 feb2 	bl	800c17c <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8006418:	b140      	cbz	r0, 800642c <gpio_stm32_init+0x24>
					(clock_control_subsys_t *)&cfg->pclken);
 800641a:	6861      	ldr	r1, [r4, #4]
	return api->on(dev, sys);
 800641c:	68ab      	ldr	r3, [r5, #8]
 800641e:	310c      	adds	r1, #12
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4628      	mov	r0, r5
 8006424:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 8006426:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 800642a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 800642c:	f06f 0012 	mvn.w	r0, #18
 8006430:	e7fb      	b.n	800642a <gpio_stm32_init+0x22>
 8006432:	bf00      	nop
 8006434:	0800cd24 	.word	0x0800cd24

08006438 <gpio_stm32_isr>:
{
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	e9d1 6101 	ldrd	r6, r1, [r1, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800643e:	b119      	cbz	r1, 8006448 <gpio_stm32_isr+0x10>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8006440:	2501      	movs	r5, #1
	return node->next;
 8006442:	680c      	ldr	r4, [r1, #0]
 8006444:	4085      	lsls	r5, r0
 8006446:	b901      	cbnz	r1, 800644a <gpio_stm32_isr+0x12>
}
 8006448:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 800644a:	688a      	ldr	r2, [r1, #8]
 800644c:	402a      	ands	r2, r5
 800644e:	d010      	beq.n	8006472 <gpio_stm32_isr+0x3a>
			__ASSERT(cb->handler, "No callback handler!");
 8006450:	684b      	ldr	r3, [r1, #4]
 8006452:	b963      	cbnz	r3, 800646e <gpio_stm32_isr+0x36>
 8006454:	490a      	ldr	r1, [pc, #40]	; (8006480 <gpio_stm32_isr+0x48>)
 8006456:	4a0b      	ldr	r2, [pc, #44]	; (8006484 <gpio_stm32_isr+0x4c>)
 8006458:	480b      	ldr	r0, [pc, #44]	; (8006488 <gpio_stm32_isr+0x50>)
 800645a:	234e      	movs	r3, #78	; 0x4e
 800645c:	f004 ffd9 	bl	800b412 <assert_print>
 8006460:	480a      	ldr	r0, [pc, #40]	; (800648c <gpio_stm32_isr+0x54>)
 8006462:	f004 ffd6 	bl	800b412 <assert_print>
 8006466:	4807      	ldr	r0, [pc, #28]	; (8006484 <gpio_stm32_isr+0x4c>)
 8006468:	214e      	movs	r1, #78	; 0x4e
 800646a:	f004 ffcb 	bl	800b404 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
 800646e:	4630      	mov	r0, r6
 8006470:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8006472:	b11c      	cbz	r4, 800647c <gpio_stm32_isr+0x44>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	4621      	mov	r1, r4
 8006478:	461c      	mov	r4, r3
 800647a:	e7e4      	b.n	8006446 <gpio_stm32_isr+0xe>
 800647c:	4623      	mov	r3, r4
 800647e:	e7fa      	b.n	8006476 <gpio_stm32_isr+0x3e>
 8006480:	08012c5d 	.word	0x08012c5d
 8006484:	08012bef 	.word	0x08012bef
 8006488:	080118c5 	.word	0x080118c5
 800648c:	08012c46 	.word	0x08012c46

08006490 <gpio_stm32_pin_interrupt_configure>:
{
 8006490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006492:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8006494:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 8006498:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800649a:	6902      	ldr	r2, [r0, #16]
{
 800649c:	460c      	mov	r4, r1
 800649e:	461d      	mov	r5, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 80064a0:	d124      	bne.n	80064ec <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80064a2:	f001 0203 	and.w	r2, r1, #3
 80064a6:	3204      	adds	r2, #4
 80064a8:	0092      	lsls	r2, r2, #2
 80064aa:	230f      	movs	r3, #15
 80064ac:	4093      	lsls	r3, r2
 80064ae:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	4933      	ldr	r1, [pc, #204]	; (8006584 <gpio_stm32_pin_interrupt_configure+0xf4>)
 80064b6:	3202      	adds	r2, #2
 80064b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80064bc:	0c19      	lsrs	r1, r3, #16
 80064be:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c2:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 80064c6:	fab2 f282 	clz	r2, r2
 80064ca:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80064cc:	68b2      	ldr	r2, [r6, #8]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d109      	bne.n	80064e6 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7ff f8d8 	bl	8005688 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80064d8:	4620      	mov	r0, r4
 80064da:	f7ff f923 	bl	8005724 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80064de:	2100      	movs	r1, #0
 80064e0:	4620      	mov	r0, r4
 80064e2:	f7ff f8dd 	bl	80056a0 <stm32_exti_trigger>
	int err = 0;
 80064e6:	2000      	movs	r0, #0
}
 80064e8:	b003      	add	sp, #12
 80064ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 80064ec:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 80064f0:	d041      	beq.n	8006576 <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80064f2:	4925      	ldr	r1, [pc, #148]	; (8006588 <gpio_stm32_pin_interrupt_configure+0xf8>)
 80064f4:	4620      	mov	r0, r4
 80064f6:	f7ff f903 	bl	8005700 <stm32_exti_set_callback>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d13e      	bne.n	800657c <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 80064fe:	4a23      	ldr	r2, [pc, #140]	; (800658c <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 8006500:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 8006502:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006506:	466b      	mov	r3, sp
 8006508:	e883 0003 	stmia.w	r3, {r0, r1}
 800650c:	4820      	ldr	r0, [pc, #128]	; (8006590 <gpio_stm32_pin_interrupt_configure+0x100>)
 800650e:	6882      	ldr	r2, [r0, #8]
 8006510:	4619      	mov	r1, r3
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	4790      	blx	r2
	if (ret != 0) {
 8006516:	b9c0      	cbnz	r0, 800654a <gpio_stm32_pin_interrupt_configure+0xba>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006518:	f004 0303 	and.w	r3, r4, #3
 800651c:	3304      	adds	r3, #4
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	220f      	movs	r2, #15
 8006522:	409a      	lsls	r2, r3
 8006524:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8006528:	b2d3      	uxtb	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006530:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006534:	0c11      	lsrs	r1, r2, #16
 8006536:	6898      	ldr	r0, [r3, #8]
 8006538:	ea20 4012 	bic.w	r0, r0, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653c:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8006540:	fab2 f282 	clz	r2, r2
 8006544:	4096      	lsls	r6, r2
 8006546:	4306      	orrs	r6, r0
 8006548:	609e      	str	r6, [r3, #8]
	switch (trig) {
 800654a:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 800654e:	d00e      	beq.n	800656e <gpio_stm32_pin_interrupt_configure+0xde>
 8006550:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8006554:	d00d      	beq.n	8006572 <gpio_stm32_pin_interrupt_configure+0xe2>
 8006556:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 800655a:	4259      	negs	r1, r3
 800655c:	4159      	adcs	r1, r3
 800655e:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8006560:	4620      	mov	r0, r4
 8006562:	f7ff f89d 	bl	80056a0 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8006566:	4620      	mov	r0, r4
 8006568:	f7ff f880 	bl	800566c <stm32_exti_enable>
 800656c:	e7bb      	b.n	80064e6 <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 800656e:	2101      	movs	r1, #1
 8006570:	e7f6      	b.n	8006560 <gpio_stm32_pin_interrupt_configure+0xd0>
		edge = STM32_EXTI_TRIG_BOTH;
 8006572:	2103      	movs	r1, #3
 8006574:	e7f4      	b.n	8006560 <gpio_stm32_pin_interrupt_configure+0xd0>
		err = -ENOTSUP;
 8006576:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800657a:	e7b5      	b.n	80064e8 <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 800657c:	f06f 000f 	mvn.w	r0, #15
	return err;
 8006580:	e7b2      	b.n	80064e8 <gpio_stm32_pin_interrupt_configure+0x58>
 8006582:	bf00      	nop
 8006584:	40010000 	.word	0x40010000
 8006588:	08006439 	.word	0x08006439
 800658c:	0800d208 	.word	0x0800d208
 8006590:	0800cd24 	.word	0x0800cd24

08006594 <msg_init>:
#define STM32_I2C_TRANSFER_TIMEOUT_MSEC  500

static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
			    uint8_t *next_msg_flags, uint16_t slave,
			    uint32_t transfer)
{
 8006594:	b530      	push	{r4, r5, lr}
	const struct i2c_stm32_config *cfg = dev->config;
	struct i2c_stm32_data *data = dev->data;
 8006596:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8006598:	6840      	ldr	r0, [r0, #4]
 800659a:	68c0      	ldr	r0, [r0, #12]
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabledReloadMode(I2C_TypeDef *I2Cx)
{
  return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
 800659c:	6845      	ldr	r5, [r0, #4]
 800659e:	01ed      	lsls	r5, r5, #7
 80065a0:	d507      	bpl.n	80065b2 <msg_init+0x1e>
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 80065a2:	6843      	ldr	r3, [r0, #4]
 80065a4:	684a      	ldr	r2, [r1, #4]
 80065a6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80065aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 80065ae:	6043      	str	r3, [r0, #4]
#endif
		LL_I2C_Enable(i2c);

		LL_I2C_GenerateStartCondition(i2c);
	}
}
 80065b0:	bd30      	pop	{r4, r5, pc}
		if (I2C_ADDR_10_BITS & data->dev_config) {
 80065b2:	6a24      	ldr	r4, [r4, #32]
 80065b4:	4d1d      	ldr	r5, [pc, #116]	; (800662c <msg_init+0x98>)
 80065b6:	f014 0f01 	tst.w	r4, #1
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 80065ba:	6844      	ldr	r4, [r0, #4]
 80065bc:	d02a      	beq.n	8006614 <msg_init+0x80>
 80065be:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80065c2:	6044      	str	r4, [r0, #4]
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 80065c4:	6844      	ldr	r4, [r0, #4]
 80065c6:	402c      	ands	r4, r5
 80065c8:	4323      	orrs	r3, r4
 80065ca:	6043      	str	r3, [r0, #4]
		if (!(msg->flags & I2C_MSG_STOP) && next_msg_flags &&
 80065cc:	7a0b      	ldrb	r3, [r1, #8]
 80065ce:	079c      	lsls	r4, r3, #30
 80065d0:	d428      	bmi.n	8006624 <msg_init+0x90>
 80065d2:	b33a      	cbz	r2, 8006624 <msg_init+0x90>
 80065d4:	7813      	ldrb	r3, [r2, #0]
 80065d6:	075b      	lsls	r3, r3, #29
 80065d8:	d424      	bmi.n	8006624 <msg_init+0x90>
  SET_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 80065da:	6843      	ldr	r3, [r0, #4]
 80065dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 80065e0:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80065e2:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 80065e4:	9a03      	ldr	r2, [sp, #12]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80065e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80065ea:	6043      	str	r3, [r0, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 80065ec:	6843      	ldr	r3, [r0, #4]
 80065ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065f2:	4313      	orrs	r3, r2
 80065f4:	6043      	str	r3, [r0, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 80065f6:	6843      	ldr	r3, [r0, #4]
 80065f8:	684a      	ldr	r2, [r1, #4]
 80065fa:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80065fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006602:	6043      	str	r3, [r0, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006604:	6803      	ldr	r3, [r0, #0]
 8006606:	f043 0301 	orr.w	r3, r3, #1
 800660a:	6003      	str	r3, [r0, #0]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 800660c:	6843      	ldr	r3, [r0, #4]
 800660e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006612:	e7cc      	b.n	80065ae <msg_init+0x1a>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 8006614:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8006618:	6044      	str	r4, [r0, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800661a:	6844      	ldr	r4, [r0, #4]
 800661c:	402c      	ands	r4, r5
 800661e:	ea44 0343 	orr.w	r3, r4, r3, lsl #1
 8006622:	e7d2      	b.n	80065ca <msg_init+0x36>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 8006624:	6843      	ldr	r3, [r0, #4]
 8006626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800662a:	e7d9      	b.n	80065e0 <msg_init+0x4c>
 800662c:	fffffc00 	.word	0xfffffc00

08006630 <stm32_i2c_configure_timing>:
	return msg_done(dev, msg->flags);
}
#endif

int stm32_i2c_configure_timing(const struct device *dev, uint32_t clock)
{
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_stm32_config *cfg = dev->config;
 8006634:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8006636:	f8d0 9010 	ldr.w	r9, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800663a:	f8d7 800c 	ldr.w	r8, [r7, #12]
{
 800663e:	b087      	sub	sp, #28
 8006640:	460c      	mov	r4, r1
	uint32_t i2c_h_min_time, i2c_l_min_time;
	uint32_t presc = 1U;
	uint32_t timing = 0U;

	/*  Look for an adequate preset timing value */
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 8006642:	2500      	movs	r5, #0
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	42ab      	cmp	r3, r5
 8006648:	d837      	bhi.n	80066ba <stm32_i2c_configure_timing+0x8a>
			return 0;
		}
	}

	/* No preset timing was provided, let's dynamically configure */
	switch (I2C_SPEED_GET(data->dev_config)) {
 800664a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800664e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006652:	2b01      	cmp	r3, #1
 8006654:	d077      	beq.n	8006746 <stm32_i2c_configure_timing+0x116>
 8006656:	2b02      	cmp	r3, #2
 8006658:	f040 8081 	bne.w	800675e <stm32_i2c_configure_timing+0x12e>
 800665c:	f240 5614 	movw	r6, #1300	; 0x514
 8006660:	f44f 7516 	mov.w	r5, #600	; 0x258
 8006664:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 8006668:	f240 1c77 	movw	ip, #375	; 0x177
	}

	/* Calculate period until prescaler matches */
	do {
		uint32_t t_presc = clock / presc;
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 800666c:	4b3d      	ldr	r3, [pc, #244]	; (8006764 <stm32_i2c_configure_timing+0x134>)
	switch (I2C_SPEED_GET(data->dev_config)) {
 800666e:	2102      	movs	r1, #2
		uint32_t t_presc = clock / presc;
 8006670:	1e4a      	subs	r2, r1, #1
 8006672:	fbb4 f2f2 	udiv	r2, r4, r2
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 8006676:	fbb3 f2f2 	udiv	r2, r3, r2
		uint32_t sclh = i2c_h_min_time / ns_presc;
 800667a:	fbb5 f0f2 	udiv	r0, r5, r2
		uint32_t scll = i2c_l_min_time / ns_presc;
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
		uint32_t scldel = i2c_setup_time_min / ns_presc;

		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 800667e:	3801      	subs	r0, #1
 8006680:	28ff      	cmp	r0, #255	; 0xff
 8006682:	d869      	bhi.n	8006758 <stm32_i2c_configure_timing+0x128>
		uint32_t scll = i2c_l_min_time / ns_presc;
 8006684:	fbb6 fef2 	udiv	lr, r6, r2
		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 8006688:	f10e 3eff 	add.w	lr, lr, #4294967295
 800668c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8006690:	d862      	bhi.n	8006758 <stm32_i2c_configure_timing+0x128>
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
 8006692:	fbbc f9f2 	udiv	r9, ip, r2
			++presc;
			continue;
		}

		if (sdadel > 15 || (scldel - 1) > 15) {
 8006696:	f1b9 0f0f 	cmp.w	r9, #15
 800669a:	d85d      	bhi.n	8006758 <stm32_i2c_configure_timing+0x128>
		uint32_t scldel = i2c_setup_time_min / ns_presc;
 800669c:	fbb7 f2f2 	udiv	r2, r7, r2
		if (sdadel > 15 || (scldel - 1) > 15) {
 80066a0:	3a01      	subs	r2, #1
 80066a2:	2a0f      	cmp	r2, #15
 80066a4:	d858      	bhi.n	8006758 <stm32_i2c_configure_timing+0x128>
			++presc;
			continue;
		}

		timing = __LL_I2C_CONVERT_TIMINGS(presc - 1,
 80066a6:	3902      	subs	r1, #2
 80066a8:	ea4e 4309 	orr.w	r3, lr, r9, lsl #16
 80066ac:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80066b0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80066b4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80066b8:	e02a      	b.n	8006710 <stm32_i2c_configure_timing+0xe0>
		const struct i2c_config_timing *preset = &cfg->timings[i];
 80066ba:	f8d7 b018 	ldr.w	fp, [r7, #24]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
 80066be:	4a2a      	ldr	r2, [pc, #168]	; (8006768 <stm32_i2c_configure_timing+0x138>)
 80066c0:	260c      	movs	r6, #12
 80066c2:	436e      	muls	r6, r5
 80066c4:	eb0b 0a06 	add.w	sl, fp, r6
		uint32_t speed = i2c_map_dt_bitrate(preset->i2c_speed);
 80066c8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d030      	beq.n	8006732 <stm32_i2c_configure_timing+0x102>
 80066d0:	d824      	bhi.n	800671c <stm32_i2c_configure_timing+0xec>
 80066d2:	4a26      	ldr	r2, [pc, #152]	; (800676c <stm32_i2c_configure_timing+0x13c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d02e      	beq.n	8006736 <stm32_i2c_configure_timing+0x106>
 80066d8:	4a25      	ldr	r2, [pc, #148]	; (8006770 <stm32_i2c_configure_timing+0x140>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d02d      	beq.n	800673a <stm32_i2c_configure_timing+0x10a>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");
 80066de:	4b25      	ldr	r3, [pc, #148]	; (8006774 <stm32_i2c_configure_timing+0x144>)
 80066e0:	9305      	str	r3, [sp, #20]
 80066e2:	2302      	movs	r3, #2
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	2300      	movs	r3, #0
 80066e8:	4823      	ldr	r0, [pc, #140]	; (8006778 <stm32_i2c_configure_timing+0x148>)
 80066ea:	aa04      	add	r2, sp, #16
 80066ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80066f0:	f7fd fbac 	bl	8003e4c <z_impl_z_log_msg_static_create>

	return 0;
 80066f4:	2300      	movs	r3, #0
		if ((I2C_SPEED_GET(speed) == I2C_SPEED_GET(data->dev_config))
 80066f6:	f8d9 2020 	ldr.w	r2, [r9, #32]
 80066fa:	f3c2 0242 	ubfx	r2, r2, #1, #3
 80066fe:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 8006702:	d11e      	bne.n	8006742 <stm32_i2c_configure_timing+0x112>
		   && (preset->periph_clock == clock)) {
 8006704:	f85b 3006 	ldr.w	r3, [fp, r6]
 8006708:	42a3      	cmp	r3, r4
 800670a:	d11a      	bne.n	8006742 <stm32_i2c_configure_timing+0x112>
			LL_I2C_SetTiming(i2c, preset->timing_setting);
 800670c:	f8da 3008 	ldr.w	r3, [sl, #8]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8006710:	f8c8 3010 	str.w	r3, [r8, #16]
			return 0;
 8006714:	2000      	movs	r0, #0
	}

	LL_I2C_SetTiming(i2c, timing);

	return 0;
}
 8006716:	b007      	add	sp, #28
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (bitrate) {
 800671c:	4a17      	ldr	r2, [pc, #92]	; (800677c <stm32_i2c_configure_timing+0x14c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00d      	beq.n	800673e <stm32_i2c_configure_timing+0x10e>
 8006722:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 8006726:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 800672a:	4293      	cmp	r3, r2
 800672c:	d1d7      	bne.n	80066de <stm32_i2c_configure_timing+0xae>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 800672e:	230a      	movs	r3, #10
 8006730:	e7e1      	b.n	80066f6 <stm32_i2c_configure_timing+0xc6>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 8006732:	2306      	movs	r3, #6
 8006734:	e7df      	b.n	80066f6 <stm32_i2c_configure_timing+0xc6>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 8006736:	2302      	movs	r3, #2
 8006738:	e7dd      	b.n	80066f6 <stm32_i2c_configure_timing+0xc6>
	switch (bitrate) {
 800673a:	2304      	movs	r3, #4
 800673c:	e7db      	b.n	80066f6 <stm32_i2c_configure_timing+0xc6>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 800673e:	2308      	movs	r3, #8
 8006740:	e7d9      	b.n	80066f6 <stm32_i2c_configure_timing+0xc6>
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 8006742:	3501      	adds	r5, #1
 8006744:	e77e      	b.n	8006644 <stm32_i2c_configure_timing+0x14>
		i2c_l_min_time = 4700U;
 8006746:	f241 265c 	movw	r6, #4700	; 0x125c
		i2c_h_min_time = 4000U;
 800674a:	f44f 657a 	mov.w	r5, #4000	; 0xfa0
		i2c_setup_time_min = 1250U;
 800674e:	f240 47e2 	movw	r7, #1250	; 0x4e2
		i2c_hold_time_min = 500U;
 8006752:	f44f 7cfa 	mov.w	ip, #500	; 0x1f4
 8006756:	e789      	b.n	800666c <stm32_i2c_configure_timing+0x3c>
	} while (presc < 16);
 8006758:	3101      	adds	r1, #1
 800675a:	2911      	cmp	r1, #17
 800675c:	d188      	bne.n	8006670 <stm32_i2c_configure_timing+0x40>
	switch (I2C_SPEED_GET(data->dev_config)) {
 800675e:	f06f 0015 	mvn.w	r0, #21
 8006762:	e7d8      	b.n	8006716 <stm32_i2c_configure_timing+0xe6>
 8006764:	3b9aca00 	.word	0x3b9aca00
 8006768:	000f4240 	.word	0x000f4240
 800676c:	000186a0 	.word	0x000186a0
 8006770:	00061a80 	.word	0x00061a80
 8006774:	08012cc1 	.word	0x08012cc1
 8006778:	0800d1a0 	.word	0x0800d1a0
 800677c:	0033e140 	.word	0x0033e140

08006780 <i2c_stm32_init>:
	.target_unregister = i2c_stm32_target_unregister,
#endif
};

static int i2c_stm32_init(const struct device *dev)
{
 8006780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006784:	b086      	sub	sp, #24
	const struct device *const clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct i2c_stm32_config *cfg = dev->config;
 8006786:	6846      	ldr	r6, [r0, #4]
	uint32_t bitrate_cfg;
	int ret;
	struct i2c_stm32_data *data = dev->data;
 8006788:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
 800678c:	af00      	add	r7, sp, #0
 800678e:	4605      	mov	r5, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
 8006790:	f04f 32ff 	mov.w	r2, #4294967295
 8006794:	2100      	movs	r1, #0
 8006796:	4640      	mov	r0, r8
 8006798:	f005 fd21 	bl	800c1de <z_impl_k_sem_init>
#ifdef CONFIG_I2C_STM32_INTERRUPT
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	cfg->irq_config_func(dev);
 800679c:	6833      	ldr	r3, [r6, #0]
 800679e:	4628      	mov	r0, r5
 80067a0:	4798      	blx	r3
	ret = pinctrl_lookup_state(config, id, &state);
 80067a2:	6970      	ldr	r0, [r6, #20]
 80067a4:	463a      	mov	r2, r7
 80067a6:	2100      	movs	r1, #0
 80067a8:	f005 fcc0 	bl	800c12c <pinctrl_lookup_state>
	if (ret < 0) {
 80067ac:	1e04      	subs	r4, r0, #0
 80067ae:	db07      	blt.n	80067c0 <i2c_stm32_init+0x40>
	return pinctrl_apply_state_direct(config, state);
 80067b0:	683b      	ldr	r3, [r7, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80067b2:	2200      	movs	r2, #0
 80067b4:	7919      	ldrb	r1, [r3, #4]
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	f000 fc32 	bl	8007020 <pinctrl_configure_pins>
#endif

	/* Configure dt provided device signals when available */
	ret = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret < 0) {
 80067bc:	1e04      	subs	r4, r0, #0
 80067be:	da14      	bge.n	80067ea <i2c_stm32_init+0x6a>
		LOG_ERR("I2C pinctrl setup failed (%d)", ret);
 80067c0:	466d      	mov	r5, sp
 80067c2:	b088      	sub	sp, #32
 80067c4:	466a      	mov	r2, sp
 80067c6:	4b45      	ldr	r3, [pc, #276]	; (80068dc <i2c_stm32_init+0x15c>)
 80067c8:	e9c2 3405 	strd	r3, r4, [r2, #20]
 80067cc:	2303      	movs	r3, #3
 80067ce:	f842 3f10 	str.w	r3, [r2, #16]!
 80067d2:	4843      	ldr	r0, [pc, #268]	; (80068e0 <i2c_stm32_init+0x160>)
 80067d4:	2300      	movs	r3, #0
 80067d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80067da:	f7fd fb37 	bl	8003e4c <z_impl_z_log_msg_static_create>
 80067de:	46ad      	mov	sp, r5
		LOG_ERR("i2c: failure initializing");
		return ret;
	}

	return 0;
}
 80067e0:	4620      	mov	r0, r4
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ea:	2201      	movs	r2, #1
 80067ec:	4611      	mov	r1, r2
 80067ee:	f108 0010 	add.w	r0, r8, #16
 80067f2:	f005 fcf4 	bl	800c1de <z_impl_k_sem_init>
 80067f6:	4c3b      	ldr	r4, [pc, #236]	; (80068e4 <i2c_stm32_init+0x164>)
 80067f8:	4620      	mov	r0, r4
 80067fa:	f005 fcbf 	bl	800c17c <z_device_is_ready>
	if (!device_is_ready(clk)) {
 80067fe:	4603      	mov	r3, r0
 8006800:	b968      	cbnz	r0, 800681e <i2c_stm32_init+0x9e>
		LOG_ERR("clock control device not ready");
 8006802:	4a39      	ldr	r2, [pc, #228]	; (80068e8 <i2c_stm32_init+0x168>)
 8006804:	617a      	str	r2, [r7, #20]
 8006806:	2202      	movs	r2, #2
 8006808:	613a      	str	r2, [r7, #16]
 800680a:	4835      	ldr	r0, [pc, #212]	; (80068e0 <i2c_stm32_init+0x160>)
 800680c:	f107 0210 	add.w	r2, r7, #16
 8006810:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006814:	f7fd fb1a 	bl	8003e4c <z_impl_z_log_msg_static_create>
		return -ENODEV;
 8006818:	f06f 0412 	mvn.w	r4, #18
 800681c:	e7e0      	b.n	80067e0 <i2c_stm32_init+0x60>
 800681e:	68a3      	ldr	r3, [r4, #8]
 8006820:	4620      	mov	r0, r4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	1d31      	adds	r1, r6, #4
 8006826:	4798      	blx	r3
	if (clock_control_on(clk,
 8006828:	4604      	mov	r4, r0
 800682a:	b170      	cbz	r0, 800684a <i2c_stm32_init+0xca>
		LOG_ERR("i2c: failure enabling clock");
 800682c:	4b2f      	ldr	r3, [pc, #188]	; (80068ec <i2c_stm32_init+0x16c>)
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	2302      	movs	r3, #2
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	482a      	ldr	r0, [pc, #168]	; (80068e0 <i2c_stm32_init+0x160>)
 8006836:	2300      	movs	r3, #0
 8006838:	f107 0210 	add.w	r2, r7, #16
 800683c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006840:	f7fd fb04 	bl	8003e4c <z_impl_z_log_msg_static_create>
		return -EIO;
 8006844:	f06f 0404 	mvn.w	r4, #4
 8006848:	e7ca      	b.n	80067e0 <i2c_stm32_init+0x60>
	switch ((uint32_t)cfg->i2c) {
 800684a:	68f2      	ldr	r2, [r6, #12]
 800684c:	4b28      	ldr	r3, [pc, #160]	; (80068f0 <i2c_stm32_init+0x170>)
 800684e:	429a      	cmp	r2, r3
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8006850:	bf01      	itttt	eq
 8006852:	4a28      	ldreq	r2, [pc, #160]	; (80068f4 <i2c_stm32_init+0x174>)
 8006854:	6b13      	ldreq	r3, [r2, #48]	; 0x30
 8006856:	f043 0310 	orreq.w	r3, r3, #16
 800685a:	6313      	streq	r3, [r2, #48]	; 0x30
	bitrate_cfg = i2c_map_dt_bitrate(cfg->bitrate);
 800685c:	6933      	ldr	r3, [r6, #16]
	switch (bitrate) {
 800685e:	4a26      	ldr	r2, [pc, #152]	; (80068f8 <i2c_stm32_init+0x178>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d033      	beq.n	80068cc <i2c_stm32_init+0x14c>
 8006864:	d827      	bhi.n	80068b6 <i2c_stm32_init+0x136>
 8006866:	4a25      	ldr	r2, [pc, #148]	; (80068fc <i2c_stm32_init+0x17c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d031      	beq.n	80068d0 <i2c_stm32_init+0x150>
 800686c:	4a24      	ldr	r2, [pc, #144]	; (8006900 <i2c_stm32_init+0x180>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d030      	beq.n	80068d4 <i2c_stm32_init+0x154>
	LOG_ERR("Invalid I2C bit rate value");
 8006872:	4b24      	ldr	r3, [pc, #144]	; (8006904 <i2c_stm32_init+0x184>)
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	2302      	movs	r3, #2
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800687e:	4818      	ldr	r0, [pc, #96]	; (80068e0 <i2c_stm32_init+0x160>)
 8006880:	2300      	movs	r3, #0
 8006882:	f107 0210 	add.w	r2, r7, #16
 8006886:	f7fd fae1 	bl	8003e4c <z_impl_z_log_msg_static_create>
	return 0;
 800688a:	2100      	movs	r1, #0
	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_CONTROLLER | bitrate_cfg);
 800688c:	4628      	mov	r0, r5
 800688e:	f041 0110 	orr.w	r1, r1, #16
 8006892:	f005 fb79 	bl	800bf88 <i2c_stm32_runtime_configure>
	if (ret < 0) {
 8006896:	1e05      	subs	r5, r0, #0
 8006898:	daa2      	bge.n	80067e0 <i2c_stm32_init+0x60>
		LOG_ERR("i2c: failure initializing");
 800689a:	4b1b      	ldr	r3, [pc, #108]	; (8006908 <i2c_stm32_init+0x188>)
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	2302      	movs	r3, #2
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	480f      	ldr	r0, [pc, #60]	; (80068e0 <i2c_stm32_init+0x160>)
 80068a4:	2300      	movs	r3, #0
 80068a6:	f107 0210 	add.w	r2, r7, #16
 80068aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80068ae:	f7fd facd 	bl	8003e4c <z_impl_z_log_msg_static_create>
		return ret;
 80068b2:	462c      	mov	r4, r5
 80068b4:	e794      	b.n	80067e0 <i2c_stm32_init+0x60>
	switch (bitrate) {
 80068b6:	4a15      	ldr	r2, [pc, #84]	; (800690c <i2c_stm32_init+0x18c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00d      	beq.n	80068d8 <i2c_stm32_init+0x158>
 80068bc:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 80068c0:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d1d4      	bne.n	8006872 <i2c_stm32_init+0xf2>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 80068c8:	210a      	movs	r1, #10
 80068ca:	e7df      	b.n	800688c <i2c_stm32_init+0x10c>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 80068cc:	2106      	movs	r1, #6
 80068ce:	e7dd      	b.n	800688c <i2c_stm32_init+0x10c>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 80068d0:	2102      	movs	r1, #2
 80068d2:	e7db      	b.n	800688c <i2c_stm32_init+0x10c>
	switch (bitrate) {
 80068d4:	2104      	movs	r1, #4
 80068d6:	e7d9      	b.n	800688c <i2c_stm32_init+0x10c>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 80068d8:	2108      	movs	r1, #8
 80068da:	e7d7      	b.n	800688c <i2c_stm32_init+0x10c>
 80068dc:	08012cec 	.word	0x08012cec
 80068e0:	0800d198 	.word	0x0800d198
 80068e4:	0800cd24 	.word	0x0800cd24
 80068e8:	08012973 	.word	0x08012973
 80068ec:	08012d0a 	.word	0x08012d0a
 80068f0:	40005400 	.word	0x40005400
 80068f4:	40021000 	.word	0x40021000
 80068f8:	000f4240 	.word	0x000f4240
 80068fc:	000186a0 	.word	0x000186a0
 8006900:	00061a80 	.word	0x00061a80
 8006904:	08012cc1 	.word	0x08012cc1
 8006908:	08012d26 	.word	0x08012d26
 800690c:	0033e140 	.word	0x0033e140

08006910 <uart_stm32_set_baudrate.part.0>:
#ifdef USART_CR1_OVER8
				     LL_USART_OVERSAMPLING_16,
#endif
				     baud_rate);
		/* Check BRR is greater than or equal to 16d */
		__ASSERT(LL_USART_ReadReg(config->usart, BRR) > 16,
 8006910:	4c07      	ldr	r4, [pc, #28]	; (8006930 <uart_stm32_set_baudrate.part.0+0x20>)
 8006912:	4908      	ldr	r1, [pc, #32]	; (8006934 <uart_stm32_set_baudrate.part.0+0x24>)
 8006914:	4808      	ldr	r0, [pc, #32]	; (8006938 <uart_stm32_set_baudrate.part.0+0x28>)
static inline void uart_stm32_set_baudrate(const struct device *dev, uint32_t baud_rate)
 8006916:	b508      	push	{r3, lr}
		__ASSERT(LL_USART_ReadReg(config->usart, BRR) > 16,
 8006918:	4622      	mov	r2, r4
 800691a:	23bc      	movs	r3, #188	; 0xbc
 800691c:	f004 fd79 	bl	800b412 <assert_print>
 8006920:	4806      	ldr	r0, [pc, #24]	; (800693c <uart_stm32_set_baudrate.part.0+0x2c>)
 8006922:	f004 fd76 	bl	800b412 <assert_print>
 8006926:	21bc      	movs	r1, #188	; 0xbc
 8006928:	4620      	mov	r0, r4
 800692a:	f004 fd6b 	bl	800b404 <assert_post_action>
 800692e:	bf00      	nop
 8006930:	08012d5a 	.word	0x08012d5a
 8006934:	08012d89 	.word	0x08012d89
 8006938:	080118c5 	.word	0x080118c5
 800693c:	08012da5 	.word	0x08012da5

08006940 <uart_stm32_set_baudrate>:
{
 8006940:	b530      	push	{r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 8006942:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8006944:	6844      	ldr	r4, [r0, #4]
		if (clock_control_get_rate(data->clock,
 8006946:	6858      	ldr	r0, [r3, #4]
	if (api->get_rate == NULL) {
 8006948:	6883      	ldr	r3, [r0, #8]
 800694a:	68db      	ldr	r3, [r3, #12]
{
 800694c:	460d      	mov	r5, r1
 800694e:	b089      	sub	sp, #36	; 0x24
					   (clock_control_subsys_t)&config->pclken[0],
 8006950:	6861      	ldr	r1, [r4, #4]
 8006952:	b963      	cbnz	r3, 800696e <uart_stm32_set_baudrate+0x2e>
			LOG_ERR("Failed call clock_control_get_rate(pclken[0])");
 8006954:	4b11      	ldr	r3, [pc, #68]	; (800699c <uart_stm32_set_baudrate+0x5c>)
 8006956:	9307      	str	r3, [sp, #28]
 8006958:	2302      	movs	r3, #2
 800695a:	9306      	str	r3, [sp, #24]
 800695c:	4810      	ldr	r0, [pc, #64]	; (80069a0 <uart_stm32_set_baudrate+0x60>)
 800695e:	2300      	movs	r3, #0
 8006960:	aa06      	add	r2, sp, #24
 8006962:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006966:	f7fd fa71 	bl	8003e4c <z_impl_z_log_msg_static_create>
			 "BaudRateReg >= 16");

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 800696a:	b009      	add	sp, #36	; 0x24
 800696c:	bd30      	pop	{r4, r5, pc}
	return api->get_rate(dev, sys, rate);
 800696e:	aa01      	add	r2, sp, #4
 8006970:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8006972:	2800      	cmp	r0, #0
 8006974:	dbee      	blt.n	8006954 <uart_stm32_set_baudrate+0x14>
		LL_USART_SetOverSampling(config->usart,
 8006976:	6822      	ldr	r2, [r4, #0]
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8006978:	6813      	ldr	r3, [r2, #0]
 800697a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800697e:	6013      	str	r3, [r2, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006980:	9b01      	ldr	r3, [sp, #4]
		LL_USART_SetBaudRate(config->usart,
 8006982:	6822      	ldr	r2, [r4, #0]
 8006984:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 8006988:	fbb3 f3f5 	udiv	r3, r3, r5
 800698c:	b29b      	uxth	r3, r3
 800698e:	60d3      	str	r3, [r2, #12]
		__ASSERT(LL_USART_ReadReg(config->usart, BRR) > 16,
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2b10      	cmp	r3, #16
 8006996:	d8e8      	bhi.n	800696a <uart_stm32_set_baudrate+0x2a>
 8006998:	f7ff ffba 	bl	8006910 <uart_stm32_set_baudrate.part.0>
 800699c:	08012db9 	.word	0x08012db9
 80069a0:	0800d1d8 	.word	0x0800d1d8

080069a4 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 80069a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80069a8:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 80069aa:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 80069ac:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 80069ae:	2b01      	cmp	r3, #1
{
 80069b0:	460c      	mov	r4, r1
	switch (parity) {
 80069b2:	f000 8085 	beq.w	8006ac0 <uart_stm32_configure+0x11c>
 80069b6:	1e9a      	subs	r2, r3, #2
 80069b8:	4251      	negs	r1, r2
 80069ba:	4151      	adcs	r1, r2
 80069bc:	0289      	lsls	r1, r1, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80069be:	f894 c005 	ldrb.w	ip, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 80069c2:	f894 8006 	ldrb.w	r8, [r4, #6]
 80069c6:	f1bc 0f02 	cmp.w	ip, #2
 80069ca:	bf96      	itet	ls
 80069cc:	4a62      	ldrls	r2, [pc, #392]	; (8006b58 <uart_stm32_configure+0x1b4>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80069ce:	f44f 5700 	movhi.w	r7, #8192	; 0x2000
 80069d2:	f832 701c 	ldrhls.w	r7, [r2, ip, lsl #1]
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 80069d6:	79e2      	ldrb	r2, [r4, #7]
	switch (db) {
 80069d8:	f1b8 0f02 	cmp.w	r8, #2
 80069dc:	d073      	beq.n	8006ac6 <uart_stm32_configure+0x122>
 80069de:	f1b8 0f04 	cmp.w	r8, #4
 80069e2:	f000 8099 	beq.w	8006b18 <uart_stm32_configure+0x174>
		if (p == UART_CFG_PARITY_NONE) {
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d17a      	bne.n	8006ae0 <uart_stm32_configure+0x13c>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 80069ea:	2a01      	cmp	r2, #1
 80069ec:	f02c 0c02 	bic.w	ip, ip, #2
 80069f0:	f040 80a3 	bne.w	8006b3a <uart_stm32_configure+0x196>
	if (IS_LPUART_INSTANCE(config->usart) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80069f4:	f1bc 0f00 	cmp.w	ip, #0
 80069f8:	f000 808e 	beq.w	8006b18 <uart_stm32_configure+0x174>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80069fc:	f1b8 0f01 	cmp.w	r8, #1
 8006a00:	f240 808a 	bls.w	8006b18 <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8006a04:	f44f 7e40 	mov.w	lr, #768	; 0x300
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8006a08:	f8d5 c000 	ldr.w	ip, [r5]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8006a0c:	b16a      	cbz	r2, 8006a2a <uart_stm32_configure+0x86>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8006a0e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8006b5c <uart_stm32_configure+0x1b8>
 8006a12:	45c4      	cmp	ip, r8
 8006a14:	d007      	beq.n	8006a26 <uart_stm32_configure+0x82>
 8006a16:	f5a8 4874 	sub.w	r8, r8, #62464	; 0xf400
 8006a1a:	45c4      	cmp	ip, r8
 8006a1c:	d003      	beq.n	8006a26 <uart_stm32_configure+0x82>
 8006a1e:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8006a22:	45c4      	cmp	ip, r8
 8006a24:	d178      	bne.n	8006b18 <uart_stm32_configure+0x174>
 8006a26:	2a01      	cmp	r2, #1
 8006a28:	d176      	bne.n	8006b18 <uart_stm32_configure+0x174>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8006a2a:	f8dc 2000 	ldr.w	r2, [ip]
 8006a2e:	f022 0201 	bic.w	r2, r2, #1
 8006a32:	f8cc 2000 	str.w	r2, [ip]
	return LL_USART_GetParity(config->usart);
 8006a36:	6842      	ldr	r2, [r0, #4]
 8006a38:	f8d2 c000 	ldr.w	ip, [r2]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8006a3c:	f8dc 2000 	ldr.w	r2, [ip]
 8006a40:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(config->usart);

	if (parity != uart_stm32_get_parity(dev)) {
 8006a44:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8006a46:	bf1f      	itttt	ne
 8006a48:	f8dc 2000 	ldrne.w	r2, [ip]
 8006a4c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8006a50:	430a      	orrne	r2, r1
 8006a52:	f8cc 2000 	strne.w	r2, [ip]
	return LL_USART_GetStopBitsLength(config->usart);
 8006a56:	6842      	ldr	r2, [r0, #4]
 8006a58:	6811      	ldr	r1, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8006a5a:	684a      	ldr	r2, [r1, #4]
 8006a5c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8006a60:	4297      	cmp	r7, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006a62:	bf1f      	itttt	ne
 8006a64:	684a      	ldrne	r2, [r1, #4]
 8006a66:	f422 5240 	bicne.w	r2, r2, #12288	; 0x3000
 8006a6a:	433a      	orrne	r2, r7
 8006a6c:	604a      	strne	r2, [r1, #4]
	return LL_USART_GetDataWidth(config->usart);
 8006a6e:	6842      	ldr	r2, [r0, #4]
 8006a70:	6811      	ldr	r1, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8006a72:	680a      	ldr	r2, [r1, #0]
 8006a74:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 8006a78:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8006a7a:	bf1f      	itttt	ne
 8006a7c:	680a      	ldrne	r2, [r1, #0]
 8006a7e:	f022 2210 	bicne.w	r2, r2, #268439552	; 0x10001000
 8006a82:	4313      	orrne	r3, r2
 8006a84:	600b      	strne	r3, [r1, #0]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8006a86:	6843      	ldr	r3, [r0, #4]
 8006a88:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8006a8a:	6893      	ldr	r3, [r2, #8]
 8006a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8006a90:	459e      	cmp	lr, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006a92:	bf1f      	itttt	ne
 8006a94:	6893      	ldrne	r3, [r2, #8]
 8006a96:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8006a9a:	ea43 030e 	orrne.w	r3, r3, lr
 8006a9e:	6093      	strne	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8006aa0:	6821      	ldr	r1, [r4, #0]
 8006aa2:	6833      	ldr	r3, [r6, #0]
 8006aa4:	4299      	cmp	r1, r3
 8006aa6:	d003      	beq.n	8006ab0 <uart_stm32_configure+0x10c>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8006aa8:	f7ff ff4a 	bl	8006940 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	6033      	str	r3, [r6, #0]
	}

	LL_USART_Enable(config->usart);
 8006ab0:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006ab2:	6813      	ldr	r3, [r2, #0]
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	6013      	str	r3, [r2, #0]
	return 0;
 8006aba:	2000      	movs	r0, #0
};
 8006abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (parity) {
 8006ac0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ac4:	e77b      	b.n	80069be <uart_stm32_configure+0x1a>
		if (p == UART_CFG_PARITY_NONE) {
 8006ac6:	bb0b      	cbnz	r3, 8006b0c <uart_stm32_configure+0x168>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8006ac8:	2a01      	cmp	r2, #1
 8006aca:	f02c 0c02 	bic.w	ip, ip, #2
 8006ace:	d12f      	bne.n	8006b30 <uart_stm32_configure+0x18c>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006ad0:	f1bc 0f00 	cmp.w	ip, #0
 8006ad4:	d020      	beq.n	8006b18 <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8006ad6:	f44f 7e40 	mov.w	lr, #768	; 0x300
			return LL_USART_DATAWIDTH_7B;
 8006ada:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ade:	e793      	b.n	8006a08 <uart_stm32_configure+0x64>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8006ae0:	3b03      	subs	r3, #3
 8006ae2:	2a01      	cmp	r2, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006ae4:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8006ae6:	d10c      	bne.n	8006b02 <uart_stm32_configure+0x15e>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d915      	bls.n	8006b18 <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8006aec:	f44f 7e40 	mov.w	lr, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006af0:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 8006af4:	d010      	beq.n	8006b18 <uart_stm32_configure+0x174>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8006af6:	f1b8 0f01 	cmp.w	r8, #1
 8006afa:	d90d      	bls.n	8006b18 <uart_stm32_configure+0x174>
 8006afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b00:	e782      	b.n	8006a08 <uart_stm32_configure+0x64>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d908      	bls.n	8006b18 <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 8006b06:	f04f 0e00 	mov.w	lr, #0
 8006b0a:	e7f1      	b.n	8006af0 <uart_stm32_configure+0x14c>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8006b0c:	3b03      	subs	r3, #3
 8006b0e:	2a01      	cmp	r2, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006b10:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8006b12:	d004      	beq.n	8006b1e <uart_stm32_configure+0x17a>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d819      	bhi.n	8006b4c <uart_stm32_configure+0x1a8>
		return -ENOTSUP;
 8006b18:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006b1c:	e7ce      	b.n	8006abc <uart_stm32_configure+0x118>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d9fa      	bls.n	8006b18 <uart_stm32_configure+0x174>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006b22:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 8006b26:	d0f7      	beq.n	8006b18 <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8006b28:	f44f 7e40 	mov.w	lr, #768	; 0x300
			return LL_USART_DATAWIDTH_8B;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	e76b      	b.n	8006a08 <uart_stm32_configure+0x64>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006b30:	f1bc 0f00 	cmp.w	ip, #0
 8006b34:	d0f0      	beq.n	8006b18 <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 8006b36:	469e      	mov	lr, r3
 8006b38:	e7cf      	b.n	8006ada <uart_stm32_configure+0x136>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006b3a:	f1bc 0f00 	cmp.w	ip, #0
 8006b3e:	d0eb      	beq.n	8006b18 <uart_stm32_configure+0x174>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8006b40:	f1b8 0f01 	cmp.w	r8, #1
 8006b44:	d9e8      	bls.n	8006b18 <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 8006b46:	469e      	mov	lr, r3
			return LL_USART_DATAWIDTH_8B;
 8006b48:	4673      	mov	r3, lr
 8006b4a:	e75d      	b.n	8006a08 <uart_stm32_configure+0x64>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8006b4c:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 8006b50:	d0e2      	beq.n	8006b18 <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 8006b52:	f04f 0e00 	mov.w	lr, #0
 8006b56:	e7f7      	b.n	8006b48 <uart_stm32_configure+0x1a4>
 8006b58:	0800d744 	.word	0x0800d744
 8006b5c:	40013800 	.word	0x40013800

08006b60 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8006b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b64:	b086      	sub	sp, #24
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
 8006b66:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8006b6a:	6844      	ldr	r4, [r0, #4]
{
 8006b6c:	4606      	mov	r6, r0
	data->clock = clk;
 8006b6e:	485b      	ldr	r0, [pc, #364]	; (8006cdc <uart_stm32_init+0x17c>)
 8006b70:	f8c8 0004 	str.w	r0, [r8, #4]
{
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	f005 fb01 	bl	800c17c <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	b988      	cbnz	r0, 8006ba2 <uart_stm32_init+0x42>
		LOG_ERR("clock control device not ready");
 8006b7e:	4a58      	ldr	r2, [pc, #352]	; (8006ce0 <uart_stm32_init+0x180>)
 8006b80:	617a      	str	r2, [r7, #20]
 8006b82:	2202      	movs	r2, #2
 8006b84:	613a      	str	r2, [r7, #16]
 8006b86:	4857      	ldr	r0, [pc, #348]	; (8006ce4 <uart_stm32_init+0x184>)
 8006b88:	f107 0210 	add.w	r2, r7, #16
 8006b8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
 8006b90:	f06f 0512 	mvn.w	r5, #18
 8006b94:	f7fd f95a 	bl	8003e4c <z_impl_z_log_msg_static_create>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8006b98:	4628      	mov	r0, r5
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8006ba2:	f8d8 0004 	ldr.w	r0, [r8, #4]
	return api->on(dev, sys);
 8006ba6:	6861      	ldr	r1, [r4, #4]
 8006ba8:	6883      	ldr	r3, [r0, #8]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4798      	blx	r3
	if (err != 0) {
 8006bae:	4605      	mov	r5, r0
 8006bb0:	b160      	cbz	r0, 8006bcc <uart_stm32_init+0x6c>
		LOG_ERR("Could not enable (LP)UART clock");
 8006bb2:	4b4d      	ldr	r3, [pc, #308]	; (8006ce8 <uart_stm32_init+0x188>)
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	484a      	ldr	r0, [pc, #296]	; (8006ce4 <uart_stm32_init+0x184>)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f107 0210 	add.w	r2, r7, #16
 8006bc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006bc6:	f7fd f941 	bl	8003e4c <z_impl_z_log_msg_static_create>
		return err;
 8006bca:	e7e5      	b.n	8006b98 <uart_stm32_init+0x38>
	ret = pinctrl_lookup_state(config, id, &state);
 8006bcc:	4601      	mov	r1, r0
 8006bce:	463a      	mov	r2, r7
 8006bd0:	69a0      	ldr	r0, [r4, #24]
 8006bd2:	f005 faab 	bl	800c12c <pinctrl_lookup_state>
	if (ret < 0) {
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	da01      	bge.n	8006bde <uart_stm32_init+0x7e>
 8006bda:	4605      	mov	r5, r0
 8006bdc:	e7dc      	b.n	8006b98 <uart_stm32_init+0x38>
	return pinctrl_apply_state_direct(config, state);
 8006bde:	683b      	ldr	r3, [r7, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8006be0:	462a      	mov	r2, r5
 8006be2:	7919      	ldrb	r1, [r3, #4]
 8006be4:	6818      	ldr	r0, [r3, #0]
 8006be6:	f000 fa1b 	bl	8007020 <pinctrl_configure_pins>
	if (err < 0) {
 8006bea:	2800      	cmp	r0, #0
 8006bec:	dbf5      	blt.n	8006bda <uart_stm32_init+0x7a>
	LL_USART_Disable(config->usart);
 8006bee:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8006bf0:	6813      	ldr	r3, [r2, #0]
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	6013      	str	r3, [r2, #0]
	LL_USART_SetTransferDirection(config->usart,
 8006bf8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8006bfe:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	e842 3900 	strex	r9, r3, [r2]
 8006c06:	f1b9 0f00 	cmp.w	r9, #0
 8006c0a:	d1f6      	bne.n	8006bfa <uart_stm32_init+0x9a>
	if (config->parity == 2) {
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d059      	beq.n	8006cc6 <uart_stm32_init+0x166>
	} else if (config->parity == 1) {
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d05c      	beq.n	8006cd0 <uart_stm32_init+0x170>
		if (config->parity != 0) {
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d144      	bne.n	8006ca4 <uart_stm32_init+0x144>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8006c1a:	2300      	movs	r3, #0
	LL_USART_ConfigCharacter(config->usart,
 8006c1c:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8006c1e:	680a      	ldr	r2, [r1, #0]
 8006c20:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c24:	ea43 0309 	orr.w	r3, r3, r9
 8006c28:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	600a      	str	r2, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006c30:	684b      	ldr	r3, [r1, #4]
 8006c32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c36:	604b      	str	r3, [r1, #4]
	if (config->hw_flow_control) {
 8006c38:	7b23      	ldrb	r3, [r4, #12]
 8006c3a:	b12b      	cbz	r3, 8006c48 <uart_stm32_init+0xe8>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8006c3c:	6873      	ldr	r3, [r6, #4]
 8006c3e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006c40:	6893      	ldr	r3, [r2, #8]
 8006c42:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006c46:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8006c48:	f8d8 1000 	ldr.w	r1, [r8]
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f7ff fe77 	bl	8006940 <uart_stm32_set_baudrate>
	if (config->single_wire) {
 8006c52:	7d23      	ldrb	r3, [r4, #20]
 8006c54:	b123      	cbz	r3, 8006c60 <uart_stm32_init+0x100>
		LL_USART_EnableHalfDuplex(config->usart);
 8006c56:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8006c58:	6893      	ldr	r3, [r2, #8]
 8006c5a:	f043 0308 	orr.w	r3, r3, #8
 8006c5e:	6093      	str	r3, [r2, #8]
	if (config->tx_rx_swap) {
 8006c60:	7d63      	ldrb	r3, [r4, #21]
 8006c62:	b123      	cbz	r3, 8006c6e <uart_stm32_init+0x10e>
		LL_USART_SetTXRXSwap(config->usart, LL_USART_TXRX_SWAPPED);
 8006c64:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 8006c66:	6853      	ldr	r3, [r2, #4]
 8006c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6c:	6053      	str	r3, [r2, #4]
	if (config->rx_invert) {
 8006c6e:	7da3      	ldrb	r3, [r4, #22]
 8006c70:	b123      	cbz	r3, 8006c7c <uart_stm32_init+0x11c>
		LL_USART_SetRXPinLevel(config->usart, LL_USART_RXPIN_LEVEL_INVERTED);
 8006c72:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 8006c74:	6853      	ldr	r3, [r2, #4]
 8006c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c7a:	6053      	str	r3, [r2, #4]
	if (config->tx_invert) {
 8006c7c:	7de3      	ldrb	r3, [r4, #23]
 8006c7e:	b123      	cbz	r3, 8006c8a <uart_stm32_init+0x12a>
		LL_USART_SetTXPinLevel(config->usart, LL_USART_TXPIN_LEVEL_INVERTED);
 8006c80:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 8006c82:	6853      	ldr	r3, [r2, #4]
 8006c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c88:	6053      	str	r3, [r2, #4]
	LL_USART_Enable(config->usart);
 8006c8a:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006c8c:	6813      	ldr	r3, [r2, #0]
 8006c8e:	f043 0301 	orr.w	r3, r3, #1
 8006c92:	6013      	str	r3, [r2, #0]
	while (!(LL_USART_IsActiveFlag_TEACK(config->usart))) {
 8006c94:	6823      	ldr	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	0291      	lsls	r1, r2, #10
 8006c9a:	d5fc      	bpl.n	8006c96 <uart_stm32_init+0x136>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8006c9c:	69da      	ldr	r2, [r3, #28]
 8006c9e:	0252      	lsls	r2, r2, #9
 8006ca0:	d5fc      	bpl.n	8006c9c <uart_stm32_init+0x13c>
 8006ca2:	e779      	b.n	8006b98 <uart_stm32_init+0x38>
			LOG_WRN("Invalid parity setting '%d'."
 8006ca4:	46ea      	mov	sl, sp
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	466a      	mov	r2, sp
 8006caa:	4910      	ldr	r1, [pc, #64]	; (8006cec <uart_stm32_init+0x18c>)
 8006cac:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	f842 3f10 	str.w	r3, [r2, #16]!
 8006cb6:	480b      	ldr	r0, [pc, #44]	; (8006ce4 <uart_stm32_init+0x184>)
 8006cb8:	464b      	mov	r3, r9
 8006cba:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8006cbe:	f7fd f8c5 	bl	8003e4c <z_impl_z_log_msg_static_create>
 8006cc2:	46d5      	mov	sp, sl
 8006cc4:	e7a9      	b.n	8006c1a <uart_stm32_init+0xba>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8006cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8006cca:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8006cce:	e7a5      	b.n	8006c1c <uart_stm32_init+0xbc>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8006cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8006cd4:	f44f 69c0 	mov.w	r9, #1536	; 0x600
 8006cd8:	e7a0      	b.n	8006c1c <uart_stm32_init+0xbc>
 8006cda:	bf00      	nop
 8006cdc:	0800cd24 	.word	0x0800cd24
 8006ce0:	08012973 	.word	0x08012973
 8006ce4:	0800d1d8 	.word	0x0800d1d8
 8006ce8:	08012de7 	.word	0x08012de7
 8006cec:	08012e07 	.word	0x08012e07

08006cf0 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
 8006cf0:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8006cf2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006cf6:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8006cf8:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8006cfa:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8006cfc:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <elapsed+0x34>)
 8006cfe:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8006d02:	4909      	ldr	r1, [pc, #36]	; (8006d28 <elapsed+0x38>)
 8006d04:	d101      	bne.n	8006d0a <elapsed+0x1a>
	    || (val1 < val2)) {
 8006d06:	4282      	cmp	r2, r0
 8006d08:	d206      	bcs.n	8006d18 <elapsed+0x28>
		overflow_cyc += last_load;
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	680c      	ldr	r4, [r1, #0]
 8006d0e:	4422      	add	r2, r4
 8006d10:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8006d12:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006d16:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	680a      	ldr	r2, [r1, #0]
 8006d1c:	4413      	add	r3, r2
}
 8006d1e:	1a18      	subs	r0, r3, r0
 8006d20:	bd10      	pop	{r4, pc}
 8006d22:	bf00      	nop
 8006d24:	20000bcc 	.word	0x20000bcc
 8006d28:	20000bd8 	.word	0x20000bd8

08006d2c <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d2c:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <sys_clock_driver_init+0x28>)
 8006d2e:	2210      	movs	r2, #16
 8006d30:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8006d34:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <sys_clock_driver_init+0x2c>)
 8006d36:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8006d3a:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8006d3c:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <sys_clock_driver_init+0x30>)
 8006d3e:	2000      	movs	r0, #0
 8006d40:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8006d42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006d46:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8006d48:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	f042 0207 	orr.w	r2, r2, #7
 8006d50:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8006d52:	4770      	bx	lr
 8006d54:	e000ed00 	.word	0xe000ed00
 8006d58:	20000bd8 	.word	0x20000bd8
 8006d5c:	20000bcc 	.word	0x20000bcc

08006d60 <sys_clock_isr>:
{
 8006d60:	b508      	push	{r3, lr}
	elapsed();
 8006d62:	f7ff ffc5 	bl	8006cf0 <elapsed>
	cycle_count += overflow_cyc;
 8006d66:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <sys_clock_isr+0x38>)
 8006d68:	4a0c      	ldr	r2, [pc, #48]	; (8006d9c <sys_clock_isr+0x3c>)
 8006d6a:	6818      	ldr	r0, [r3, #0]
 8006d6c:	6811      	ldr	r1, [r2, #0]
 8006d6e:	4408      	add	r0, r1
 8006d70:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8006d76:	4a0a      	ldr	r2, [pc, #40]	; (8006da0 <sys_clock_isr+0x40>)
 8006d78:	6813      	ldr	r3, [r2, #0]
 8006d7a:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8006d7e:	1ac0      	subs	r0, r0, r3
 8006d80:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8006d84:	fb01 3300 	mla	r3, r1, r0, r3
 8006d88:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8006d8a:	f002 fa23 	bl	80091d4 <sys_clock_announce>
}
 8006d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8006d92:	f7fd be55 	b.w	8004a40 <z_arm_exc_exit>
 8006d96:	bf00      	nop
 8006d98:	20000bcc 	.word	0x20000bcc
 8006d9c:	20000bd4 	.word	0x20000bd4
 8006da0:	20000bd0 	.word	0x20000bd0

08006da4 <sys_clock_set_timeout>:
{
 8006da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da8:	4e43      	ldr	r6, [pc, #268]	; (8006eb8 <sys_clock_set_timeout+0x114>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8006daa:	b379      	cbz	r1, 8006e0c <sys_clock_set_timeout+0x68>
 8006dac:	1c42      	adds	r2, r0, #1
 8006dae:	d10a      	bne.n	8006dc6 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8006db0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006db4:	6913      	ldr	r3, [r2, #16]
 8006db6:	f023 0301 	bic.w	r3, r3, #1
 8006dba:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8006dbc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8006dc0:	6033      	str	r3, [r6, #0]
}
 8006dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8006dc6:	6834      	ldr	r4, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8006dc8:	2801      	cmp	r0, #1
 8006dca:	dd25      	ble.n	8006e18 <sys_clock_set_timeout+0x74>
 8006dcc:	f640 1819 	movw	r8, #2329	; 0x919
 8006dd0:	4540      	cmp	r0, r8
 8006dd2:	dc01      	bgt.n	8006dd8 <sys_clock_set_timeout+0x34>
 8006dd4:	f100 38ff 	add.w	r8, r0, #4294967295
	__asm__ volatile(
 8006dd8:	f04f 0310 	mov.w	r3, #16
 8006ddc:	f3ef 8511 	mrs	r5, BASEPRI
 8006de0:	f383 8812 	msr	BASEPRI_MAX, r3
 8006de4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8006de8:	4834      	ldr	r0, [pc, #208]	; (8006ebc <sys_clock_set_timeout+0x118>)
 8006dea:	f000 fcb9 	bl	8007760 <z_spin_lock_valid>
 8006dee:	b9b0      	cbnz	r0, 8006e1e <sys_clock_set_timeout+0x7a>
 8006df0:	4a33      	ldr	r2, [pc, #204]	; (8006ec0 <sys_clock_set_timeout+0x11c>)
 8006df2:	4934      	ldr	r1, [pc, #208]	; (8006ec4 <sys_clock_set_timeout+0x120>)
 8006df4:	4834      	ldr	r0, [pc, #208]	; (8006ec8 <sys_clock_set_timeout+0x124>)
 8006df6:	238e      	movs	r3, #142	; 0x8e
 8006df8:	f004 fb0b 	bl	800b412 <assert_print>
 8006dfc:	492f      	ldr	r1, [pc, #188]	; (8006ebc <sys_clock_set_timeout+0x118>)
 8006dfe:	4833      	ldr	r0, [pc, #204]	; (8006ecc <sys_clock_set_timeout+0x128>)
 8006e00:	f004 fb07 	bl	800b412 <assert_print>
 8006e04:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8006e06:	482e      	ldr	r0, [pc, #184]	; (8006ec0 <sys_clock_set_timeout+0x11c>)
 8006e08:	f004 fafc 	bl	800b404 <assert_post_action>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8006e0c:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8006e0e:	6834      	ldr	r4, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8006e10:	d1da      	bne.n	8006dc8 <sys_clock_set_timeout+0x24>
 8006e12:	f640 1019 	movw	r0, #2329	; 0x919
 8006e16:	e7dd      	b.n	8006dd4 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8006e18:	f04f 0800 	mov.w	r8, #0
 8006e1c:	e7dc      	b.n	8006dd8 <sys_clock_set_timeout+0x34>
	z_spin_lock_set_owner(l);
 8006e1e:	4827      	ldr	r0, [pc, #156]	; (8006ebc <sys_clock_set_timeout+0x118>)
	cycle_count += pending;
 8006e20:	4f2b      	ldr	r7, [pc, #172]	; (8006ed0 <sys_clock_set_timeout+0x12c>)
 8006e22:	f000 fcbb 	bl	800779c <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
 8006e26:	f7ff ff63 	bl	8006cf0 <elapsed>
	val1 = SysTick->VAL;
 8006e2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8006e2e:	2100      	movs	r1, #0
	val1 = SysTick->VAL;
 8006e30:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	18c2      	adds	r2, r0, r3
	overflow_cyc = 0U;
 8006e38:	4b26      	ldr	r3, [pc, #152]	; (8006ed4 <sys_clock_set_timeout+0x130>)
 8006e3a:	6019      	str	r1, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8006e3c:	4b26      	ldr	r3, [pc, #152]	; (8006ed8 <sys_clock_set_timeout+0x134>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8006e40:	1ad1      	subs	r1, r2, r3
 8006e42:	d431      	bmi.n	8006ea8 <sys_clock_set_timeout+0x104>
		delay = ticks * CYC_PER_TICK;
 8006e44:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8006e48:	fb00 1108 	mla	r1, r0, r8, r1
 8006e4c:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
		delay -= unannounced;
 8006e50:	1a9b      	subs	r3, r3, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8006e52:	311f      	adds	r1, #31
 8006e54:	fbb1 f1f0 	udiv	r1, r1, r0
		delay -= unannounced;
 8006e58:	fb00 3301 	mla	r3, r0, r1, r3
		delay = MAX(delay, MIN_DELAY);
 8006e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e60:	d922      	bls.n	8006ea8 <sys_clock_set_timeout+0x104>
		if (delay > MAX_CYCLES) {
 8006e62:	491e      	ldr	r1, [pc, #120]	; (8006edc <sys_clock_set_timeout+0x138>)
 8006e64:	428b      	cmp	r3, r1
 8006e66:	bf28      	it	cs
 8006e68:	460b      	movcs	r3, r1
	val2 = SysTick->VAL;
 8006e6a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 8006e6e:	6033      	str	r3, [r6, #0]
	val2 = SysTick->VAL;
 8006e70:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
 8006e72:	3b01      	subs	r3, #1
 8006e74:	614b      	str	r3, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8006e76:	2300      	movs	r3, #0
	if (val1 < val2) {
 8006e78:	4584      	cmp	ip, r0
	SysTick->VAL = 0; /* resets timer to last_load */
 8006e7a:	618b      	str	r3, [r1, #24]
	if (val1 < val2) {
 8006e7c:	ebac 0300 	sub.w	r3, ip, r0
		cycle_count += (val1 + (last_load_ - val2));
 8006e80:	bf38      	it	cc
 8006e82:	191b      	addcc	r3, r3, r4
		cycle_count += (val1 - val2);
 8006e84:	441a      	add	r2, r3
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8006e86:	480d      	ldr	r0, [pc, #52]	; (8006ebc <sys_clock_set_timeout+0x118>)
 8006e88:	603a      	str	r2, [r7, #0]
 8006e8a:	f000 fc77 	bl	800777c <z_spin_unlock_valid>
 8006e8e:	b970      	cbnz	r0, 8006eae <sys_clock_set_timeout+0x10a>
 8006e90:	4a0b      	ldr	r2, [pc, #44]	; (8006ec0 <sys_clock_set_timeout+0x11c>)
 8006e92:	4913      	ldr	r1, [pc, #76]	; (8006ee0 <sys_clock_set_timeout+0x13c>)
 8006e94:	480c      	ldr	r0, [pc, #48]	; (8006ec8 <sys_clock_set_timeout+0x124>)
 8006e96:	23b9      	movs	r3, #185	; 0xb9
 8006e98:	f004 fabb 	bl	800b412 <assert_print>
 8006e9c:	4907      	ldr	r1, [pc, #28]	; (8006ebc <sys_clock_set_timeout+0x118>)
 8006e9e:	4811      	ldr	r0, [pc, #68]	; (8006ee4 <sys_clock_set_timeout+0x140>)
 8006ea0:	f004 fab7 	bl	800b412 <assert_print>
 8006ea4:	21b9      	movs	r1, #185	; 0xb9
 8006ea6:	e7ae      	b.n	8006e06 <sys_clock_set_timeout+0x62>
 8006ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eac:	e7dd      	b.n	8006e6a <sys_clock_set_timeout+0xc6>
	__asm__ volatile(
 8006eae:	f385 8811 	msr	BASEPRI, r5
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	e784      	b.n	8006dc2 <sys_clock_set_timeout+0x1e>
 8006eb8:	20000bd8 	.word	0x20000bd8
 8006ebc:	20000bdc 	.word	0x20000bdc
 8006ec0:	08011b97 	.word	0x08011b97
 8006ec4:	08011bc4 	.word	0x08011bc4
 8006ec8:	080118c5 	.word	0x080118c5
 8006ecc:	08011bd9 	.word	0x08011bd9
 8006ed0:	20000bd4 	.word	0x20000bd4
 8006ed4:	20000bcc 	.word	0x20000bcc
 8006ed8:	20000bd0 	.word	0x20000bd0
 8006edc:	00ffdf20 	.word	0x00ffdf20
 8006ee0:	08011bf1 	.word	0x08011bf1
 8006ee4:	08011c08 	.word	0x08011c08

08006ee8 <sys_clock_elapsed>:
{
 8006ee8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8006eea:	f04f 0310 	mov.w	r3, #16
 8006eee:	f3ef 8511 	mrs	r5, BASEPRI
 8006ef2:	f383 8812 	msr	BASEPRI_MAX, r3
 8006ef6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8006efa:	481b      	ldr	r0, [pc, #108]	; (8006f68 <sys_clock_elapsed+0x80>)
 8006efc:	f000 fc30 	bl	8007760 <z_spin_lock_valid>
 8006f00:	b968      	cbnz	r0, 8006f1e <sys_clock_elapsed+0x36>
 8006f02:	4a1a      	ldr	r2, [pc, #104]	; (8006f6c <sys_clock_elapsed+0x84>)
 8006f04:	491a      	ldr	r1, [pc, #104]	; (8006f70 <sys_clock_elapsed+0x88>)
 8006f06:	481b      	ldr	r0, [pc, #108]	; (8006f74 <sys_clock_elapsed+0x8c>)
 8006f08:	238e      	movs	r3, #142	; 0x8e
 8006f0a:	f004 fa82 	bl	800b412 <assert_print>
 8006f0e:	4916      	ldr	r1, [pc, #88]	; (8006f68 <sys_clock_elapsed+0x80>)
 8006f10:	4819      	ldr	r0, [pc, #100]	; (8006f78 <sys_clock_elapsed+0x90>)
 8006f12:	f004 fa7e 	bl	800b412 <assert_print>
 8006f16:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8006f18:	4814      	ldr	r0, [pc, #80]	; (8006f6c <sys_clock_elapsed+0x84>)
 8006f1a:	f004 fa73 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8006f1e:	4812      	ldr	r0, [pc, #72]	; (8006f68 <sys_clock_elapsed+0x80>)
 8006f20:	f000 fc3c 	bl	800779c <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8006f24:	f7ff fee4 	bl	8006cf0 <elapsed>
 8006f28:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <sys_clock_elapsed+0x94>)
 8006f2a:	681c      	ldr	r4, [r3, #0]
 8006f2c:	4b14      	ldr	r3, [pc, #80]	; (8006f80 <sys_clock_elapsed+0x98>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	1ae4      	subs	r4, r4, r3
 8006f32:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8006f34:	480c      	ldr	r0, [pc, #48]	; (8006f68 <sys_clock_elapsed+0x80>)
 8006f36:	f000 fc21 	bl	800777c <z_spin_unlock_valid>
 8006f3a:	b958      	cbnz	r0, 8006f54 <sys_clock_elapsed+0x6c>
 8006f3c:	4a0b      	ldr	r2, [pc, #44]	; (8006f6c <sys_clock_elapsed+0x84>)
 8006f3e:	4911      	ldr	r1, [pc, #68]	; (8006f84 <sys_clock_elapsed+0x9c>)
 8006f40:	480c      	ldr	r0, [pc, #48]	; (8006f74 <sys_clock_elapsed+0x8c>)
 8006f42:	23b9      	movs	r3, #185	; 0xb9
 8006f44:	f004 fa65 	bl	800b412 <assert_print>
 8006f48:	4907      	ldr	r1, [pc, #28]	; (8006f68 <sys_clock_elapsed+0x80>)
 8006f4a:	480f      	ldr	r0, [pc, #60]	; (8006f88 <sys_clock_elapsed+0xa0>)
 8006f4c:	f004 fa61 	bl	800b412 <assert_print>
 8006f50:	21b9      	movs	r1, #185	; 0xb9
 8006f52:	e7e1      	b.n	8006f18 <sys_clock_elapsed+0x30>
	__asm__ volatile(
 8006f54:	f385 8811 	msr	BASEPRI, r5
 8006f58:	f3bf 8f6f 	isb	sy
}
 8006f5c:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 8006f60:	fbb4 f0f0 	udiv	r0, r4, r0
 8006f64:	bd38      	pop	{r3, r4, r5, pc}
 8006f66:	bf00      	nop
 8006f68:	20000bdc 	.word	0x20000bdc
 8006f6c:	08011b97 	.word	0x08011b97
 8006f70:	08011bc4 	.word	0x08011bc4
 8006f74:	080118c5 	.word	0x080118c5
 8006f78:	08011bd9 	.word	0x08011bd9
 8006f7c:	20000bd4 	.word	0x20000bd4
 8006f80:	20000bd0 	.word	0x20000bd0
 8006f84:	08011bf1 	.word	0x08011bf1
 8006f88:	08011c08 	.word	0x08011c08

08006f8c <sys_clock_cycle_get_32>:
{
 8006f8c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8006f8e:	f04f 0310 	mov.w	r3, #16
 8006f92:	f3ef 8511 	mrs	r5, BASEPRI
 8006f96:	f383 8812 	msr	BASEPRI_MAX, r3
 8006f9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8006f9e:	4818      	ldr	r0, [pc, #96]	; (8007000 <sys_clock_cycle_get_32+0x74>)
 8006fa0:	f000 fbde 	bl	8007760 <z_spin_lock_valid>
 8006fa4:	b968      	cbnz	r0, 8006fc2 <sys_clock_cycle_get_32+0x36>
 8006fa6:	4a17      	ldr	r2, [pc, #92]	; (8007004 <sys_clock_cycle_get_32+0x78>)
 8006fa8:	4917      	ldr	r1, [pc, #92]	; (8007008 <sys_clock_cycle_get_32+0x7c>)
 8006faa:	4818      	ldr	r0, [pc, #96]	; (800700c <sys_clock_cycle_get_32+0x80>)
 8006fac:	238e      	movs	r3, #142	; 0x8e
 8006fae:	f004 fa30 	bl	800b412 <assert_print>
 8006fb2:	4913      	ldr	r1, [pc, #76]	; (8007000 <sys_clock_cycle_get_32+0x74>)
 8006fb4:	4816      	ldr	r0, [pc, #88]	; (8007010 <sys_clock_cycle_get_32+0x84>)
 8006fb6:	f004 fa2c 	bl	800b412 <assert_print>
 8006fba:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8006fbc:	4811      	ldr	r0, [pc, #68]	; (8007004 <sys_clock_cycle_get_32+0x78>)
 8006fbe:	f004 fa21 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8006fc2:	480f      	ldr	r0, [pc, #60]	; (8007000 <sys_clock_cycle_get_32+0x74>)
 8006fc4:	f000 fbea 	bl	800779c <z_spin_lock_set_owner>
	uint32_t ret = elapsed() + cycle_count;
 8006fc8:	f7ff fe92 	bl	8006cf0 <elapsed>
 8006fcc:	4b11      	ldr	r3, [pc, #68]	; (8007014 <sys_clock_cycle_get_32+0x88>)
 8006fce:	681c      	ldr	r4, [r3, #0]
 8006fd0:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8006fd2:	480b      	ldr	r0, [pc, #44]	; (8007000 <sys_clock_cycle_get_32+0x74>)
 8006fd4:	f000 fbd2 	bl	800777c <z_spin_unlock_valid>
 8006fd8:	b958      	cbnz	r0, 8006ff2 <sys_clock_cycle_get_32+0x66>
 8006fda:	4a0a      	ldr	r2, [pc, #40]	; (8007004 <sys_clock_cycle_get_32+0x78>)
 8006fdc:	490e      	ldr	r1, [pc, #56]	; (8007018 <sys_clock_cycle_get_32+0x8c>)
 8006fde:	480b      	ldr	r0, [pc, #44]	; (800700c <sys_clock_cycle_get_32+0x80>)
 8006fe0:	23b9      	movs	r3, #185	; 0xb9
 8006fe2:	f004 fa16 	bl	800b412 <assert_print>
 8006fe6:	4906      	ldr	r1, [pc, #24]	; (8007000 <sys_clock_cycle_get_32+0x74>)
 8006fe8:	480c      	ldr	r0, [pc, #48]	; (800701c <sys_clock_cycle_get_32+0x90>)
 8006fea:	f004 fa12 	bl	800b412 <assert_print>
 8006fee:	21b9      	movs	r1, #185	; 0xb9
 8006ff0:	e7e4      	b.n	8006fbc <sys_clock_cycle_get_32+0x30>
	__asm__ volatile(
 8006ff2:	f385 8811 	msr	BASEPRI, r5
 8006ff6:	f3bf 8f6f 	isb	sy
}
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	bd38      	pop	{r3, r4, r5, pc}
 8006ffe:	bf00      	nop
 8007000:	20000bdc 	.word	0x20000bdc
 8007004:	08011b97 	.word	0x08011b97
 8007008:	08011bc4 	.word	0x08011bc4
 800700c:	080118c5 	.word	0x080118c5
 8007010:	08011bd9 	.word	0x08011bd9
 8007014:	20000bd4 	.word	0x20000bd4
 8007018:	08011bf1 	.word	0x08011bf1
 800701c:	08011c08 	.word	0x08011c08

08007020 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8007020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8007024:	4f27      	ldr	r7, [pc, #156]	; (80070c4 <pinctrl_configure_pins+0xa4>)
 8007026:	4604      	mov	r4, r0
 8007028:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 800702c:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800702e:	42b4      	cmp	r4, r6
 8007030:	d101      	bne.n	8007036 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8007032:	2000      	movs	r0, #0
 8007034:	e014      	b.n	8007060 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8007036:	6822      	ldr	r2, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8007038:	06d1      	lsls	r1, r2, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800703a:	f002 081f 	and.w	r8, r2, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800703e:	d411      	bmi.n	8007064 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8007040:	6865      	ldr	r5, [r4, #4]
 8007042:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8007046:	f3c2 1a47 	ubfx	sl, r2, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800704a:	f3c2 2243 	ubfx	r2, r2, #9, #4
 800704e:	2a0a      	cmp	r2, #10
 8007050:	d834      	bhi.n	80070bc <pinctrl_configure_pins+0x9c>
	port_device = gpio_ports[STM32_PORT(pin)];
 8007052:	f857 9022 	ldr.w	r9, [r7, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8007056:	f1b9 0f00 	cmp.w	r9, #0
 800705a:	d11e      	bne.n	800709a <pinctrl_configure_pins+0x7a>
		return -ENODEV;
 800705c:	f06f 0012 	mvn.w	r0, #18
}
 8007060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8007064:	f1b8 0f10 	cmp.w	r8, #16
 8007068:	d015      	beq.n	8007096 <pinctrl_configure_pins+0x76>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 800706a:	f1b8 0f11 	cmp.w	r8, #17
 800706e:	d105      	bne.n	800707c <pinctrl_configure_pins+0x5c>
			uint32_t gpio_out = pins[i].pincfg &
 8007070:	6865      	ldr	r5, [r4, #4]
			if (gpio_out != 0) {
 8007072:	052b      	lsls	r3, r5, #20
 8007074:	d5e7      	bpl.n	8007046 <pinctrl_configure_pins+0x26>
				pin_cgf = pins[i].pincfg | STM32_MODER_OUTPUT_MODE;
 8007076:	f045 0510 	orr.w	r5, r5, #16
 800707a:	e7e4      	b.n	8007046 <pinctrl_configure_pins+0x26>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
 800707c:	f1b8 0f00 	cmp.w	r8, #0
 8007080:	d1e1      	bne.n	8007046 <pinctrl_configure_pins+0x26>
 8007082:	4911      	ldr	r1, [pc, #68]	; (80070c8 <pinctrl_configure_pins+0xa8>)
 8007084:	4811      	ldr	r0, [pc, #68]	; (80070cc <pinctrl_configure_pins+0xac>)
 8007086:	4a12      	ldr	r2, [pc, #72]	; (80070d0 <pinctrl_configure_pins+0xb0>)
 8007088:	23f8      	movs	r3, #248	; 0xf8
 800708a:	f004 f9c2 	bl	800b412 <assert_print>
 800708e:	4810      	ldr	r0, [pc, #64]	; (80070d0 <pinctrl_configure_pins+0xb0>)
 8007090:	21f8      	movs	r1, #248	; 0xf8
 8007092:	f004 f9b7 	bl	800b404 <assert_post_action>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8007096:	2530      	movs	r5, #48	; 0x30
 8007098:	e7d5      	b.n	8007046 <pinctrl_configure_pins+0x26>
 800709a:	4648      	mov	r0, r9
 800709c:	f005 f86e 	bl	800c17c <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d0db      	beq.n	800705c <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 80070a4:	4643      	mov	r3, r8
 80070a6:	462a      	mov	r2, r5
 80070a8:	f00a 010f 	and.w	r1, sl, #15
 80070ac:	4648      	mov	r0, r9
 80070ae:	f004 fd97 	bl	800bbe0 <gpio_stm32_configure>
		if (ret < 0) {
 80070b2:	2800      	cmp	r0, #0
 80070b4:	f104 0408 	add.w	r4, r4, #8
 80070b8:	dab9      	bge.n	800702e <pinctrl_configure_pins+0xe>
 80070ba:	e7d1      	b.n	8007060 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 80070bc:	f06f 0015 	mvn.w	r0, #21
 80070c0:	e7ce      	b.n	8007060 <pinctrl_configure_pins+0x40>
 80070c2:	bf00      	nop
 80070c4:	0800d66c 	.word	0x0800d66c
 80070c8:	08012e97 	.word	0x08012e97
 80070cc:	080118c5 	.word	0x080118c5
 80070d0:	08012e64 	.word	0x08012e64

080070d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070d4:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;

  tmpreg = RCC->CFGR;
 80070d6:	4911      	ldr	r1, [pc, #68]	; (800711c <HAL_RCC_GetSysClockFreq+0x48>)
 80070d8:	684b      	ldr	r3, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80070da:	f003 020c 	and.w	r2, r3, #12
 80070de:	2a08      	cmp	r2, #8
 80070e0:	d11a      	bne.n	8007118 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80070e2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80070ea:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80070ee:	fab2 f282 	clz	r2, r2
 80070f2:	40d3      	lsrs	r3, r2
 80070f4:	4a0a      	ldr	r2, [pc, #40]	; (8007120 <HAL_RCC_GetSysClockFreq+0x4c>)
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80070f6:	480b      	ldr	r0, [pc, #44]	; (8007124 <HAL_RCC_GetSysClockFreq+0x50>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80070f8:	5cd4      	ldrb	r4, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80070fa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070fc:	220f      	movs	r2, #15
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8007106:	fab2 f282 	clz	r2, r2
 800710a:	40d3      	lsrs	r3, r2
 800710c:	4a06      	ldr	r2, [pc, #24]	; (8007128 <HAL_RCC_GetSysClockFreq+0x54>)
 800710e:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007110:	fbb0 f0f3 	udiv	r0, r0, r3
 8007114:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007116:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8007118:	4802      	ldr	r0, [pc, #8]	; (8007124 <HAL_RCC_GetSysClockFreq+0x50>)
  return sysclockfreq;
 800711a:	e7fc      	b.n	8007116 <HAL_RCC_GetSysClockFreq+0x42>
 800711c:	40021000 	.word	0x40021000
 8007120:	08012ed7 	.word	0x08012ed7
 8007124:	007a1200 	.word	0x007a1200
 8007128:	08012ec7 	.word	0x08012ec7

0800712c <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800712c:	4b03      	ldr	r3, [pc, #12]	; (800713c <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800712e:	4a04      	ldr	r2, [pc, #16]	; (8007140 <RCC_GetHCLKClockFreq+0x14>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007136:	5cd3      	ldrb	r3, [r2, r3]
}
 8007138:	40d8      	lsrs	r0, r3
 800713a:	4770      	bx	lr
 800713c:	40021000 	.word	0x40021000
 8007140:	08012eb7 	.word	0x08012eb7

08007144 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007144:	4b03      	ldr	r3, [pc, #12]	; (8007154 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007146:	4a04      	ldr	r2, [pc, #16]	; (8007158 <RCC_GetPCLK1ClockFreq+0x14>)
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800714e:	5cd3      	ldrb	r3, [r2, r3]
}
 8007150:	40d8      	lsrs	r0, r3
 8007152:	4770      	bx	lr
 8007154:	40021000 	.word	0x40021000
 8007158:	08012eaf 	.word	0x08012eaf

0800715c <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800715c:	4b03      	ldr	r3, [pc, #12]	; (800716c <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800715e:	4a04      	ldr	r2, [pc, #16]	; (8007170 <RCC_GetPCLK2ClockFreq+0x14>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007166:	5cd3      	ldrb	r3, [r2, r3]
}
 8007168:	40d8      	lsrs	r0, r3
 800716a:	4770      	bx	lr
 800716c:	40021000 	.word	0x40021000
 8007170:	08012eaf 	.word	0x08012eaf

08007174 <RCC_PLL_GetFreqDomain_SYS>:
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8007174:	4a0a      	ldr	r2, [pc, #40]	; (80071a0 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 8007176:	480b      	ldr	r0, [pc, #44]	; (80071a4 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8007178:	6853      	ldr	r3, [r2, #4]
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800717a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800717c:	f003 030f 	and.w	r3, r3, #15
 8007180:	3301      	adds	r3, #1
 8007182:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8007186:	6853      	ldr	r3, [r2, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007188:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800718c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007190:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8007194:	fab2 f282 	clz	r2, r2
 8007198:	40d3      	lsrs	r3, r2
 800719a:	3302      	adds	r3, #2
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800719c:	4358      	muls	r0, r3
 800719e:	4770      	bx	lr
 80071a0:	40021000 	.word	0x40021000
 80071a4:	007a1200 	.word	0x007a1200

080071a8 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80071a8:	4b04      	ldr	r3, [pc, #16]	; (80071bc <RCC_GetSystemClockFreq+0x14>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d101      	bne.n	80071b8 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80071b4:	f7ff bfde 	b.w	8007174 <RCC_PLL_GetFreqDomain_SYS>
}
 80071b8:	4801      	ldr	r0, [pc, #4]	; (80071c0 <RCC_GetSystemClockFreq+0x18>)
 80071ba:	4770      	bx	lr
 80071bc:	40021000 	.word	0x40021000
 80071c0:	007a1200 	.word	0x007a1200

080071c4 <LL_SetFlashLatency>:
  uint32_t getlatency;
  uint32_t latency;
  ErrorStatus status = SUCCESS;

  /* Frequency cannot be equal to 0 */
  if (Frequency == 0U)
 80071c4:	b1d8      	cbz	r0, 80071fe <LL_SetFlashLatency+0x3a>
  {
    status = ERROR;
  }
  else
  {
    if (Frequency > UTILS_LATENCY2_FREQ)
 80071c6:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <LL_SetFlashLatency+0x40>)
 80071c8:	4298      	cmp	r0, r3
 80071ca:	d816      	bhi.n	80071fa <LL_SetFlashLatency+0x36>
      /* 48 < SYSCLK <= 72 => 2WS (3 CPU cycles) */
      latency = LL_FLASH_LATENCY_2;
    }
    else
    {
      if (Frequency > UTILS_LATENCY1_FREQ)
 80071cc:	4b0e      	ldr	r3, [pc, #56]	; (8007208 <LL_SetFlashLatency+0x44>)
 80071ce:	4298      	cmp	r0, r3
 80071d0:	bf94      	ite	ls
 80071d2:	2000      	movls	r0, #0
 80071d4:	2001      	movhi	r0, #1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80071d6:	4a0d      	ldr	r2, [pc, #52]	; (800720c <LL_SetFlashLatency+0x48>)
 80071d8:	6813      	ldr	r3, [r2, #0]
 80071da:	f023 0307 	bic.w	r3, r3, #7
 80071de:	4303      	orrs	r3, r0
 80071e0:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80071e2:	6813      	ldr	r3, [r2, #0]
 80071e4:	f003 0307 	and.w	r3, r3, #7
      do
      {
      /* Wait for Flash latency to be updated */
      getlatency = LL_FLASH_GetLatency();
      timeout--;
      } while ((getlatency != latency) && (timeout > 0));
 80071e8:	4298      	cmp	r0, r3
 80071ea:	bf1c      	itt	ne
 80071ec:	6813      	ldrne	r3, [r2, #0]
 80071ee:	f003 0307 	andne.w	r3, r3, #7

      if(getlatency != latency)
 80071f2:	1ac0      	subs	r0, r0, r3
 80071f4:	bf18      	it	ne
 80071f6:	2001      	movne	r0, #1
 80071f8:	4770      	bx	lr
      latency = LL_FLASH_LATENCY_2;
 80071fa:	2002      	movs	r0, #2
 80071fc:	e7eb      	b.n	80071d6 <LL_SetFlashLatency+0x12>
    status = ERROR;
 80071fe:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	02dc6c00 	.word	0x02dc6c00
 8007208:	016e3600 	.word	0x016e3600
 800720c:	40022000 	.word	0x40022000

08007210 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007210:	4b0f      	ldr	r3, [pc, #60]	; (8007250 <z_sys_init_run_level+0x40>)
{
 8007212:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007214:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8007218:	3001      	adds	r0, #1
 800721a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800721e:	42a6      	cmp	r6, r4
 8007220:	d800      	bhi.n	8007224 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8007222:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8007224:	e9d4 3500 	ldrd	r3, r5, [r4]
 8007228:	4628      	mov	r0, r5
 800722a:	4798      	blx	r3
		if (dev != NULL) {
 800722c:	b16d      	cbz	r5, 800724a <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 800722e:	b138      	cbz	r0, 8007240 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8007230:	2800      	cmp	r0, #0
 8007232:	bfb8      	it	lt
 8007234:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8007236:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
 8007238:	28ff      	cmp	r0, #255	; 0xff
 800723a:	bfa8      	it	ge
 800723c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 800723e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8007240:	68ea      	ldr	r2, [r5, #12]
 8007242:	7853      	ldrb	r3, [r2, #1]
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800724a:	3408      	adds	r4, #8
 800724c:	e7e7      	b.n	800721e <z_sys_init_run_level+0xe>
 800724e:	bf00      	nop
 8007250:	0800d698 	.word	0x0800d698

08007254 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8007254:	b510      	push	{r4, lr}
 8007256:	4604      	mov	r4, r0
 8007258:	b086      	sub	sp, #24
	z_impl_log_panic();
 800725a:	f7fc fcb1 	bl	8003bc0 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 800725e:	4b07      	ldr	r3, [pc, #28]	; (800727c <k_sys_fatal_error_handler+0x28>)
 8007260:	9305      	str	r3, [sp, #20]
 8007262:	2302      	movs	r3, #2
 8007264:	9304      	str	r3, [sp, #16]
 8007266:	4806      	ldr	r0, [pc, #24]	; (8007280 <k_sys_fatal_error_handler+0x2c>)
 8007268:	2300      	movs	r3, #0
 800726a:	aa04      	add	r2, sp, #16
 800726c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8007270:	f7fc fdec 	bl	8003e4c <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
 8007274:	4620      	mov	r0, r4
 8007276:	f004 ff8b 	bl	800c190 <arch_system_halt>
 800727a:	bf00      	nop
 800727c:	08012ee7 	.word	0x08012ee7
 8007280:	0800d1c0 	.word	0x0800d1c0

08007284 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8007284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	4604      	mov	r4, r0
 800728c:	af00      	add	r7, sp, #0
 800728e:	460e      	mov	r6, r1
	__asm__ volatile(
 8007290:	f04f 0310 	mov.w	r3, #16
 8007294:	f3ef 8811 	mrs	r8, BASEPRI
 8007298:	f383 8812 	msr	BASEPRI_MAX, r3
 800729c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 80072a0:	f001 fd00 	bl	8008ca4 <z_impl_z_current_get>
 80072a4:	2c04      	cmp	r4, #4
 80072a6:	bf96      	itet	ls
 80072a8:	4b33      	ldrls	r3, [pc, #204]	; (8007378 <z_fatal_error+0xf4>)
 80072aa:	4b34      	ldrhi	r3, [pc, #208]	; (800737c <z_fatal_error+0xf8>)
 80072ac:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 80072b0:	46e9      	mov	r9, sp
 80072b2:	b08a      	sub	sp, #40	; 0x28
 80072b4:	4605      	mov	r5, r0
 80072b6:	466a      	mov	r2, sp
 80072b8:	4931      	ldr	r1, [pc, #196]	; (8007380 <z_fatal_error+0xfc>)
 80072ba:	61d3      	str	r3, [r2, #28]
 80072bc:	2303      	movs	r3, #3
 80072be:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80072c2:	f04f 0a00 	mov.w	sl, #0
 80072c6:	4b2f      	ldr	r3, [pc, #188]	; (8007384 <z_fatal_error+0x100>)
 80072c8:	f8c2 a020 	str.w	sl, [r2, #32]
 80072cc:	e9c2 1405 	strd	r1, r4, [r2, #20]
 80072d0:	f842 3f10 	str.w	r3, [r2, #16]!
 80072d4:	482c      	ldr	r0, [pc, #176]	; (8007388 <z_fatal_error+0x104>)
 80072d6:	4653      	mov	r3, sl
 80072d8:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
 80072dc:	f7fc fdb6 	bl	8003e4c <z_impl_z_log_msg_static_create>
 80072e0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 80072e2:	b17e      	cbz	r6, 8007304 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 80072e4:	69f3      	ldr	r3, [r6, #28]
 80072e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ea:	b15b      	cbz	r3, 8007304 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
 80072ec:	4b27      	ldr	r3, [pc, #156]	; (800738c <z_fatal_error+0x108>)
 80072ee:	617b      	str	r3, [r7, #20]
 80072f0:	2302      	movs	r3, #2
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	4824      	ldr	r0, [pc, #144]	; (8007388 <z_fatal_error+0x104>)
 80072f6:	4653      	mov	r3, sl
 80072f8:	f107 0210 	add.w	r2, r7, #16
 80072fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8007300:	f7fc fda4 	bl	8003e4c <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8007304:	b12d      	cbz	r5, 8007312 <z_fatal_error+0x8e>
 8007306:	4628      	mov	r0, r5
 8007308:	f004 ff58 	bl	800c1bc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800730c:	b108      	cbz	r0, 8007312 <z_fatal_error+0x8e>
 800730e:	7803      	ldrb	r3, [r0, #0]
 8007310:	b903      	cbnz	r3, 8007314 <z_fatal_error+0x90>
		thread_name = "unknown";
 8007312:	481f      	ldr	r0, [pc, #124]	; (8007390 <z_fatal_error+0x10c>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8007314:	46e9      	mov	r9, sp
 8007316:	b08a      	sub	sp, #40	; 0x28
 8007318:	466a      	mov	r2, sp
 800731a:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <z_fatal_error+0x110>)
 800731c:	61d0      	str	r0, [r2, #28]
 800731e:	e9c2 3505 	strd	r3, r5, [r2, #20]
 8007322:	2303      	movs	r3, #3
 8007324:	f882 3020 	strb.w	r3, [r2, #32]
 8007328:	4b1b      	ldr	r3, [pc, #108]	; (8007398 <z_fatal_error+0x114>)
 800732a:	f842 3f10 	str.w	r3, [r2, #16]!
 800732e:	4816      	ldr	r0, [pc, #88]	; (8007388 <z_fatal_error+0x104>)
 8007330:	2300      	movs	r3, #0
 8007332:	f44f 5109 	mov.w	r1, #8768	; 0x2240
 8007336:	f7fc fd89 	bl	8003e4c <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 800733a:	4631      	mov	r1, r6
 800733c:	46cd      	mov	sp, r9
 800733e:	4620      	mov	r0, r4
 8007340:	f7ff ff88 	bl	8007254 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
 8007344:	2c04      	cmp	r4, #4
 8007346:	d10c      	bne.n	8007362 <z_fatal_error+0xde>
 8007348:	4914      	ldr	r1, [pc, #80]	; (800739c <z_fatal_error+0x118>)
 800734a:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <z_fatal_error+0x11c>)
 800734c:	4815      	ldr	r0, [pc, #84]	; (80073a4 <z_fatal_error+0x120>)
 800734e:	2393      	movs	r3, #147	; 0x93
 8007350:	f004 f85f 	bl	800b412 <assert_print>
 8007354:	4814      	ldr	r0, [pc, #80]	; (80073a8 <z_fatal_error+0x124>)
 8007356:	f004 f85c 	bl	800b412 <assert_print>
 800735a:	4811      	ldr	r0, [pc, #68]	; (80073a0 <z_fatal_error+0x11c>)
 800735c:	2193      	movs	r1, #147	; 0x93
 800735e:	f004 f851 	bl	800b404 <assert_post_action>
	__asm__ volatile(
 8007362:	f388 8811 	msr	BASEPRI, r8
 8007366:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800736a:	4628      	mov	r0, r5
 800736c:	f7fd fedc 	bl	8005128 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007378:	0800d6b0 	.word	0x0800d6b0
 800737c:	08012ef6 	.word	0x08012ef6
 8007380:	08012f0c 	.word	0x08012f0c
 8007384:	01000005 	.word	0x01000005
 8007388:	0800d1c0 	.word	0x0800d1c0
 800738c:	08012f34 	.word	0x08012f34
 8007390:	08012f04 	.word	0x08012f04
 8007394:	08012f55 	.word	0x08012f55
 8007398:	01000004 	.word	0x01000004
 800739c:	08012f8f 	.word	0x08012f8f
 80073a0:	08012f6d 	.word	0x08012f6d
 80073a4:	080118c5 	.word	0x080118c5
 80073a8:	08012fac 	.word	0x08012fac

080073ac <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 80073ac:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 80073ae:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <bg_thread_main+0x2c>)
 80073b0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80073b2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 80073b4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80073b6:	f7ff ff2b 	bl	8007210 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 80073ba:	f002 f97b 	bl	80096b4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 80073be:	2003      	movs	r0, #3
 80073c0:	f7ff ff26 	bl	8007210 <z_sys_init_run_level>

	z_init_static_threads();
 80073c4:	f000 f95a 	bl	800767c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 80073c8:	f7fa fd86 	bl	8001ed8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 80073cc:	4a03      	ldr	r2, [pc, #12]	; (80073dc <bg_thread_main+0x30>)
 80073ce:	7b13      	ldrb	r3, [r2, #12]
 80073d0:	f023 0301 	bic.w	r3, r3, #1
 80073d4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 80073d6:	bd08      	pop	{r3, pc}
 80073d8:	20000c3b 	.word	0x20000c3b
 80073dc:	20000968 	.word	0x20000968

080073e0 <z_bss_zero>:
{
 80073e0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 80073e2:	4803      	ldr	r0, [pc, #12]	; (80073f0 <z_bss_zero+0x10>)
 80073e4:	4a03      	ldr	r2, [pc, #12]	; (80073f4 <z_bss_zero+0x14>)
 80073e6:	2100      	movs	r1, #0
 80073e8:	1a12      	subs	r2, r2, r0
 80073ea:	f004 feda 	bl	800c1a2 <z_early_memset>
}
 80073ee:	bd08      	pop	{r3, pc}
 80073f0:	200003b0 	.word	0x200003b0
 80073f4:	20000c3c 	.word	0x20000c3c

080073f8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 80073f8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 80073fa:	2300      	movs	r3, #0
{
 80073fc:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 80073fe:	2201      	movs	r2, #1
 8007400:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 8007404:	4e13      	ldr	r6, [pc, #76]	; (8007454 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8007406:	4d14      	ldr	r5, [pc, #80]	; (8007458 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 8007408:	9301      	str	r3, [sp, #4]
 800740a:	220f      	movs	r2, #15
 800740c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8007410:	4912      	ldr	r1, [pc, #72]	; (800745c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8007412:	2318      	movs	r3, #24
 8007414:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 8007418:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 800741c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 800741e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8007422:	fb00 1104 	mla	r1, r0, r4, r1
 8007426:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <z_init_cpu+0x68>)
 8007428:	9500      	str	r5, [sp, #0]
 800742a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800742e:	4630      	mov	r0, r6
 8007430:	f000 f886 	bl	8007540 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8007434:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8007436:	4a0b      	ldr	r2, [pc, #44]	; (8007464 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8007438:	60ee      	str	r6, [r5, #12]
 800743a:	f023 0304 	bic.w	r3, r3, #4
 800743e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8007440:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8007444:	fb04 3303 	mla	r3, r4, r3, r3
 8007448:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
 800744a:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
 800744c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 800744e:	b006      	add	sp, #24
 8007450:	bd70      	pop	{r4, r5, r6, pc}
 8007452:	bf00      	nop
 8007454:	200008e8 	.word	0x200008e8
 8007458:	20000be0 	.word	0x20000be0
 800745c:	20002100 	.word	0x20002100
 8007460:	080077ad 	.word	0x080077ad
 8007464:	200018c0 	.word	0x200018c0

08007468 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8007468:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800746a:	4b2e      	ldr	r3, [pc, #184]	; (8007524 <z_cstart+0xbc>)
 800746c:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800746e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8007472:	4d2d      	ldr	r5, [pc, #180]	; (8007528 <z_cstart+0xc0>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8007474:	4e2d      	ldr	r6, [pc, #180]	; (800752c <z_cstart+0xc4>)
 8007476:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8007478:	4f2d      	ldr	r7, [pc, #180]	; (8007530 <z_cstart+0xc8>)
 800747a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800747e:	616b      	str	r3, [r5, #20]
 8007480:	2400      	movs	r4, #0
 8007482:	23f0      	movs	r3, #240	; 0xf0
 8007484:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8007488:	77ec      	strb	r4, [r5, #31]
 800748a:	762c      	strb	r4, [r5, #24]
 800748c:	766c      	strb	r4, [r5, #25]
 800748e:	76ac      	strb	r4, [r5, #26]
 8007490:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8007494:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007496:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800749a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800749c:	f7fd fe10 	bl	80050c0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 80074a0:	f7fd f93a 	bl	8004718 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80074a4:	f04f 33ff 	mov.w	r3, #4294967295
 80074a8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80074aa:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
 80074ac:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 80074ae:	f7fd ff41 	bl	8005334 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 80074b2:	f7fd fe4f 	bl	8005154 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 80074b6:	f7fc fb11 	bl	8003adc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
 80074ba:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
 80074be:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
 80074c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
 80074c4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
 80074c8:	f002 f8ee 	bl	80096a8 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
 80074cc:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 80074ce:	f004 fe54 	bl	800c17a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80074d2:	4620      	mov	r0, r4
 80074d4:	f7ff fe9c 	bl	8007210 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80074d8:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 80074da:	4d16      	ldr	r5, [pc, #88]	; (8007534 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80074dc:	f7ff fe98 	bl	8007210 <z_sys_init_run_level>
	z_sched_init();
 80074e0:	f001 fa68 	bl	80089b4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80074e4:	4b14      	ldr	r3, [pc, #80]	; (8007538 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
 80074e6:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80074e8:	9305      	str	r3, [sp, #20]
 80074ea:	2301      	movs	r3, #1
 80074ec:	4913      	ldr	r1, [pc, #76]	; (800753c <z_cstart+0xd4>)
 80074ee:	9400      	str	r4, [sp, #0]
 80074f0:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80074f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074f8:	463b      	mov	r3, r7
 80074fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80074fe:	4628      	mov	r0, r5
 8007500:	f000 f81e 	bl	8007540 <z_setup_new_thread>
 8007504:	7b6a      	ldrb	r2, [r5, #13]
 8007506:	4606      	mov	r6, r0
 8007508:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 800750c:	4628      	mov	r0, r5
 800750e:	736a      	strb	r2, [r5, #13]
 8007510:	f000 fc74 	bl	8007dfc <z_ready_thread>
	z_init_cpu(0);
 8007514:	4620      	mov	r0, r4
 8007516:	f7ff ff6f 	bl	80073f8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800751a:	463a      	mov	r2, r7
 800751c:	4631      	mov	r1, r6
 800751e:	4628      	mov	r0, r5
 8007520:	f7fd fa64 	bl	80049ec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8007524:	20002100 	.word	0x20002100
 8007528:	e000ed00 	.word	0xe000ed00
 800752c:	20000be0 	.word	0x20000be0
 8007530:	080073ad 	.word	0x080073ad
 8007534:	20000968 	.word	0x20000968
 8007538:	0801302b 	.word	0x0801302b
 800753c:	20002280 	.word	0x20002280

08007540 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8007540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007542:	b085      	sub	sp, #20
 8007544:	4604      	mov	r4, r0
 8007546:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
 8007548:	2d0f      	cmp	r5, #15
 800754a:	d12e      	bne.n	80075aa <z_setup_new_thread+0x6a>
 800754c:	4822      	ldr	r0, [pc, #136]	; (80075d8 <z_setup_new_thread+0x98>)
 800754e:	4283      	cmp	r3, r0
 8007550:	d12f      	bne.n	80075b2 <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8007552:	f104 0058 	add.w	r0, r4, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8007556:	3207      	adds	r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8007558:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
 800755c:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
 800755e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007560:	7320      	strb	r0, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8007562:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8007566:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
 800756a:	e9c4 2519 	strd	r2, r5, [r4, #100]	; 0x64
	thread_base->pended_on = NULL;
 800756e:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007570:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8007572:	60a6      	str	r6, [r4, #8]
	thread_base->thread_state = (uint8_t)initial_state;
 8007574:	2004      	movs	r0, #4
 8007576:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8007578:	e9c4 6606 	strd	r6, r6, [r4, #24]

	thread_base->sched_locked = 0U;
 800757c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
 800757e:	66e6      	str	r6, [r4, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8007580:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007584:	9202      	str	r2, [sp, #8]
 8007586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007588:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 800758a:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800758c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800758e:	9200      	str	r2, [sp, #0]
 8007590:	4620      	mov	r0, r4
 8007592:	463a      	mov	r2, r7
 8007594:	f7fd f9f8 	bl	8004988 <arch_new_thread>
	if (!_current) {
 8007598:	4b10      	ldr	r3, [pc, #64]	; (80075dc <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
 800759a:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	b103      	cbz	r3, 80075a2 <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 80075a2:	6723      	str	r3, [r4, #112]	; 0x70
}
 80075a4:	4638      	mov	r0, r7
 80075a6:	b005      	add	sp, #20
 80075a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
 80075aa:	f105 0010 	add.w	r0, r5, #16
 80075ae:	281e      	cmp	r0, #30
 80075b0:	d9cf      	bls.n	8007552 <z_setup_new_thread+0x12>
 80075b2:	4a0b      	ldr	r2, [pc, #44]	; (80075e0 <z_setup_new_thread+0xa0>)
 80075b4:	490b      	ldr	r1, [pc, #44]	; (80075e4 <z_setup_new_thread+0xa4>)
 80075b6:	480c      	ldr	r0, [pc, #48]	; (80075e8 <z_setup_new_thread+0xa8>)
 80075b8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80075bc:	f003 ff29 	bl	800b412 <assert_print>
 80075c0:	480a      	ldr	r0, [pc, #40]	; (80075ec <z_setup_new_thread+0xac>)
 80075c2:	4629      	mov	r1, r5
 80075c4:	f06f 030f 	mvn.w	r3, #15
 80075c8:	220e      	movs	r2, #14
 80075ca:	f003 ff22 	bl	800b412 <assert_print>
 80075ce:	4804      	ldr	r0, [pc, #16]	; (80075e0 <z_setup_new_thread+0xa0>)
 80075d0:	f44f 7106 	mov.w	r1, #536	; 0x218
 80075d4:	f003 ff16 	bl	800b404 <assert_post_action>
 80075d8:	080077ad 	.word	0x080077ad
 80075dc:	20000be0 	.word	0x20000be0
 80075e0:	08013033 	.word	0x08013033
 80075e4:	08013056 	.word	0x08013056
 80075e8:	080118c5 	.word	0x080118c5
 80075ec:	080130d6 	.word	0x080130d6

080075f0 <z_impl_k_thread_create>:
{
 80075f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075f2:	b087      	sub	sp, #28
 80075f4:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
 80075f8:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075fa:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
 80075fe:	b175      	cbz	r5, 800761e <z_impl_k_thread_create+0x2e>
 8007600:	4919      	ldr	r1, [pc, #100]	; (8007668 <z_impl_k_thread_create+0x78>)
 8007602:	4a1a      	ldr	r2, [pc, #104]	; (800766c <z_impl_k_thread_create+0x7c>)
 8007604:	481a      	ldr	r0, [pc, #104]	; (8007670 <z_impl_k_thread_create+0x80>)
 8007606:	f240 2387 	movw	r3, #647	; 0x287
 800760a:	f003 ff02 	bl	800b412 <assert_print>
 800760e:	4819      	ldr	r0, [pc, #100]	; (8007674 <z_impl_k_thread_create+0x84>)
 8007610:	f003 feff 	bl	800b412 <assert_print>
 8007614:	4815      	ldr	r0, [pc, #84]	; (800766c <z_impl_k_thread_create+0x7c>)
 8007616:	f240 2187 	movw	r1, #647	; 0x287
 800761a:	f003 fef3 	bl	800b404 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800761e:	9505      	str	r5, [sp, #20]
 8007620:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007622:	9504      	str	r5, [sp, #16]
 8007624:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007626:	9503      	str	r5, [sp, #12]
 8007628:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800762a:	9502      	str	r5, [sp, #8]
 800762c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800762e:	9501      	str	r5, [sp, #4]
 8007630:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007632:	9500      	str	r5, [sp, #0]
 8007634:	f7ff ff84 	bl	8007540 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8007638:	f1b6 3fff 	cmp.w	r6, #4294967295
 800763c:	bf08      	it	eq
 800763e:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 8007642:	d005      	beq.n	8007650 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007644:	ea56 0307 	orrs.w	r3, r6, r7
 8007648:	d105      	bne.n	8007656 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
 800764a:	4620      	mov	r0, r4
 800764c:	f000 fca4 	bl	8007f98 <z_sched_start>
}
 8007650:	4620      	mov	r0, r4
 8007652:	b007      	add	sp, #28
 8007654:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8007656:	4908      	ldr	r1, [pc, #32]	; (8007678 <z_impl_k_thread_create+0x88>)
 8007658:	463a      	mov	r2, r7
 800765a:	4633      	mov	r3, r6
 800765c:	f104 0018 	add.w	r0, r4, #24
 8007660:	f001 fc56 	bl	8008f10 <z_add_timeout>
 8007664:	e7f4      	b.n	8007650 <z_impl_k_thread_create+0x60>
 8007666:	bf00      	nop
 8007668:	08013107 	.word	0x08013107
 800766c:	08013033 	.word	0x08013033
 8007670:	080118c5 	.word	0x080118c5
 8007674:	08013119 	.word	0x08013119
 8007678:	080087cd 	.word	0x080087cd

0800767c <z_init_static_threads>:
{
 800767c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800767e:	4c31      	ldr	r4, [pc, #196]	; (8007744 <z_init_static_threads+0xc8>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8007680:	4d31      	ldr	r5, [pc, #196]	; (8007748 <z_init_static_threads+0xcc>)
{
 8007682:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 8007684:	42ac      	cmp	r4, r5
 8007686:	4626      	mov	r6, r4
 8007688:	d92a      	bls.n	80076e0 <z_init_static_threads+0x64>
 800768a:	4930      	ldr	r1, [pc, #192]	; (800774c <z_init_static_threads+0xd0>)
 800768c:	4a30      	ldr	r2, [pc, #192]	; (8007750 <z_init_static_threads+0xd4>)
 800768e:	4831      	ldr	r0, [pc, #196]	; (8007754 <z_init_static_threads+0xd8>)
 8007690:	f240 23ee 	movw	r3, #750	; 0x2ee
 8007694:	f003 febd 	bl	800b412 <assert_print>
 8007698:	482f      	ldr	r0, [pc, #188]	; (8007758 <z_init_static_threads+0xdc>)
 800769a:	f003 feba 	bl	800b412 <assert_print>
 800769e:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
 80076a2:	482b      	ldr	r0, [pc, #172]	; (8007750 <z_init_static_threads+0xd4>)
 80076a4:	f003 feae 	bl	800b404 <assert_post_action>
		z_setup_new_thread(
 80076a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80076ac:	9305      	str	r3, [sp, #20]
 80076ae:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80076b2:	9304      	str	r3, [sp, #16]
 80076b4:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80076b8:	9303      	str	r3, [sp, #12]
 80076ba:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80076be:	9302      	str	r3, [sp, #8]
 80076c0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80076d0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80076d4:	f7ff ff34 	bl	8007540 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80076d8:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80076dc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80076de:	e7d1      	b.n	8007684 <z_init_static_threads+0x8>
 80076e0:	42ae      	cmp	r6, r5
 80076e2:	f104 0430 	add.w	r4, r4, #48	; 0x30
 80076e6:	d3df      	bcc.n	80076a8 <z_init_static_threads+0x2c>
	k_sched_lock();
 80076e8:	f000 fca8 	bl	800803c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80076ec:	4c15      	ldr	r4, [pc, #84]	; (8007744 <z_init_static_threads+0xc8>)
 80076ee:	4f1b      	ldr	r7, [pc, #108]	; (800775c <z_init_static_threads+0xe0>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 80076f0:	260a      	movs	r6, #10
 80076f2:	42ac      	cmp	r4, r5
 80076f4:	d920      	bls.n	8007738 <z_init_static_threads+0xbc>
 80076f6:	4915      	ldr	r1, [pc, #84]	; (800774c <z_init_static_threads+0xd0>)
 80076f8:	4a15      	ldr	r2, [pc, #84]	; (8007750 <z_init_static_threads+0xd4>)
 80076fa:	4816      	ldr	r0, [pc, #88]	; (8007754 <z_init_static_threads+0xd8>)
 80076fc:	f240 330d 	movw	r3, #781	; 0x30d
 8007700:	f003 fe87 	bl	800b412 <assert_print>
 8007704:	4814      	ldr	r0, [pc, #80]	; (8007758 <z_init_static_threads+0xdc>)
 8007706:	f003 fe84 	bl	800b412 <assert_print>
 800770a:	f240 310d 	movw	r1, #781	; 0x30d
 800770e:	e7c8      	b.n	80076a2 <z_init_static_threads+0x26>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8007710:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007712:	1c53      	adds	r3, r2, #1
 8007714:	d009      	beq.n	800772a <z_init_static_threads+0xae>
					    K_MSEC(thread_data->init_delay));
 8007716:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800771a:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800771e:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8007722:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007724:	d103      	bne.n	800772e <z_init_static_threads+0xb2>
	z_sched_start(thread);
 8007726:	f000 fc37 	bl	8007f98 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800772a:	3430      	adds	r4, #48	; 0x30
 800772c:	e7e1      	b.n	80076f2 <z_init_static_threads+0x76>
 800772e:	4639      	mov	r1, r7
 8007730:	3018      	adds	r0, #24
 8007732:	f001 fbed 	bl	8008f10 <z_add_timeout>
 8007736:	e7f8      	b.n	800772a <z_init_static_threads+0xae>
 8007738:	d3ea      	bcc.n	8007710 <z_init_static_threads+0x94>
}
 800773a:	b007      	add	sp, #28
 800773c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8007740:	f000 bce8 	b.w	8008114 <k_sched_unlock>
 8007744:	20000318 	.word	0x20000318
 8007748:	20000348 	.word	0x20000348
 800774c:	0801313e 	.word	0x0801313e
 8007750:	08013033 	.word	0x08013033
 8007754:	080118c5 	.word	0x080118c5
 8007758:	0801316b 	.word	0x0801316b
 800775c:	080087cd 	.word	0x080087cd

08007760 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
 8007760:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
 8007762:	b138      	cbz	r0, 8007774 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
 8007764:	4b04      	ldr	r3, [pc, #16]	; (8007778 <z_spin_lock_valid+0x18>)
 8007766:	7d1b      	ldrb	r3, [r3, #20]
 8007768:	f000 0003 	and.w	r0, r0, #3
 800776c:	1ac0      	subs	r0, r0, r3
 800776e:	bf18      	it	ne
 8007770:	2001      	movne	r0, #1
 8007772:	4770      	bx	lr
			return false;
		}
	}
	return true;
 8007774:	2001      	movs	r0, #1
}
 8007776:	4770      	bx	lr
 8007778:	20000be0 	.word	0x20000be0

0800777c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
 800777c:	4a06      	ldr	r2, [pc, #24]	; (8007798 <z_spin_unlock_valid+0x1c>)
 800777e:	7d11      	ldrb	r1, [r2, #20]
 8007780:	6892      	ldr	r2, [r2, #8]
 8007782:	430a      	orrs	r2, r1
 8007784:	6801      	ldr	r1, [r0, #0]
{
 8007786:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
 8007788:	4291      	cmp	r1, r2
 800778a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
 800778e:	bf04      	itt	eq
 8007790:	6018      	streq	r0, [r3, #0]
	return true;
 8007792:	2001      	moveq	r0, #1
}
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	20000be0 	.word	0x20000be0

0800779c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <z_spin_lock_set_owner+0xc>)
 800779e:	7d1a      	ldrb	r2, [r3, #20]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	6003      	str	r3, [r0, #0]
}
 80077a6:	4770      	bx	lr
 80077a8:	20000be0 	.word	0x20000be0

080077ac <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 80077ac:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
 80077ae:	4b0d      	ldr	r3, [pc, #52]	; (80077e4 <idle+0x38>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	da09      	bge.n	80077ce <idle+0x22>
 80077ba:	490b      	ldr	r1, [pc, #44]	; (80077e8 <idle+0x3c>)
 80077bc:	480b      	ldr	r0, [pc, #44]	; (80077ec <idle+0x40>)
 80077be:	4a0c      	ldr	r2, [pc, #48]	; (80077f0 <idle+0x44>)
 80077c0:	2327      	movs	r3, #39	; 0x27
 80077c2:	f003 fe26 	bl	800b412 <assert_print>
 80077c6:	480a      	ldr	r0, [pc, #40]	; (80077f0 <idle+0x44>)
 80077c8:	2127      	movs	r1, #39	; 0x27
 80077ca:	f003 fe1b 	bl	800b404 <assert_post_action>
	__asm__ volatile(
 80077ce:	f04f 0210 	mov.w	r2, #16
 80077d2:	f3ef 8311 	mrs	r3, BASEPRI
 80077d6:	f382 8812 	msr	BASEPRI_MAX, r2
 80077da:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 80077de:	f7fc ffa1 	bl	8004724 <arch_cpu_idle>
 80077e2:	e7f4      	b.n	80077ce <idle+0x22>
 80077e4:	20000be0 	.word	0x20000be0
 80077e8:	080131ab 	.word	0x080131ab
 80077ec:	080118c5 	.word	0x080118c5
 80077f0:	0801318a 	.word	0x0801318a

080077f4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 80077f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80077f8:	4604      	mov	r4, r0
 80077fa:	4617      	mov	r7, r2
 80077fc:	461e      	mov	r6, r3
 80077fe:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
 8007802:	b165      	cbz	r5, 800781e <z_impl_k_mutex_lock+0x2a>
 8007804:	4958      	ldr	r1, [pc, #352]	; (8007968 <z_impl_k_mutex_lock+0x174>)
 8007806:	4a59      	ldr	r2, [pc, #356]	; (800796c <z_impl_k_mutex_lock+0x178>)
 8007808:	4859      	ldr	r0, [pc, #356]	; (8007970 <z_impl_k_mutex_lock+0x17c>)
 800780a:	2365      	movs	r3, #101	; 0x65
 800780c:	f003 fe01 	bl	800b412 <assert_print>
 8007810:	4858      	ldr	r0, [pc, #352]	; (8007974 <z_impl_k_mutex_lock+0x180>)
 8007812:	f003 fdfe 	bl	800b412 <assert_print>
 8007816:	4855      	ldr	r0, [pc, #340]	; (800796c <z_impl_k_mutex_lock+0x178>)
 8007818:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800781a:	f003 fdf3 	bl	800b404 <assert_post_action>
 800781e:	f04f 0310 	mov.w	r3, #16
 8007822:	f3ef 8811 	mrs	r8, BASEPRI
 8007826:	f383 8812 	msr	BASEPRI_MAX, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	4852      	ldr	r0, [pc, #328]	; (8007978 <z_impl_k_mutex_lock+0x184>)
 8007830:	f7ff ff96 	bl	8007760 <z_spin_lock_valid>
 8007834:	b960      	cbnz	r0, 8007850 <z_impl_k_mutex_lock+0x5c>
 8007836:	4a51      	ldr	r2, [pc, #324]	; (800797c <z_impl_k_mutex_lock+0x188>)
 8007838:	4951      	ldr	r1, [pc, #324]	; (8007980 <z_impl_k_mutex_lock+0x18c>)
 800783a:	484d      	ldr	r0, [pc, #308]	; (8007970 <z_impl_k_mutex_lock+0x17c>)
 800783c:	238e      	movs	r3, #142	; 0x8e
 800783e:	f003 fde8 	bl	800b412 <assert_print>
 8007842:	494d      	ldr	r1, [pc, #308]	; (8007978 <z_impl_k_mutex_lock+0x184>)
 8007844:	484f      	ldr	r0, [pc, #316]	; (8007984 <z_impl_k_mutex_lock+0x190>)
 8007846:	f003 fde4 	bl	800b412 <assert_print>
 800784a:	218e      	movs	r1, #142	; 0x8e
 800784c:	484b      	ldr	r0, [pc, #300]	; (800797c <z_impl_k_mutex_lock+0x188>)
 800784e:	e7e4      	b.n	800781a <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
 8007850:	4849      	ldr	r0, [pc, #292]	; (8007978 <z_impl_k_mutex_lock+0x184>)
 8007852:	f7ff ffa3 	bl	800779c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8007856:	68e3      	ldr	r3, [r4, #12]
 8007858:	4a4b      	ldr	r2, [pc, #300]	; (8007988 <z_impl_k_mutex_lock+0x194>)
 800785a:	b19b      	cbz	r3, 8007884 <z_impl_k_mutex_lock+0x90>
 800785c:	68a0      	ldr	r0, [r4, #8]
 800785e:	6891      	ldr	r1, [r2, #8]
 8007860:	4288      	cmp	r0, r1
 8007862:	d027      	beq.n	80078b4 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8007864:	ea57 0306 	orrs.w	r3, r7, r6
 8007868:	d12c      	bne.n	80078c4 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800786a:	4843      	ldr	r0, [pc, #268]	; (8007978 <z_impl_k_mutex_lock+0x184>)
 800786c:	f7ff ff86 	bl	800777c <z_spin_unlock_valid>
 8007870:	b1a0      	cbz	r0, 800789c <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
 8007872:	f388 8811 	msr	BASEPRI, r8
 8007876:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 800787a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800787e:	b002      	add	sp, #8
 8007880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 8007884:	6891      	ldr	r1, [r2, #8]
 8007886:	f991 100e 	ldrsb.w	r1, [r1, #14]
 800788a:	483b      	ldr	r0, [pc, #236]	; (8007978 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800788c:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 800788e:	3301      	adds	r3, #1
 8007890:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 8007892:	6893      	ldr	r3, [r2, #8]
 8007894:	60a3      	str	r3, [r4, #8]
 8007896:	f7ff ff71 	bl	800777c <z_spin_unlock_valid>
 800789a:	b968      	cbnz	r0, 80078b8 <z_impl_k_mutex_lock+0xc4>
 800789c:	4a37      	ldr	r2, [pc, #220]	; (800797c <z_impl_k_mutex_lock+0x188>)
 800789e:	493b      	ldr	r1, [pc, #236]	; (800798c <z_impl_k_mutex_lock+0x198>)
 80078a0:	4833      	ldr	r0, [pc, #204]	; (8007970 <z_impl_k_mutex_lock+0x17c>)
 80078a2:	23b9      	movs	r3, #185	; 0xb9
 80078a4:	f003 fdb5 	bl	800b412 <assert_print>
 80078a8:	4933      	ldr	r1, [pc, #204]	; (8007978 <z_impl_k_mutex_lock+0x184>)
 80078aa:	4839      	ldr	r0, [pc, #228]	; (8007990 <z_impl_k_mutex_lock+0x19c>)
 80078ac:	f003 fdb1 	bl	800b412 <assert_print>
 80078b0:	21b9      	movs	r1, #185	; 0xb9
 80078b2:	e7cb      	b.n	800784c <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
 80078b4:	6921      	ldr	r1, [r4, #16]
 80078b6:	e7e8      	b.n	800788a <z_impl_k_mutex_lock+0x96>
 80078b8:	f388 8811 	msr	BASEPRI, r8
 80078bc:	f3bf 8f6f 	isb	sy
		return 0;
 80078c0:	2000      	movs	r0, #0
 80078c2:	e7dc      	b.n	800787e <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 80078c4:	f991 100e 	ldrsb.w	r1, [r1, #14]
 80078c8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 80078cc:	4299      	cmp	r1, r3
 80078ce:	bfa8      	it	ge
 80078d0:	4619      	movge	r1, r3
 80078d2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 80078d6:	4291      	cmp	r1, r2
 80078d8:	bfb8      	it	lt
 80078da:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 80078dc:	428b      	cmp	r3, r1
 80078de:	dd02      	ble.n	80078e6 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
 80078e0:	f004 fc6e 	bl	800c1c0 <adjust_owner_prio.isra.0>
 80078e4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 80078e6:	e9cd 7600 	strd	r7, r6, [sp]
 80078ea:	4823      	ldr	r0, [pc, #140]	; (8007978 <z_impl_k_mutex_lock+0x184>)
 80078ec:	4622      	mov	r2, r4
 80078ee:	4641      	mov	r1, r8
 80078f0:	f000 fe22 	bl	8008538 <z_pend_curr>
	if (got_mutex == 0) {
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d0e3      	beq.n	80078c0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
 80078f8:	f04f 0310 	mov.w	r3, #16
 80078fc:	f3ef 8611 	mrs	r6, BASEPRI
 8007900:	f383 8812 	msr	BASEPRI_MAX, r3
 8007904:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8007908:	481b      	ldr	r0, [pc, #108]	; (8007978 <z_impl_k_mutex_lock+0x184>)
 800790a:	f7ff ff29 	bl	8007760 <z_spin_lock_valid>
 800790e:	2800      	cmp	r0, #0
 8007910:	d091      	beq.n	8007836 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
 8007912:	4819      	ldr	r0, [pc, #100]	; (8007978 <z_impl_k_mutex_lock+0x184>)
 8007914:	f7ff ff42 	bl	800779c <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
 8007918:	68a0      	ldr	r0, [r4, #8]
 800791a:	b1c0      	cbz	r0, 800794e <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800791c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800791e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007920:	429c      	cmp	r4, r3
 8007922:	d00a      	beq.n	800793a <z_impl_k_mutex_lock+0x146>
 8007924:	b14b      	cbz	r3, 800793a <z_impl_k_mutex_lock+0x146>
 8007926:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800792a:	4299      	cmp	r1, r3
 800792c:	bfa8      	it	ge
 800792e:	4619      	movge	r1, r3
 8007930:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8007934:	4299      	cmp	r1, r3
 8007936:	bfb8      	it	lt
 8007938:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
 800793a:	f004 fc41 	bl	800c1c0 <adjust_owner_prio.isra.0>
 800793e:	b130      	cbz	r0, 800794e <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
 8007940:	480d      	ldr	r0, [pc, #52]	; (8007978 <z_impl_k_mutex_lock+0x184>)
 8007942:	4631      	mov	r1, r6
 8007944:	f000 fae6 	bl	8007f14 <z_reschedule>
	return -EAGAIN;
 8007948:	f06f 000a 	mvn.w	r0, #10
 800794c:	e797      	b.n	800787e <z_impl_k_mutex_lock+0x8a>
	if (resched) {
 800794e:	2d00      	cmp	r5, #0
 8007950:	d1f6      	bne.n	8007940 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007952:	4809      	ldr	r0, [pc, #36]	; (8007978 <z_impl_k_mutex_lock+0x184>)
 8007954:	f7ff ff12 	bl	800777c <z_spin_unlock_valid>
 8007958:	2800      	cmp	r0, #0
 800795a:	d09f      	beq.n	800789c <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
 800795c:	f386 8811 	msr	BASEPRI, r6
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	e7f0      	b.n	8007948 <z_impl_k_mutex_lock+0x154>
 8007966:	bf00      	nop
 8007968:	08013107 	.word	0x08013107
 800796c:	080131d3 	.word	0x080131d3
 8007970:	080118c5 	.word	0x080118c5
 8007974:	080131f5 	.word	0x080131f5
 8007978:	20000c04 	.word	0x20000c04
 800797c:	08011b97 	.word	0x08011b97
 8007980:	08011bc4 	.word	0x08011bc4
 8007984:	08011bd9 	.word	0x08011bd9
 8007988:	20000be0 	.word	0x20000be0
 800798c:	08011bf1 	.word	0x08011bf1
 8007990:	08011c08 	.word	0x08011c08

08007994 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	4604      	mov	r4, r0
 8007998:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
 800799c:	b166      	cbz	r6, 80079b8 <z_impl_k_mutex_unlock+0x24>
 800799e:	4938      	ldr	r1, [pc, #224]	; (8007a80 <z_impl_k_mutex_unlock+0xec>)
 80079a0:	4a38      	ldr	r2, [pc, #224]	; (8007a84 <z_impl_k_mutex_unlock+0xf0>)
 80079a2:	4839      	ldr	r0, [pc, #228]	; (8007a88 <z_impl_k_mutex_unlock+0xf4>)
 80079a4:	23cd      	movs	r3, #205	; 0xcd
 80079a6:	f003 fd34 	bl	800b412 <assert_print>
 80079aa:	4838      	ldr	r0, [pc, #224]	; (8007a8c <z_impl_k_mutex_unlock+0xf8>)
 80079ac:	f003 fd31 	bl	800b412 <assert_print>
 80079b0:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
 80079b2:	4834      	ldr	r0, [pc, #208]	; (8007a84 <z_impl_k_mutex_unlock+0xf0>)
 80079b4:	f003 fd26 	bl	800b404 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
 80079b8:	6883      	ldr	r3, [r0, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d059      	beq.n	8007a72 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
 80079be:	4a34      	ldr	r2, [pc, #208]	; (8007a90 <z_impl_k_mutex_unlock+0xfc>)
 80079c0:	6892      	ldr	r2, [r2, #8]
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d158      	bne.n	8007a78 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
 80079c6:	68c3      	ldr	r3, [r0, #12]
 80079c8:	b93b      	cbnz	r3, 80079da <z_impl_k_mutex_unlock+0x46>
 80079ca:	4932      	ldr	r1, [pc, #200]	; (8007a94 <z_impl_k_mutex_unlock+0x100>)
 80079cc:	4a2d      	ldr	r2, [pc, #180]	; (8007a84 <z_impl_k_mutex_unlock+0xf0>)
 80079ce:	482e      	ldr	r0, [pc, #184]	; (8007a88 <z_impl_k_mutex_unlock+0xf4>)
 80079d0:	23e5      	movs	r3, #229	; 0xe5
 80079d2:	f003 fd1e 	bl	800b412 <assert_print>
 80079d6:	21e5      	movs	r1, #229	; 0xe5
 80079d8:	e7eb      	b.n	80079b2 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d003      	beq.n	80079e6 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
 80079de:	3b01      	subs	r3, #1
 80079e0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 80079e2:	2000      	movs	r0, #0
}
 80079e4:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
 80079e6:	f04f 0310 	mov.w	r3, #16
 80079ea:	f3ef 8511 	mrs	r5, BASEPRI
 80079ee:	f383 8812 	msr	BASEPRI_MAX, r3
 80079f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80079f6:	4828      	ldr	r0, [pc, #160]	; (8007a98 <z_impl_k_mutex_unlock+0x104>)
 80079f8:	f7ff feb2 	bl	8007760 <z_spin_lock_valid>
 80079fc:	b960      	cbnz	r0, 8007a18 <z_impl_k_mutex_unlock+0x84>
 80079fe:	4a27      	ldr	r2, [pc, #156]	; (8007a9c <z_impl_k_mutex_unlock+0x108>)
 8007a00:	4927      	ldr	r1, [pc, #156]	; (8007aa0 <z_impl_k_mutex_unlock+0x10c>)
 8007a02:	4821      	ldr	r0, [pc, #132]	; (8007a88 <z_impl_k_mutex_unlock+0xf4>)
 8007a04:	238e      	movs	r3, #142	; 0x8e
 8007a06:	f003 fd04 	bl	800b412 <assert_print>
 8007a0a:	4923      	ldr	r1, [pc, #140]	; (8007a98 <z_impl_k_mutex_unlock+0x104>)
 8007a0c:	4825      	ldr	r0, [pc, #148]	; (8007aa4 <z_impl_k_mutex_unlock+0x110>)
 8007a0e:	f003 fd00 	bl	800b412 <assert_print>
 8007a12:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007a14:	4821      	ldr	r0, [pc, #132]	; (8007a9c <z_impl_k_mutex_unlock+0x108>)
 8007a16:	e7cd      	b.n	80079b4 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
 8007a18:	481f      	ldr	r0, [pc, #124]	; (8007a98 <z_impl_k_mutex_unlock+0x104>)
 8007a1a:	f7ff febf 	bl	800779c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8007a1e:	6921      	ldr	r1, [r4, #16]
 8007a20:	68a0      	ldr	r0, [r4, #8]
 8007a22:	f004 fbcd 	bl	800c1c0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 ff74 	bl	8008914 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8007a2c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8007a2e:	b150      	cbz	r0, 8007a46 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
 8007a30:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8007a34:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8007a36:	6786      	str	r6, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
 8007a38:	f000 f9e0 	bl	8007dfc <z_ready_thread>
		z_reschedule(&lock, key);
 8007a3c:	4816      	ldr	r0, [pc, #88]	; (8007a98 <z_impl_k_mutex_unlock+0x104>)
 8007a3e:	4629      	mov	r1, r5
 8007a40:	f000 fa68 	bl	8007f14 <z_reschedule>
 8007a44:	e7cd      	b.n	80079e2 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
 8007a46:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007a48:	4813      	ldr	r0, [pc, #76]	; (8007a98 <z_impl_k_mutex_unlock+0x104>)
 8007a4a:	f7ff fe97 	bl	800777c <z_spin_unlock_valid>
 8007a4e:	b958      	cbnz	r0, 8007a68 <z_impl_k_mutex_unlock+0xd4>
 8007a50:	4a12      	ldr	r2, [pc, #72]	; (8007a9c <z_impl_k_mutex_unlock+0x108>)
 8007a52:	4915      	ldr	r1, [pc, #84]	; (8007aa8 <z_impl_k_mutex_unlock+0x114>)
 8007a54:	480c      	ldr	r0, [pc, #48]	; (8007a88 <z_impl_k_mutex_unlock+0xf4>)
 8007a56:	23b9      	movs	r3, #185	; 0xb9
 8007a58:	f003 fcdb 	bl	800b412 <assert_print>
 8007a5c:	490e      	ldr	r1, [pc, #56]	; (8007a98 <z_impl_k_mutex_unlock+0x104>)
 8007a5e:	4813      	ldr	r0, [pc, #76]	; (8007aac <z_impl_k_mutex_unlock+0x118>)
 8007a60:	f003 fcd7 	bl	800b412 <assert_print>
 8007a64:	21b9      	movs	r1, #185	; 0xb9
 8007a66:	e7d5      	b.n	8007a14 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
 8007a68:	f385 8811 	msr	BASEPRI, r5
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	e7b7      	b.n	80079e2 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
 8007a72:	f06f 0015 	mvn.w	r0, #21
 8007a76:	e7b5      	b.n	80079e4 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
 8007a78:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7c:	e7b2      	b.n	80079e4 <z_impl_k_mutex_unlock+0x50>
 8007a7e:	bf00      	nop
 8007a80:	08013107 	.word	0x08013107
 8007a84:	080131d3 	.word	0x080131d3
 8007a88:	080118c5 	.word	0x080118c5
 8007a8c:	080131f5 	.word	0x080131f5
 8007a90:	20000be0 	.word	0x20000be0
 8007a94:	0801321a 	.word	0x0801321a
 8007a98:	20000c04 	.word	0x20000c04
 8007a9c:	08011b97 	.word	0x08011b97
 8007aa0:	08011bc4 	.word	0x08011bc4
 8007aa4:	08011bd9 	.word	0x08011bd9
 8007aa8:	08011bf1 	.word	0x08011bf1
 8007aac:	08011c08 	.word	0x08011c08

08007ab0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4604      	mov	r4, r0
	__asm__ volatile(
 8007ab4:	f04f 0310 	mov.w	r3, #16
 8007ab8:	f3ef 8511 	mrs	r5, BASEPRI
 8007abc:	f383 8812 	msr	BASEPRI_MAX, r3
 8007ac0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8007ac4:	4814      	ldr	r0, [pc, #80]	; (8007b18 <z_impl_k_sem_give+0x68>)
 8007ac6:	f7ff fe4b 	bl	8007760 <z_spin_lock_valid>
 8007aca:	b968      	cbnz	r0, 8007ae8 <z_impl_k_sem_give+0x38>
 8007acc:	4a13      	ldr	r2, [pc, #76]	; (8007b1c <z_impl_k_sem_give+0x6c>)
 8007ace:	4914      	ldr	r1, [pc, #80]	; (8007b20 <z_impl_k_sem_give+0x70>)
 8007ad0:	4814      	ldr	r0, [pc, #80]	; (8007b24 <z_impl_k_sem_give+0x74>)
 8007ad2:	238e      	movs	r3, #142	; 0x8e
 8007ad4:	f003 fc9d 	bl	800b412 <assert_print>
 8007ad8:	490f      	ldr	r1, [pc, #60]	; (8007b18 <z_impl_k_sem_give+0x68>)
 8007ada:	4813      	ldr	r0, [pc, #76]	; (8007b28 <z_impl_k_sem_give+0x78>)
 8007adc:	f003 fc99 	bl	800b412 <assert_print>
 8007ae0:	480e      	ldr	r0, [pc, #56]	; (8007b1c <z_impl_k_sem_give+0x6c>)
 8007ae2:	218e      	movs	r1, #142	; 0x8e
 8007ae4:	f003 fc8e 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8007ae8:	480b      	ldr	r0, [pc, #44]	; (8007b18 <z_impl_k_sem_give+0x68>)
 8007aea:	f7ff fe57 	bl	800779c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 ff10 	bl	8008914 <z_unpend_first_thread>

	if (thread != NULL) {
 8007af4:	b148      	cbz	r0, 8007b0a <z_impl_k_sem_give+0x5a>
 8007af6:	2200      	movs	r2, #0
 8007af8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8007afa:	f000 f97f 	bl	8007dfc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8007afe:	4629      	mov	r1, r5
 8007b00:	4805      	ldr	r0, [pc, #20]	; (8007b18 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8007b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8007b06:	f000 ba05 	b.w	8007f14 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8007b0a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	bf18      	it	ne
 8007b12:	3301      	addne	r3, #1
 8007b14:	60a3      	str	r3, [r4, #8]
}
 8007b16:	e7f2      	b.n	8007afe <z_impl_k_sem_give+0x4e>
 8007b18:	20000c08 	.word	0x20000c08
 8007b1c:	08011b97 	.word	0x08011b97
 8007b20:	08011bc4 	.word	0x08011bc4
 8007b24:	080118c5 	.word	0x080118c5
 8007b28:	08011bd9 	.word	0x08011bd9

08007b2c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8007b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b2e:	4604      	mov	r4, r0
 8007b30:	4616      	mov	r6, r2
 8007b32:	461d      	mov	r5, r3
 8007b34:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
 8007b38:	b17b      	cbz	r3, 8007b5a <z_impl_k_sem_take+0x2e>
 8007b3a:	ea52 0305 	orrs.w	r3, r2, r5
 8007b3e:	d00c      	beq.n	8007b5a <z_impl_k_sem_take+0x2e>
 8007b40:	492d      	ldr	r1, [pc, #180]	; (8007bf8 <z_impl_k_sem_take+0xcc>)
 8007b42:	4a2e      	ldr	r2, [pc, #184]	; (8007bfc <z_impl_k_sem_take+0xd0>)
 8007b44:	482e      	ldr	r0, [pc, #184]	; (8007c00 <z_impl_k_sem_take+0xd4>)
 8007b46:	2379      	movs	r3, #121	; 0x79
 8007b48:	f003 fc63 	bl	800b412 <assert_print>
 8007b4c:	482d      	ldr	r0, [pc, #180]	; (8007c04 <z_impl_k_sem_take+0xd8>)
 8007b4e:	f003 fc60 	bl	800b412 <assert_print>
 8007b52:	482a      	ldr	r0, [pc, #168]	; (8007bfc <z_impl_k_sem_take+0xd0>)
 8007b54:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8007b56:	f003 fc55 	bl	800b404 <assert_post_action>
 8007b5a:	f04f 0310 	mov.w	r3, #16
 8007b5e:	f3ef 8711 	mrs	r7, BASEPRI
 8007b62:	f383 8812 	msr	BASEPRI_MAX, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	4827      	ldr	r0, [pc, #156]	; (8007c08 <z_impl_k_sem_take+0xdc>)
 8007b6c:	f7ff fdf8 	bl	8007760 <z_spin_lock_valid>
 8007b70:	b960      	cbnz	r0, 8007b8c <z_impl_k_sem_take+0x60>
 8007b72:	4a26      	ldr	r2, [pc, #152]	; (8007c0c <z_impl_k_sem_take+0xe0>)
 8007b74:	4926      	ldr	r1, [pc, #152]	; (8007c10 <z_impl_k_sem_take+0xe4>)
 8007b76:	4822      	ldr	r0, [pc, #136]	; (8007c00 <z_impl_k_sem_take+0xd4>)
 8007b78:	238e      	movs	r3, #142	; 0x8e
 8007b7a:	f003 fc4a 	bl	800b412 <assert_print>
 8007b7e:	4922      	ldr	r1, [pc, #136]	; (8007c08 <z_impl_k_sem_take+0xdc>)
 8007b80:	4824      	ldr	r0, [pc, #144]	; (8007c14 <z_impl_k_sem_take+0xe8>)
 8007b82:	f003 fc46 	bl	800b412 <assert_print>
 8007b86:	218e      	movs	r1, #142	; 0x8e
 8007b88:	4820      	ldr	r0, [pc, #128]	; (8007c0c <z_impl_k_sem_take+0xe0>)
 8007b8a:	e7e4      	b.n	8007b56 <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
 8007b8c:	481e      	ldr	r0, [pc, #120]	; (8007c08 <z_impl_k_sem_take+0xdc>)
 8007b8e:	f7ff fe05 	bl	800779c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8007b92:	68a3      	ldr	r3, [r4, #8]
 8007b94:	b1c3      	cbz	r3, 8007bc8 <z_impl_k_sem_take+0x9c>
		sem->count--;
 8007b96:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007b98:	481b      	ldr	r0, [pc, #108]	; (8007c08 <z_impl_k_sem_take+0xdc>)
 8007b9a:	60a3      	str	r3, [r4, #8]
 8007b9c:	f7ff fdee 	bl	800777c <z_spin_unlock_valid>
 8007ba0:	b958      	cbnz	r0, 8007bba <z_impl_k_sem_take+0x8e>
 8007ba2:	4a1a      	ldr	r2, [pc, #104]	; (8007c0c <z_impl_k_sem_take+0xe0>)
 8007ba4:	491c      	ldr	r1, [pc, #112]	; (8007c18 <z_impl_k_sem_take+0xec>)
 8007ba6:	4816      	ldr	r0, [pc, #88]	; (8007c00 <z_impl_k_sem_take+0xd4>)
 8007ba8:	23b9      	movs	r3, #185	; 0xb9
 8007baa:	f003 fc32 	bl	800b412 <assert_print>
 8007bae:	4916      	ldr	r1, [pc, #88]	; (8007c08 <z_impl_k_sem_take+0xdc>)
 8007bb0:	481a      	ldr	r0, [pc, #104]	; (8007c1c <z_impl_k_sem_take+0xf0>)
 8007bb2:	f003 fc2e 	bl	800b412 <assert_print>
 8007bb6:	21b9      	movs	r1, #185	; 0xb9
 8007bb8:	e7e6      	b.n	8007b88 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
 8007bba:	f387 8811 	msr	BASEPRI, r7
 8007bbe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8007bc2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8007bc4:	b003      	add	sp, #12
 8007bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8007bc8:	ea56 0305 	orrs.w	r3, r6, r5
 8007bcc:	d10b      	bne.n	8007be6 <z_impl_k_sem_take+0xba>
 8007bce:	480e      	ldr	r0, [pc, #56]	; (8007c08 <z_impl_k_sem_take+0xdc>)
 8007bd0:	f7ff fdd4 	bl	800777c <z_spin_unlock_valid>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d0e4      	beq.n	8007ba2 <z_impl_k_sem_take+0x76>
 8007bd8:	f387 8811 	msr	BASEPRI, r7
 8007bdc:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8007be0:	f06f 000f 	mvn.w	r0, #15
 8007be4:	e7ee      	b.n	8007bc4 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8007be6:	e9cd 6500 	strd	r6, r5, [sp]
 8007bea:	4622      	mov	r2, r4
 8007bec:	4639      	mov	r1, r7
 8007bee:	4806      	ldr	r0, [pc, #24]	; (8007c08 <z_impl_k_sem_take+0xdc>)
 8007bf0:	f000 fca2 	bl	8008538 <z_pend_curr>
	return ret;
 8007bf4:	e7e6      	b.n	8007bc4 <z_impl_k_sem_take+0x98>
 8007bf6:	bf00      	nop
 8007bf8:	08013251 	.word	0x08013251
 8007bfc:	08013231 	.word	0x08013231
 8007c00:	080118c5 	.word	0x080118c5
 8007c04:	0801329f 	.word	0x0801329f
 8007c08:	20000c08 	.word	0x20000c08
 8007c0c:	08011b97 	.word	0x08011b97
 8007c10:	08011bc4 	.word	0x08011bc4
 8007c14:	08011bd9 	.word	0x08011bd9
 8007c18:	08011bf1 	.word	0x08011bf1
 8007c1c:	08011c08 	.word	0x08011c08

08007c20 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 8007c20:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 8007c22:	4d07      	ldr	r5, [pc, #28]	; (8007c40 <z_reset_time_slice+0x20>)
 8007c24:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 8007c26:	b154      	cbz	r4, 8007c3e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 8007c28:	f7ff f95e 	bl	8006ee8 <sys_clock_elapsed>
 8007c2c:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <z_reset_time_slice+0x24>)
 8007c2e:	4404      	add	r4, r0
 8007c30:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 8007c32:	6828      	ldr	r0, [r5, #0]
 8007c34:	2100      	movs	r1, #0
	}
}
 8007c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 8007c3a:	f001 ba7b 	b.w	8009134 <z_set_timeout_expiry>
}
 8007c3e:	bd38      	pop	{r3, r4, r5, pc}
 8007c40:	20000c14 	.word	0x20000c14
 8007c44:	20000be0 	.word	0x20000be0

08007c48 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 8007c48:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 8007c4a:	4d14      	ldr	r5, [pc, #80]	; (8007c9c <update_cache+0x54>)
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007c52:	429c      	cmp	r4, r3
 8007c54:	d000      	beq.n	8007c58 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8007c56:	b904      	cbnz	r4, 8007c5a <update_cache+0x12>
 8007c58:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
 8007c5a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8007c5c:	b9a8      	cbnz	r0, 8007c8a <update_cache+0x42>
	__ASSERT(_current != NULL, "");
 8007c5e:	b963      	cbnz	r3, 8007c7a <update_cache+0x32>
 8007c60:	490f      	ldr	r1, [pc, #60]	; (8007ca0 <update_cache+0x58>)
 8007c62:	4a10      	ldr	r2, [pc, #64]	; (8007ca4 <update_cache+0x5c>)
 8007c64:	4810      	ldr	r0, [pc, #64]	; (8007ca8 <update_cache+0x60>)
 8007c66:	2389      	movs	r3, #137	; 0x89
 8007c68:	f003 fbd3 	bl	800b412 <assert_print>
 8007c6c:	480f      	ldr	r0, [pc, #60]	; (8007cac <update_cache+0x64>)
 8007c6e:	f003 fbd0 	bl	800b412 <assert_print>
 8007c72:	480c      	ldr	r0, [pc, #48]	; (8007ca4 <update_cache+0x5c>)
 8007c74:	2189      	movs	r1, #137	; 0x89
 8007c76:	f003 fbc5 	bl	800b404 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
 8007c7a:	7b5a      	ldrb	r2, [r3, #13]
 8007c7c:	06d2      	lsls	r2, r2, #27
 8007c7e:	d104      	bne.n	8007c8a <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8007c80:	69a2      	ldr	r2, [r4, #24]
 8007c82:	b912      	cbnz	r2, 8007c8a <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
 8007c84:	89da      	ldrh	r2, [r3, #14]
 8007c86:	2a7f      	cmp	r2, #127	; 0x7f
 8007c88:	d805      	bhi.n	8007c96 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 8007c8a:	429c      	cmp	r4, r3
 8007c8c:	d002      	beq.n	8007c94 <update_cache+0x4c>
			z_reset_time_slice(thread);
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f7ff ffc6 	bl	8007c20 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 8007c94:	4623      	mov	r3, r4
 8007c96:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 8007c98:	bd38      	pop	{r3, r4, r5, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000be0 	.word	0x20000be0
 8007ca0:	080132c4 	.word	0x080132c4
 8007ca4:	080132a2 	.word	0x080132a2
 8007ca8:	080118c5 	.word	0x080118c5
 8007cac:	0801329f 	.word	0x0801329f

08007cb0 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
 8007cb0:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8007cb2:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8007cb6:	7b42      	ldrb	r2, [r0, #13]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	db38      	blt.n	8007d2e <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8007cbc:	06d3      	lsls	r3, r2, #27
 8007cbe:	d136      	bne.n	8007d2e <ready_thread+0x7e>
	return node->next != NULL;
 8007cc0:	6983      	ldr	r3, [r0, #24]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d133      	bne.n	8007d2e <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
 8007cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cca:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8007ccc:	4a18      	ldr	r2, [pc, #96]	; (8007d30 <ready_thread+0x80>)
 8007cce:	4290      	cmp	r0, r2
 8007cd0:	d109      	bne.n	8007ce6 <ready_thread+0x36>
 8007cd2:	4918      	ldr	r1, [pc, #96]	; (8007d34 <ready_thread+0x84>)
 8007cd4:	4818      	ldr	r0, [pc, #96]	; (8007d38 <ready_thread+0x88>)
 8007cd6:	4a19      	ldr	r2, [pc, #100]	; (8007d3c <ready_thread+0x8c>)
 8007cd8:	23ba      	movs	r3, #186	; 0xba
 8007cda:	f003 fb9a 	bl	800b412 <assert_print>
 8007cde:	4817      	ldr	r0, [pc, #92]	; (8007d3c <ready_thread+0x8c>)
 8007ce0:	21ba      	movs	r1, #186	; 0xba
 8007ce2:	f003 fb8f 	bl	800b404 <assert_post_action>
	return list->head == list;
 8007ce6:	4916      	ldr	r1, [pc, #88]	; (8007d40 <ready_thread+0x90>)
 8007ce8:	460a      	mov	r2, r1
 8007cea:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007cee:	4294      	cmp	r4, r2
 8007cf0:	bf18      	it	ne
 8007cf2:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8007cf4:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8007cf6:	b923      	cbnz	r3, 8007d02 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 8007cf8:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
 8007cfc:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8007cfe:	6208      	str	r0, [r1, #32]
}
 8007d00:	e00c      	b.n	8007d1c <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
 8007d02:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8007d06:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8007d0a:	42b5      	cmp	r5, r6
 8007d0c:	d00b      	beq.n	8007d26 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8007d0e:	42ae      	cmp	r6, r5
 8007d10:	dd09      	ble.n	8007d26 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8007d12:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8007d14:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8007d18:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8007d1a:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
 8007d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
 8007d20:	2000      	movs	r0, #0
 8007d22:	f7ff bf91 	b.w	8007c48 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8007d26:	42a3      	cmp	r3, r4
 8007d28:	d0e6      	beq.n	8007cf8 <ready_thread+0x48>
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	e7e3      	b.n	8007cf6 <ready_thread+0x46>
}
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	200008e8 	.word	0x200008e8
 8007d34:	080132eb 	.word	0x080132eb
 8007d38:	080118c5 	.word	0x080118c5
 8007d3c:	080132a2 	.word	0x080132a2
 8007d40:	20000be0 	.word	0x20000be0

08007d44 <k_sched_time_slice_set>:
{
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	4604      	mov	r4, r0
 8007d48:	460d      	mov	r5, r1
	__asm__ volatile(
 8007d4a:	f04f 0310 	mov.w	r3, #16
 8007d4e:	f3ef 8611 	mrs	r6, BASEPRI
 8007d52:	f383 8812 	msr	BASEPRI_MAX, r3
 8007d56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8007d5a:	481e      	ldr	r0, [pc, #120]	; (8007dd4 <k_sched_time_slice_set+0x90>)
 8007d5c:	f7ff fd00 	bl	8007760 <z_spin_lock_valid>
 8007d60:	b968      	cbnz	r0, 8007d7e <k_sched_time_slice_set+0x3a>
 8007d62:	4a1d      	ldr	r2, [pc, #116]	; (8007dd8 <k_sched_time_slice_set+0x94>)
 8007d64:	491d      	ldr	r1, [pc, #116]	; (8007ddc <k_sched_time_slice_set+0x98>)
 8007d66:	481e      	ldr	r0, [pc, #120]	; (8007de0 <k_sched_time_slice_set+0x9c>)
 8007d68:	238e      	movs	r3, #142	; 0x8e
 8007d6a:	f003 fb52 	bl	800b412 <assert_print>
 8007d6e:	4919      	ldr	r1, [pc, #100]	; (8007dd4 <k_sched_time_slice_set+0x90>)
 8007d70:	481c      	ldr	r0, [pc, #112]	; (8007de4 <k_sched_time_slice_set+0xa0>)
 8007d72:	f003 fb4e 	bl	800b412 <assert_print>
 8007d76:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007d78:	4817      	ldr	r0, [pc, #92]	; (8007dd8 <k_sched_time_slice_set+0x94>)
 8007d7a:	f003 fb43 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8007d7e:	4815      	ldr	r0, [pc, #84]	; (8007dd4 <k_sched_time_slice_set+0x90>)
 8007d80:	f7ff fd0c 	bl	800779c <z_spin_lock_set_owner>
			return ((uint32_t)t) * (to_hz / from_hz);
 8007d84:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8007d86:	2c00      	cmp	r4, #0
 8007d88:	fb04 f303 	mul.w	r3, r4, r3
 8007d8c:	dd02      	ble.n	8007d94 <k_sched_time_slice_set+0x50>
			slice_ticks = MAX(2, slice_ticks);
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	bfb8      	it	lt
 8007d92:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
 8007d94:	4a14      	ldr	r2, [pc, #80]	; (8007de8 <k_sched_time_slice_set+0xa4>)
 8007d96:	2100      	movs	r1, #0
 8007d98:	6111      	str	r1, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 8007d9a:	4914      	ldr	r1, [pc, #80]	; (8007dec <k_sched_time_slice_set+0xa8>)
		z_reset_time_slice(_current);
 8007d9c:	6890      	ldr	r0, [r2, #8]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 8007d9e:	600b      	str	r3, [r1, #0]
		slice_max_prio = prio;
 8007da0:	4b13      	ldr	r3, [pc, #76]	; (8007df0 <k_sched_time_slice_set+0xac>)
 8007da2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
 8007da4:	f7ff ff3c 	bl	8007c20 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007da8:	480a      	ldr	r0, [pc, #40]	; (8007dd4 <k_sched_time_slice_set+0x90>)
 8007daa:	f7ff fce7 	bl	800777c <z_spin_unlock_valid>
 8007dae:	b958      	cbnz	r0, 8007dc8 <k_sched_time_slice_set+0x84>
 8007db0:	4a09      	ldr	r2, [pc, #36]	; (8007dd8 <k_sched_time_slice_set+0x94>)
 8007db2:	4910      	ldr	r1, [pc, #64]	; (8007df4 <k_sched_time_slice_set+0xb0>)
 8007db4:	480a      	ldr	r0, [pc, #40]	; (8007de0 <k_sched_time_slice_set+0x9c>)
 8007db6:	23b9      	movs	r3, #185	; 0xb9
 8007db8:	f003 fb2b 	bl	800b412 <assert_print>
 8007dbc:	4905      	ldr	r1, [pc, #20]	; (8007dd4 <k_sched_time_slice_set+0x90>)
 8007dbe:	480e      	ldr	r0, [pc, #56]	; (8007df8 <k_sched_time_slice_set+0xb4>)
 8007dc0:	f003 fb27 	bl	800b412 <assert_print>
 8007dc4:	21b9      	movs	r1, #185	; 0xb9
 8007dc6:	e7d7      	b.n	8007d78 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
 8007dc8:	f386 8811 	msr	BASEPRI, r6
 8007dcc:	f3bf 8f6f 	isb	sy
}
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20000c18 	.word	0x20000c18
 8007dd8:	08011b97 	.word	0x08011b97
 8007ddc:	08011bc4 	.word	0x08011bc4
 8007de0:	080118c5 	.word	0x080118c5
 8007de4:	08011bd9 	.word	0x08011bd9
 8007de8:	20000be0 	.word	0x20000be0
 8007dec:	20000c14 	.word	0x20000c14
 8007df0:	20000c10 	.word	0x20000c10
 8007df4:	08011bf1 	.word	0x08011bf1
 8007df8:	08011c08 	.word	0x08011c08

08007dfc <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	4604      	mov	r4, r0
	__asm__ volatile(
 8007e00:	f04f 0310 	mov.w	r3, #16
 8007e04:	f3ef 8511 	mrs	r5, BASEPRI
 8007e08:	f383 8812 	msr	BASEPRI_MAX, r3
 8007e0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8007e10:	4816      	ldr	r0, [pc, #88]	; (8007e6c <z_ready_thread+0x70>)
 8007e12:	f7ff fca5 	bl	8007760 <z_spin_lock_valid>
 8007e16:	b968      	cbnz	r0, 8007e34 <z_ready_thread+0x38>
 8007e18:	4a15      	ldr	r2, [pc, #84]	; (8007e70 <z_ready_thread+0x74>)
 8007e1a:	4916      	ldr	r1, [pc, #88]	; (8007e74 <z_ready_thread+0x78>)
 8007e1c:	4816      	ldr	r0, [pc, #88]	; (8007e78 <z_ready_thread+0x7c>)
 8007e1e:	238e      	movs	r3, #142	; 0x8e
 8007e20:	f003 faf7 	bl	800b412 <assert_print>
 8007e24:	4911      	ldr	r1, [pc, #68]	; (8007e6c <z_ready_thread+0x70>)
 8007e26:	4815      	ldr	r0, [pc, #84]	; (8007e7c <z_ready_thread+0x80>)
 8007e28:	f003 faf3 	bl	800b412 <assert_print>
 8007e2c:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007e2e:	4810      	ldr	r0, [pc, #64]	; (8007e70 <z_ready_thread+0x74>)
 8007e30:	f003 fae8 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8007e34:	480d      	ldr	r0, [pc, #52]	; (8007e6c <z_ready_thread+0x70>)
 8007e36:	f7ff fcb1 	bl	800779c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7ff ff38 	bl	8007cb0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007e40:	480a      	ldr	r0, [pc, #40]	; (8007e6c <z_ready_thread+0x70>)
 8007e42:	f7ff fc9b 	bl	800777c <z_spin_unlock_valid>
 8007e46:	b958      	cbnz	r0, 8007e60 <z_ready_thread+0x64>
 8007e48:	4a09      	ldr	r2, [pc, #36]	; (8007e70 <z_ready_thread+0x74>)
 8007e4a:	490d      	ldr	r1, [pc, #52]	; (8007e80 <z_ready_thread+0x84>)
 8007e4c:	480a      	ldr	r0, [pc, #40]	; (8007e78 <z_ready_thread+0x7c>)
 8007e4e:	23b9      	movs	r3, #185	; 0xb9
 8007e50:	f003 fadf 	bl	800b412 <assert_print>
 8007e54:	4905      	ldr	r1, [pc, #20]	; (8007e6c <z_ready_thread+0x70>)
 8007e56:	480b      	ldr	r0, [pc, #44]	; (8007e84 <z_ready_thread+0x88>)
 8007e58:	f003 fadb 	bl	800b412 <assert_print>
 8007e5c:	21b9      	movs	r1, #185	; 0xb9
 8007e5e:	e7e6      	b.n	8007e2e <z_ready_thread+0x32>
	__asm__ volatile(
 8007e60:	f385 8811 	msr	BASEPRI, r5
 8007e64:	f3bf 8f6f 	isb	sy
		}
	}
}
 8007e68:	bd38      	pop	{r3, r4, r5, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000c18 	.word	0x20000c18
 8007e70:	08011b97 	.word	0x08011b97
 8007e74:	08011bc4 	.word	0x08011bc4
 8007e78:	080118c5 	.word	0x080118c5
 8007e7c:	08011bd9 	.word	0x08011bd9
 8007e80:	08011bf1 	.word	0x08011bf1
 8007e84:	08011c08 	.word	0x08011c08

08007e88 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4604      	mov	r4, r0
	__asm__ volatile(
 8007e8c:	f04f 0310 	mov.w	r3, #16
 8007e90:	f3ef 8511 	mrs	r5, BASEPRI
 8007e94:	f383 8812 	msr	BASEPRI_MAX, r3
 8007e98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8007e9c:	4816      	ldr	r0, [pc, #88]	; (8007ef8 <z_unpend_thread_no_timeout+0x70>)
 8007e9e:	f7ff fc5f 	bl	8007760 <z_spin_lock_valid>
 8007ea2:	b968      	cbnz	r0, 8007ec0 <z_unpend_thread_no_timeout+0x38>
 8007ea4:	4a15      	ldr	r2, [pc, #84]	; (8007efc <z_unpend_thread_no_timeout+0x74>)
 8007ea6:	4916      	ldr	r1, [pc, #88]	; (8007f00 <z_unpend_thread_no_timeout+0x78>)
 8007ea8:	4816      	ldr	r0, [pc, #88]	; (8007f04 <z_unpend_thread_no_timeout+0x7c>)
 8007eaa:	238e      	movs	r3, #142	; 0x8e
 8007eac:	f003 fab1 	bl	800b412 <assert_print>
 8007eb0:	4911      	ldr	r1, [pc, #68]	; (8007ef8 <z_unpend_thread_no_timeout+0x70>)
 8007eb2:	4815      	ldr	r0, [pc, #84]	; (8007f08 <z_unpend_thread_no_timeout+0x80>)
 8007eb4:	f003 faad 	bl	800b412 <assert_print>
 8007eb8:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007eba:	4810      	ldr	r0, [pc, #64]	; (8007efc <z_unpend_thread_no_timeout+0x74>)
 8007ebc:	f003 faa2 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8007ec0:	480d      	ldr	r0, [pc, #52]	; (8007ef8 <z_unpend_thread_no_timeout+0x70>)
 8007ec2:	f7ff fc6b 	bl	800779c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f000 fc60 	bl	800878c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007ecc:	480a      	ldr	r0, [pc, #40]	; (8007ef8 <z_unpend_thread_no_timeout+0x70>)
 8007ece:	f7ff fc55 	bl	800777c <z_spin_unlock_valid>
 8007ed2:	b958      	cbnz	r0, 8007eec <z_unpend_thread_no_timeout+0x64>
 8007ed4:	4a09      	ldr	r2, [pc, #36]	; (8007efc <z_unpend_thread_no_timeout+0x74>)
 8007ed6:	490d      	ldr	r1, [pc, #52]	; (8007f0c <z_unpend_thread_no_timeout+0x84>)
 8007ed8:	480a      	ldr	r0, [pc, #40]	; (8007f04 <z_unpend_thread_no_timeout+0x7c>)
 8007eda:	23b9      	movs	r3, #185	; 0xb9
 8007edc:	f003 fa99 	bl	800b412 <assert_print>
 8007ee0:	4905      	ldr	r1, [pc, #20]	; (8007ef8 <z_unpend_thread_no_timeout+0x70>)
 8007ee2:	480b      	ldr	r0, [pc, #44]	; (8007f10 <z_unpend_thread_no_timeout+0x88>)
 8007ee4:	f003 fa95 	bl	800b412 <assert_print>
 8007ee8:	21b9      	movs	r1, #185	; 0xb9
 8007eea:	e7e6      	b.n	8007eba <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
 8007eec:	f385 8811 	msr	BASEPRI, r5
 8007ef0:	f3bf 8f6f 	isb	sy
	}
}
 8007ef4:	bd38      	pop	{r3, r4, r5, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20000c18 	.word	0x20000c18
 8007efc:	08011b97 	.word	0x08011b97
 8007f00:	08011bc4 	.word	0x08011bc4
 8007f04:	080118c5 	.word	0x080118c5
 8007f08:	08011bd9 	.word	0x08011bd9
 8007f0c:	08011bf1 	.word	0x08011bf1
 8007f10:	08011c08 	.word	0x08011c08

08007f14 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8007f18:	460d      	mov	r5, r1
 8007f1a:	b9e9      	cbnz	r1, 8007f58 <z_reschedule+0x44>
 8007f1c:	f3ef 8605 	mrs	r6, IPSR
 8007f20:	b9d6      	cbnz	r6, 8007f58 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
 8007f22:	4b18      	ldr	r3, [pc, #96]	; (8007f84 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d015      	beq.n	8007f58 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007f2c:	f7ff fc26 	bl	800777c <z_spin_unlock_valid>
 8007f30:	b968      	cbnz	r0, 8007f4e <z_reschedule+0x3a>
 8007f32:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <z_reschedule+0x74>)
 8007f34:	4915      	ldr	r1, [pc, #84]	; (8007f8c <z_reschedule+0x78>)
 8007f36:	4816      	ldr	r0, [pc, #88]	; (8007f90 <z_reschedule+0x7c>)
 8007f38:	23d0      	movs	r3, #208	; 0xd0
 8007f3a:	f003 fa6a 	bl	800b412 <assert_print>
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4814      	ldr	r0, [pc, #80]	; (8007f94 <z_reschedule+0x80>)
 8007f42:	f003 fa66 	bl	800b412 <assert_print>
 8007f46:	21d0      	movs	r1, #208	; 0xd0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007f48:	480f      	ldr	r0, [pc, #60]	; (8007f88 <z_reschedule+0x74>)
 8007f4a:	f003 fa5b 	bl	800b404 <assert_post_action>
	ret = arch_swap(key);
 8007f4e:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
 8007f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f54:	f7fc bcc4 	b.w	80048e0 <arch_swap>
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f7ff fc0f 	bl	800777c <z_spin_unlock_valid>
 8007f5e:	b958      	cbnz	r0, 8007f78 <z_reschedule+0x64>
 8007f60:	4a09      	ldr	r2, [pc, #36]	; (8007f88 <z_reschedule+0x74>)
 8007f62:	490a      	ldr	r1, [pc, #40]	; (8007f8c <z_reschedule+0x78>)
 8007f64:	480a      	ldr	r0, [pc, #40]	; (8007f90 <z_reschedule+0x7c>)
 8007f66:	23b9      	movs	r3, #185	; 0xb9
 8007f68:	f003 fa53 	bl	800b412 <assert_print>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4809      	ldr	r0, [pc, #36]	; (8007f94 <z_reschedule+0x80>)
 8007f70:	f003 fa4f 	bl	800b412 <assert_print>
 8007f74:	21b9      	movs	r1, #185	; 0xb9
 8007f76:	e7e7      	b.n	8007f48 <z_reschedule+0x34>
 8007f78:	f385 8811 	msr	BASEPRI, r5
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	bd70      	pop	{r4, r5, r6, pc}
 8007f82:	bf00      	nop
 8007f84:	20000be0 	.word	0x20000be0
 8007f88:	08011b97 	.word	0x08011b97
 8007f8c:	08011bf1 	.word	0x08011bf1
 8007f90:	080118c5 	.word	0x080118c5
 8007f94:	08011c08 	.word	0x08011c08

08007f98 <z_sched_start>:
{
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4604      	mov	r4, r0
	__asm__ volatile(
 8007f9c:	f04f 0310 	mov.w	r3, #16
 8007fa0:	f3ef 8511 	mrs	r5, BASEPRI
 8007fa4:	f383 8812 	msr	BASEPRI_MAX, r3
 8007fa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8007fac:	481c      	ldr	r0, [pc, #112]	; (8008020 <z_sched_start+0x88>)
 8007fae:	f7ff fbd7 	bl	8007760 <z_spin_lock_valid>
 8007fb2:	b968      	cbnz	r0, 8007fd0 <z_sched_start+0x38>
 8007fb4:	4a1b      	ldr	r2, [pc, #108]	; (8008024 <z_sched_start+0x8c>)
 8007fb6:	491c      	ldr	r1, [pc, #112]	; (8008028 <z_sched_start+0x90>)
 8007fb8:	481c      	ldr	r0, [pc, #112]	; (800802c <z_sched_start+0x94>)
 8007fba:	238e      	movs	r3, #142	; 0x8e
 8007fbc:	f003 fa29 	bl	800b412 <assert_print>
 8007fc0:	4917      	ldr	r1, [pc, #92]	; (8008020 <z_sched_start+0x88>)
 8007fc2:	481b      	ldr	r0, [pc, #108]	; (8008030 <z_sched_start+0x98>)
 8007fc4:	f003 fa25 	bl	800b412 <assert_print>
 8007fc8:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007fca:	4816      	ldr	r0, [pc, #88]	; (8008024 <z_sched_start+0x8c>)
 8007fcc:	f003 fa1a 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8007fd0:	4813      	ldr	r0, [pc, #76]	; (8008020 <z_sched_start+0x88>)
 8007fd2:	f7ff fbe3 	bl	800779c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8007fd6:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
 8007fd8:	075a      	lsls	r2, r3, #29
 8007fda:	d414      	bmi.n	8008006 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8007fdc:	4810      	ldr	r0, [pc, #64]	; (8008020 <z_sched_start+0x88>)
 8007fde:	f7ff fbcd 	bl	800777c <z_spin_unlock_valid>
 8007fe2:	b958      	cbnz	r0, 8007ffc <z_sched_start+0x64>
 8007fe4:	4a0f      	ldr	r2, [pc, #60]	; (8008024 <z_sched_start+0x8c>)
 8007fe6:	4913      	ldr	r1, [pc, #76]	; (8008034 <z_sched_start+0x9c>)
 8007fe8:	4810      	ldr	r0, [pc, #64]	; (800802c <z_sched_start+0x94>)
 8007fea:	23b9      	movs	r3, #185	; 0xb9
 8007fec:	f003 fa11 	bl	800b412 <assert_print>
 8007ff0:	490b      	ldr	r1, [pc, #44]	; (8008020 <z_sched_start+0x88>)
 8007ff2:	4811      	ldr	r0, [pc, #68]	; (8008038 <z_sched_start+0xa0>)
 8007ff4:	f003 fa0d 	bl	800b412 <assert_print>
 8007ff8:	21b9      	movs	r1, #185	; 0xb9
 8007ffa:	e7e6      	b.n	8007fca <z_sched_start+0x32>
	__asm__ volatile(
 8007ffc:	f385 8811 	msr	BASEPRI, r5
 8008000:	f3bf 8f6f 	isb	sy
}
 8008004:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8008006:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
 800800a:	4620      	mov	r0, r4
 800800c:	7363      	strb	r3, [r4, #13]
 800800e:	f7ff fe4f 	bl	8007cb0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8008012:	4629      	mov	r1, r5
 8008014:	4802      	ldr	r0, [pc, #8]	; (8008020 <z_sched_start+0x88>)
}
 8008016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
 800801a:	f7ff bf7b 	b.w	8007f14 <z_reschedule>
 800801e:	bf00      	nop
 8008020:	20000c18 	.word	0x20000c18
 8008024:	08011b97 	.word	0x08011b97
 8008028:	08011bc4 	.word	0x08011bc4
 800802c:	080118c5 	.word	0x080118c5
 8008030:	08011bd9 	.word	0x08011bd9
 8008034:	08011bf1 	.word	0x08011bf1
 8008038:	08011c08 	.word	0x08011c08

0800803c <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
 800803c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800803e:	f04f 0310 	mov.w	r3, #16
 8008042:	f3ef 8411 	mrs	r4, BASEPRI
 8008046:	f383 8812 	msr	BASEPRI_MAX, r3
 800804a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800804e:	4825      	ldr	r0, [pc, #148]	; (80080e4 <k_sched_lock+0xa8>)
 8008050:	f7ff fb86 	bl	8007760 <z_spin_lock_valid>
 8008054:	b960      	cbnz	r0, 8008070 <k_sched_lock+0x34>
 8008056:	4a24      	ldr	r2, [pc, #144]	; (80080e8 <k_sched_lock+0xac>)
 8008058:	4924      	ldr	r1, [pc, #144]	; (80080ec <k_sched_lock+0xb0>)
 800805a:	4825      	ldr	r0, [pc, #148]	; (80080f0 <k_sched_lock+0xb4>)
 800805c:	238e      	movs	r3, #142	; 0x8e
 800805e:	f003 f9d8 	bl	800b412 <assert_print>
 8008062:	4920      	ldr	r1, [pc, #128]	; (80080e4 <k_sched_lock+0xa8>)
 8008064:	4823      	ldr	r0, [pc, #140]	; (80080f4 <k_sched_lock+0xb8>)
 8008066:	f003 f9d4 	bl	800b412 <assert_print>
 800806a:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800806c:	481e      	ldr	r0, [pc, #120]	; (80080e8 <k_sched_lock+0xac>)
 800806e:	e010      	b.n	8008092 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
 8008070:	481c      	ldr	r0, [pc, #112]	; (80080e4 <k_sched_lock+0xa8>)
 8008072:	f7ff fb93 	bl	800779c <z_spin_lock_set_owner>
 8008076:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
 800807a:	b163      	cbz	r3, 8008096 <k_sched_lock+0x5a>
 800807c:	491e      	ldr	r1, [pc, #120]	; (80080f8 <k_sched_lock+0xbc>)
 800807e:	4a1f      	ldr	r2, [pc, #124]	; (80080fc <k_sched_lock+0xc0>)
 8008080:	481b      	ldr	r0, [pc, #108]	; (80080f0 <k_sched_lock+0xb4>)
 8008082:	23fd      	movs	r3, #253	; 0xfd
 8008084:	f003 f9c5 	bl	800b412 <assert_print>
 8008088:	481d      	ldr	r0, [pc, #116]	; (8008100 <k_sched_lock+0xc4>)
 800808a:	f003 f9c2 	bl	800b412 <assert_print>
 800808e:	21fd      	movs	r1, #253	; 0xfd
 8008090:	481a      	ldr	r0, [pc, #104]	; (80080fc <k_sched_lock+0xc0>)
 8008092:	f003 f9b7 	bl	800b404 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
 8008096:	4b1b      	ldr	r3, [pc, #108]	; (8008104 <k_sched_lock+0xc8>)
 8008098:	689a      	ldr	r2, [r3, #8]
 800809a:	7bd3      	ldrb	r3, [r2, #15]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d10a      	bne.n	80080b6 <k_sched_lock+0x7a>
 80080a0:	4919      	ldr	r1, [pc, #100]	; (8008108 <k_sched_lock+0xcc>)
 80080a2:	4a16      	ldr	r2, [pc, #88]	; (80080fc <k_sched_lock+0xc0>)
 80080a4:	4812      	ldr	r0, [pc, #72]	; (80080f0 <k_sched_lock+0xb4>)
 80080a6:	23fe      	movs	r3, #254	; 0xfe
 80080a8:	f003 f9b3 	bl	800b412 <assert_print>
 80080ac:	4814      	ldr	r0, [pc, #80]	; (8008100 <k_sched_lock+0xc4>)
 80080ae:	f003 f9b0 	bl	800b412 <assert_print>
 80080b2:	21fe      	movs	r1, #254	; 0xfe
 80080b4:	e7ec      	b.n	8008090 <k_sched_lock+0x54>

	--_current->base.sched_locked;
 80080b6:	3b01      	subs	r3, #1
 80080b8:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80080ba:	480a      	ldr	r0, [pc, #40]	; (80080e4 <k_sched_lock+0xa8>)
 80080bc:	f7ff fb5e 	bl	800777c <z_spin_unlock_valid>
 80080c0:	b958      	cbnz	r0, 80080da <k_sched_lock+0x9e>
 80080c2:	4a09      	ldr	r2, [pc, #36]	; (80080e8 <k_sched_lock+0xac>)
 80080c4:	4911      	ldr	r1, [pc, #68]	; (800810c <k_sched_lock+0xd0>)
 80080c6:	480a      	ldr	r0, [pc, #40]	; (80080f0 <k_sched_lock+0xb4>)
 80080c8:	23b9      	movs	r3, #185	; 0xb9
 80080ca:	f003 f9a2 	bl	800b412 <assert_print>
 80080ce:	4905      	ldr	r1, [pc, #20]	; (80080e4 <k_sched_lock+0xa8>)
 80080d0:	480f      	ldr	r0, [pc, #60]	; (8008110 <k_sched_lock+0xd4>)
 80080d2:	f003 f99e 	bl	800b412 <assert_print>
 80080d6:	21b9      	movs	r1, #185	; 0xb9
 80080d8:	e7c8      	b.n	800806c <k_sched_lock+0x30>
	__asm__ volatile(
 80080da:	f384 8811 	msr	BASEPRI, r4
 80080de:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 80080e2:	bd10      	pop	{r4, pc}
 80080e4:	20000c18 	.word	0x20000c18
 80080e8:	08011b97 	.word	0x08011b97
 80080ec:	08011bc4 	.word	0x08011bc4
 80080f0:	080118c5 	.word	0x080118c5
 80080f4:	08011bd9 	.word	0x08011bd9
 80080f8:	08013107 	.word	0x08013107
 80080fc:	0801330c 	.word	0x0801330c
 8008100:	0801329f 	.word	0x0801329f
 8008104:	20000be0 	.word	0x20000be0
 8008108:	08013337 	.word	0x08013337
 800810c:	08011bf1 	.word	0x08011bf1
 8008110:	08011c08 	.word	0x08011c08

08008114 <k_sched_unlock>:

void k_sched_unlock(void)
{
 8008114:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008116:	f04f 0310 	mov.w	r3, #16
 800811a:	f3ef 8411 	mrs	r4, BASEPRI
 800811e:	f383 8812 	msr	BASEPRI_MAX, r3
 8008122:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008126:	4829      	ldr	r0, [pc, #164]	; (80081cc <k_sched_unlock+0xb8>)
 8008128:	f7ff fb1a 	bl	8007760 <z_spin_lock_valid>
 800812c:	b960      	cbnz	r0, 8008148 <k_sched_unlock+0x34>
 800812e:	4a28      	ldr	r2, [pc, #160]	; (80081d0 <k_sched_unlock+0xbc>)
 8008130:	4928      	ldr	r1, [pc, #160]	; (80081d4 <k_sched_unlock+0xc0>)
 8008132:	4829      	ldr	r0, [pc, #164]	; (80081d8 <k_sched_unlock+0xc4>)
 8008134:	238e      	movs	r3, #142	; 0x8e
 8008136:	f003 f96c 	bl	800b412 <assert_print>
 800813a:	4924      	ldr	r1, [pc, #144]	; (80081cc <k_sched_unlock+0xb8>)
 800813c:	4827      	ldr	r0, [pc, #156]	; (80081dc <k_sched_unlock+0xc8>)
 800813e:	f003 f968 	bl	800b412 <assert_print>
 8008142:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008144:	4822      	ldr	r0, [pc, #136]	; (80081d0 <k_sched_unlock+0xbc>)
 8008146:	e013      	b.n	8008170 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
 8008148:	4820      	ldr	r0, [pc, #128]	; (80081cc <k_sched_unlock+0xb8>)
 800814a:	f7ff fb27 	bl	800779c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
 800814e:	4b24      	ldr	r3, [pc, #144]	; (80081e0 <k_sched_unlock+0xcc>)
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	7bd3      	ldrb	r3, [r2, #15]
 8008154:	b973      	cbnz	r3, 8008174 <k_sched_unlock+0x60>
 8008156:	4923      	ldr	r1, [pc, #140]	; (80081e4 <k_sched_unlock+0xd0>)
 8008158:	4a23      	ldr	r2, [pc, #140]	; (80081e8 <k_sched_unlock+0xd4>)
 800815a:	481f      	ldr	r0, [pc, #124]	; (80081d8 <k_sched_unlock+0xc4>)
 800815c:	f240 33d6 	movw	r3, #982	; 0x3d6
 8008160:	f003 f957 	bl	800b412 <assert_print>
 8008164:	4821      	ldr	r0, [pc, #132]	; (80081ec <k_sched_unlock+0xd8>)
 8008166:	f003 f954 	bl	800b412 <assert_print>
 800816a:	f240 31d6 	movw	r1, #982	; 0x3d6
 800816e:	481e      	ldr	r0, [pc, #120]	; (80081e8 <k_sched_unlock+0xd4>)
 8008170:	f003 f948 	bl	800b404 <assert_post_action>
 8008174:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
 8008178:	b160      	cbz	r0, 8008194 <k_sched_unlock+0x80>
 800817a:	491d      	ldr	r1, [pc, #116]	; (80081f0 <k_sched_unlock+0xdc>)
 800817c:	4a1a      	ldr	r2, [pc, #104]	; (80081e8 <k_sched_unlock+0xd4>)
 800817e:	4816      	ldr	r0, [pc, #88]	; (80081d8 <k_sched_unlock+0xc4>)
 8008180:	f240 33d7 	movw	r3, #983	; 0x3d7
 8008184:	f003 f945 	bl	800b412 <assert_print>
 8008188:	4818      	ldr	r0, [pc, #96]	; (80081ec <k_sched_unlock+0xd8>)
 800818a:	f003 f942 	bl	800b412 <assert_print>
 800818e:	f240 31d7 	movw	r1, #983	; 0x3d7
 8008192:	e7ec      	b.n	800816e <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
 8008194:	3301      	adds	r3, #1
 8008196:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8008198:	f7ff fd56 	bl	8007c48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800819c:	480b      	ldr	r0, [pc, #44]	; (80081cc <k_sched_unlock+0xb8>)
 800819e:	f7ff faed 	bl	800777c <z_spin_unlock_valid>
 80081a2:	b958      	cbnz	r0, 80081bc <k_sched_unlock+0xa8>
 80081a4:	4a0a      	ldr	r2, [pc, #40]	; (80081d0 <k_sched_unlock+0xbc>)
 80081a6:	4913      	ldr	r1, [pc, #76]	; (80081f4 <k_sched_unlock+0xe0>)
 80081a8:	480b      	ldr	r0, [pc, #44]	; (80081d8 <k_sched_unlock+0xc4>)
 80081aa:	23b9      	movs	r3, #185	; 0xb9
 80081ac:	f003 f931 	bl	800b412 <assert_print>
 80081b0:	4906      	ldr	r1, [pc, #24]	; (80081cc <k_sched_unlock+0xb8>)
 80081b2:	4811      	ldr	r0, [pc, #68]	; (80081f8 <k_sched_unlock+0xe4>)
 80081b4:	f003 f92d 	bl	800b412 <assert_print>
 80081b8:	21b9      	movs	r1, #185	; 0xb9
 80081ba:	e7c3      	b.n	8008144 <k_sched_unlock+0x30>
	__asm__ volatile(
 80081bc:	f384 8811 	msr	BASEPRI, r4
 80081c0:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 80081c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 80081c8:	f004 b821 	b.w	800c20e <z_reschedule_unlocked>
 80081cc:	20000c18 	.word	0x20000c18
 80081d0:	08011b97 	.word	0x08011b97
 80081d4:	08011bc4 	.word	0x08011bc4
 80081d8:	080118c5 	.word	0x080118c5
 80081dc:	08011bd9 	.word	0x08011bd9
 80081e0:	20000be0 	.word	0x20000be0
 80081e4:	08013368 	.word	0x08013368
 80081e8:	080132a2 	.word	0x080132a2
 80081ec:	0801329f 	.word	0x0801329f
 80081f0:	08013107 	.word	0x08013107
 80081f4:	08011bf1 	.word	0x08011bf1
 80081f8:	08011c08 	.word	0x08011c08

080081fc <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
 80081fc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 80081fe:	4b0b      	ldr	r3, [pc, #44]	; (800822c <z_priq_dumb_remove+0x30>)
 8008200:	4299      	cmp	r1, r3
 8008202:	d10b      	bne.n	800821c <z_priq_dumb_remove+0x20>
 8008204:	490a      	ldr	r1, [pc, #40]	; (8008230 <z_priq_dumb_remove+0x34>)
 8008206:	480b      	ldr	r0, [pc, #44]	; (8008234 <z_priq_dumb_remove+0x38>)
 8008208:	4a0b      	ldr	r2, [pc, #44]	; (8008238 <z_priq_dumb_remove+0x3c>)
 800820a:	f240 4362 	movw	r3, #1122	; 0x462
 800820e:	f003 f900 	bl	800b412 <assert_print>
 8008212:	4809      	ldr	r0, [pc, #36]	; (8008238 <z_priq_dumb_remove+0x3c>)
 8008214:	f240 4162 	movw	r1, #1122	; 0x462
 8008218:	f003 f8f4 	bl	800b404 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 800821c:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
 8008220:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8008222:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8008224:	2300      	movs	r3, #0
	node->prev = NULL;
 8008226:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 800822a:	bd08      	pop	{r3, pc}
 800822c:	200008e8 	.word	0x200008e8
 8008230:	080132eb 	.word	0x080132eb
 8008234:	080118c5 	.word	0x080118c5
 8008238:	080132a2 	.word	0x080132a2

0800823c <move_thread_to_end_of_prio_q>:
{
 800823c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800823e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8008242:	7b43      	ldrb	r3, [r0, #13]
 8008244:	2a00      	cmp	r2, #0
{
 8008246:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
 8008248:	da06      	bge.n	8008258 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800824a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8008250:	4601      	mov	r1, r0
 8008252:	481d      	ldr	r0, [pc, #116]	; (80082c8 <move_thread_to_end_of_prio_q+0x8c>)
 8008254:	f7ff ffd2 	bl	80081fc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8008258:	7b63      	ldrb	r3, [r4, #13]
 800825a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800825e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8008260:	4b1a      	ldr	r3, [pc, #104]	; (80082cc <move_thread_to_end_of_prio_q+0x90>)
 8008262:	429c      	cmp	r4, r3
 8008264:	d109      	bne.n	800827a <move_thread_to_end_of_prio_q+0x3e>
 8008266:	491a      	ldr	r1, [pc, #104]	; (80082d0 <move_thread_to_end_of_prio_q+0x94>)
 8008268:	481a      	ldr	r0, [pc, #104]	; (80082d4 <move_thread_to_end_of_prio_q+0x98>)
 800826a:	4a1b      	ldr	r2, [pc, #108]	; (80082d8 <move_thread_to_end_of_prio_q+0x9c>)
 800826c:	23ba      	movs	r3, #186	; 0xba
 800826e:	f003 f8d0 	bl	800b412 <assert_print>
 8008272:	4819      	ldr	r0, [pc, #100]	; (80082d8 <move_thread_to_end_of_prio_q+0x9c>)
 8008274:	21ba      	movs	r1, #186	; 0xba
 8008276:	f003 f8c5 	bl	800b404 <assert_post_action>
	return list->head == list;
 800827a:	4a18      	ldr	r2, [pc, #96]	; (80082dc <move_thread_to_end_of_prio_q+0xa0>)
 800827c:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
 800827e:	6a10      	ldr	r0, [r2, #32]
	return list->head == list;
 8008280:	f851 3f1c 	ldr.w	r3, [r1, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008284:	428b      	cmp	r3, r1
 8008286:	bf08      	it	eq
 8008288:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800828a:	b923      	cbnz	r3, 8008296 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
 800828c:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
 8008290:	6004      	str	r4, [r0, #0]
	list->tail = node;
 8008292:	6214      	str	r4, [r2, #32]
}
 8008294:	e00c      	b.n	80082b0 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
 8008296:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 800829a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 800829e:	42b5      	cmp	r5, r6
 80082a0:	d00e      	beq.n	80082c0 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80082a2:	42ae      	cmp	r6, r5
 80082a4:	dd0c      	ble.n	80082c0 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
 80082a6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 80082a8:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
 80082ac:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 80082ae:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
 80082b0:	6890      	ldr	r0, [r2, #8]
 80082b2:	1b03      	subs	r3, r0, r4
 80082b4:	4258      	negs	r0, r3
}
 80082b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80082ba:	4158      	adcs	r0, r3
 80082bc:	f7ff bcc4 	b.w	8007c48 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80082c0:	4298      	cmp	r0, r3
 80082c2:	d0e3      	beq.n	800828c <move_thread_to_end_of_prio_q+0x50>
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	e7e0      	b.n	800828a <move_thread_to_end_of_prio_q+0x4e>
 80082c8:	20000bfc 	.word	0x20000bfc
 80082cc:	200008e8 	.word	0x200008e8
 80082d0:	080132eb 	.word	0x080132eb
 80082d4:	080118c5 	.word	0x080118c5
 80082d8:	080132a2 	.word	0x080132a2
 80082dc:	20000be0 	.word	0x20000be0

080082e0 <z_time_slice>:
{
 80082e0:	b570      	push	{r4, r5, r6, lr}
 80082e2:	4605      	mov	r5, r0
	__asm__ volatile(
 80082e4:	f04f 0310 	mov.w	r3, #16
 80082e8:	f3ef 8611 	mrs	r6, BASEPRI
 80082ec:	f383 8812 	msr	BASEPRI_MAX, r3
 80082f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80082f4:	4829      	ldr	r0, [pc, #164]	; (800839c <z_time_slice+0xbc>)
 80082f6:	f7ff fa33 	bl	8007760 <z_spin_lock_valid>
 80082fa:	b968      	cbnz	r0, 8008318 <z_time_slice+0x38>
 80082fc:	4a28      	ldr	r2, [pc, #160]	; (80083a0 <z_time_slice+0xc0>)
 80082fe:	4929      	ldr	r1, [pc, #164]	; (80083a4 <z_time_slice+0xc4>)
 8008300:	4829      	ldr	r0, [pc, #164]	; (80083a8 <z_time_slice+0xc8>)
 8008302:	238e      	movs	r3, #142	; 0x8e
 8008304:	f003 f885 	bl	800b412 <assert_print>
 8008308:	4924      	ldr	r1, [pc, #144]	; (800839c <z_time_slice+0xbc>)
 800830a:	4828      	ldr	r0, [pc, #160]	; (80083ac <z_time_slice+0xcc>)
 800830c:	f003 f881 	bl	800b412 <assert_print>
 8008310:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008312:	4823      	ldr	r0, [pc, #140]	; (80083a0 <z_time_slice+0xc0>)
 8008314:	f003 f876 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8008318:	4820      	ldr	r0, [pc, #128]	; (800839c <z_time_slice+0xbc>)
 800831a:	f7ff fa3f 	bl	800779c <z_spin_lock_set_owner>
	if (pending_current == _current) {
 800831e:	4b24      	ldr	r3, [pc, #144]	; (80083b0 <z_time_slice+0xd0>)
 8008320:	4a24      	ldr	r2, [pc, #144]	; (80083b4 <z_time_slice+0xd4>)
 8008322:	689c      	ldr	r4, [r3, #8]
 8008324:	6811      	ldr	r1, [r2, #0]
 8008326:	428c      	cmp	r4, r1
 8008328:	d112      	bne.n	8008350 <z_time_slice+0x70>
		z_reset_time_slice(_current);
 800832a:	4620      	mov	r0, r4
 800832c:	f7ff fc78 	bl	8007c20 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008330:	481a      	ldr	r0, [pc, #104]	; (800839c <z_time_slice+0xbc>)
 8008332:	f7ff fa23 	bl	800777c <z_spin_unlock_valid>
 8008336:	bb58      	cbnz	r0, 8008390 <z_time_slice+0xb0>
 8008338:	4a19      	ldr	r2, [pc, #100]	; (80083a0 <z_time_slice+0xc0>)
 800833a:	491f      	ldr	r1, [pc, #124]	; (80083b8 <z_time_slice+0xd8>)
 800833c:	481a      	ldr	r0, [pc, #104]	; (80083a8 <z_time_slice+0xc8>)
 800833e:	23b9      	movs	r3, #185	; 0xb9
 8008340:	f003 f867 	bl	800b412 <assert_print>
 8008344:	4915      	ldr	r1, [pc, #84]	; (800839c <z_time_slice+0xbc>)
 8008346:	481d      	ldr	r0, [pc, #116]	; (80083bc <z_time_slice+0xdc>)
 8008348:	f003 f863 	bl	800b412 <assert_print>
 800834c:	21b9      	movs	r1, #185	; 0xb9
 800834e:	e7e0      	b.n	8008312 <z_time_slice+0x32>
	pending_current = NULL;
 8008350:	2100      	movs	r1, #0
 8008352:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 8008354:	4a1a      	ldr	r2, [pc, #104]	; (80083c0 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
 8008356:	6812      	ldr	r2, [r2, #0]
 8008358:	b1c2      	cbz	r2, 800838c <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
 800835a:	89e2      	ldrh	r2, [r4, #14]
 800835c:	2a7f      	cmp	r2, #127	; 0x7f
 800835e:	d815      	bhi.n	800838c <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
 8008360:	7b62      	ldrb	r2, [r4, #13]
 8008362:	06d2      	lsls	r2, r2, #27
 8008364:	d112      	bne.n	800838c <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8008366:	4a17      	ldr	r2, [pc, #92]	; (80083c4 <z_time_slice+0xe4>)
 8008368:	f994 100e 	ldrsb.w	r1, [r4, #14]
 800836c:	6812      	ldr	r2, [r2, #0]
 800836e:	4291      	cmp	r1, r2
 8008370:	db0c      	blt.n	800838c <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
 8008372:	4a15      	ldr	r2, [pc, #84]	; (80083c8 <z_time_slice+0xe8>)
 8008374:	4294      	cmp	r4, r2
 8008376:	d009      	beq.n	800838c <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
 8008378:	691a      	ldr	r2, [r3, #16]
 800837a:	42aa      	cmp	r2, r5
 800837c:	dc03      	bgt.n	8008386 <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
 800837e:	4620      	mov	r0, r4
 8008380:	f7ff ff5c 	bl	800823c <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
 8008384:	e7d1      	b.n	800832a <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
 8008386:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
 8008388:	611a      	str	r2, [r3, #16]
 800838a:	e7d1      	b.n	8008330 <z_time_slice+0x50>
 800838c:	2200      	movs	r2, #0
 800838e:	e7fb      	b.n	8008388 <z_time_slice+0xa8>
	__asm__ volatile(
 8008390:	f386 8811 	msr	BASEPRI, r6
 8008394:	f3bf 8f6f 	isb	sy
}
 8008398:	bd70      	pop	{r4, r5, r6, pc}
 800839a:	bf00      	nop
 800839c:	20000c18 	.word	0x20000c18
 80083a0:	08011b97 	.word	0x08011b97
 80083a4:	08011bc4 	.word	0x08011bc4
 80083a8:	080118c5 	.word	0x080118c5
 80083ac:	08011bd9 	.word	0x08011bd9
 80083b0:	20000be0 	.word	0x20000be0
 80083b4:	20000c0c 	.word	0x20000c0c
 80083b8:	08011bf1 	.word	0x08011bf1
 80083bc:	08011c08 	.word	0x08011c08
 80083c0:	20000c14 	.word	0x20000c14
 80083c4:	20000c10 	.word	0x20000c10
 80083c8:	200008e8 	.word	0x200008e8

080083cc <unready_thread>:
{
 80083cc:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
 80083ce:	f990 200d 	ldrsb.w	r2, [r0, #13]
 80083d2:	7b43      	ldrb	r3, [r0, #13]
 80083d4:	2a00      	cmp	r2, #0
{
 80083d6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
 80083d8:	da06      	bge.n	80083e8 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80083da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083de:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 80083e0:	4601      	mov	r1, r0
 80083e2:	4806      	ldr	r0, [pc, #24]	; (80083fc <unready_thread+0x30>)
 80083e4:	f7ff ff0a 	bl	80081fc <z_priq_dumb_remove>
	update_cache(thread == _current);
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <unready_thread+0x34>)
 80083ea:	6898      	ldr	r0, [r3, #8]
 80083ec:	1b03      	subs	r3, r0, r4
 80083ee:	4258      	negs	r0, r3
}
 80083f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
 80083f4:	4158      	adcs	r0, r3
 80083f6:	f7ff bc27 	b.w	8007c48 <update_cache>
 80083fa:	bf00      	nop
 80083fc:	20000bfc 	.word	0x20000bfc
 8008400:	20000be0 	.word	0x20000be0

08008404 <add_to_waitq_locked>:
{
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4604      	mov	r4, r0
 8008408:	460d      	mov	r5, r1
	unready_thread(thread);
 800840a:	f7ff ffdf 	bl	80083cc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 800840e:	7b63      	ldrb	r3, [r4, #13]
 8008410:	f043 0302 	orr.w	r3, r3, #2
 8008414:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8008416:	b34d      	cbz	r5, 800846c <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8008418:	4b15      	ldr	r3, [pc, #84]	; (8008470 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
 800841a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 800841c:	429c      	cmp	r4, r3
 800841e:	d109      	bne.n	8008434 <add_to_waitq_locked+0x30>
 8008420:	4914      	ldr	r1, [pc, #80]	; (8008474 <add_to_waitq_locked+0x70>)
 8008422:	4815      	ldr	r0, [pc, #84]	; (8008478 <add_to_waitq_locked+0x74>)
 8008424:	4a15      	ldr	r2, [pc, #84]	; (800847c <add_to_waitq_locked+0x78>)
 8008426:	23ba      	movs	r3, #186	; 0xba
 8008428:	f002 fff3 	bl	800b412 <assert_print>
 800842c:	4813      	ldr	r0, [pc, #76]	; (800847c <add_to_waitq_locked+0x78>)
 800842e:	21ba      	movs	r1, #186	; 0xba
 8008430:	f002 ffe8 	bl	800b404 <assert_post_action>
	return list->head == list;
 8008434:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008436:	429d      	cmp	r5, r3
 8008438:	d109      	bne.n	800844e <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
 800843a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 800843c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8008440:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8008442:	606c      	str	r4, [r5, #4]
}
 8008444:	e012      	b.n	800846c <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
 8008446:	686a      	ldr	r2, [r5, #4]
 8008448:	4293      	cmp	r3, r2
 800844a:	d0f6      	beq.n	800843a <add_to_waitq_locked+0x36>
 800844c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0f3      	beq.n	800843a <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
 8008452:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8008456:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 800845a:	428a      	cmp	r2, r1
 800845c:	d0f3      	beq.n	8008446 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800845e:	4291      	cmp	r1, r2
 8008460:	ddf1      	ble.n	8008446 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
 8008462:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8008464:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8008468:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800846a:	605c      	str	r4, [r3, #4]
}
 800846c:	bd38      	pop	{r3, r4, r5, pc}
 800846e:	bf00      	nop
 8008470:	200008e8 	.word	0x200008e8
 8008474:	080132eb 	.word	0x080132eb
 8008478:	080118c5 	.word	0x080118c5
 800847c:	080132a2 	.word	0x080132a2

08008480 <pend>:
{
 8008480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008484:	4604      	mov	r4, r0
 8008486:	4688      	mov	r8, r1
 8008488:	4616      	mov	r6, r2
 800848a:	461d      	mov	r5, r3
	__asm__ volatile(
 800848c:	f04f 0310 	mov.w	r3, #16
 8008490:	f3ef 8711 	mrs	r7, BASEPRI
 8008494:	f383 8812 	msr	BASEPRI_MAX, r3
 8008498:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800849c:	481e      	ldr	r0, [pc, #120]	; (8008518 <pend+0x98>)
 800849e:	f7ff f95f 	bl	8007760 <z_spin_lock_valid>
 80084a2:	b968      	cbnz	r0, 80084c0 <pend+0x40>
 80084a4:	4a1d      	ldr	r2, [pc, #116]	; (800851c <pend+0x9c>)
 80084a6:	491e      	ldr	r1, [pc, #120]	; (8008520 <pend+0xa0>)
 80084a8:	481e      	ldr	r0, [pc, #120]	; (8008524 <pend+0xa4>)
 80084aa:	238e      	movs	r3, #142	; 0x8e
 80084ac:	f002 ffb1 	bl	800b412 <assert_print>
 80084b0:	4919      	ldr	r1, [pc, #100]	; (8008518 <pend+0x98>)
 80084b2:	481d      	ldr	r0, [pc, #116]	; (8008528 <pend+0xa8>)
 80084b4:	f002 ffad 	bl	800b412 <assert_print>
 80084b8:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80084ba:	4818      	ldr	r0, [pc, #96]	; (800851c <pend+0x9c>)
 80084bc:	f002 ffa2 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 80084c0:	4815      	ldr	r0, [pc, #84]	; (8008518 <pend+0x98>)
 80084c2:	f7ff f96b 	bl	800779c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
 80084c6:	4620      	mov	r0, r4
 80084c8:	4641      	mov	r1, r8
 80084ca:	f7ff ff9b 	bl	8008404 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80084ce:	4812      	ldr	r0, [pc, #72]	; (8008518 <pend+0x98>)
 80084d0:	f7ff f954 	bl	800777c <z_spin_unlock_valid>
 80084d4:	b958      	cbnz	r0, 80084ee <pend+0x6e>
 80084d6:	4a11      	ldr	r2, [pc, #68]	; (800851c <pend+0x9c>)
 80084d8:	4914      	ldr	r1, [pc, #80]	; (800852c <pend+0xac>)
 80084da:	4812      	ldr	r0, [pc, #72]	; (8008524 <pend+0xa4>)
 80084dc:	23b9      	movs	r3, #185	; 0xb9
 80084de:	f002 ff98 	bl	800b412 <assert_print>
 80084e2:	490d      	ldr	r1, [pc, #52]	; (8008518 <pend+0x98>)
 80084e4:	4812      	ldr	r0, [pc, #72]	; (8008530 <pend+0xb0>)
 80084e6:	f002 ff94 	bl	800b412 <assert_print>
 80084ea:	21b9      	movs	r1, #185	; 0xb9
 80084ec:	e7e5      	b.n	80084ba <pend+0x3a>
	__asm__ volatile(
 80084ee:	f387 8811 	msr	BASEPRI, r7
 80084f2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80084f6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80084fa:	bf08      	it	eq
 80084fc:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 8008500:	d008      	beq.n	8008514 <pend+0x94>
 8008502:	4632      	mov	r2, r6
 8008504:	462b      	mov	r3, r5
 8008506:	f104 0018 	add.w	r0, r4, #24
 800850a:	490a      	ldr	r1, [pc, #40]	; (8008534 <pend+0xb4>)
}
 800850c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008510:	f000 bcfe 	b.w	8008f10 <z_add_timeout>
 8008514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008518:	20000c18 	.word	0x20000c18
 800851c:	08011b97 	.word	0x08011b97
 8008520:	08011bc4 	.word	0x08011bc4
 8008524:	080118c5 	.word	0x080118c5
 8008528:	08011bd9 	.word	0x08011bd9
 800852c:	08011bf1 	.word	0x08011bf1
 8008530:	08011c08 	.word	0x08011c08
 8008534:	080087cd 	.word	0x080087cd

08008538 <z_pend_curr>:
{
 8008538:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
 800853a:	4b11      	ldr	r3, [pc, #68]	; (8008580 <z_pend_curr+0x48>)
{
 800853c:	4604      	mov	r4, r0
	pending_current = _current;
 800853e:	6898      	ldr	r0, [r3, #8]
 8008540:	4b10      	ldr	r3, [pc, #64]	; (8008584 <z_pend_curr+0x4c>)
{
 8008542:	460d      	mov	r5, r1
	pending_current = _current;
 8008544:	6018      	str	r0, [r3, #0]
{
 8008546:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 8008548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800854c:	f7ff ff98 	bl	8008480 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008550:	4620      	mov	r0, r4
 8008552:	f7ff f913 	bl	800777c <z_spin_unlock_valid>
 8008556:	b968      	cbnz	r0, 8008574 <z_pend_curr+0x3c>
 8008558:	4a0b      	ldr	r2, [pc, #44]	; (8008588 <z_pend_curr+0x50>)
 800855a:	490c      	ldr	r1, [pc, #48]	; (800858c <z_pend_curr+0x54>)
 800855c:	480c      	ldr	r0, [pc, #48]	; (8008590 <z_pend_curr+0x58>)
 800855e:	23d0      	movs	r3, #208	; 0xd0
 8008560:	f002 ff57 	bl	800b412 <assert_print>
 8008564:	480b      	ldr	r0, [pc, #44]	; (8008594 <z_pend_curr+0x5c>)
 8008566:	4621      	mov	r1, r4
 8008568:	f002 ff53 	bl	800b412 <assert_print>
 800856c:	4806      	ldr	r0, [pc, #24]	; (8008588 <z_pend_curr+0x50>)
 800856e:	21d0      	movs	r1, #208	; 0xd0
 8008570:	f002 ff48 	bl	800b404 <assert_post_action>
 8008574:	4628      	mov	r0, r5
}
 8008576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800857a:	f7fc b9b1 	b.w	80048e0 <arch_swap>
 800857e:	bf00      	nop
 8008580:	20000be0 	.word	0x20000be0
 8008584:	20000c0c 	.word	0x20000c0c
 8008588:	08011b97 	.word	0x08011b97
 800858c:	08011bf1 	.word	0x08011bf1
 8008590:	080118c5 	.word	0x080118c5
 8008594:	08011c08 	.word	0x08011c08

08008598 <z_set_prio>:
{
 8008598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800859c:	4604      	mov	r4, r0
 800859e:	460e      	mov	r6, r1
	__asm__ volatile(
 80085a0:	f04f 0310 	mov.w	r3, #16
 80085a4:	f3ef 8911 	mrs	r9, BASEPRI
 80085a8:	f383 8812 	msr	BASEPRI_MAX, r3
 80085ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80085b0:	4837      	ldr	r0, [pc, #220]	; (8008690 <z_set_prio+0xf8>)
 80085b2:	f7ff f8d5 	bl	8007760 <z_spin_lock_valid>
 80085b6:	4607      	mov	r7, r0
 80085b8:	b960      	cbnz	r0, 80085d4 <z_set_prio+0x3c>
 80085ba:	4a36      	ldr	r2, [pc, #216]	; (8008694 <z_set_prio+0xfc>)
 80085bc:	4936      	ldr	r1, [pc, #216]	; (8008698 <z_set_prio+0x100>)
 80085be:	4837      	ldr	r0, [pc, #220]	; (800869c <z_set_prio+0x104>)
 80085c0:	238e      	movs	r3, #142	; 0x8e
 80085c2:	f002 ff26 	bl	800b412 <assert_print>
 80085c6:	4932      	ldr	r1, [pc, #200]	; (8008690 <z_set_prio+0xf8>)
 80085c8:	4835      	ldr	r0, [pc, #212]	; (80086a0 <z_set_prio+0x108>)
 80085ca:	f002 ff22 	bl	800b412 <assert_print>
 80085ce:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80085d0:	4830      	ldr	r0, [pc, #192]	; (8008694 <z_set_prio+0xfc>)
 80085d2:	e021      	b.n	8008618 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
 80085d4:	482e      	ldr	r0, [pc, #184]	; (8008690 <z_set_prio+0xf8>)
 80085d6:	f7ff f8e1 	bl	800779c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
 80085da:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80085dc:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 80085de:	b276      	sxtb	r6, r6
 80085e0:	d11c      	bne.n	800861c <z_set_prio+0x84>
	return node->next != NULL;
 80085e2:	69a5      	ldr	r5, [r4, #24]
 80085e4:	b9d5      	cbnz	r5, 800861c <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
 80085e6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80086a4 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80085ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ee:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 80085f0:	4621      	mov	r1, r4
 80085f2:	4640      	mov	r0, r8
 80085f4:	f7ff fe02 	bl	80081fc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80085f8:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
 80085fa:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 80085fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008600:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8008602:	4b29      	ldr	r3, [pc, #164]	; (80086a8 <z_set_prio+0x110>)
 8008604:	429c      	cmp	r4, r3
 8008606:	d11b      	bne.n	8008640 <z_set_prio+0xa8>
 8008608:	4928      	ldr	r1, [pc, #160]	; (80086ac <z_set_prio+0x114>)
 800860a:	4824      	ldr	r0, [pc, #144]	; (800869c <z_set_prio+0x104>)
 800860c:	4a28      	ldr	r2, [pc, #160]	; (80086b0 <z_set_prio+0x118>)
 800860e:	23ba      	movs	r3, #186	; 0xba
 8008610:	f002 feff 	bl	800b412 <assert_print>
 8008614:	4826      	ldr	r0, [pc, #152]	; (80086b0 <z_set_prio+0x118>)
 8008616:	21ba      	movs	r1, #186	; 0xba
 8008618:	f002 fef4 	bl	800b404 <assert_post_action>
			thread->base.prio = prio;
 800861c:	73a6      	strb	r6, [r4, #14]
 800861e:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008620:	481b      	ldr	r0, [pc, #108]	; (8008690 <z_set_prio+0xf8>)
 8008622:	f7ff f8ab 	bl	800777c <z_spin_unlock_valid>
 8008626:	bb58      	cbnz	r0, 8008680 <z_set_prio+0xe8>
 8008628:	4a1a      	ldr	r2, [pc, #104]	; (8008694 <z_set_prio+0xfc>)
 800862a:	4922      	ldr	r1, [pc, #136]	; (80086b4 <z_set_prio+0x11c>)
 800862c:	481b      	ldr	r0, [pc, #108]	; (800869c <z_set_prio+0x104>)
 800862e:	23b9      	movs	r3, #185	; 0xb9
 8008630:	f002 feef 	bl	800b412 <assert_print>
 8008634:	4916      	ldr	r1, [pc, #88]	; (8008690 <z_set_prio+0xf8>)
 8008636:	4820      	ldr	r0, [pc, #128]	; (80086b8 <z_set_prio+0x120>)
 8008638:	f002 feeb 	bl	800b412 <assert_print>
 800863c:	21b9      	movs	r1, #185	; 0xb9
 800863e:	e7c7      	b.n	80085d0 <z_set_prio+0x38>
	return list->head == list;
 8008640:	4643      	mov	r3, r8
 8008642:	f853 291c 	ldr.w	r2, [r3], #-28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008646:	4542      	cmp	r2, r8
 8008648:	bf18      	it	ne
 800864a:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
 800864c:	6a1a      	ldr	r2, [r3, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800864e:	b925      	cbnz	r5, 800865a <z_set_prio+0xc2>
	node->prev = tail;
 8008650:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
 8008654:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8008656:	621c      	str	r4, [r3, #32]
}
 8008658:	e00a      	b.n	8008670 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
 800865a:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
 800865e:	428e      	cmp	r6, r1
 8008660:	d00a      	beq.n	8008678 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008662:	42b1      	cmp	r1, r6
 8008664:	dd08      	ble.n	8008678 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
 8008666:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
 8008668:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
 800866c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800866e:	606c      	str	r4, [r5, #4]
			update_cache(1);
 8008670:	2001      	movs	r0, #1
 8008672:	f7ff fae9 	bl	8007c48 <update_cache>
 8008676:	e7d3      	b.n	8008620 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
 8008678:	42aa      	cmp	r2, r5
 800867a:	d0e9      	beq.n	8008650 <z_set_prio+0xb8>
 800867c:	682d      	ldr	r5, [r5, #0]
 800867e:	e7e6      	b.n	800864e <z_set_prio+0xb6>
	__asm__ volatile(
 8008680:	f389 8811 	msr	BASEPRI, r9
 8008684:	f3bf 8f6f 	isb	sy
}
 8008688:	4638      	mov	r0, r7
 800868a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800868e:	bf00      	nop
 8008690:	20000c18 	.word	0x20000c18
 8008694:	08011b97 	.word	0x08011b97
 8008698:	08011bc4 	.word	0x08011bc4
 800869c:	080118c5 	.word	0x080118c5
 80086a0:	08011bd9 	.word	0x08011bd9
 80086a4:	20000bfc 	.word	0x20000bfc
 80086a8:	200008e8 	.word	0x200008e8
 80086ac:	080132eb 	.word	0x080132eb
 80086b0:	080132a2 	.word	0x080132a2
 80086b4:	08011bf1 	.word	0x08011bf1
 80086b8:	08011c08 	.word	0x08011c08

080086bc <z_impl_k_thread_suspend>:
{
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80086c0:	3018      	adds	r0, #24
 80086c2:	f000 fceb 	bl	800909c <z_abort_timeout>
	__asm__ volatile(
 80086c6:	f04f 0310 	mov.w	r3, #16
 80086ca:	f3ef 8611 	mrs	r6, BASEPRI
 80086ce:	f383 8812 	msr	BASEPRI_MAX, r3
 80086d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80086d6:	4824      	ldr	r0, [pc, #144]	; (8008768 <z_impl_k_thread_suspend+0xac>)
 80086d8:	f7ff f842 	bl	8007760 <z_spin_lock_valid>
 80086dc:	b968      	cbnz	r0, 80086fa <z_impl_k_thread_suspend+0x3e>
 80086de:	4a23      	ldr	r2, [pc, #140]	; (800876c <z_impl_k_thread_suspend+0xb0>)
 80086e0:	4923      	ldr	r1, [pc, #140]	; (8008770 <z_impl_k_thread_suspend+0xb4>)
 80086e2:	4824      	ldr	r0, [pc, #144]	; (8008774 <z_impl_k_thread_suspend+0xb8>)
 80086e4:	238e      	movs	r3, #142	; 0x8e
 80086e6:	f002 fe94 	bl	800b412 <assert_print>
 80086ea:	491f      	ldr	r1, [pc, #124]	; (8008768 <z_impl_k_thread_suspend+0xac>)
 80086ec:	4822      	ldr	r0, [pc, #136]	; (8008778 <z_impl_k_thread_suspend+0xbc>)
 80086ee:	f002 fe90 	bl	800b412 <assert_print>
 80086f2:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80086f4:	481d      	ldr	r0, [pc, #116]	; (800876c <z_impl_k_thread_suspend+0xb0>)
 80086f6:	f002 fe85 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 80086fa:	481b      	ldr	r0, [pc, #108]	; (8008768 <z_impl_k_thread_suspend+0xac>)
 80086fc:	f7ff f84e 	bl	800779c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
 8008700:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 8008704:	7b63      	ldrb	r3, [r4, #13]
 8008706:	2a00      	cmp	r2, #0
 8008708:	da06      	bge.n	8008718 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800870a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
 800870e:	481b      	ldr	r0, [pc, #108]	; (800877c <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008710:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8008712:	4621      	mov	r1, r4
 8008714:	f7ff fd72 	bl	80081fc <z_priq_dumb_remove>
		update_cache(thread == _current);
 8008718:	4d19      	ldr	r5, [pc, #100]	; (8008780 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800871a:	7b63      	ldrb	r3, [r4, #13]
 800871c:	68a8      	ldr	r0, [r5, #8]
 800871e:	f043 0310 	orr.w	r3, r3, #16
 8008722:	7363      	strb	r3, [r4, #13]
 8008724:	1b03      	subs	r3, r0, r4
 8008726:	4258      	negs	r0, r3
 8008728:	4158      	adcs	r0, r3
 800872a:	f7ff fa8d 	bl	8007c48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800872e:	480e      	ldr	r0, [pc, #56]	; (8008768 <z_impl_k_thread_suspend+0xac>)
 8008730:	f7ff f824 	bl	800777c <z_spin_unlock_valid>
 8008734:	b958      	cbnz	r0, 800874e <z_impl_k_thread_suspend+0x92>
 8008736:	4a0d      	ldr	r2, [pc, #52]	; (800876c <z_impl_k_thread_suspend+0xb0>)
 8008738:	4912      	ldr	r1, [pc, #72]	; (8008784 <z_impl_k_thread_suspend+0xc8>)
 800873a:	480e      	ldr	r0, [pc, #56]	; (8008774 <z_impl_k_thread_suspend+0xb8>)
 800873c:	23b9      	movs	r3, #185	; 0xb9
 800873e:	f002 fe68 	bl	800b412 <assert_print>
 8008742:	4909      	ldr	r1, [pc, #36]	; (8008768 <z_impl_k_thread_suspend+0xac>)
 8008744:	4810      	ldr	r0, [pc, #64]	; (8008788 <z_impl_k_thread_suspend+0xcc>)
 8008746:	f002 fe64 	bl	800b412 <assert_print>
 800874a:	21b9      	movs	r1, #185	; 0xb9
 800874c:	e7d2      	b.n	80086f4 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
 800874e:	f386 8811 	msr	BASEPRI, r6
 8008752:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8008756:	68ab      	ldr	r3, [r5, #8]
 8008758:	42a3      	cmp	r3, r4
 800875a:	d103      	bne.n	8008764 <z_impl_k_thread_suspend+0xa8>
}
 800875c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8008760:	f003 bd55 	b.w	800c20e <z_reschedule_unlocked>
}
 8008764:	bd70      	pop	{r4, r5, r6, pc}
 8008766:	bf00      	nop
 8008768:	20000c18 	.word	0x20000c18
 800876c:	08011b97 	.word	0x08011b97
 8008770:	08011bc4 	.word	0x08011bc4
 8008774:	080118c5 	.word	0x080118c5
 8008778:	08011bd9 	.word	0x08011bd9
 800877c:	20000bfc 	.word	0x20000bfc
 8008780:	20000be0 	.word	0x20000be0
 8008784:	08011bf1 	.word	0x08011bf1
 8008788:	08011c08 	.word	0x08011c08

0800878c <unpend_thread_no_timeout>:
{
 800878c:	b510      	push	{r4, lr}
 800878e:	4604      	mov	r4, r0
 8008790:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
 8008792:	b958      	cbnz	r0, 80087ac <unpend_thread_no_timeout+0x20>
 8008794:	490a      	ldr	r1, [pc, #40]	; (80087c0 <unpend_thread_no_timeout+0x34>)
 8008796:	480b      	ldr	r0, [pc, #44]	; (80087c4 <unpend_thread_no_timeout+0x38>)
 8008798:	4a0b      	ldr	r2, [pc, #44]	; (80087c8 <unpend_thread_no_timeout+0x3c>)
 800879a:	f44f 7335 	mov.w	r3, #724	; 0x2d4
 800879e:	f002 fe38 	bl	800b412 <assert_print>
 80087a2:	4809      	ldr	r0, [pc, #36]	; (80087c8 <unpend_thread_no_timeout+0x3c>)
 80087a4:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 80087a8:	f002 fe2c 	bl	800b404 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80087ac:	4621      	mov	r1, r4
 80087ae:	f7ff fd25 	bl	80081fc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80087b2:	7b63      	ldrb	r3, [r4, #13]
 80087b4:	f023 0302 	bic.w	r3, r3, #2
 80087b8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60a3      	str	r3, [r4, #8]
}
 80087be:	bd10      	pop	{r4, pc}
 80087c0:	08013399 	.word	0x08013399
 80087c4:	080118c5 	.word	0x080118c5
 80087c8:	080132a2 	.word	0x080132a2

080087cc <z_thread_timeout>:
{
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	4604      	mov	r4, r0
	__asm__ volatile(
 80087d0:	f04f 0310 	mov.w	r3, #16
 80087d4:	f3ef 8611 	mrs	r6, BASEPRI
 80087d8:	f383 8812 	msr	BASEPRI_MAX, r3
 80087dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80087e0:	481f      	ldr	r0, [pc, #124]	; (8008860 <z_thread_timeout+0x94>)
 80087e2:	f7fe ffbd 	bl	8007760 <z_spin_lock_valid>
 80087e6:	b968      	cbnz	r0, 8008804 <z_thread_timeout+0x38>
 80087e8:	4a1e      	ldr	r2, [pc, #120]	; (8008864 <z_thread_timeout+0x98>)
 80087ea:	491f      	ldr	r1, [pc, #124]	; (8008868 <z_thread_timeout+0x9c>)
 80087ec:	481f      	ldr	r0, [pc, #124]	; (800886c <z_thread_timeout+0xa0>)
 80087ee:	238e      	movs	r3, #142	; 0x8e
 80087f0:	f002 fe0f 	bl	800b412 <assert_print>
 80087f4:	491a      	ldr	r1, [pc, #104]	; (8008860 <z_thread_timeout+0x94>)
 80087f6:	481e      	ldr	r0, [pc, #120]	; (8008870 <z_thread_timeout+0xa4>)
 80087f8:	f002 fe0b 	bl	800b412 <assert_print>
 80087fc:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80087fe:	4819      	ldr	r0, [pc, #100]	; (8008864 <z_thread_timeout+0x98>)
 8008800:	f002 fe00 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8008804:	4816      	ldr	r0, [pc, #88]	; (8008860 <z_thread_timeout+0x94>)
 8008806:	f7fe ffc9 	bl	800779c <z_spin_lock_set_owner>
		if (!killed) {
 800880a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800880e:	f013 0f28 	tst.w	r3, #40	; 0x28
 8008812:	d110      	bne.n	8008836 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
 8008814:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8008818:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
 800881c:	b113      	cbz	r3, 8008824 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
 800881e:	4628      	mov	r0, r5
 8008820:	f7ff ffb4 	bl	800878c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8008824:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8008828:	f023 0314 	bic.w	r3, r3, #20
 800882c:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 8008830:	4628      	mov	r0, r5
 8008832:	f7ff fa3d 	bl	8007cb0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008836:	480a      	ldr	r0, [pc, #40]	; (8008860 <z_thread_timeout+0x94>)
 8008838:	f7fe ffa0 	bl	800777c <z_spin_unlock_valid>
 800883c:	b958      	cbnz	r0, 8008856 <z_thread_timeout+0x8a>
 800883e:	4a09      	ldr	r2, [pc, #36]	; (8008864 <z_thread_timeout+0x98>)
 8008840:	490c      	ldr	r1, [pc, #48]	; (8008874 <z_thread_timeout+0xa8>)
 8008842:	480a      	ldr	r0, [pc, #40]	; (800886c <z_thread_timeout+0xa0>)
 8008844:	23b9      	movs	r3, #185	; 0xb9
 8008846:	f002 fde4 	bl	800b412 <assert_print>
 800884a:	4905      	ldr	r1, [pc, #20]	; (8008860 <z_thread_timeout+0x94>)
 800884c:	480a      	ldr	r0, [pc, #40]	; (8008878 <z_thread_timeout+0xac>)
 800884e:	f002 fde0 	bl	800b412 <assert_print>
 8008852:	21b9      	movs	r1, #185	; 0xb9
 8008854:	e7d3      	b.n	80087fe <z_thread_timeout+0x32>
	__asm__ volatile(
 8008856:	f386 8811 	msr	BASEPRI, r6
 800885a:	f3bf 8f6f 	isb	sy
}
 800885e:	bd70      	pop	{r4, r5, r6, pc}
 8008860:	20000c18 	.word	0x20000c18
 8008864:	08011b97 	.word	0x08011b97
 8008868:	08011bc4 	.word	0x08011bc4
 800886c:	080118c5 	.word	0x080118c5
 8008870:	08011bd9 	.word	0x08011bd9
 8008874:	08011bf1 	.word	0x08011bf1
 8008878:	08011c08 	.word	0x08011c08

0800887c <z_unpend1_no_timeout>:
{
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	4605      	mov	r5, r0
	__asm__ volatile(
 8008880:	f04f 0310 	mov.w	r3, #16
 8008884:	f3ef 8611 	mrs	r6, BASEPRI
 8008888:	f383 8812 	msr	BASEPRI_MAX, r3
 800888c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008890:	4819      	ldr	r0, [pc, #100]	; (80088f8 <z_unpend1_no_timeout+0x7c>)
 8008892:	f7fe ff65 	bl	8007760 <z_spin_lock_valid>
 8008896:	b968      	cbnz	r0, 80088b4 <z_unpend1_no_timeout+0x38>
 8008898:	4a18      	ldr	r2, [pc, #96]	; (80088fc <z_unpend1_no_timeout+0x80>)
 800889a:	4919      	ldr	r1, [pc, #100]	; (8008900 <z_unpend1_no_timeout+0x84>)
 800889c:	4819      	ldr	r0, [pc, #100]	; (8008904 <z_unpend1_no_timeout+0x88>)
 800889e:	238e      	movs	r3, #142	; 0x8e
 80088a0:	f002 fdb7 	bl	800b412 <assert_print>
 80088a4:	4914      	ldr	r1, [pc, #80]	; (80088f8 <z_unpend1_no_timeout+0x7c>)
 80088a6:	4818      	ldr	r0, [pc, #96]	; (8008908 <z_unpend1_no_timeout+0x8c>)
 80088a8:	f002 fdb3 	bl	800b412 <assert_print>
 80088ac:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80088ae:	4813      	ldr	r0, [pc, #76]	; (80088fc <z_unpend1_no_timeout+0x80>)
 80088b0:	f002 fda8 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 80088b4:	4810      	ldr	r0, [pc, #64]	; (80088f8 <z_unpend1_no_timeout+0x7c>)
 80088b6:	f7fe ff71 	bl	800779c <z_spin_lock_set_owner>
	return list->head == list;
 80088ba:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80088bc:	42a5      	cmp	r5, r4
 80088be:	d013      	beq.n	80088e8 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
 80088c0:	b114      	cbz	r4, 80088c8 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
 80088c2:	4620      	mov	r0, r4
 80088c4:	f7ff ff62 	bl	800878c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80088c8:	480b      	ldr	r0, [pc, #44]	; (80088f8 <z_unpend1_no_timeout+0x7c>)
 80088ca:	f7fe ff57 	bl	800777c <z_spin_unlock_valid>
 80088ce:	b968      	cbnz	r0, 80088ec <z_unpend1_no_timeout+0x70>
 80088d0:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <z_unpend1_no_timeout+0x80>)
 80088d2:	490e      	ldr	r1, [pc, #56]	; (800890c <z_unpend1_no_timeout+0x90>)
 80088d4:	480b      	ldr	r0, [pc, #44]	; (8008904 <z_unpend1_no_timeout+0x88>)
 80088d6:	23b9      	movs	r3, #185	; 0xb9
 80088d8:	f002 fd9b 	bl	800b412 <assert_print>
 80088dc:	4906      	ldr	r1, [pc, #24]	; (80088f8 <z_unpend1_no_timeout+0x7c>)
 80088de:	480c      	ldr	r0, [pc, #48]	; (8008910 <z_unpend1_no_timeout+0x94>)
 80088e0:	f002 fd97 	bl	800b412 <assert_print>
 80088e4:	21b9      	movs	r1, #185	; 0xb9
 80088e6:	e7e2      	b.n	80088ae <z_unpend1_no_timeout+0x32>
 80088e8:	2400      	movs	r4, #0
 80088ea:	e7ed      	b.n	80088c8 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
 80088ec:	f386 8811 	msr	BASEPRI, r6
 80088f0:	f3bf 8f6f 	isb	sy
}
 80088f4:	4620      	mov	r0, r4
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	20000c18 	.word	0x20000c18
 80088fc:	08011b97 	.word	0x08011b97
 8008900:	08011bc4 	.word	0x08011bc4
 8008904:	080118c5 	.word	0x080118c5
 8008908:	08011bd9 	.word	0x08011bd9
 800890c:	08011bf1 	.word	0x08011bf1
 8008910:	08011c08 	.word	0x08011c08

08008914 <z_unpend_first_thread>:
{
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	4605      	mov	r5, r0
	__asm__ volatile(
 8008918:	f04f 0310 	mov.w	r3, #16
 800891c:	f3ef 8611 	mrs	r6, BASEPRI
 8008920:	f383 8812 	msr	BASEPRI_MAX, r3
 8008924:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008928:	481b      	ldr	r0, [pc, #108]	; (8008998 <z_unpend_first_thread+0x84>)
 800892a:	f7fe ff19 	bl	8007760 <z_spin_lock_valid>
 800892e:	b968      	cbnz	r0, 800894c <z_unpend_first_thread+0x38>
 8008930:	4a1a      	ldr	r2, [pc, #104]	; (800899c <z_unpend_first_thread+0x88>)
 8008932:	491b      	ldr	r1, [pc, #108]	; (80089a0 <z_unpend_first_thread+0x8c>)
 8008934:	481b      	ldr	r0, [pc, #108]	; (80089a4 <z_unpend_first_thread+0x90>)
 8008936:	238e      	movs	r3, #142	; 0x8e
 8008938:	f002 fd6b 	bl	800b412 <assert_print>
 800893c:	4916      	ldr	r1, [pc, #88]	; (8008998 <z_unpend_first_thread+0x84>)
 800893e:	481a      	ldr	r0, [pc, #104]	; (80089a8 <z_unpend_first_thread+0x94>)
 8008940:	f002 fd67 	bl	800b412 <assert_print>
 8008944:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008946:	4815      	ldr	r0, [pc, #84]	; (800899c <z_unpend_first_thread+0x88>)
 8008948:	f002 fd5c 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 800894c:	4812      	ldr	r0, [pc, #72]	; (8008998 <z_unpend_first_thread+0x84>)
 800894e:	f7fe ff25 	bl	800779c <z_spin_lock_set_owner>
	return list->head == list;
 8008952:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008954:	42a5      	cmp	r5, r4
 8008956:	d017      	beq.n	8008988 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
 8008958:	b134      	cbz	r4, 8008968 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
 800895a:	4620      	mov	r0, r4
 800895c:	f7ff ff16 	bl	800878c <unpend_thread_no_timeout>
 8008960:	f104 0018 	add.w	r0, r4, #24
 8008964:	f000 fb9a 	bl	800909c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008968:	480b      	ldr	r0, [pc, #44]	; (8008998 <z_unpend_first_thread+0x84>)
 800896a:	f7fe ff07 	bl	800777c <z_spin_unlock_valid>
 800896e:	b968      	cbnz	r0, 800898c <z_unpend_first_thread+0x78>
 8008970:	4a0a      	ldr	r2, [pc, #40]	; (800899c <z_unpend_first_thread+0x88>)
 8008972:	490e      	ldr	r1, [pc, #56]	; (80089ac <z_unpend_first_thread+0x98>)
 8008974:	480b      	ldr	r0, [pc, #44]	; (80089a4 <z_unpend_first_thread+0x90>)
 8008976:	23b9      	movs	r3, #185	; 0xb9
 8008978:	f002 fd4b 	bl	800b412 <assert_print>
 800897c:	4906      	ldr	r1, [pc, #24]	; (8008998 <z_unpend_first_thread+0x84>)
 800897e:	480c      	ldr	r0, [pc, #48]	; (80089b0 <z_unpend_first_thread+0x9c>)
 8008980:	f002 fd47 	bl	800b412 <assert_print>
 8008984:	21b9      	movs	r1, #185	; 0xb9
 8008986:	e7de      	b.n	8008946 <z_unpend_first_thread+0x32>
 8008988:	2400      	movs	r4, #0
 800898a:	e7ed      	b.n	8008968 <z_unpend_first_thread+0x54>
	__asm__ volatile(
 800898c:	f386 8811 	msr	BASEPRI, r6
 8008990:	f3bf 8f6f 	isb	sy
}
 8008994:	4620      	mov	r0, r4
 8008996:	bd70      	pop	{r4, r5, r6, pc}
 8008998:	20000c18 	.word	0x20000c18
 800899c:	08011b97 	.word	0x08011b97
 80089a0:	08011bc4 	.word	0x08011bc4
 80089a4:	080118c5 	.word	0x080118c5
 80089a8:	08011bd9 	.word	0x08011bd9
 80089ac:	08011bf1 	.word	0x08011bf1
 80089b0:	08011c08 	.word	0x08011c08

080089b4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80089b4:	4b04      	ldr	r3, [pc, #16]	; (80089c8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80089b6:	2100      	movs	r1, #0
 80089b8:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 80089bc:	e9c3 2207 	strd	r2, r2, [r3, #28]
 80089c0:	4608      	mov	r0, r1
 80089c2:	f7ff b9bf 	b.w	8007d44 <k_sched_time_slice_set>
 80089c6:	bf00      	nop
 80089c8:	20000be0 	.word	0x20000be0

080089cc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
 80089d2:	b16b      	cbz	r3, 80089f0 <z_impl_k_yield+0x24>
 80089d4:	493c      	ldr	r1, [pc, #240]	; (8008ac8 <z_impl_k_yield+0xfc>)
 80089d6:	4a3d      	ldr	r2, [pc, #244]	; (8008acc <z_impl_k_yield+0x100>)
 80089d8:	483d      	ldr	r0, [pc, #244]	; (8008ad0 <z_impl_k_yield+0x104>)
 80089da:	f240 535d 	movw	r3, #1373	; 0x55d
 80089de:	f002 fd18 	bl	800b412 <assert_print>
 80089e2:	483c      	ldr	r0, [pc, #240]	; (8008ad4 <z_impl_k_yield+0x108>)
 80089e4:	f002 fd15 	bl	800b412 <assert_print>
 80089e8:	f240 515d 	movw	r1, #1373	; 0x55d
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 80089ec:	4837      	ldr	r0, [pc, #220]	; (8008acc <z_impl_k_yield+0x100>)
 80089ee:	e017      	b.n	8008a20 <z_impl_k_yield+0x54>
	__asm__ volatile(
 80089f0:	f04f 0310 	mov.w	r3, #16
 80089f4:	f3ef 8611 	mrs	r6, BASEPRI
 80089f8:	f383 8812 	msr	BASEPRI_MAX, r3
 80089fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008a00:	4835      	ldr	r0, [pc, #212]	; (8008ad8 <z_impl_k_yield+0x10c>)
 8008a02:	f7fe fead 	bl	8007760 <z_spin_lock_valid>
 8008a06:	b968      	cbnz	r0, 8008a24 <z_impl_k_yield+0x58>
 8008a08:	4a34      	ldr	r2, [pc, #208]	; (8008adc <z_impl_k_yield+0x110>)
 8008a0a:	4935      	ldr	r1, [pc, #212]	; (8008ae0 <z_impl_k_yield+0x114>)
 8008a0c:	4830      	ldr	r0, [pc, #192]	; (8008ad0 <z_impl_k_yield+0x104>)
 8008a0e:	238e      	movs	r3, #142	; 0x8e
 8008a10:	f002 fcff 	bl	800b412 <assert_print>
 8008a14:	4930      	ldr	r1, [pc, #192]	; (8008ad8 <z_impl_k_yield+0x10c>)
 8008a16:	4833      	ldr	r0, [pc, #204]	; (8008ae4 <z_impl_k_yield+0x118>)
 8008a18:	f002 fcfb 	bl	800b412 <assert_print>
 8008a1c:	218e      	movs	r1, #142	; 0x8e
 8008a1e:	482f      	ldr	r0, [pc, #188]	; (8008adc <z_impl_k_yield+0x110>)
 8008a20:	f002 fcf0 	bl	800b404 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 8008a24:	4c30      	ldr	r4, [pc, #192]	; (8008ae8 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
 8008a26:	482c      	ldr	r0, [pc, #176]	; (8008ad8 <z_impl_k_yield+0x10c>)
 8008a28:	f7fe feb8 	bl	800779c <z_spin_lock_set_owner>
 8008a2c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008a2e:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8008a30:	f104 051c 	add.w	r5, r4, #28
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a38:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f7ff fbde 	bl	80081fc <z_priq_dumb_remove>
	}
	queue_thread(_current);
 8008a40:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8008a42:	7b5a      	ldrb	r2, [r3, #13]
 8008a44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a48:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8008a4a:	4a28      	ldr	r2, [pc, #160]	; (8008aec <z_impl_k_yield+0x120>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d107      	bne.n	8008a60 <z_impl_k_yield+0x94>
 8008a50:	4927      	ldr	r1, [pc, #156]	; (8008af0 <z_impl_k_yield+0x124>)
 8008a52:	4a1e      	ldr	r2, [pc, #120]	; (8008acc <z_impl_k_yield+0x100>)
 8008a54:	481e      	ldr	r0, [pc, #120]	; (8008ad0 <z_impl_k_yield+0x104>)
 8008a56:	23ba      	movs	r3, #186	; 0xba
 8008a58:	f002 fcdb 	bl	800b412 <assert_print>
 8008a5c:	21ba      	movs	r1, #186	; 0xba
 8008a5e:	e7c5      	b.n	80089ec <z_impl_k_yield+0x20>
	return list->head == list;
 8008a60:	69e2      	ldr	r2, [r4, #28]
	return (node == list->tail) ? NULL : node->next;
 8008a62:	6a21      	ldr	r1, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008a64:	42aa      	cmp	r2, r5
 8008a66:	bf08      	it	eq
 8008a68:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008a6a:	b922      	cbnz	r2, 8008a76 <z_impl_k_yield+0xaa>
	node->prev = tail;
 8008a6c:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
 8008a70:	600b      	str	r3, [r1, #0]
	list->tail = node;
 8008a72:	6223      	str	r3, [r4, #32]
}
 8008a74:	e00c      	b.n	8008a90 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
 8008a76:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8008a7a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 8008a7e:	42b8      	cmp	r0, r7
 8008a80:	d019      	beq.n	8008ab6 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008a82:	4287      	cmp	r7, r0
 8008a84:	dd17      	ble.n	8008ab6 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
 8008a86:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8008a88:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8008a8c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8008a8e:	6053      	str	r3, [r2, #4]
	update_cache(1);
 8008a90:	2001      	movs	r0, #1
 8008a92:	f7ff f8d9 	bl	8007c48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008a96:	4810      	ldr	r0, [pc, #64]	; (8008ad8 <z_impl_k_yield+0x10c>)
 8008a98:	f7fe fe70 	bl	800777c <z_spin_unlock_valid>
 8008a9c:	b978      	cbnz	r0, 8008abe <z_impl_k_yield+0xf2>
 8008a9e:	4a0f      	ldr	r2, [pc, #60]	; (8008adc <z_impl_k_yield+0x110>)
 8008aa0:	4914      	ldr	r1, [pc, #80]	; (8008af4 <z_impl_k_yield+0x128>)
 8008aa2:	480b      	ldr	r0, [pc, #44]	; (8008ad0 <z_impl_k_yield+0x104>)
 8008aa4:	23d0      	movs	r3, #208	; 0xd0
 8008aa6:	f002 fcb4 	bl	800b412 <assert_print>
 8008aaa:	490b      	ldr	r1, [pc, #44]	; (8008ad8 <z_impl_k_yield+0x10c>)
 8008aac:	4812      	ldr	r0, [pc, #72]	; (8008af8 <z_impl_k_yield+0x12c>)
 8008aae:	f002 fcb0 	bl	800b412 <assert_print>
 8008ab2:	21d0      	movs	r1, #208	; 0xd0
 8008ab4:	e7b3      	b.n	8008a1e <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
 8008ab6:	428a      	cmp	r2, r1
 8008ab8:	d0d8      	beq.n	8008a6c <z_impl_k_yield+0xa0>
 8008aba:	6812      	ldr	r2, [r2, #0]
 8008abc:	e7d5      	b.n	8008a6a <z_impl_k_yield+0x9e>
 8008abe:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
 8008ac0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ac4:	f7fb bf0c 	b.w	80048e0 <arch_swap>
 8008ac8:	08013107 	.word	0x08013107
 8008acc:	080132a2 	.word	0x080132a2
 8008ad0:	080118c5 	.word	0x080118c5
 8008ad4:	0801329f 	.word	0x0801329f
 8008ad8:	20000c18 	.word	0x20000c18
 8008adc:	08011b97 	.word	0x08011b97
 8008ae0:	08011bc4 	.word	0x08011bc4
 8008ae4:	08011bd9 	.word	0x08011bd9
 8008ae8:	20000be0 	.word	0x20000be0
 8008aec:	200008e8 	.word	0x200008e8
 8008af0:	080132eb 	.word	0x080132eb
 8008af4:	08011bf1 	.word	0x08011bf1
 8008af8:	08011c08 	.word	0x08011c08

08008afc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
 8008afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b00:	4605      	mov	r5, r0
 8008b02:	460e      	mov	r6, r1
 8008b04:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
 8008b08:	b16b      	cbz	r3, 8008b26 <z_tick_sleep+0x2a>
 8008b0a:	493f      	ldr	r1, [pc, #252]	; (8008c08 <z_tick_sleep+0x10c>)
 8008b0c:	4a3f      	ldr	r2, [pc, #252]	; (8008c0c <z_tick_sleep+0x110>)
 8008b0e:	4840      	ldr	r0, [pc, #256]	; (8008c10 <z_tick_sleep+0x114>)
 8008b10:	f240 5379 	movw	r3, #1401	; 0x579
 8008b14:	f002 fc7d 	bl	800b412 <assert_print>
 8008b18:	483e      	ldr	r0, [pc, #248]	; (8008c14 <z_tick_sleep+0x118>)
 8008b1a:	f002 fc7a 	bl	800b412 <assert_print>
 8008b1e:	f240 5179 	movw	r1, #1401	; 0x579
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
 8008b22:	483a      	ldr	r0, [pc, #232]	; (8008c0c <z_tick_sleep+0x110>)
 8008b24:	e025      	b.n	8008b72 <z_tick_sleep+0x76>
	if (ticks == 0) {
 8008b26:	ea50 0301 	orrs.w	r3, r0, r1
 8008b2a:	d103      	bne.n	8008b34 <z_tick_sleep+0x38>
	z_impl_k_yield();
 8008b2c:	f7ff ff4e 	bl	80089cc <z_impl_k_yield>
		return 0;
 8008b30:	2000      	movs	r0, #0
 8008b32:	e066      	b.n	8008c02 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
 8008b34:	1c82      	adds	r2, r0, #2
 8008b36:	f171 33ff 	sbcs.w	r3, r1, #4294967295
 8008b3a:	db1c      	blt.n	8008b76 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8008b3c:	f003 fb82 	bl	800c244 <sys_clock_tick_get_32>
 8008b40:	1944      	adds	r4, r0, r5
 8008b42:	f04f 0310 	mov.w	r3, #16
 8008b46:	f3ef 8811 	mrs	r8, BASEPRI
 8008b4a:	f383 8812 	msr	BASEPRI_MAX, r3
 8008b4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008b52:	4831      	ldr	r0, [pc, #196]	; (8008c18 <z_tick_sleep+0x11c>)
 8008b54:	f7fe fe04 	bl	8007760 <z_spin_lock_valid>
 8008b58:	b988      	cbnz	r0, 8008b7e <z_tick_sleep+0x82>
 8008b5a:	4a30      	ldr	r2, [pc, #192]	; (8008c1c <z_tick_sleep+0x120>)
 8008b5c:	4930      	ldr	r1, [pc, #192]	; (8008c20 <z_tick_sleep+0x124>)
 8008b5e:	482c      	ldr	r0, [pc, #176]	; (8008c10 <z_tick_sleep+0x114>)
 8008b60:	238e      	movs	r3, #142	; 0x8e
 8008b62:	f002 fc56 	bl	800b412 <assert_print>
 8008b66:	492c      	ldr	r1, [pc, #176]	; (8008c18 <z_tick_sleep+0x11c>)
 8008b68:	482e      	ldr	r0, [pc, #184]	; (8008c24 <z_tick_sleep+0x128>)
 8008b6a:	f002 fc52 	bl	800b412 <assert_print>
 8008b6e:	218e      	movs	r1, #142	; 0x8e
 8008b70:	482a      	ldr	r0, [pc, #168]	; (8008c1c <z_tick_sleep+0x120>)
 8008b72:	f002 fc47 	bl	800b404 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8008b76:	f06f 0401 	mvn.w	r4, #1
 8008b7a:	1a24      	subs	r4, r4, r0
 8008b7c:	e7e1      	b.n	8008b42 <z_tick_sleep+0x46>
	pending_current = _current;
 8008b7e:	4f2a      	ldr	r7, [pc, #168]	; (8008c28 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
 8008b80:	4825      	ldr	r0, [pc, #148]	; (8008c18 <z_tick_sleep+0x11c>)
 8008b82:	f7fe fe0b 	bl	800779c <z_spin_lock_set_owner>
 8008b86:	4b29      	ldr	r3, [pc, #164]	; (8008c2c <z_tick_sleep+0x130>)
 8008b88:	68b8      	ldr	r0, [r7, #8]
 8008b8a:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8008b8c:	f7ff fc1e 	bl	80083cc <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8008b90:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8008b92:	4927      	ldr	r1, [pc, #156]	; (8008c30 <z_tick_sleep+0x134>)
 8008b94:	462a      	mov	r2, r5
 8008b96:	4633      	mov	r3, r6
 8008b98:	3018      	adds	r0, #24
 8008b9a:	f000 f9b9 	bl	8008f10 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8008b9e:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008ba0:	481d      	ldr	r0, [pc, #116]	; (8008c18 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8008ba2:	7b53      	ldrb	r3, [r2, #13]
 8008ba4:	f043 0310 	orr.w	r3, r3, #16
 8008ba8:	7353      	strb	r3, [r2, #13]
 8008baa:	f7fe fde7 	bl	800777c <z_spin_unlock_valid>
 8008bae:	b958      	cbnz	r0, 8008bc8 <z_tick_sleep+0xcc>
 8008bb0:	4a1a      	ldr	r2, [pc, #104]	; (8008c1c <z_tick_sleep+0x120>)
 8008bb2:	4920      	ldr	r1, [pc, #128]	; (8008c34 <z_tick_sleep+0x138>)
 8008bb4:	4816      	ldr	r0, [pc, #88]	; (8008c10 <z_tick_sleep+0x114>)
 8008bb6:	23d0      	movs	r3, #208	; 0xd0
 8008bb8:	f002 fc2b 	bl	800b412 <assert_print>
 8008bbc:	4916      	ldr	r1, [pc, #88]	; (8008c18 <z_tick_sleep+0x11c>)
 8008bbe:	481e      	ldr	r0, [pc, #120]	; (8008c38 <z_tick_sleep+0x13c>)
 8008bc0:	f002 fc27 	bl	800b412 <assert_print>
 8008bc4:	21d0      	movs	r1, #208	; 0xd0
 8008bc6:	e7d3      	b.n	8008b70 <z_tick_sleep+0x74>
 8008bc8:	4640      	mov	r0, r8
 8008bca:	f7fb fe89 	bl	80048e0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
 8008bce:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
 8008bd0:	7b5b      	ldrb	r3, [r3, #13]
 8008bd2:	06db      	lsls	r3, r3, #27
 8008bd4:	d50c      	bpl.n	8008bf0 <z_tick_sleep+0xf4>
 8008bd6:	4919      	ldr	r1, [pc, #100]	; (8008c3c <z_tick_sleep+0x140>)
 8008bd8:	4a0c      	ldr	r2, [pc, #48]	; (8008c0c <z_tick_sleep+0x110>)
 8008bda:	480d      	ldr	r0, [pc, #52]	; (8008c10 <z_tick_sleep+0x114>)
 8008bdc:	f240 539a 	movw	r3, #1434	; 0x59a
 8008be0:	f002 fc17 	bl	800b412 <assert_print>
 8008be4:	480b      	ldr	r0, [pc, #44]	; (8008c14 <z_tick_sleep+0x118>)
 8008be6:	f002 fc14 	bl	800b412 <assert_print>
 8008bea:	f240 519a 	movw	r1, #1434	; 0x59a
 8008bee:	e798      	b.n	8008b22 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8008bf0:	f003 fb28 	bl	800c244 <sys_clock_tick_get_32>
 8008bf4:	1a20      	subs	r0, r4, r0
 8008bf6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8008bfa:	2801      	cmp	r0, #1
 8008bfc:	f173 0300 	sbcs.w	r3, r3, #0
 8008c00:	db96      	blt.n	8008b30 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
 8008c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c06:	bf00      	nop
 8008c08:	08013107 	.word	0x08013107
 8008c0c:	080132a2 	.word	0x080132a2
 8008c10:	080118c5 	.word	0x080118c5
 8008c14:	0801329f 	.word	0x0801329f
 8008c18:	20000c18 	.word	0x20000c18
 8008c1c:	08011b97 	.word	0x08011b97
 8008c20:	08011bc4 	.word	0x08011bc4
 8008c24:	08011bd9 	.word	0x08011bd9
 8008c28:	20000be0 	.word	0x20000be0
 8008c2c:	20000c0c 	.word	0x20000c0c
 8008c30:	080087cd 	.word	0x080087cd
 8008c34:	08011bf1 	.word	0x08011bf1
 8008c38:	08011c08 	.word	0x08011c08
 8008c3c:	080133b0 	.word	0x080133b0

08008c40 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
 8008c40:	b508      	push	{r3, lr}
 8008c42:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
 8008c46:	b173      	cbz	r3, 8008c66 <z_impl_k_sleep+0x26>
 8008c48:	4911      	ldr	r1, [pc, #68]	; (8008c90 <z_impl_k_sleep+0x50>)
 8008c4a:	4a12      	ldr	r2, [pc, #72]	; (8008c94 <z_impl_k_sleep+0x54>)
 8008c4c:	4812      	ldr	r0, [pc, #72]	; (8008c98 <z_impl_k_sleep+0x58>)
 8008c4e:	f240 53a9 	movw	r3, #1449	; 0x5a9
 8008c52:	f002 fbde 	bl	800b412 <assert_print>
 8008c56:	4811      	ldr	r0, [pc, #68]	; (8008c9c <z_impl_k_sleep+0x5c>)
 8008c58:	f002 fbdb 	bl	800b412 <assert_print>
 8008c5c:	480d      	ldr	r0, [pc, #52]	; (8008c94 <z_impl_k_sleep+0x54>)
 8008c5e:	f240 51a9 	movw	r1, #1449	; 0x5a9
 8008c62:	f002 fbcf 	bl	800b404 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8008c66:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008c6a:	bf08      	it	eq
 8008c6c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
 8008c70:	d106      	bne.n	8008c80 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
 8008c72:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <z_impl_k_sleep+0x60>)
 8008c74:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8008c76:	f7ff fd21 	bl	80086bc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8008c7e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8008c80:	f7ff ff3c 	bl	8008afc <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8008c84:	220a      	movs	r2, #10
 8008c86:	2300      	movs	r3, #0
 8008c88:	17c1      	asrs	r1, r0, #31
 8008c8a:	f7f7 ff6d 	bl	8000b68 <__aeabi_uldivmod>
	return ret;
 8008c8e:	e7f6      	b.n	8008c7e <z_impl_k_sleep+0x3e>
 8008c90:	08013107 	.word	0x08013107
 8008c94:	080132a2 	.word	0x080132a2
 8008c98:	080118c5 	.word	0x080118c5
 8008c9c:	0801329f 	.word	0x0801329f
 8008ca0:	20000be0 	.word	0x20000be0

08008ca4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8008ca4:	4b01      	ldr	r3, [pc, #4]	; (8008cac <z_impl_z_current_get+0x8>)
 8008ca6:	6898      	ldr	r0, [r3, #8]
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	20000be0 	.word	0x20000be0

08008cb0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8008cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	f04f 0310 	mov.w	r3, #16
 8008cba:	f3ef 8611 	mrs	r6, BASEPRI
 8008cbe:	f383 8812 	msr	BASEPRI_MAX, r3
 8008cc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008cc6:	4851      	ldr	r0, [pc, #324]	; (8008e0c <z_thread_abort+0x15c>)
 8008cc8:	f7fe fd4a 	bl	8007760 <z_spin_lock_valid>
 8008ccc:	b968      	cbnz	r0, 8008cea <z_thread_abort+0x3a>
 8008cce:	4a50      	ldr	r2, [pc, #320]	; (8008e10 <z_thread_abort+0x160>)
 8008cd0:	4950      	ldr	r1, [pc, #320]	; (8008e14 <z_thread_abort+0x164>)
 8008cd2:	4851      	ldr	r0, [pc, #324]	; (8008e18 <z_thread_abort+0x168>)
 8008cd4:	238e      	movs	r3, #142	; 0x8e
 8008cd6:	f002 fb9c 	bl	800b412 <assert_print>
 8008cda:	494c      	ldr	r1, [pc, #304]	; (8008e0c <z_thread_abort+0x15c>)
 8008cdc:	484f      	ldr	r0, [pc, #316]	; (8008e1c <z_thread_abort+0x16c>)
 8008cde:	f002 fb98 	bl	800b412 <assert_print>
 8008ce2:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008ce4:	484a      	ldr	r0, [pc, #296]	; (8008e10 <z_thread_abort+0x160>)
 8008ce6:	f002 fb8d 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8008cea:	4848      	ldr	r0, [pc, #288]	; (8008e0c <z_thread_abort+0x15c>)
 8008cec:	f7fe fd56 	bl	800779c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 8008cf0:	7b23      	ldrb	r3, [r4, #12]
 8008cf2:	07d9      	lsls	r1, r3, #31
 8008cf4:	d522      	bpl.n	8008d3c <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008cf6:	4845      	ldr	r0, [pc, #276]	; (8008e0c <z_thread_abort+0x15c>)
 8008cf8:	f7fe fd40 	bl	800777c <z_spin_unlock_valid>
 8008cfc:	b958      	cbnz	r0, 8008d16 <z_thread_abort+0x66>
 8008cfe:	4a44      	ldr	r2, [pc, #272]	; (8008e10 <z_thread_abort+0x160>)
 8008d00:	4947      	ldr	r1, [pc, #284]	; (8008e20 <z_thread_abort+0x170>)
 8008d02:	4845      	ldr	r0, [pc, #276]	; (8008e18 <z_thread_abort+0x168>)
 8008d04:	23b9      	movs	r3, #185	; 0xb9
 8008d06:	f002 fb84 	bl	800b412 <assert_print>
 8008d0a:	4940      	ldr	r1, [pc, #256]	; (8008e0c <z_thread_abort+0x15c>)
 8008d0c:	4845      	ldr	r0, [pc, #276]	; (8008e24 <z_thread_abort+0x174>)
 8008d0e:	f002 fb80 	bl	800b412 <assert_print>
 8008d12:	21b9      	movs	r1, #185	; 0xb9
 8008d14:	e7e6      	b.n	8008ce4 <z_thread_abort+0x34>
	__asm__ volatile(
 8008d16:	f386 8811 	msr	BASEPRI, r6
 8008d1a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
 8008d1e:	4a42      	ldr	r2, [pc, #264]	; (8008e28 <z_thread_abort+0x178>)
 8008d20:	4942      	ldr	r1, [pc, #264]	; (8008e2c <z_thread_abort+0x17c>)
 8008d22:	483d      	ldr	r0, [pc, #244]	; (8008e18 <z_thread_abort+0x168>)
 8008d24:	f240 63b5 	movw	r3, #1717	; 0x6b5
 8008d28:	f002 fb73 	bl	800b412 <assert_print>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4840      	ldr	r0, [pc, #256]	; (8008e30 <z_thread_abort+0x180>)
 8008d30:	f002 fb6f 	bl	800b412 <assert_print>
 8008d34:	f240 61b5 	movw	r1, #1717	; 0x6b5
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
 8008d38:	483b      	ldr	r0, [pc, #236]	; (8008e28 <z_thread_abort+0x178>)
 8008d3a:	e7d4      	b.n	8008ce6 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8008d3c:	7b63      	ldrb	r3, [r4, #13]
 8008d3e:	071a      	lsls	r2, r3, #28
 8008d40:	d50a      	bpl.n	8008d58 <z_thread_abort+0xa8>
 8008d42:	4832      	ldr	r0, [pc, #200]	; (8008e0c <z_thread_abort+0x15c>)
 8008d44:	f7fe fd1a 	bl	800777c <z_spin_unlock_valid>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d0d8      	beq.n	8008cfe <z_thread_abort+0x4e>
 8008d4c:	f386 8811 	msr	BASEPRI, r6
 8008d50:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8008d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8008d58:	f023 0220 	bic.w	r2, r3, #32
 8008d5c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8008d60:	09d2      	lsrs	r2, r2, #7
 8008d62:	d12c      	bne.n	8008dbe <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8008d64:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
 8008d66:	68a3      	ldr	r3, [r4, #8]
 8008d68:	b113      	cbz	r3, 8008d70 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f7ff fd0e 	bl	800878c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8008d70:	f104 0018 	add.w	r0, r4, #24
 8008d74:	f000 f992 	bl	800909c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8008d78:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8008d7c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8008d80:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008d82:	42bd      	cmp	r5, r7
 8008d84:	d000      	beq.n	8008d88 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8008d86:	bb25      	cbnz	r5, 8008dd2 <z_thread_abort+0x122>
		update_cache(1);
 8008d88:	2001      	movs	r0, #1
 8008d8a:	f7fe ff5d 	bl	8007c48 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8008d8e:	4b29      	ldr	r3, [pc, #164]	; (8008e34 <z_thread_abort+0x184>)
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	42a3      	cmp	r3, r4
 8008d94:	d1d5      	bne.n	8008d42 <z_thread_abort+0x92>
 8008d96:	f3ef 8305 	mrs	r3, IPSR
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1d1      	bne.n	8008d42 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8008d9e:	481b      	ldr	r0, [pc, #108]	; (8008e0c <z_thread_abort+0x15c>)
 8008da0:	f7fe fcec 	bl	800777c <z_spin_unlock_valid>
 8008da4:	bb10      	cbnz	r0, 8008dec <z_thread_abort+0x13c>
 8008da6:	4a1a      	ldr	r2, [pc, #104]	; (8008e10 <z_thread_abort+0x160>)
 8008da8:	491d      	ldr	r1, [pc, #116]	; (8008e20 <z_thread_abort+0x170>)
 8008daa:	481b      	ldr	r0, [pc, #108]	; (8008e18 <z_thread_abort+0x168>)
 8008dac:	23d0      	movs	r3, #208	; 0xd0
 8008dae:	f002 fb30 	bl	800b412 <assert_print>
 8008db2:	4916      	ldr	r1, [pc, #88]	; (8008e0c <z_thread_abort+0x15c>)
 8008db4:	481b      	ldr	r0, [pc, #108]	; (8008e24 <z_thread_abort+0x174>)
 8008db6:	f002 fb2c 	bl	800b412 <assert_print>
 8008dba:	21d0      	movs	r1, #208	; 0xd0
 8008dbc:	e792      	b.n	8008ce4 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008dbe:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8008dc2:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
 8008dc6:	481c      	ldr	r0, [pc, #112]	; (8008e38 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008dc8:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8008dca:	4621      	mov	r1, r4
 8008dcc:	f7ff fa16 	bl	80081fc <z_priq_dumb_remove>
}
 8008dd0:	e7c9      	b.n	8008d66 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f7ff fcda 	bl	800878c <unpend_thread_no_timeout>
 8008dd8:	f105 0018 	add.w	r0, r5, #24
 8008ddc:	f000 f95e 	bl	800909c <z_abort_timeout>
 8008de0:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 8008de4:	4628      	mov	r0, r5
 8008de6:	f7fe ff63 	bl	8007cb0 <ready_thread>
 8008dea:	e7c9      	b.n	8008d80 <z_thread_abort+0xd0>
 8008dec:	4630      	mov	r0, r6
 8008dee:	f7fb fd77 	bl	80048e0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
 8008df2:	490e      	ldr	r1, [pc, #56]	; (8008e2c <z_thread_abort+0x17c>)
 8008df4:	4a0c      	ldr	r2, [pc, #48]	; (8008e28 <z_thread_abort+0x178>)
 8008df6:	4808      	ldr	r0, [pc, #32]	; (8008e18 <z_thread_abort+0x168>)
 8008df8:	f240 63e4 	movw	r3, #1764	; 0x6e4
 8008dfc:	f002 fb09 	bl	800b412 <assert_print>
 8008e00:	480e      	ldr	r0, [pc, #56]	; (8008e3c <z_thread_abort+0x18c>)
 8008e02:	f002 fb06 	bl	800b412 <assert_print>
 8008e06:	f240 61e4 	movw	r1, #1764	; 0x6e4
 8008e0a:	e795      	b.n	8008d38 <z_thread_abort+0x88>
 8008e0c:	20000c18 	.word	0x20000c18
 8008e10:	08011b97 	.word	0x08011b97
 8008e14:	08011bc4 	.word	0x08011bc4
 8008e18:	080118c5 	.word	0x080118c5
 8008e1c:	08011bd9 	.word	0x08011bd9
 8008e20:	08011bf1 	.word	0x08011bf1
 8008e24:	08011c08 	.word	0x08011c08
 8008e28:	080132a2 	.word	0x080132a2
 8008e2c:	0801352e 	.word	0x0801352e
 8008e30:	080133f0 	.word	0x080133f0
 8008e34:	20000be0 	.word	0x20000be0
 8008e38:	20000bfc 	.word	0x20000bfc
 8008e3c:	0801340f 	.word	0x0801340f

08008e40 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8008e40:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8008e42:	4806      	ldr	r0, [pc, #24]	; (8008e5c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8008e44:	4a06      	ldr	r2, [pc, #24]	; (8008e60 <z_data_copy+0x20>)
 8008e46:	4907      	ldr	r1, [pc, #28]	; (8008e64 <z_data_copy+0x24>)
 8008e48:	1a12      	subs	r2, r2, r0
 8008e4a:	f003 f9ac 	bl	800c1a6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8008e4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8008e52:	4a05      	ldr	r2, [pc, #20]	; (8008e68 <z_data_copy+0x28>)
 8008e54:	4905      	ldr	r1, [pc, #20]	; (8008e6c <z_data_copy+0x2c>)
 8008e56:	4806      	ldr	r0, [pc, #24]	; (8008e70 <z_data_copy+0x30>)
 8008e58:	f003 b9a5 	b.w	800c1a6 <z_early_memcpy>
 8008e5c:	20000000 	.word	0x20000000
 8008e60:	200003ac 	.word	0x200003ac
 8008e64:	080138c0 	.word	0x080138c0
 8008e68:	00000000 	.word	0x00000000
 8008e6c:	080138c0 	.word	0x080138c0
 8008e70:	20000000 	.word	0x20000000

08008e74 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8008e74:	4b03      	ldr	r3, [pc, #12]	; (8008e84 <elapsed+0x10>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	b90b      	cbnz	r3, 8008e7e <elapsed+0xa>
 8008e7a:	f7fe b835 	b.w	8006ee8 <sys_clock_elapsed>
}
 8008e7e:	2000      	movs	r0, #0
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000c1c 	.word	0x20000c1c

08008e88 <next_timeout>:

static int32_t next_timeout(void)
{
 8008e88:	b510      	push	{r4, lr}
	return list->head == list;
 8008e8a:	4b11      	ldr	r3, [pc, #68]	; (8008ed0 <next_timeout+0x48>)
 8008e8c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008e8e:	429c      	cmp	r4, r3
 8008e90:	d10a      	bne.n	8008ea8 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8008e92:	f7ff ffef 	bl	8008e74 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 8008e96:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8008e9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ed4 <next_timeout+0x4c>)
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	b113      	cbz	r3, 8008ea6 <next_timeout+0x1e>
 8008ea0:	4298      	cmp	r0, r3
 8008ea2:	bfa8      	it	ge
 8008ea4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8008ea6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 8008ea8:	f7ff ffe4 	bl	8008e74 <elapsed>
	if ((to == NULL) ||
 8008eac:	2c00      	cmp	r4, #0
 8008eae:	d0f2      	beq.n	8008e96 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8008eb0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8008eb4:	1a1b      	subs	r3, r3, r0
 8008eb6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 8008eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ebe:	f172 0100 	sbcs.w	r1, r2, #0
 8008ec2:	dae8      	bge.n	8008e96 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 8008ec4:	2a00      	cmp	r2, #0
 8008ec6:	bfac      	ite	ge
 8008ec8:	4618      	movge	r0, r3
 8008eca:	2000      	movlt	r0, #0
 8008ecc:	e7e5      	b.n	8008e9a <next_timeout+0x12>
 8008ece:	bf00      	nop
 8008ed0:	20000108 	.word	0x20000108
 8008ed4:	20000be0 	.word	0x20000be0

08008ed8 <remove_timeout>:
{
 8008ed8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8008eda:	b170      	cbz	r0, 8008efa <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8008edc:	4b0b      	ldr	r3, [pc, #44]	; (8008f0c <remove_timeout+0x34>)
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	4298      	cmp	r0, r3
 8008ee2:	d00a      	beq.n	8008efa <remove_timeout+0x22>
 8008ee4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 8008ee6:	b143      	cbz	r3, 8008efa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8008ee8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8008eec:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8008ef0:	1912      	adds	r2, r2, r4
 8008ef2:	eb41 0105 	adc.w	r1, r1, r5
 8008ef6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
 8008efa:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8008efe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8008f00:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8008f02:	2300      	movs	r3, #0
	node->prev = NULL;
 8008f04:	e9c0 3300 	strd	r3, r3, [r0]
}
 8008f08:	bd30      	pop	{r4, r5, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20000108 	.word	0x20000108

08008f10 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8008f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f14:	bf08      	it	eq
 8008f16:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8008f1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4692      	mov	sl, r2
 8008f22:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8008f24:	f000 809e 	beq.w	8009064 <z_add_timeout+0x154>
	return node->next != NULL;
 8008f28:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
 8008f2a:	b166      	cbz	r6, 8008f46 <z_add_timeout+0x36>
 8008f2c:	494e      	ldr	r1, [pc, #312]	; (8009068 <z_add_timeout+0x158>)
 8008f2e:	4a4f      	ldr	r2, [pc, #316]	; (800906c <z_add_timeout+0x15c>)
 8008f30:	484f      	ldr	r0, [pc, #316]	; (8009070 <z_add_timeout+0x160>)
 8008f32:	2363      	movs	r3, #99	; 0x63
 8008f34:	f002 fa6d 	bl	800b412 <assert_print>
 8008f38:	484e      	ldr	r0, [pc, #312]	; (8009074 <z_add_timeout+0x164>)
 8008f3a:	f002 fa6a 	bl	800b412 <assert_print>
 8008f3e:	484b      	ldr	r0, [pc, #300]	; (800906c <z_add_timeout+0x15c>)
 8008f40:	2163      	movs	r1, #99	; 0x63
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8008f42:	f002 fa5f 	bl	800b404 <assert_post_action>
	to->fn = fn;
 8008f46:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8008f48:	f04f 0310 	mov.w	r3, #16
 8008f4c:	f3ef 8711 	mrs	r7, BASEPRI
 8008f50:	f383 8812 	msr	BASEPRI_MAX, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	4847      	ldr	r0, [pc, #284]	; (8009078 <z_add_timeout+0x168>)
 8008f5a:	f7fe fc01 	bl	8007760 <z_spin_lock_valid>
 8008f5e:	b960      	cbnz	r0, 8008f7a <z_add_timeout+0x6a>
 8008f60:	4a46      	ldr	r2, [pc, #280]	; (800907c <z_add_timeout+0x16c>)
 8008f62:	4947      	ldr	r1, [pc, #284]	; (8009080 <z_add_timeout+0x170>)
 8008f64:	4842      	ldr	r0, [pc, #264]	; (8009070 <z_add_timeout+0x160>)
 8008f66:	238e      	movs	r3, #142	; 0x8e
 8008f68:	f002 fa53 	bl	800b412 <assert_print>
 8008f6c:	4942      	ldr	r1, [pc, #264]	; (8009078 <z_add_timeout+0x168>)
 8008f6e:	4845      	ldr	r0, [pc, #276]	; (8009084 <z_add_timeout+0x174>)
 8008f70:	f002 fa4f 	bl	800b412 <assert_print>
 8008f74:	218e      	movs	r1, #142	; 0x8e
 8008f76:	4841      	ldr	r0, [pc, #260]	; (800907c <z_add_timeout+0x16c>)
 8008f78:	e7e3      	b.n	8008f42 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
 8008f7a:	483f      	ldr	r0, [pc, #252]	; (8009078 <z_add_timeout+0x168>)
 8008f7c:	f7fe fc0e 	bl	800779c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8008f80:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008f84:	f175 33ff 	sbcs.w	r3, r5, #4294967295
 8008f88:	da23      	bge.n	8008fd2 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8008f8a:	493f      	ldr	r1, [pc, #252]	; (8009088 <z_add_timeout+0x178>)
 8008f8c:	e9d1 2000 	ldrd	r2, r0, [r1]
 8008f90:	f06f 0301 	mvn.w	r3, #1
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9a:	eb62 0000 	sbc.w	r0, r2, r0
 8008f9e:	ebb3 030a 	subs.w	r3, r3, sl
 8008fa2:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	f170 0200 	sbcs.w	r2, r0, #0
 8008fac:	da01      	bge.n	8008fb2 <z_add_timeout+0xa2>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
 8008fb6:	4b35      	ldr	r3, [pc, #212]	; (800908c <z_add_timeout+0x17c>)
 8008fb8:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
 8008fba:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	bf18      	it	ne
 8008fc2:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 8008fc4:	b986      	cbnz	r6, 8008fe8 <z_add_timeout+0xd8>
	node->prev = tail;
 8008fc6:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
 8008fca:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8008fce:	605c      	str	r4, [r3, #4]
}
 8008fd0:	e01c      	b.n	800900c <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
 8008fd2:	f7ff ff4f 	bl	8008e74 <elapsed>
 8008fd6:	f11a 0801 	adds.w	r8, sl, #1
 8008fda:	f145 0500 	adc.w	r5, r5, #0
 8008fde:	eb18 0300 	adds.w	r3, r8, r0
 8008fe2:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8008fe6:	e7e4      	b.n	8008fb2 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
 8008fe8:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
 8008fec:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
 8008ff0:	428a      	cmp	r2, r1
 8008ff2:	eb70 0e05 	sbcs.w	lr, r0, r5
 8008ff6:	da28      	bge.n	800904a <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
 8008ff8:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
 8008ffa:	6872      	ldr	r2, [r6, #4]
 8008ffc:	eb65 0500 	sbc.w	r5, r5, r0
 8009000:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
 8009004:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
 8009008:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800900a:	6074      	str	r4, [r6, #4]
	return list->head == list;
 800900c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800900e:	429a      	cmp	r2, r3
 8009010:	d00b      	beq.n	800902a <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8009012:	4294      	cmp	r4, r2
 8009014:	d109      	bne.n	800902a <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8009016:	f7ff ff37 	bl	8008e88 <next_timeout>

			if (next_time == 0 ||
 800901a:	b118      	cbz	r0, 8009024 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
 800901c:	4b1c      	ldr	r3, [pc, #112]	; (8009090 <z_add_timeout+0x180>)
			if (next_time == 0 ||
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	4283      	cmp	r3, r0
 8009022:	d002      	beq.n	800902a <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
 8009024:	2100      	movs	r1, #0
 8009026:	f7fd febd 	bl	8006da4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800902a:	4813      	ldr	r0, [pc, #76]	; (8009078 <z_add_timeout+0x168>)
 800902c:	f7fe fba6 	bl	800777c <z_spin_unlock_valid>
 8009030:	b9a0      	cbnz	r0, 800905c <z_add_timeout+0x14c>
 8009032:	4a12      	ldr	r2, [pc, #72]	; (800907c <z_add_timeout+0x16c>)
 8009034:	4917      	ldr	r1, [pc, #92]	; (8009094 <z_add_timeout+0x184>)
 8009036:	480e      	ldr	r0, [pc, #56]	; (8009070 <z_add_timeout+0x160>)
 8009038:	23b9      	movs	r3, #185	; 0xb9
 800903a:	f002 f9ea 	bl	800b412 <assert_print>
 800903e:	490e      	ldr	r1, [pc, #56]	; (8009078 <z_add_timeout+0x168>)
 8009040:	4815      	ldr	r0, [pc, #84]	; (8009098 <z_add_timeout+0x188>)
 8009042:	f002 f9e6 	bl	800b412 <assert_print>
 8009046:	21b9      	movs	r1, #185	; 0xb9
 8009048:	e795      	b.n	8008f76 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
 800904a:	1a52      	subs	r2, r2, r1
 800904c:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
 8009050:	4566      	cmp	r6, ip
 8009052:	e9c4 2004 	strd	r2, r0, [r4, #16]
 8009056:	d0b6      	beq.n	8008fc6 <z_add_timeout+0xb6>
 8009058:	6836      	ldr	r6, [r6, #0]
 800905a:	e7b3      	b.n	8008fc4 <z_add_timeout+0xb4>
	__asm__ volatile(
 800905c:	f387 8811 	msr	BASEPRI, r7
 8009060:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8009064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009068:	08013455 	.word	0x08013455
 800906c:	08013431 	.word	0x08013431
 8009070:	080118c5 	.word	0x080118c5
 8009074:	0801329f 	.word	0x0801329f
 8009078:	20000c20 	.word	0x20000c20
 800907c:	08011b97 	.word	0x08011b97
 8009080:	08011bc4 	.word	0x08011bc4
 8009084:	08011bd9 	.word	0x08011bd9
 8009088:	200009e8 	.word	0x200009e8
 800908c:	20000108 	.word	0x20000108
 8009090:	20000be0 	.word	0x20000be0
 8009094:	08011bf1 	.word	0x08011bf1
 8009098:	08011c08 	.word	0x08011c08

0800909c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	4604      	mov	r4, r0
	__asm__ volatile(
 80090a0:	f04f 0310 	mov.w	r3, #16
 80090a4:	f3ef 8511 	mrs	r5, BASEPRI
 80090a8:	f383 8812 	msr	BASEPRI_MAX, r3
 80090ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80090b0:	4819      	ldr	r0, [pc, #100]	; (8009118 <z_abort_timeout+0x7c>)
 80090b2:	f7fe fb55 	bl	8007760 <z_spin_lock_valid>
 80090b6:	b968      	cbnz	r0, 80090d4 <z_abort_timeout+0x38>
 80090b8:	4a18      	ldr	r2, [pc, #96]	; (800911c <z_abort_timeout+0x80>)
 80090ba:	4919      	ldr	r1, [pc, #100]	; (8009120 <z_abort_timeout+0x84>)
 80090bc:	4819      	ldr	r0, [pc, #100]	; (8009124 <z_abort_timeout+0x88>)
 80090be:	238e      	movs	r3, #142	; 0x8e
 80090c0:	f002 f9a7 	bl	800b412 <assert_print>
 80090c4:	4914      	ldr	r1, [pc, #80]	; (8009118 <z_abort_timeout+0x7c>)
 80090c6:	4818      	ldr	r0, [pc, #96]	; (8009128 <z_abort_timeout+0x8c>)
 80090c8:	f002 f9a3 	bl	800b412 <assert_print>
 80090cc:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80090ce:	4813      	ldr	r0, [pc, #76]	; (800911c <z_abort_timeout+0x80>)
 80090d0:	f002 f998 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 80090d4:	4810      	ldr	r0, [pc, #64]	; (8009118 <z_abort_timeout+0x7c>)
 80090d6:	f7fe fb61 	bl	800779c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	b19b      	cbz	r3, 8009106 <z_abort_timeout+0x6a>
			remove_timeout(to);
 80090de:	4620      	mov	r0, r4
 80090e0:	f7ff fefa 	bl	8008ed8 <remove_timeout>
			ret = 0;
 80090e4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80090e6:	480c      	ldr	r0, [pc, #48]	; (8009118 <z_abort_timeout+0x7c>)
 80090e8:	f7fe fb48 	bl	800777c <z_spin_unlock_valid>
 80090ec:	b970      	cbnz	r0, 800910c <z_abort_timeout+0x70>
 80090ee:	4a0b      	ldr	r2, [pc, #44]	; (800911c <z_abort_timeout+0x80>)
 80090f0:	490e      	ldr	r1, [pc, #56]	; (800912c <z_abort_timeout+0x90>)
 80090f2:	480c      	ldr	r0, [pc, #48]	; (8009124 <z_abort_timeout+0x88>)
 80090f4:	23b9      	movs	r3, #185	; 0xb9
 80090f6:	f002 f98c 	bl	800b412 <assert_print>
 80090fa:	4907      	ldr	r1, [pc, #28]	; (8009118 <z_abort_timeout+0x7c>)
 80090fc:	480c      	ldr	r0, [pc, #48]	; (8009130 <z_abort_timeout+0x94>)
 80090fe:	f002 f988 	bl	800b412 <assert_print>
 8009102:	21b9      	movs	r1, #185	; 0xb9
 8009104:	e7e3      	b.n	80090ce <z_abort_timeout+0x32>
	int ret = -EINVAL;
 8009106:	f06f 0415 	mvn.w	r4, #21
 800910a:	e7ec      	b.n	80090e6 <z_abort_timeout+0x4a>
	__asm__ volatile(
 800910c:	f385 8811 	msr	BASEPRI, r5
 8009110:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
 8009114:	4620      	mov	r0, r4
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	20000c20 	.word	0x20000c20
 800911c:	08011b97 	.word	0x08011b97
 8009120:	08011bc4 	.word	0x08011bc4
 8009124:	080118c5 	.word	0x080118c5
 8009128:	08011bd9 	.word	0x08011bd9
 800912c:	08011bf1 	.word	0x08011bf1
 8009130:	08011c08 	.word	0x08011c08

08009134 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
 8009134:	b570      	push	{r4, r5, r6, lr}
 8009136:	4604      	mov	r4, r0
 8009138:	460d      	mov	r5, r1
	__asm__ volatile(
 800913a:	f04f 0310 	mov.w	r3, #16
 800913e:	f3ef 8611 	mrs	r6, BASEPRI
 8009142:	f383 8812 	msr	BASEPRI_MAX, r3
 8009146:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800914a:	481b      	ldr	r0, [pc, #108]	; (80091b8 <z_set_timeout_expiry+0x84>)
 800914c:	f7fe fb08 	bl	8007760 <z_spin_lock_valid>
 8009150:	b968      	cbnz	r0, 800916e <z_set_timeout_expiry+0x3a>
 8009152:	4a1a      	ldr	r2, [pc, #104]	; (80091bc <z_set_timeout_expiry+0x88>)
 8009154:	491a      	ldr	r1, [pc, #104]	; (80091c0 <z_set_timeout_expiry+0x8c>)
 8009156:	481b      	ldr	r0, [pc, #108]	; (80091c4 <z_set_timeout_expiry+0x90>)
 8009158:	238e      	movs	r3, #142	; 0x8e
 800915a:	f002 f95a 	bl	800b412 <assert_print>
 800915e:	4916      	ldr	r1, [pc, #88]	; (80091b8 <z_set_timeout_expiry+0x84>)
 8009160:	4819      	ldr	r0, [pc, #100]	; (80091c8 <z_set_timeout_expiry+0x94>)
 8009162:	f002 f956 	bl	800b412 <assert_print>
 8009166:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009168:	4814      	ldr	r0, [pc, #80]	; (80091bc <z_set_timeout_expiry+0x88>)
 800916a:	f002 f94b 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 800916e:	4812      	ldr	r0, [pc, #72]	; (80091b8 <z_set_timeout_expiry+0x84>)
 8009170:	f7fe fb14 	bl	800779c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
 8009174:	f7ff fe88 	bl	8008e88 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
 8009178:	2801      	cmp	r0, #1
 800917a:	dd07      	ble.n	800918c <z_set_timeout_expiry+0x58>
 800917c:	42a0      	cmp	r0, r4
 800917e:	db05      	blt.n	800918c <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8009180:	42a0      	cmp	r0, r4
 8009182:	4629      	mov	r1, r5
 8009184:	bfa8      	it	ge
 8009186:	4620      	movge	r0, r4
 8009188:	f7fd fe0c 	bl	8006da4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800918c:	480a      	ldr	r0, [pc, #40]	; (80091b8 <z_set_timeout_expiry+0x84>)
 800918e:	f7fe faf5 	bl	800777c <z_spin_unlock_valid>
 8009192:	b958      	cbnz	r0, 80091ac <z_set_timeout_expiry+0x78>
 8009194:	4a09      	ldr	r2, [pc, #36]	; (80091bc <z_set_timeout_expiry+0x88>)
 8009196:	490d      	ldr	r1, [pc, #52]	; (80091cc <z_set_timeout_expiry+0x98>)
 8009198:	480a      	ldr	r0, [pc, #40]	; (80091c4 <z_set_timeout_expiry+0x90>)
 800919a:	23b9      	movs	r3, #185	; 0xb9
 800919c:	f002 f939 	bl	800b412 <assert_print>
 80091a0:	4905      	ldr	r1, [pc, #20]	; (80091b8 <z_set_timeout_expiry+0x84>)
 80091a2:	480b      	ldr	r0, [pc, #44]	; (80091d0 <z_set_timeout_expiry+0x9c>)
 80091a4:	f002 f935 	bl	800b412 <assert_print>
 80091a8:	21b9      	movs	r1, #185	; 0xb9
 80091aa:	e7dd      	b.n	8009168 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
 80091ac:	f386 8811 	msr	BASEPRI, r6
 80091b0:	f3bf 8f6f 	isb	sy
		}
	}
}
 80091b4:	bd70      	pop	{r4, r5, r6, pc}
 80091b6:	bf00      	nop
 80091b8:	20000c20 	.word	0x20000c20
 80091bc:	08011b97 	.word	0x08011b97
 80091c0:	08011bc4 	.word	0x08011bc4
 80091c4:	080118c5 	.word	0x080118c5
 80091c8:	08011bd9 	.word	0x08011bd9
 80091cc:	08011bf1 	.word	0x08011bf1
 80091d0:	08011c08 	.word	0x08011c08

080091d4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
 80091d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 80091da:	f7ff f881 	bl	80082e0 <z_time_slice>
	__asm__ volatile(
 80091de:	f04f 0310 	mov.w	r3, #16
 80091e2:	f3ef 8711 	mrs	r7, BASEPRI
 80091e6:	f383 8812 	msr	BASEPRI_MAX, r3
 80091ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80091ee:	483f      	ldr	r0, [pc, #252]	; (80092ec <sys_clock_announce+0x118>)
 80091f0:	f7fe fab6 	bl	8007760 <z_spin_lock_valid>
 80091f4:	b968      	cbnz	r0, 8009212 <sys_clock_announce+0x3e>
 80091f6:	4a3e      	ldr	r2, [pc, #248]	; (80092f0 <sys_clock_announce+0x11c>)
 80091f8:	493e      	ldr	r1, [pc, #248]	; (80092f4 <sys_clock_announce+0x120>)
 80091fa:	483f      	ldr	r0, [pc, #252]	; (80092f8 <sys_clock_announce+0x124>)
 80091fc:	238e      	movs	r3, #142	; 0x8e
 80091fe:	f002 f908 	bl	800b412 <assert_print>
 8009202:	493a      	ldr	r1, [pc, #232]	; (80092ec <sys_clock_announce+0x118>)
 8009204:	483d      	ldr	r0, [pc, #244]	; (80092fc <sys_clock_announce+0x128>)
 8009206:	f002 f904 	bl	800b412 <assert_print>
 800920a:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800920c:	4838      	ldr	r0, [pc, #224]	; (80092f0 <sys_clock_announce+0x11c>)
 800920e:	f002 f8f9 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8009212:	4836      	ldr	r0, [pc, #216]	; (80092ec <sys_clock_announce+0x118>)
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8009214:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8009300 <sys_clock_announce+0x12c>
	return list->head == list;
 8009218:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8009304 <sys_clock_announce+0x130>
 800921c:	f7fe fabe 	bl	800779c <z_spin_lock_set_owner>
 8009220:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8009224:	4a38      	ldr	r2, [pc, #224]	; (8009308 <sys_clock_announce+0x134>)
	announce_remaining = ticks;
 8009226:	f8c8 4000 	str.w	r4, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800922a:	454d      	cmp	r5, r9
		curr_tick += dt;
 800922c:	e9d2 3c00 	ldrd	r3, ip, [r2]
 8009230:	ea4f 71e4 	mov.w	r1, r4, asr #31
 8009234:	d00b      	beq.n	800924e <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8009236:	b155      	cbz	r5, 800924e <sys_clock_announce+0x7a>
 8009238:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
 800923c:	42b4      	cmp	r4, r6
 800923e:	eb71 0e00 	sbcs.w	lr, r1, r0
 8009242:	da1b      	bge.n	800927c <sys_clock_announce+0xa8>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8009244:	1b36      	subs	r6, r6, r4
 8009246:	eb60 0001 	sbc.w	r0, r0, r1
 800924a:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
 800924e:	18e3      	adds	r3, r4, r3
 8009250:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
 8009254:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8009256:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
 800925a:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
 800925e:	f7ff fe13 	bl	8008e88 <next_timeout>
 8009262:	4621      	mov	r1, r4
 8009264:	f7fd fd9e 	bl	8006da4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009268:	4820      	ldr	r0, [pc, #128]	; (80092ec <sys_clock_announce+0x118>)
 800926a:	f7fe fa87 	bl	800777c <z_spin_unlock_valid>
 800926e:	b1a8      	cbz	r0, 800929c <sys_clock_announce+0xc8>
	__asm__ volatile(
 8009270:	f387 8811 	msr	BASEPRI, r7
 8009274:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8009278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 800927c:	18f3      	adds	r3, r6, r3
 800927e:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
 8009282:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
 8009286:	2200      	movs	r2, #0
 8009288:	2300      	movs	r3, #0
		remove_timeout(t);
 800928a:	4628      	mov	r0, r5
		t->dticks = 0;
 800928c:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
 8009290:	f7ff fe22 	bl	8008ed8 <remove_timeout>
 8009294:	4815      	ldr	r0, [pc, #84]	; (80092ec <sys_clock_announce+0x118>)
 8009296:	f7fe fa71 	bl	800777c <z_spin_unlock_valid>
 800929a:	b958      	cbnz	r0, 80092b4 <sys_clock_announce+0xe0>
 800929c:	4a14      	ldr	r2, [pc, #80]	; (80092f0 <sys_clock_announce+0x11c>)
 800929e:	491b      	ldr	r1, [pc, #108]	; (800930c <sys_clock_announce+0x138>)
 80092a0:	4815      	ldr	r0, [pc, #84]	; (80092f8 <sys_clock_announce+0x124>)
 80092a2:	23b9      	movs	r3, #185	; 0xb9
 80092a4:	f002 f8b5 	bl	800b412 <assert_print>
 80092a8:	4910      	ldr	r1, [pc, #64]	; (80092ec <sys_clock_announce+0x118>)
 80092aa:	4819      	ldr	r0, [pc, #100]	; (8009310 <sys_clock_announce+0x13c>)
 80092ac:	f002 f8b1 	bl	800b412 <assert_print>
 80092b0:	21b9      	movs	r1, #185	; 0xb9
 80092b2:	e7ab      	b.n	800920c <sys_clock_announce+0x38>
 80092b4:	f387 8811 	msr	BASEPRI, r7
 80092b8:	f3bf 8f6f 	isb	sy
		t->fn(t);
 80092bc:	68ab      	ldr	r3, [r5, #8]
 80092be:	4628      	mov	r0, r5
 80092c0:	4798      	blx	r3
	__asm__ volatile(
 80092c2:	f04f 0310 	mov.w	r3, #16
 80092c6:	f3ef 8711 	mrs	r7, BASEPRI
 80092ca:	f383 8812 	msr	BASEPRI_MAX, r3
 80092ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80092d2:	4806      	ldr	r0, [pc, #24]	; (80092ec <sys_clock_announce+0x118>)
 80092d4:	f7fe fa44 	bl	8007760 <z_spin_lock_valid>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d08c      	beq.n	80091f6 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
 80092dc:	4803      	ldr	r0, [pc, #12]	; (80092ec <sys_clock_announce+0x118>)
 80092de:	f7fe fa5d 	bl	800779c <z_spin_lock_set_owner>
		announce_remaining -= dt;
 80092e2:	f8d8 4000 	ldr.w	r4, [r8]
 80092e6:	1ba4      	subs	r4, r4, r6
 80092e8:	e79a      	b.n	8009220 <sys_clock_announce+0x4c>
 80092ea:	bf00      	nop
 80092ec:	20000c20 	.word	0x20000c20
 80092f0:	08011b97 	.word	0x08011b97
 80092f4:	08011bc4 	.word	0x08011bc4
 80092f8:	080118c5 	.word	0x080118c5
 80092fc:	08011bd9 	.word	0x08011bd9
 8009300:	20000c1c 	.word	0x20000c1c
 8009304:	20000108 	.word	0x20000108
 8009308:	200009e8 	.word	0x200009e8
 800930c:	08011bf1 	.word	0x08011bf1
 8009310:	08011c08 	.word	0x08011c08

08009314 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	f04f 0310 	mov.w	r3, #16
 800931a:	f3ef 8611 	mrs	r6, BASEPRI
 800931e:	f383 8812 	msr	BASEPRI_MAX, r3
 8009322:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8009326:	481a      	ldr	r0, [pc, #104]	; (8009390 <sys_clock_tick_get+0x7c>)
 8009328:	f7fe fa1a 	bl	8007760 <z_spin_lock_valid>
 800932c:	b968      	cbnz	r0, 800934a <sys_clock_tick_get+0x36>
 800932e:	4a19      	ldr	r2, [pc, #100]	; (8009394 <sys_clock_tick_get+0x80>)
 8009330:	4919      	ldr	r1, [pc, #100]	; (8009398 <sys_clock_tick_get+0x84>)
 8009332:	481a      	ldr	r0, [pc, #104]	; (800939c <sys_clock_tick_get+0x88>)
 8009334:	238e      	movs	r3, #142	; 0x8e
 8009336:	f002 f86c 	bl	800b412 <assert_print>
 800933a:	4915      	ldr	r1, [pc, #84]	; (8009390 <sys_clock_tick_get+0x7c>)
 800933c:	4818      	ldr	r0, [pc, #96]	; (80093a0 <sys_clock_tick_get+0x8c>)
 800933e:	f002 f868 	bl	800b412 <assert_print>
 8009342:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009344:	4813      	ldr	r0, [pc, #76]	; (8009394 <sys_clock_tick_get+0x80>)
 8009346:	f002 f85d 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 800934a:	4811      	ldr	r0, [pc, #68]	; (8009390 <sys_clock_tick_get+0x7c>)
 800934c:	f7fe fa26 	bl	800779c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 8009350:	f7ff fd90 	bl	8008e74 <elapsed>
 8009354:	4a13      	ldr	r2, [pc, #76]	; (80093a4 <sys_clock_tick_get+0x90>)
 8009356:	e9d2 4500 	ldrd	r4, r5, [r2]
 800935a:	1904      	adds	r4, r0, r4
 800935c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009360:	480b      	ldr	r0, [pc, #44]	; (8009390 <sys_clock_tick_get+0x7c>)
 8009362:	f7fe fa0b 	bl	800777c <z_spin_unlock_valid>
 8009366:	b958      	cbnz	r0, 8009380 <sys_clock_tick_get+0x6c>
 8009368:	4a0a      	ldr	r2, [pc, #40]	; (8009394 <sys_clock_tick_get+0x80>)
 800936a:	490f      	ldr	r1, [pc, #60]	; (80093a8 <sys_clock_tick_get+0x94>)
 800936c:	480b      	ldr	r0, [pc, #44]	; (800939c <sys_clock_tick_get+0x88>)
 800936e:	23b9      	movs	r3, #185	; 0xb9
 8009370:	f002 f84f 	bl	800b412 <assert_print>
 8009374:	4906      	ldr	r1, [pc, #24]	; (8009390 <sys_clock_tick_get+0x7c>)
 8009376:	480d      	ldr	r0, [pc, #52]	; (80093ac <sys_clock_tick_get+0x98>)
 8009378:	f002 f84b 	bl	800b412 <assert_print>
 800937c:	21b9      	movs	r1, #185	; 0xb9
 800937e:	e7e1      	b.n	8009344 <sys_clock_tick_get+0x30>
	__asm__ volatile(
 8009380:	f386 8811 	msr	BASEPRI, r6
 8009384:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8009388:	4620      	mov	r0, r4
 800938a:	4629      	mov	r1, r5
 800938c:	bd70      	pop	{r4, r5, r6, pc}
 800938e:	bf00      	nop
 8009390:	20000c20 	.word	0x20000c20
 8009394:	08011b97 	.word	0x08011b97
 8009398:	08011bc4 	.word	0x08011bc4
 800939c:	080118c5 	.word	0x080118c5
 80093a0:	08011bd9 	.word	0x08011bd9
 80093a4:	200009e8 	.word	0x200009e8
 80093a8:	08011bf1 	.word	0x08011bf1
 80093ac:	08011c08 	.word	0x08011c08

080093b0 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 80093b0:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 80093b2:	4604      	mov	r4, r0
 80093b4:	b178      	cbz	r0, 80093d6 <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 80093b6:	f7fd fde9 	bl	8006f8c <sys_clock_cycle_get_32>
 80093ba:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 80093bc:	4806      	ldr	r0, [pc, #24]	; (80093d8 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 80093be:	4a07      	ldr	r2, [pc, #28]	; (80093dc <z_impl_k_busy_wait+0x2c>)
 80093c0:	fba4 0100 	umull	r0, r1, r4, r0
 80093c4:	2300      	movs	r3, #0
 80093c6:	f7f7 fbcf 	bl	8000b68 <__aeabi_uldivmod>
 80093ca:	4604      	mov	r4, r0
 80093cc:	f7fd fdde 	bl	8006f8c <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 80093d0:	1b43      	subs	r3, r0, r5
 80093d2:	42a3      	cmp	r3, r4
 80093d4:	d3fa      	bcc.n	80093cc <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 80093d6:	bd38      	pop	{r3, r4, r5, pc}
 80093d8:	044aa200 	.word	0x044aa200
 80093dc:	000f4240 	.word	0x000f4240

080093e0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	4604      	mov	r4, r0
	__asm__ volatile(
 80093e4:	f04f 0310 	mov.w	r3, #16
 80093e8:	f3ef 8511 	mrs	r5, BASEPRI
 80093ec:	f383 8812 	msr	BASEPRI_MAX, r3
 80093f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80093f4:	4849      	ldr	r0, [pc, #292]	; (800951c <z_timer_expiration_handler+0x13c>)
 80093f6:	f7fe f9b3 	bl	8007760 <z_spin_lock_valid>
 80093fa:	b968      	cbnz	r0, 8009418 <z_timer_expiration_handler+0x38>
 80093fc:	4a48      	ldr	r2, [pc, #288]	; (8009520 <z_timer_expiration_handler+0x140>)
 80093fe:	4949      	ldr	r1, [pc, #292]	; (8009524 <z_timer_expiration_handler+0x144>)
 8009400:	4849      	ldr	r0, [pc, #292]	; (8009528 <z_timer_expiration_handler+0x148>)
 8009402:	238e      	movs	r3, #142	; 0x8e
 8009404:	f002 f805 	bl	800b412 <assert_print>
 8009408:	4944      	ldr	r1, [pc, #272]	; (800951c <z_timer_expiration_handler+0x13c>)
 800940a:	4848      	ldr	r0, [pc, #288]	; (800952c <z_timer_expiration_handler+0x14c>)
 800940c:	f002 f801 	bl	800b412 <assert_print>
 8009410:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009412:	4843      	ldr	r0, [pc, #268]	; (8009520 <z_timer_expiration_handler+0x140>)
 8009414:	f001 fff6 	bl	800b404 <assert_post_action>
	z_spin_lock_set_owner(l);
 8009418:	4840      	ldr	r0, [pc, #256]	; (800951c <z_timer_expiration_handler+0x13c>)
 800941a:	f7fe f9bf 	bl	800779c <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800941e:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 8009422:	3301      	adds	r3, #1
 8009424:	f142 0200 	adc.w	r2, r2, #0
 8009428:	2b02      	cmp	r3, #2
 800942a:	f172 0200 	sbcs.w	r2, r2, #0
 800942e:	d322      	bcc.n	8009476 <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
 8009430:	f002 ff0c 	bl	800c24c <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
 8009434:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 8009438:	3001      	adds	r0, #1
 800943a:	f141 0100 	adc.w	r1, r1, #0
 800943e:	18c0      	adds	r0, r0, r3
 8009440:	eb41 0102 	adc.w	r1, r1, r2
 8009444:	2801      	cmp	r0, #1
 8009446:	f171 0100 	sbcs.w	r1, r1, #0
 800944a:	db29      	blt.n	80094a0 <z_timer_expiration_handler+0xc0>
 800944c:	f002 fefe 	bl	800c24c <z_impl_k_uptime_ticks>
 8009450:	3001      	adds	r0, #1
 8009452:	f141 0300 	adc.w	r3, r1, #0
 8009456:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800945a:	1880      	adds	r0, r0, r2
 800945c:	f06f 0201 	mvn.w	r2, #1
 8009460:	eb43 0301 	adc.w	r3, r3, r1
 8009464:	1a12      	subs	r2, r2, r0
 8009466:	f04f 31ff 	mov.w	r1, #4294967295
 800946a:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800946e:	4930      	ldr	r1, [pc, #192]	; (8009530 <z_timer_expiration_handler+0x150>)
 8009470:	4620      	mov	r0, r4
 8009472:	f7ff fd4d 	bl	8008f10 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
 8009476:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009478:	3301      	adds	r3, #1
 800947a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 800947c:	6a23      	ldr	r3, [r4, #32]
 800947e:	b35b      	cbz	r3, 80094d8 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8009480:	4826      	ldr	r0, [pc, #152]	; (800951c <z_timer_expiration_handler+0x13c>)
 8009482:	f7fe f97b 	bl	800777c <z_spin_unlock_valid>
 8009486:	b980      	cbnz	r0, 80094aa <z_timer_expiration_handler+0xca>
 8009488:	4a25      	ldr	r2, [pc, #148]	; (8009520 <z_timer_expiration_handler+0x140>)
 800948a:	492a      	ldr	r1, [pc, #168]	; (8009534 <z_timer_expiration_handler+0x154>)
 800948c:	4826      	ldr	r0, [pc, #152]	; (8009528 <z_timer_expiration_handler+0x148>)
 800948e:	23b9      	movs	r3, #185	; 0xb9
 8009490:	f001 ffbf 	bl	800b412 <assert_print>
 8009494:	4921      	ldr	r1, [pc, #132]	; (800951c <z_timer_expiration_handler+0x13c>)
 8009496:	4828      	ldr	r0, [pc, #160]	; (8009538 <z_timer_expiration_handler+0x158>)
 8009498:	f001 ffbb 	bl	800b412 <assert_print>
 800949c:	21b9      	movs	r1, #185	; 0xb9
 800949e:	e7b8      	b.n	8009412 <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
 80094a0:	f06f 0201 	mvn.w	r2, #1
 80094a4:	f04f 33ff 	mov.w	r3, #4294967295
 80094a8:	e7e1      	b.n	800946e <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
 80094aa:	f385 8811 	msr	BASEPRI, r5
 80094ae:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 80094b2:	6a23      	ldr	r3, [r4, #32]
 80094b4:	4620      	mov	r0, r4
 80094b6:	4798      	blx	r3
	__asm__ volatile(
 80094b8:	f04f 0310 	mov.w	r3, #16
 80094bc:	f3ef 8511 	mrs	r5, BASEPRI
 80094c0:	f383 8812 	msr	BASEPRI_MAX, r3
 80094c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80094c8:	4814      	ldr	r0, [pc, #80]	; (800951c <z_timer_expiration_handler+0x13c>)
 80094ca:	f7fe f949 	bl	8007760 <z_spin_lock_valid>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d094      	beq.n	80093fc <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
 80094d2:	4812      	ldr	r0, [pc, #72]	; (800951c <z_timer_expiration_handler+0x13c>)
 80094d4:	f7fe f962 	bl	800779c <z_spin_lock_set_owner>
	return list->head == list;
 80094d8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80094dc:	42a6      	cmp	r6, r4
 80094de:	d000      	beq.n	80094e2 <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 80094e0:	b94e      	cbnz	r6, 80094f6 <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80094e2:	480e      	ldr	r0, [pc, #56]	; (800951c <z_timer_expiration_handler+0x13c>)
 80094e4:	f7fe f94a 	bl	800777c <z_spin_unlock_valid>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d0cd      	beq.n	8009488 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
 80094ec:	f385 8811 	msr	BASEPRI, r5
 80094f0:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 80094f4:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
 80094f6:	4630      	mov	r0, r6
 80094f8:	f7fe fcc6 	bl	8007e88 <z_unpend_thread_no_timeout>
 80094fc:	2300      	movs	r3, #0
 80094fe:	4807      	ldr	r0, [pc, #28]	; (800951c <z_timer_expiration_handler+0x13c>)
 8009500:	67b3      	str	r3, [r6, #120]	; 0x78
 8009502:	f7fe f93b 	bl	800777c <z_spin_unlock_valid>
 8009506:	2800      	cmp	r0, #0
 8009508:	d0be      	beq.n	8009488 <z_timer_expiration_handler+0xa8>
 800950a:	f385 8811 	msr	BASEPRI, r5
 800950e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 8009512:	4630      	mov	r0, r6
}
 8009514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
 8009518:	f7fe bc70 	b.w	8007dfc <z_ready_thread>
 800951c:	20000c24 	.word	0x20000c24
 8009520:	08011b97 	.word	0x08011b97
 8009524:	08011bc4 	.word	0x08011bc4
 8009528:	080118c5 	.word	0x080118c5
 800952c:	08011bd9 	.word	0x08011bd9
 8009530:	080093e1 	.word	0x080093e1
 8009534:	08011bf1 	.word	0x08011bf1
 8009538:	08011c08 	.word	0x08011c08

0800953c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800953c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8009540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009544:	bf08      	it	eq
 8009546:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 800954a:	4605      	mov	r5, r0
 800954c:	4614      	mov	r4, r2
 800954e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
 8009552:	4619      	mov	r1, r3
 8009554:	4691      	mov	r9, r2
 8009556:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8009558:	d037      	beq.n	80095ca <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800955a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800955e:	bf08      	it	eq
 8009560:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 8009564:	4637      	mov	r7, r6
 8009566:	4682      	mov	sl, r0
 8009568:	d011      	beq.n	800958e <z_impl_k_timer_start+0x52>
 800956a:	ea50 0306 	orrs.w	r3, r0, r6
 800956e:	d00e      	beq.n	800958e <z_impl_k_timer_start+0x52>
 8009570:	1c72      	adds	r2, r6, #1
 8009572:	f170 33ff 	sbcs.w	r3, r0, #4294967295
 8009576:	db0a      	blt.n	800958e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
 8009578:	2e02      	cmp	r6, #2
 800957a:	4684      	mov	ip, r0
 800957c:	f170 0000 	sbcs.w	r0, r0, #0
 8009580:	bfbc      	itt	lt
 8009582:	2702      	movlt	r7, #2
 8009584:	f04f 0c00 	movlt.w	ip, #0
 8009588:	3f01      	subs	r7, #1
 800958a:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800958e:	1c63      	adds	r3, r4, #1
 8009590:	f171 33ff 	sbcs.w	r3, r1, #4294967295
 8009594:	db0a      	blt.n	80095ac <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8009596:	2c01      	cmp	r4, #1
 8009598:	f171 0300 	sbcs.w	r3, r1, #0
 800959c:	4622      	mov	r2, r4
 800959e:	bfbc      	itt	lt
 80095a0:	2201      	movlt	r2, #1
 80095a2:	2100      	movlt	r1, #0
 80095a4:	f112 39ff 	adds.w	r9, r2, #4294967295
 80095a8:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
 80095ac:	4628      	mov	r0, r5
 80095ae:	f7ff fd75 	bl	800909c <z_abort_timeout>
	timer->period = period;
 80095b2:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80095ba:	464a      	mov	r2, r9
 80095bc:	4643      	mov	r3, r8
 80095be:	4628      	mov	r0, r5
 80095c0:	4903      	ldr	r1, [pc, #12]	; (80095d0 <z_impl_k_timer_start+0x94>)
		     duration);
}
 80095c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80095c6:	f7ff bca3 	b.w	8008f10 <z_add_timeout>
}
 80095ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ce:	bf00      	nop
 80095d0:	080093e1 	.word	0x080093e1

080095d4 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 80095d4:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
 80095d6:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80095da:	4606      	mov	r6, r0
 80095dc:	460d      	mov	r5, r1
 80095de:	d220      	bcs.n	8009622 <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 80095e0:	f04f 0800 	mov.w	r8, #0
 80095e4:	f04f 0900 	mov.w	r9, #0
 80095e8:	e9cd 8900 	strd	r8, r9, [sp]
 80095ec:	f041 0104 	orr.w	r1, r1, #4
 80095f0:	f000 f894 	bl	800971c <k_heap_aligned_alloc>
	if (mem == NULL) {
 80095f4:	4604      	mov	r4, r0
 80095f6:	b1a0      	cbz	r0, 8009622 <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
 80095f8:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
 80095fc:	b195      	cbz	r5, 8009624 <z_heap_aligned_alloc+0x50>
 80095fe:	1e6b      	subs	r3, r5, #1
 8009600:	421c      	tst	r4, r3
 8009602:	d00f      	beq.n	8009624 <z_heap_aligned_alloc+0x50>
 8009604:	4a09      	ldr	r2, [pc, #36]	; (800962c <z_heap_aligned_alloc+0x58>)
 8009606:	490a      	ldr	r1, [pc, #40]	; (8009630 <z_heap_aligned_alloc+0x5c>)
 8009608:	480a      	ldr	r0, [pc, #40]	; (8009634 <z_heap_aligned_alloc+0x60>)
 800960a:	2325      	movs	r3, #37	; 0x25
 800960c:	f001 ff01 	bl	800b412 <assert_print>
 8009610:	4809      	ldr	r0, [pc, #36]	; (8009638 <z_heap_aligned_alloc+0x64>)
 8009612:	4621      	mov	r1, r4
 8009614:	462a      	mov	r2, r5
 8009616:	f001 fefc 	bl	800b412 <assert_print>
 800961a:	4804      	ldr	r0, [pc, #16]	; (800962c <z_heap_aligned_alloc+0x58>)
 800961c:	2125      	movs	r1, #37	; 0x25
 800961e:	f001 fef1 	bl	800b404 <assert_post_action>
		return NULL;
 8009622:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
 8009624:	4620      	mov	r0, r4
 8009626:	b002      	add	sp, #8
 8009628:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800962c:	08013475 	.word	0x08013475
 8009630:	08013499 	.word	0x08013499
 8009634:	080118c5 	.word	0x080118c5
 8009638:	080134cb 	.word	0x080134cb

0800963c <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
 800963c:	2803      	cmp	r0, #3
{
 800963e:	b508      	push	{r3, lr}
 8009640:	460a      	mov	r2, r1
	__ASSERT(align / sizeof(void *) >= 1
 8009642:	d901      	bls.n	8009648 <k_aligned_alloc+0xc>
 8009644:	0783      	lsls	r3, r0, #30
 8009646:	d00c      	beq.n	8009662 <k_aligned_alloc+0x26>
 8009648:	4910      	ldr	r1, [pc, #64]	; (800968c <k_aligned_alloc+0x50>)
 800964a:	4a11      	ldr	r2, [pc, #68]	; (8009690 <k_aligned_alloc+0x54>)
 800964c:	4811      	ldr	r0, [pc, #68]	; (8009694 <k_aligned_alloc+0x58>)
 800964e:	2342      	movs	r3, #66	; 0x42
 8009650:	f001 fedf 	bl	800b412 <assert_print>
 8009654:	4810      	ldr	r0, [pc, #64]	; (8009698 <k_aligned_alloc+0x5c>)
 8009656:	f001 fedc 	bl	800b412 <assert_print>
 800965a:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
 800965c:	480c      	ldr	r0, [pc, #48]	; (8009690 <k_aligned_alloc+0x54>)
 800965e:	f001 fed1 	bl	800b404 <assert_post_action>
 8009662:	1e43      	subs	r3, r0, #1
 8009664:	4203      	tst	r3, r0
 8009666:	d00a      	beq.n	800967e <k_aligned_alloc+0x42>
 8009668:	490c      	ldr	r1, [pc, #48]	; (800969c <k_aligned_alloc+0x60>)
 800966a:	4a09      	ldr	r2, [pc, #36]	; (8009690 <k_aligned_alloc+0x54>)
 800966c:	4809      	ldr	r0, [pc, #36]	; (8009694 <k_aligned_alloc+0x58>)
 800966e:	2346      	movs	r3, #70	; 0x46
 8009670:	f001 fecf 	bl	800b412 <assert_print>
 8009674:	480a      	ldr	r0, [pc, #40]	; (80096a0 <k_aligned_alloc+0x64>)
 8009676:	f001 fecc 	bl	800b412 <assert_print>
 800967a:	2146      	movs	r1, #70	; 0x46
 800967c:	e7ee      	b.n	800965c <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
 800967e:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
 8009680:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
 8009684:	4807      	ldr	r0, [pc, #28]	; (80096a4 <k_aligned_alloc+0x68>)
 8009686:	f7ff bfa5 	b.w	80095d4 <z_heap_aligned_alloc>
 800968a:	bf00      	nop
 800968c:	080134f3 	.word	0x080134f3
 8009690:	08013475 	.word	0x08013475
 8009694:	080118c5 	.word	0x080118c5
 8009698:	08013530 	.word	0x08013530
 800969c:	08011a6f 	.word	0x08011a6f
 80096a0:	08011a8a 	.word	0x08011a8a
 80096a4:	20000348 	.word	0x20000348

080096a8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
 80096a8:	4b01      	ldr	r3, [pc, #4]	; (80096b0 <k_thread_system_pool_assign+0x8>)
 80096aa:	6703      	str	r3, [r0, #112]	; 0x70
}
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20000348 	.word	0x20000348

080096b4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 80096b4:	4a02      	ldr	r2, [pc, #8]	; (80096c0 <boot_banner+0xc>)
 80096b6:	4903      	ldr	r1, [pc, #12]	; (80096c4 <boot_banner+0x10>)
 80096b8:	4803      	ldr	r0, [pc, #12]	; (80096c8 <boot_banner+0x14>)
 80096ba:	f001 bd76 	b.w	800b1aa <printk>
 80096be:	bf00      	nop
 80096c0:	080132a1 	.word	0x080132a1
 80096c4:	0801355d 	.word	0x0801355d
 80096c8:	08013579 	.word	0x08013579

080096cc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 80096cc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 80096ce:	4c0d      	ldr	r4, [pc, #52]	; (8009704 <statics_init+0x38>)
 80096d0:	4d0d      	ldr	r5, [pc, #52]	; (8009708 <statics_init+0x3c>)
 80096d2:	42ac      	cmp	r4, r5
 80096d4:	d913      	bls.n	80096fe <statics_init+0x32>
 80096d6:	490d      	ldr	r1, [pc, #52]	; (800970c <statics_init+0x40>)
 80096d8:	4a0d      	ldr	r2, [pc, #52]	; (8009710 <statics_init+0x44>)
 80096da:	480e      	ldr	r0, [pc, #56]	; (8009714 <statics_init+0x48>)
 80096dc:	2318      	movs	r3, #24
 80096de:	f001 fe98 	bl	800b412 <assert_print>
 80096e2:	480d      	ldr	r0, [pc, #52]	; (8009718 <statics_init+0x4c>)
 80096e4:	f001 fe95 	bl	800b412 <assert_print>
 80096e8:	4809      	ldr	r0, [pc, #36]	; (8009710 <statics_init+0x44>)
 80096ea:	2118      	movs	r1, #24
 80096ec:	f001 fe8a 	bl	800b404 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 80096f0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80096f4:	4620      	mov	r0, r4
 80096f6:	f002 fdfa 	bl	800c2ee <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 80096fa:	3418      	adds	r4, #24
 80096fc:	e7e9      	b.n	80096d2 <statics_init+0x6>
 80096fe:	d3f7      	bcc.n	80096f0 <statics_init+0x24>
		}
	}
	return 0;
}
 8009700:	2000      	movs	r0, #0
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	20000348 	.word	0x20000348
 8009708:	20000360 	.word	0x20000360
 800970c:	080135c2 	.word	0x080135c2
 8009710:	080135a0 	.word	0x080135a0
 8009714:	080118c5 	.word	0x080118c5
 8009718:	0801316b 	.word	0x0801316b

0800971c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 800971c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009720:	b085      	sub	sp, #20
 8009722:	e9dd b90e 	ldrd	fp, r9, [sp, #56]	; 0x38
 8009726:	4607      	mov	r7, r0
 8009728:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800972a:	4658      	mov	r0, fp
 800972c:	4649      	mov	r1, r9
{
 800972e:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 8009730:	f002 fd8e 	bl	800c250 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 8009734:	f107 0414 	add.w	r4, r7, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 8009738:	4606      	mov	r6, r0
 800973a:	4688      	mov	r8, r1
	__asm__ volatile(
 800973c:	f04f 0310 	mov.w	r3, #16
 8009740:	f3ef 8511 	mrs	r5, BASEPRI
 8009744:	f383 8812 	msr	BASEPRI_MAX, r3
 8009748:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800974c:	4620      	mov	r0, r4
 800974e:	f7fe f807 	bl	8007760 <z_spin_lock_valid>
 8009752:	b960      	cbnz	r0, 800976e <k_heap_aligned_alloc+0x52>
 8009754:	4a33      	ldr	r2, [pc, #204]	; (8009824 <k_heap_aligned_alloc+0x108>)
 8009756:	4934      	ldr	r1, [pc, #208]	; (8009828 <k_heap_aligned_alloc+0x10c>)
 8009758:	4834      	ldr	r0, [pc, #208]	; (800982c <k_heap_aligned_alloc+0x110>)
 800975a:	238e      	movs	r3, #142	; 0x8e
 800975c:	f001 fe59 	bl	800b412 <assert_print>
 8009760:	4621      	mov	r1, r4
 8009762:	4833      	ldr	r0, [pc, #204]	; (8009830 <k_heap_aligned_alloc+0x114>)
 8009764:	f001 fe55 	bl	800b412 <assert_print>
 8009768:	218e      	movs	r1, #142	; 0x8e
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800976a:	482e      	ldr	r0, [pc, #184]	; (8009824 <k_heap_aligned_alloc+0x108>)
 800976c:	e031      	b.n	80097d2 <k_heap_aligned_alloc+0xb6>
	z_spin_lock_set_owner(l);
 800976e:	4620      	mov	r0, r4
 8009770:	f7fe f814 	bl	800779c <z_spin_lock_set_owner>
 8009774:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
 8009778:	b113      	cbz	r3, 8009780 <k_heap_aligned_alloc+0x64>
 800977a:	ea5b 0909 	orrs.w	r9, fp, r9
 800977e:	d11d      	bne.n	80097bc <k_heap_aligned_alloc+0xa0>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 8009780:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 8009784:	9903      	ldr	r1, [sp, #12]
 8009786:	4652      	mov	r2, sl
 8009788:	4638      	mov	r0, r7
 800978a:	f7f8 fe4b 	bl	8002424 <sys_heap_aligned_alloc>
 800978e:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
 8009790:	f7ff fdc0 	bl	8009314 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 8009794:	f1b9 0f00 	cmp.w	r9, #0
 8009798:	d01d      	beq.n	80097d6 <k_heap_aligned_alloc+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800979a:	4620      	mov	r0, r4
 800979c:	f7fd ffee 	bl	800777c <z_spin_unlock_valid>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d137      	bne.n	8009814 <k_heap_aligned_alloc+0xf8>
 80097a4:	4a1f      	ldr	r2, [pc, #124]	; (8009824 <k_heap_aligned_alloc+0x108>)
 80097a6:	4923      	ldr	r1, [pc, #140]	; (8009834 <k_heap_aligned_alloc+0x118>)
 80097a8:	4820      	ldr	r0, [pc, #128]	; (800982c <k_heap_aligned_alloc+0x110>)
 80097aa:	23b9      	movs	r3, #185	; 0xb9
 80097ac:	f001 fe31 	bl	800b412 <assert_print>
 80097b0:	4621      	mov	r1, r4
 80097b2:	4821      	ldr	r0, [pc, #132]	; (8009838 <k_heap_aligned_alloc+0x11c>)
 80097b4:	f001 fe2d 	bl	800b412 <assert_print>
 80097b8:	21b9      	movs	r1, #185	; 0xb9
 80097ba:	e7d6      	b.n	800976a <k_heap_aligned_alloc+0x4e>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
 80097bc:	491f      	ldr	r1, [pc, #124]	; (800983c <k_heap_aligned_alloc+0x120>)
 80097be:	4a20      	ldr	r2, [pc, #128]	; (8009840 <k_heap_aligned_alloc+0x124>)
 80097c0:	481a      	ldr	r0, [pc, #104]	; (800982c <k_heap_aligned_alloc+0x110>)
 80097c2:	2349      	movs	r3, #73	; 0x49
 80097c4:	f001 fe25 	bl	800b412 <assert_print>
 80097c8:	481e      	ldr	r0, [pc, #120]	; (8009844 <k_heap_aligned_alloc+0x128>)
 80097ca:	f001 fe22 	bl	800b412 <assert_print>
 80097ce:	481c      	ldr	r0, [pc, #112]	; (8009840 <k_heap_aligned_alloc+0x124>)
 80097d0:	2149      	movs	r1, #73	; 0x49
 80097d2:	f001 fe17 	bl	800b404 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
 80097d6:	1a30      	subs	r0, r6, r0
 80097d8:	eb68 0101 	sbc.w	r1, r8, r1
 80097dc:	2801      	cmp	r0, #1
 80097de:	f171 0300 	sbcs.w	r3, r1, #0
 80097e2:	dbda      	blt.n	800979a <k_heap_aligned_alloc+0x7e>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 80097e4:	e9cd 0100 	strd	r0, r1, [sp]
 80097e8:	465a      	mov	r2, fp
 80097ea:	4629      	mov	r1, r5
 80097ec:	4620      	mov	r0, r4
 80097ee:	f7fe fea3 	bl	8008538 <z_pend_curr>
 80097f2:	f04f 0310 	mov.w	r3, #16
 80097f6:	f3ef 8511 	mrs	r5, BASEPRI
 80097fa:	f383 8812 	msr	BASEPRI_MAX, r3
 80097fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8009802:	4620      	mov	r0, r4
 8009804:	f7fd ffac 	bl	8007760 <z_spin_lock_valid>
 8009808:	2800      	cmp	r0, #0
 800980a:	d0a3      	beq.n	8009754 <k_heap_aligned_alloc+0x38>
	z_spin_lock_set_owner(l);
 800980c:	4620      	mov	r0, r4
 800980e:	f7fd ffc5 	bl	800779c <z_spin_lock_set_owner>
	return k;
 8009812:	e7b7      	b.n	8009784 <k_heap_aligned_alloc+0x68>
	__asm__ volatile(
 8009814:	f385 8811 	msr	BASEPRI, r5
 8009818:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 800981c:	4648      	mov	r0, r9
 800981e:	b005      	add	sp, #20
 8009820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009824:	08011b97 	.word	0x08011b97
 8009828:	08011bc4 	.word	0x08011bc4
 800982c:	080118c5 	.word	0x080118c5
 8009830:	08011bd9 	.word	0x08011bd9
 8009834:	08011bf1 	.word	0x08011bf1
 8009838:	08011c08 	.word	0x08011c08
 800983c:	080135d8 	.word	0x080135d8
 8009840:	080135a0 	.word	0x080135a0
 8009844:	0801329f 	.word	0x0801329f

08009848 <fiprintf>:
 8009848:	b40e      	push	{r1, r2, r3}
 800984a:	b503      	push	{r0, r1, lr}
 800984c:	4601      	mov	r1, r0
 800984e:	ab03      	add	r3, sp, #12
 8009850:	4805      	ldr	r0, [pc, #20]	; (8009868 <fiprintf+0x20>)
 8009852:	f853 2b04 	ldr.w	r2, [r3], #4
 8009856:	6800      	ldr	r0, [r0, #0]
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	f000 f8b3 	bl	80099c4 <_vfiprintf_r>
 800985e:	b002      	add	sp, #8
 8009860:	f85d eb04 	ldr.w	lr, [sp], #4
 8009864:	b003      	add	sp, #12
 8009866:	4770      	bx	lr
 8009868:	20000110 	.word	0x20000110

0800986c <malloc>:
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <malloc+0xc>)
 800986e:	4601      	mov	r1, r0
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	f000 b84d 	b.w	8009910 <_malloc_r>
 8009876:	bf00      	nop
 8009878:	20000110 	.word	0x20000110

0800987c <_free_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4605      	mov	r5, r0
 8009880:	2900      	cmp	r1, #0
 8009882:	d041      	beq.n	8009908 <_free_r+0x8c>
 8009884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009888:	1f0c      	subs	r4, r1, #4
 800988a:	2b00      	cmp	r3, #0
 800988c:	bfb8      	it	lt
 800988e:	18e4      	addlt	r4, r4, r3
 8009890:	f000 ff7c 	bl	800a78c <__malloc_lock>
 8009894:	4a1d      	ldr	r2, [pc, #116]	; (800990c <_free_r+0x90>)
 8009896:	6813      	ldr	r3, [r2, #0]
 8009898:	b933      	cbnz	r3, 80098a8 <_free_r+0x2c>
 800989a:	6063      	str	r3, [r4, #4]
 800989c:	6014      	str	r4, [r2, #0]
 800989e:	4628      	mov	r0, r5
 80098a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098a4:	f000 bf78 	b.w	800a798 <__malloc_unlock>
 80098a8:	42a3      	cmp	r3, r4
 80098aa:	d908      	bls.n	80098be <_free_r+0x42>
 80098ac:	6820      	ldr	r0, [r4, #0]
 80098ae:	1821      	adds	r1, r4, r0
 80098b0:	428b      	cmp	r3, r1
 80098b2:	bf01      	itttt	eq
 80098b4:	6819      	ldreq	r1, [r3, #0]
 80098b6:	685b      	ldreq	r3, [r3, #4]
 80098b8:	1809      	addeq	r1, r1, r0
 80098ba:	6021      	streq	r1, [r4, #0]
 80098bc:	e7ed      	b.n	800989a <_free_r+0x1e>
 80098be:	461a      	mov	r2, r3
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	b10b      	cbz	r3, 80098c8 <_free_r+0x4c>
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	d9fa      	bls.n	80098be <_free_r+0x42>
 80098c8:	6811      	ldr	r1, [r2, #0]
 80098ca:	1850      	adds	r0, r2, r1
 80098cc:	42a0      	cmp	r0, r4
 80098ce:	d10b      	bne.n	80098e8 <_free_r+0x6c>
 80098d0:	6820      	ldr	r0, [r4, #0]
 80098d2:	4401      	add	r1, r0
 80098d4:	1850      	adds	r0, r2, r1
 80098d6:	4283      	cmp	r3, r0
 80098d8:	6011      	str	r1, [r2, #0]
 80098da:	d1e0      	bne.n	800989e <_free_r+0x22>
 80098dc:	6818      	ldr	r0, [r3, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	6053      	str	r3, [r2, #4]
 80098e2:	4408      	add	r0, r1
 80098e4:	6010      	str	r0, [r2, #0]
 80098e6:	e7da      	b.n	800989e <_free_r+0x22>
 80098e8:	d902      	bls.n	80098f0 <_free_r+0x74>
 80098ea:	230c      	movs	r3, #12
 80098ec:	602b      	str	r3, [r5, #0]
 80098ee:	e7d6      	b.n	800989e <_free_r+0x22>
 80098f0:	6820      	ldr	r0, [r4, #0]
 80098f2:	1821      	adds	r1, r4, r0
 80098f4:	428b      	cmp	r3, r1
 80098f6:	bf04      	itt	eq
 80098f8:	6819      	ldreq	r1, [r3, #0]
 80098fa:	685b      	ldreq	r3, [r3, #4]
 80098fc:	6063      	str	r3, [r4, #4]
 80098fe:	bf04      	itt	eq
 8009900:	1809      	addeq	r1, r1, r0
 8009902:	6021      	streq	r1, [r4, #0]
 8009904:	6054      	str	r4, [r2, #4]
 8009906:	e7ca      	b.n	800989e <_free_r+0x22>
 8009908:	bd38      	pop	{r3, r4, r5, pc}
 800990a:	bf00      	nop
 800990c:	20000c2c 	.word	0x20000c2c

08009910 <_malloc_r>:
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	1ccd      	adds	r5, r1, #3
 8009914:	f025 0503 	bic.w	r5, r5, #3
 8009918:	3508      	adds	r5, #8
 800991a:	2d0c      	cmp	r5, #12
 800991c:	bf38      	it	cc
 800991e:	250c      	movcc	r5, #12
 8009920:	2d00      	cmp	r5, #0
 8009922:	4606      	mov	r6, r0
 8009924:	db01      	blt.n	800992a <_malloc_r+0x1a>
 8009926:	42a9      	cmp	r1, r5
 8009928:	d903      	bls.n	8009932 <_malloc_r+0x22>
 800992a:	230c      	movs	r3, #12
 800992c:	6033      	str	r3, [r6, #0]
 800992e:	2000      	movs	r0, #0
 8009930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009932:	f000 ff2b 	bl	800a78c <__malloc_lock>
 8009936:	4921      	ldr	r1, [pc, #132]	; (80099bc <_malloc_r+0xac>)
 8009938:	680a      	ldr	r2, [r1, #0]
 800993a:	4614      	mov	r4, r2
 800993c:	b99c      	cbnz	r4, 8009966 <_malloc_r+0x56>
 800993e:	4f20      	ldr	r7, [pc, #128]	; (80099c0 <_malloc_r+0xb0>)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	b923      	cbnz	r3, 800994e <_malloc_r+0x3e>
 8009944:	4621      	mov	r1, r4
 8009946:	4630      	mov	r0, r6
 8009948:	f000 fce4 	bl	800a314 <_sbrk_r>
 800994c:	6038      	str	r0, [r7, #0]
 800994e:	4629      	mov	r1, r5
 8009950:	4630      	mov	r0, r6
 8009952:	f000 fcdf 	bl	800a314 <_sbrk_r>
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	d123      	bne.n	80099a2 <_malloc_r+0x92>
 800995a:	230c      	movs	r3, #12
 800995c:	6033      	str	r3, [r6, #0]
 800995e:	4630      	mov	r0, r6
 8009960:	f000 ff1a 	bl	800a798 <__malloc_unlock>
 8009964:	e7e3      	b.n	800992e <_malloc_r+0x1e>
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	1b5b      	subs	r3, r3, r5
 800996a:	d417      	bmi.n	800999c <_malloc_r+0x8c>
 800996c:	2b0b      	cmp	r3, #11
 800996e:	d903      	bls.n	8009978 <_malloc_r+0x68>
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	441c      	add	r4, r3
 8009974:	6025      	str	r5, [r4, #0]
 8009976:	e004      	b.n	8009982 <_malloc_r+0x72>
 8009978:	6863      	ldr	r3, [r4, #4]
 800997a:	42a2      	cmp	r2, r4
 800997c:	bf0c      	ite	eq
 800997e:	600b      	streq	r3, [r1, #0]
 8009980:	6053      	strne	r3, [r2, #4]
 8009982:	4630      	mov	r0, r6
 8009984:	f000 ff08 	bl	800a798 <__malloc_unlock>
 8009988:	f104 000b 	add.w	r0, r4, #11
 800998c:	1d23      	adds	r3, r4, #4
 800998e:	f020 0007 	bic.w	r0, r0, #7
 8009992:	1ac2      	subs	r2, r0, r3
 8009994:	bf1c      	itt	ne
 8009996:	1a1b      	subne	r3, r3, r0
 8009998:	50a3      	strne	r3, [r4, r2]
 800999a:	e7c9      	b.n	8009930 <_malloc_r+0x20>
 800999c:	4622      	mov	r2, r4
 800999e:	6864      	ldr	r4, [r4, #4]
 80099a0:	e7cc      	b.n	800993c <_malloc_r+0x2c>
 80099a2:	1cc4      	adds	r4, r0, #3
 80099a4:	f024 0403 	bic.w	r4, r4, #3
 80099a8:	42a0      	cmp	r0, r4
 80099aa:	d0e3      	beq.n	8009974 <_malloc_r+0x64>
 80099ac:	1a21      	subs	r1, r4, r0
 80099ae:	4630      	mov	r0, r6
 80099b0:	f000 fcb0 	bl	800a314 <_sbrk_r>
 80099b4:	3001      	adds	r0, #1
 80099b6:	d1dd      	bne.n	8009974 <_malloc_r+0x64>
 80099b8:	e7cf      	b.n	800995a <_malloc_r+0x4a>
 80099ba:	bf00      	nop
 80099bc:	20000c2c 	.word	0x20000c2c
 80099c0:	20000c28 	.word	0x20000c28

080099c4 <_vfiprintf_r>:
 80099c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c8:	460d      	mov	r5, r1
 80099ca:	b09d      	sub	sp, #116	; 0x74
 80099cc:	4614      	mov	r4, r2
 80099ce:	4698      	mov	r8, r3
 80099d0:	4606      	mov	r6, r0
 80099d2:	b118      	cbz	r0, 80099dc <_vfiprintf_r+0x18>
 80099d4:	6983      	ldr	r3, [r0, #24]
 80099d6:	b90b      	cbnz	r3, 80099dc <_vfiprintf_r+0x18>
 80099d8:	f000 fe16 	bl	800a608 <__sinit>
 80099dc:	4b87      	ldr	r3, [pc, #540]	; (8009bfc <_vfiprintf_r+0x238>)
 80099de:	429d      	cmp	r5, r3
 80099e0:	d11b      	bne.n	8009a1a <_vfiprintf_r+0x56>
 80099e2:	6875      	ldr	r5, [r6, #4]
 80099e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099e6:	07d9      	lsls	r1, r3, #31
 80099e8:	d405      	bmi.n	80099f6 <_vfiprintf_r+0x32>
 80099ea:	89ab      	ldrh	r3, [r5, #12]
 80099ec:	059a      	lsls	r2, r3, #22
 80099ee:	d402      	bmi.n	80099f6 <_vfiprintf_r+0x32>
 80099f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099f2:	f7fb fd9d 	bl	8005530 <__retarget_lock_acquire_recursive>
 80099f6:	89ab      	ldrh	r3, [r5, #12]
 80099f8:	071b      	lsls	r3, r3, #28
 80099fa:	d501      	bpl.n	8009a00 <_vfiprintf_r+0x3c>
 80099fc:	692b      	ldr	r3, [r5, #16]
 80099fe:	b9eb      	cbnz	r3, 8009a3c <_vfiprintf_r+0x78>
 8009a00:	4629      	mov	r1, r5
 8009a02:	4630      	mov	r0, r6
 8009a04:	f000 fd16 	bl	800a434 <__swsetup_r>
 8009a08:	b1c0      	cbz	r0, 8009a3c <_vfiprintf_r+0x78>
 8009a0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a0c:	07dc      	lsls	r4, r3, #31
 8009a0e:	d50e      	bpl.n	8009a2e <_vfiprintf_r+0x6a>
 8009a10:	f04f 30ff 	mov.w	r0, #4294967295
 8009a14:	b01d      	add	sp, #116	; 0x74
 8009a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a1a:	4b79      	ldr	r3, [pc, #484]	; (8009c00 <_vfiprintf_r+0x23c>)
 8009a1c:	429d      	cmp	r5, r3
 8009a1e:	d101      	bne.n	8009a24 <_vfiprintf_r+0x60>
 8009a20:	68b5      	ldr	r5, [r6, #8]
 8009a22:	e7df      	b.n	80099e4 <_vfiprintf_r+0x20>
 8009a24:	4b77      	ldr	r3, [pc, #476]	; (8009c04 <_vfiprintf_r+0x240>)
 8009a26:	429d      	cmp	r5, r3
 8009a28:	bf08      	it	eq
 8009a2a:	68f5      	ldreq	r5, [r6, #12]
 8009a2c:	e7da      	b.n	80099e4 <_vfiprintf_r+0x20>
 8009a2e:	89ab      	ldrh	r3, [r5, #12]
 8009a30:	0598      	lsls	r0, r3, #22
 8009a32:	d4ed      	bmi.n	8009a10 <_vfiprintf_r+0x4c>
 8009a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a36:	f7fb fd97 	bl	8005568 <__retarget_lock_release_recursive>
 8009a3a:	e7e9      	b.n	8009a10 <_vfiprintf_r+0x4c>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a40:	2320      	movs	r3, #32
 8009a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a4a:	2330      	movs	r3, #48	; 0x30
 8009a4c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8009c08 <_vfiprintf_r+0x244>
 8009a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a54:	f04f 0901 	mov.w	r9, #1
 8009a58:	4623      	mov	r3, r4
 8009a5a:	469a      	mov	sl, r3
 8009a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a60:	b10a      	cbz	r2, 8009a66 <_vfiprintf_r+0xa2>
 8009a62:	2a25      	cmp	r2, #37	; 0x25
 8009a64:	d1f9      	bne.n	8009a5a <_vfiprintf_r+0x96>
 8009a66:	ebba 0b04 	subs.w	fp, sl, r4
 8009a6a:	d00b      	beq.n	8009a84 <_vfiprintf_r+0xc0>
 8009a6c:	465b      	mov	r3, fp
 8009a6e:	4622      	mov	r2, r4
 8009a70:	4629      	mov	r1, r5
 8009a72:	4630      	mov	r0, r6
 8009a74:	f002 fc6e 	bl	800c354 <__sfputs_r>
 8009a78:	3001      	adds	r0, #1
 8009a7a:	f000 80a6 	beq.w	8009bca <_vfiprintf_r+0x206>
 8009a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a80:	445a      	add	r2, fp
 8009a82:	9209      	str	r2, [sp, #36]	; 0x24
 8009a84:	f89a 3000 	ldrb.w	r3, [sl]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 809e 	beq.w	8009bca <_vfiprintf_r+0x206>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f04f 32ff 	mov.w	r2, #4294967295
 8009a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a98:	f10a 0a01 	add.w	sl, sl, #1
 8009a9c:	9304      	str	r3, [sp, #16]
 8009a9e:	9307      	str	r3, [sp, #28]
 8009aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aa4:	931a      	str	r3, [sp, #104]	; 0x68
 8009aa6:	4654      	mov	r4, sl
 8009aa8:	4857      	ldr	r0, [pc, #348]	; (8009c08 <_vfiprintf_r+0x244>)
 8009aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aae:	2205      	movs	r2, #5
 8009ab0:	f7f6 fb76 	bl	80001a0 <memchr>
 8009ab4:	9b04      	ldr	r3, [sp, #16]
 8009ab6:	b9d0      	cbnz	r0, 8009aee <_vfiprintf_r+0x12a>
 8009ab8:	06d9      	lsls	r1, r3, #27
 8009aba:	bf44      	itt	mi
 8009abc:	2220      	movmi	r2, #32
 8009abe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ac2:	071a      	lsls	r2, r3, #28
 8009ac4:	bf44      	itt	mi
 8009ac6:	222b      	movmi	r2, #43	; 0x2b
 8009ac8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009acc:	f89a 2000 	ldrb.w	r2, [sl]
 8009ad0:	2a2a      	cmp	r2, #42	; 0x2a
 8009ad2:	d014      	beq.n	8009afe <_vfiprintf_r+0x13a>
 8009ad4:	9a07      	ldr	r2, [sp, #28]
 8009ad6:	4654      	mov	r4, sl
 8009ad8:	2000      	movs	r0, #0
 8009ada:	f04f 0c0a 	mov.w	ip, #10
 8009ade:	4621      	mov	r1, r4
 8009ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ae4:	3b30      	subs	r3, #48	; 0x30
 8009ae6:	2b09      	cmp	r3, #9
 8009ae8:	d94a      	bls.n	8009b80 <_vfiprintf_r+0x1bc>
 8009aea:	b970      	cbnz	r0, 8009b0a <_vfiprintf_r+0x146>
 8009aec:	e014      	b.n	8009b18 <_vfiprintf_r+0x154>
 8009aee:	eba0 0008 	sub.w	r0, r0, r8
 8009af2:	fa09 f000 	lsl.w	r0, r9, r0
 8009af6:	4318      	orrs	r0, r3
 8009af8:	9004      	str	r0, [sp, #16]
 8009afa:	46a2      	mov	sl, r4
 8009afc:	e7d3      	b.n	8009aa6 <_vfiprintf_r+0xe2>
 8009afe:	9a03      	ldr	r2, [sp, #12]
 8009b00:	1d11      	adds	r1, r2, #4
 8009b02:	6812      	ldr	r2, [r2, #0]
 8009b04:	9103      	str	r1, [sp, #12]
 8009b06:	2a00      	cmp	r2, #0
 8009b08:	db01      	blt.n	8009b0e <_vfiprintf_r+0x14a>
 8009b0a:	9207      	str	r2, [sp, #28]
 8009b0c:	e004      	b.n	8009b18 <_vfiprintf_r+0x154>
 8009b0e:	4252      	negs	r2, r2
 8009b10:	f043 0302 	orr.w	r3, r3, #2
 8009b14:	9207      	str	r2, [sp, #28]
 8009b16:	9304      	str	r3, [sp, #16]
 8009b18:	7823      	ldrb	r3, [r4, #0]
 8009b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b1c:	d10a      	bne.n	8009b34 <_vfiprintf_r+0x170>
 8009b1e:	7863      	ldrb	r3, [r4, #1]
 8009b20:	2b2a      	cmp	r3, #42	; 0x2a
 8009b22:	d132      	bne.n	8009b8a <_vfiprintf_r+0x1c6>
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	1d1a      	adds	r2, r3, #4
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	9203      	str	r2, [sp, #12]
 8009b2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b30:	3402      	adds	r4, #2
 8009b32:	9305      	str	r3, [sp, #20]
 8009b34:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009c0c <_vfiprintf_r+0x248>
 8009b38:	7821      	ldrb	r1, [r4, #0]
 8009b3a:	2203      	movs	r2, #3
 8009b3c:	4650      	mov	r0, sl
 8009b3e:	f7f6 fb2f 	bl	80001a0 <memchr>
 8009b42:	b138      	cbz	r0, 8009b54 <_vfiprintf_r+0x190>
 8009b44:	9b04      	ldr	r3, [sp, #16]
 8009b46:	eba0 000a 	sub.w	r0, r0, sl
 8009b4a:	2240      	movs	r2, #64	; 0x40
 8009b4c:	4082      	lsls	r2, r0
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	3401      	adds	r4, #1
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b58:	482d      	ldr	r0, [pc, #180]	; (8009c10 <_vfiprintf_r+0x24c>)
 8009b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b5e:	2206      	movs	r2, #6
 8009b60:	f7f6 fb1e 	bl	80001a0 <memchr>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d03f      	beq.n	8009be8 <_vfiprintf_r+0x224>
 8009b68:	4b2a      	ldr	r3, [pc, #168]	; (8009c14 <_vfiprintf_r+0x250>)
 8009b6a:	bb1b      	cbnz	r3, 8009bb4 <_vfiprintf_r+0x1f0>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	3307      	adds	r3, #7
 8009b70:	f023 0307 	bic.w	r3, r3, #7
 8009b74:	3308      	adds	r3, #8
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7a:	443b      	add	r3, r7
 8009b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7e:	e76b      	b.n	8009a58 <_vfiprintf_r+0x94>
 8009b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b84:	460c      	mov	r4, r1
 8009b86:	2001      	movs	r0, #1
 8009b88:	e7a9      	b.n	8009ade <_vfiprintf_r+0x11a>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	3401      	adds	r4, #1
 8009b8e:	9305      	str	r3, [sp, #20]
 8009b90:	4619      	mov	r1, r3
 8009b92:	f04f 0c0a 	mov.w	ip, #10
 8009b96:	4620      	mov	r0, r4
 8009b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b9c:	3a30      	subs	r2, #48	; 0x30
 8009b9e:	2a09      	cmp	r2, #9
 8009ba0:	d903      	bls.n	8009baa <_vfiprintf_r+0x1e6>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0c6      	beq.n	8009b34 <_vfiprintf_r+0x170>
 8009ba6:	9105      	str	r1, [sp, #20]
 8009ba8:	e7c4      	b.n	8009b34 <_vfiprintf_r+0x170>
 8009baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bae:	4604      	mov	r4, r0
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e7f0      	b.n	8009b96 <_vfiprintf_r+0x1d2>
 8009bb4:	ab03      	add	r3, sp, #12
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	462a      	mov	r2, r5
 8009bba:	4b17      	ldr	r3, [pc, #92]	; (8009c18 <_vfiprintf_r+0x254>)
 8009bbc:	a904      	add	r1, sp, #16
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f000 f82c 	bl	8009c1c <_printf_float>
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	1c78      	adds	r0, r7, #1
 8009bc8:	d1d6      	bne.n	8009b78 <_vfiprintf_r+0x1b4>
 8009bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bcc:	07d9      	lsls	r1, r3, #31
 8009bce:	d405      	bmi.n	8009bdc <_vfiprintf_r+0x218>
 8009bd0:	89ab      	ldrh	r3, [r5, #12]
 8009bd2:	059a      	lsls	r2, r3, #22
 8009bd4:	d402      	bmi.n	8009bdc <_vfiprintf_r+0x218>
 8009bd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bd8:	f7fb fcc6 	bl	8005568 <__retarget_lock_release_recursive>
 8009bdc:	89ab      	ldrh	r3, [r5, #12]
 8009bde:	065b      	lsls	r3, r3, #25
 8009be0:	f53f af16 	bmi.w	8009a10 <_vfiprintf_r+0x4c>
 8009be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009be6:	e715      	b.n	8009a14 <_vfiprintf_r+0x50>
 8009be8:	ab03      	add	r3, sp, #12
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	462a      	mov	r2, r5
 8009bee:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <_vfiprintf_r+0x254>)
 8009bf0:	a904      	add	r1, sp, #16
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f000 fa48 	bl	800a088 <_printf_i>
 8009bf8:	e7e4      	b.n	8009bc4 <_vfiprintf_r+0x200>
 8009bfa:	bf00      	nop
 8009bfc:	0800d708 	.word	0x0800d708
 8009c00:	0800d6e8 	.word	0x0800d6e8
 8009c04:	0800d6c8 	.word	0x0800d6c8
 8009c08:	0801371f 	.word	0x0801371f
 8009c0c:	08013725 	.word	0x08013725
 8009c10:	08013729 	.word	0x08013729
 8009c14:	08009c1d 	.word	0x08009c1d
 8009c18:	0800c355 	.word	0x0800c355

08009c1c <_printf_float>:
 8009c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c20:	b091      	sub	sp, #68	; 0x44
 8009c22:	460c      	mov	r4, r1
 8009c24:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009c28:	4616      	mov	r6, r2
 8009c2a:	461f      	mov	r7, r3
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	f000 fd69 	bl	800a704 <_localeconv_r>
 8009c32:	6803      	ldr	r3, [r0, #0]
 8009c34:	9308      	str	r3, [sp, #32]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f7 f9c6 	bl	8000fc8 <strlen>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	930e      	str	r3, [sp, #56]	; 0x38
 8009c40:	f8d8 3000 	ldr.w	r3, [r8]
 8009c44:	9009      	str	r0, [sp, #36]	; 0x24
 8009c46:	3307      	adds	r3, #7
 8009c48:	f023 0307 	bic.w	r3, r3, #7
 8009c4c:	f103 0208 	add.w	r2, r3, #8
 8009c50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009c54:	f8d4 b000 	ldr.w	fp, [r4]
 8009c58:	f8c8 2000 	str.w	r2, [r8]
 8009c5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c64:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c66:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009c6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009c6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c72:	4b9c      	ldr	r3, [pc, #624]	; (8009ee4 <_printf_float+0x2c8>)
 8009c74:	f04f 32ff 	mov.w	r2, #4294967295
 8009c78:	f7f7 f818 	bl	8000cac <__aeabi_dcmpun>
 8009c7c:	bb70      	cbnz	r0, 8009cdc <_printf_float+0xc0>
 8009c7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c82:	4b98      	ldr	r3, [pc, #608]	; (8009ee4 <_printf_float+0x2c8>)
 8009c84:	f04f 32ff 	mov.w	r2, #4294967295
 8009c88:	f7f6 fff2 	bl	8000c70 <__aeabi_dcmple>
 8009c8c:	bb30      	cbnz	r0, 8009cdc <_printf_float+0xc0>
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2300      	movs	r3, #0
 8009c92:	4640      	mov	r0, r8
 8009c94:	4649      	mov	r1, r9
 8009c96:	f7f6 ffe1 	bl	8000c5c <__aeabi_dcmplt>
 8009c9a:	b110      	cbz	r0, 8009ca2 <_printf_float+0x86>
 8009c9c:	232d      	movs	r3, #45	; 0x2d
 8009c9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ca2:	4a91      	ldr	r2, [pc, #580]	; (8009ee8 <_printf_float+0x2cc>)
 8009ca4:	4b91      	ldr	r3, [pc, #580]	; (8009eec <_printf_float+0x2d0>)
 8009ca6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009caa:	bf94      	ite	ls
 8009cac:	4690      	movls	r8, r2
 8009cae:	4698      	movhi	r8, r3
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	6123      	str	r3, [r4, #16]
 8009cb4:	f02b 0304 	bic.w	r3, fp, #4
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	f04f 0900 	mov.w	r9, #0
 8009cbe:	9700      	str	r7, [sp, #0]
 8009cc0:	4633      	mov	r3, r6
 8009cc2:	aa0f      	add	r2, sp, #60	; 0x3c
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	f002 fbf7 	bl	800c4ba <_printf_common>
 8009ccc:	3001      	adds	r0, #1
 8009cce:	f040 8099 	bne.w	8009e04 <_printf_float+0x1e8>
 8009cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd6:	b011      	add	sp, #68	; 0x44
 8009cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cdc:	4642      	mov	r2, r8
 8009cde:	464b      	mov	r3, r9
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	f7f6 ffe2 	bl	8000cac <__aeabi_dcmpun>
 8009ce8:	b140      	cbz	r0, 8009cfc <_printf_float+0xe0>
 8009cea:	464b      	mov	r3, r9
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	bfbc      	itt	lt
 8009cf0:	232d      	movlt	r3, #45	; 0x2d
 8009cf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009cf6:	4a7e      	ldr	r2, [pc, #504]	; (8009ef0 <_printf_float+0x2d4>)
 8009cf8:	4b7e      	ldr	r3, [pc, #504]	; (8009ef4 <_printf_float+0x2d8>)
 8009cfa:	e7d4      	b.n	8009ca6 <_printf_float+0x8a>
 8009cfc:	6863      	ldr	r3, [r4, #4]
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	d129      	bne.n	8009d56 <_printf_float+0x13a>
 8009d02:	2306      	movs	r3, #6
 8009d04:	6063      	str	r3, [r4, #4]
 8009d06:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	9206      	str	r2, [sp, #24]
 8009d10:	aa0e      	add	r2, sp, #56	; 0x38
 8009d12:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009d16:	aa0d      	add	r2, sp, #52	; 0x34
 8009d18:	9203      	str	r2, [sp, #12]
 8009d1a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009d1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009d22:	6863      	ldr	r3, [r4, #4]
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	4642      	mov	r2, r8
 8009d28:	464b      	mov	r3, r9
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f002 fb24 	bl	800c378 <__cvt>
 8009d30:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009d34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009d36:	4680      	mov	r8, r0
 8009d38:	d115      	bne.n	8009d66 <_printf_float+0x14a>
 8009d3a:	1ccb      	adds	r3, r1, #3
 8009d3c:	db3b      	blt.n	8009db6 <_printf_float+0x19a>
 8009d3e:	6863      	ldr	r3, [r4, #4]
 8009d40:	4299      	cmp	r1, r3
 8009d42:	dc38      	bgt.n	8009db6 <_printf_float+0x19a>
 8009d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d46:	4299      	cmp	r1, r3
 8009d48:	db55      	blt.n	8009df6 <_printf_float+0x1da>
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	6121      	str	r1, [r4, #16]
 8009d4e:	07d8      	lsls	r0, r3, #31
 8009d50:	d545      	bpl.n	8009dde <_printf_float+0x1c2>
 8009d52:	1c4b      	adds	r3, r1, #1
 8009d54:	e042      	b.n	8009ddc <_printf_float+0x1c0>
 8009d56:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
 8009d5a:	2a47      	cmp	r2, #71	; 0x47
 8009d5c:	d1d3      	bne.n	8009d06 <_printf_float+0xea>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1d1      	bne.n	8009d06 <_printf_float+0xea>
 8009d62:	2301      	movs	r3, #1
 8009d64:	e7ce      	b.n	8009d04 <_printf_float+0xe8>
 8009d66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009d6a:	d107      	bne.n	8009d7c <_printf_float+0x160>
 8009d6c:	1cc8      	adds	r0, r1, #3
 8009d6e:	db25      	blt.n	8009dbc <_printf_float+0x1a0>
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	428b      	cmp	r3, r1
 8009d74:	db22      	blt.n	8009dbc <_printf_float+0x1a0>
 8009d76:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009d7a:	e7e3      	b.n	8009d44 <_printf_float+0x128>
 8009d7c:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009d80:	d81f      	bhi.n	8009dc2 <_printf_float+0x1a6>
 8009d82:	3901      	subs	r1, #1
 8009d84:	4652      	mov	r2, sl
 8009d86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d8a:	910d      	str	r1, [sp, #52]	; 0x34
 8009d8c:	f002 fb5b 	bl	800c446 <__exponent>
 8009d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d92:	1813      	adds	r3, r2, r0
 8009d94:	2a01      	cmp	r2, #1
 8009d96:	4681      	mov	r9, r0
 8009d98:	6123      	str	r3, [r4, #16]
 8009d9a:	dc02      	bgt.n	8009da2 <_printf_float+0x186>
 8009d9c:	6822      	ldr	r2, [r4, #0]
 8009d9e:	07d2      	lsls	r2, r2, #31
 8009da0:	d501      	bpl.n	8009da6 <_printf_float+0x18a>
 8009da2:	3301      	adds	r3, #1
 8009da4:	6123      	str	r3, [r4, #16]
 8009da6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d087      	beq.n	8009cbe <_printf_float+0xa2>
 8009dae:	232d      	movs	r3, #45	; 0x2d
 8009db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009db4:	e783      	b.n	8009cbe <_printf_float+0xa2>
 8009db6:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8009dba:	e7e2      	b.n	8009d82 <_printf_float+0x166>
 8009dbc:	f04f 0a45 	mov.w	sl, #69	; 0x45
 8009dc0:	e7df      	b.n	8009d82 <_printf_float+0x166>
 8009dc2:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009dc6:	d1bd      	bne.n	8009d44 <_printf_float+0x128>
 8009dc8:	2900      	cmp	r1, #0
 8009dca:	6863      	ldr	r3, [r4, #4]
 8009dcc:	dd0b      	ble.n	8009de6 <_printf_float+0x1ca>
 8009dce:	6121      	str	r1, [r4, #16]
 8009dd0:	b913      	cbnz	r3, 8009dd8 <_printf_float+0x1bc>
 8009dd2:	6822      	ldr	r2, [r4, #0]
 8009dd4:	07d0      	lsls	r0, r2, #31
 8009dd6:	d502      	bpl.n	8009dde <_printf_float+0x1c2>
 8009dd8:	3301      	adds	r3, #1
 8009dda:	440b      	add	r3, r1
 8009ddc:	6123      	str	r3, [r4, #16]
 8009dde:	65a1      	str	r1, [r4, #88]	; 0x58
 8009de0:	f04f 0900 	mov.w	r9, #0
 8009de4:	e7df      	b.n	8009da6 <_printf_float+0x18a>
 8009de6:	b913      	cbnz	r3, 8009dee <_printf_float+0x1d2>
 8009de8:	6822      	ldr	r2, [r4, #0]
 8009dea:	07d2      	lsls	r2, r2, #31
 8009dec:	d501      	bpl.n	8009df2 <_printf_float+0x1d6>
 8009dee:	3302      	adds	r3, #2
 8009df0:	e7f4      	b.n	8009ddc <_printf_float+0x1c0>
 8009df2:	2301      	movs	r3, #1
 8009df4:	e7f2      	b.n	8009ddc <_printf_float+0x1c0>
 8009df6:	2900      	cmp	r1, #0
 8009df8:	bfd4      	ite	le
 8009dfa:	f1c1 0202 	rsble	r2, r1, #2
 8009dfe:	2201      	movgt	r2, #1
 8009e00:	4413      	add	r3, r2
 8009e02:	e7eb      	b.n	8009ddc <_printf_float+0x1c0>
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	055a      	lsls	r2, r3, #21
 8009e08:	d407      	bmi.n	8009e1a <_printf_float+0x1fe>
 8009e0a:	6923      	ldr	r3, [r4, #16]
 8009e0c:	4642      	mov	r2, r8
 8009e0e:	4631      	mov	r1, r6
 8009e10:	4628      	mov	r0, r5
 8009e12:	47b8      	blx	r7
 8009e14:	3001      	adds	r0, #1
 8009e16:	d12b      	bne.n	8009e70 <_printf_float+0x254>
 8009e18:	e75b      	b.n	8009cd2 <_printf_float+0xb6>
 8009e1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009e1e:	f240 80dc 	bls.w	8009fda <_printf_float+0x3be>
 8009e22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e26:	2200      	movs	r2, #0
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f7f6 ff0d 	bl	8000c48 <__aeabi_dcmpeq>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d033      	beq.n	8009e9a <_printf_float+0x27e>
 8009e32:	4a31      	ldr	r2, [pc, #196]	; (8009ef8 <_printf_float+0x2dc>)
 8009e34:	2301      	movs	r3, #1
 8009e36:	4631      	mov	r1, r6
 8009e38:	4628      	mov	r0, r5
 8009e3a:	47b8      	blx	r7
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	f43f af48 	beq.w	8009cd2 <_printf_float+0xb6>
 8009e42:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
 8009e46:	4543      	cmp	r3, r8
 8009e48:	db02      	blt.n	8009e50 <_printf_float+0x234>
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	07d8      	lsls	r0, r3, #31
 8009e4e:	d50f      	bpl.n	8009e70 <_printf_float+0x254>
 8009e50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e54:	4631      	mov	r1, r6
 8009e56:	4628      	mov	r0, r5
 8009e58:	47b8      	blx	r7
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	f43f af39 	beq.w	8009cd2 <_printf_float+0xb6>
 8009e60:	f04f 0900 	mov.w	r9, #0
 8009e64:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e68:	f104 0a1a 	add.w	sl, r4, #26
 8009e6c:	45c8      	cmp	r8, r9
 8009e6e:	dc09      	bgt.n	8009e84 <_printf_float+0x268>
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	079b      	lsls	r3, r3, #30
 8009e74:	f100 8102 	bmi.w	800a07c <_printf_float+0x460>
 8009e78:	68e0      	ldr	r0, [r4, #12]
 8009e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e7c:	4298      	cmp	r0, r3
 8009e7e:	bfb8      	it	lt
 8009e80:	4618      	movlt	r0, r3
 8009e82:	e728      	b.n	8009cd6 <_printf_float+0xba>
 8009e84:	2301      	movs	r3, #1
 8009e86:	4652      	mov	r2, sl
 8009e88:	4631      	mov	r1, r6
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	47b8      	blx	r7
 8009e8e:	3001      	adds	r0, #1
 8009e90:	f43f af1f 	beq.w	8009cd2 <_printf_float+0xb6>
 8009e94:	f109 0901 	add.w	r9, r9, #1
 8009e98:	e7e8      	b.n	8009e6c <_printf_float+0x250>
 8009e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	dc38      	bgt.n	8009f12 <_printf_float+0x2f6>
 8009ea0:	4a15      	ldr	r2, [pc, #84]	; (8009ef8 <_printf_float+0x2dc>)
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	47b8      	blx	r7
 8009eaa:	3001      	adds	r0, #1
 8009eac:	f43f af11 	beq.w	8009cd2 <_printf_float+0xb6>
 8009eb0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
 8009eb4:	ea59 0303 	orrs.w	r3, r9, r3
 8009eb8:	d102      	bne.n	8009ec0 <_printf_float+0x2a4>
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	07d9      	lsls	r1, r3, #31
 8009ebe:	d5d7      	bpl.n	8009e70 <_printf_float+0x254>
 8009ec0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	47b8      	blx	r7
 8009eca:	3001      	adds	r0, #1
 8009ecc:	f43f af01 	beq.w	8009cd2 <_printf_float+0xb6>
 8009ed0:	f04f 0a00 	mov.w	sl, #0
 8009ed4:	f104 0b1a 	add.w	fp, r4, #26
 8009ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eda:	425b      	negs	r3, r3
 8009edc:	4553      	cmp	r3, sl
 8009ede:	dc0d      	bgt.n	8009efc <_printf_float+0x2e0>
 8009ee0:	464b      	mov	r3, r9
 8009ee2:	e793      	b.n	8009e0c <_printf_float+0x1f0>
 8009ee4:	7fefffff 	.word	0x7fefffff
 8009ee8:	08013730 	.word	0x08013730
 8009eec:	08011e68 	.word	0x08011e68
 8009ef0:	08013734 	.word	0x08013734
 8009ef4:	08013738 	.word	0x08013738
 8009ef8:	0801352e 	.word	0x0801352e
 8009efc:	2301      	movs	r3, #1
 8009efe:	465a      	mov	r2, fp
 8009f00:	4631      	mov	r1, r6
 8009f02:	4628      	mov	r0, r5
 8009f04:	47b8      	blx	r7
 8009f06:	3001      	adds	r0, #1
 8009f08:	f43f aee3 	beq.w	8009cd2 <_printf_float+0xb6>
 8009f0c:	f10a 0a01 	add.w	sl, sl, #1
 8009f10:	e7e2      	b.n	8009ed8 <_printf_float+0x2bc>
 8009f12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f14:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8009f18:	4553      	cmp	r3, sl
 8009f1a:	bfa8      	it	ge
 8009f1c:	4653      	movge	r3, sl
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	4699      	mov	r9, r3
 8009f22:	dc36      	bgt.n	8009f92 <_printf_float+0x376>
 8009f24:	f04f 0b00 	mov.w	fp, #0
 8009f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f2c:	f104 021a 	add.w	r2, r4, #26
 8009f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f32:	930a      	str	r3, [sp, #40]	; 0x28
 8009f34:	eba3 0309 	sub.w	r3, r3, r9
 8009f38:	455b      	cmp	r3, fp
 8009f3a:	dc31      	bgt.n	8009fa0 <_printf_float+0x384>
 8009f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f3e:	459a      	cmp	sl, r3
 8009f40:	dc3a      	bgt.n	8009fb8 <_printf_float+0x39c>
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	07da      	lsls	r2, r3, #31
 8009f46:	d437      	bmi.n	8009fb8 <_printf_float+0x39c>
 8009f48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f4a:	ebaa 0903 	sub.w	r9, sl, r3
 8009f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f50:	ebaa 0303 	sub.w	r3, sl, r3
 8009f54:	4599      	cmp	r9, r3
 8009f56:	bfa8      	it	ge
 8009f58:	4699      	movge	r9, r3
 8009f5a:	f1b9 0f00 	cmp.w	r9, #0
 8009f5e:	dc33      	bgt.n	8009fc8 <_printf_float+0x3ac>
 8009f60:	f04f 0800 	mov.w	r8, #0
 8009f64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f68:	f104 0b1a 	add.w	fp, r4, #26
 8009f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f6e:	ebaa 0303 	sub.w	r3, sl, r3
 8009f72:	eba3 0309 	sub.w	r3, r3, r9
 8009f76:	4543      	cmp	r3, r8
 8009f78:	f77f af7a 	ble.w	8009e70 <_printf_float+0x254>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	465a      	mov	r2, fp
 8009f80:	4631      	mov	r1, r6
 8009f82:	4628      	mov	r0, r5
 8009f84:	47b8      	blx	r7
 8009f86:	3001      	adds	r0, #1
 8009f88:	f43f aea3 	beq.w	8009cd2 <_printf_float+0xb6>
 8009f8c:	f108 0801 	add.w	r8, r8, #1
 8009f90:	e7ec      	b.n	8009f6c <_printf_float+0x350>
 8009f92:	4642      	mov	r2, r8
 8009f94:	4631      	mov	r1, r6
 8009f96:	4628      	mov	r0, r5
 8009f98:	47b8      	blx	r7
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	d1c2      	bne.n	8009f24 <_printf_float+0x308>
 8009f9e:	e698      	b.n	8009cd2 <_printf_float+0xb6>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	920a      	str	r2, [sp, #40]	; 0x28
 8009fa8:	47b8      	blx	r7
 8009faa:	3001      	adds	r0, #1
 8009fac:	f43f ae91 	beq.w	8009cd2 <_printf_float+0xb6>
 8009fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fb2:	f10b 0b01 	add.w	fp, fp, #1
 8009fb6:	e7bb      	b.n	8009f30 <_printf_float+0x314>
 8009fb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	47b8      	blx	r7
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	d1c0      	bne.n	8009f48 <_printf_float+0x32c>
 8009fc6:	e684      	b.n	8009cd2 <_printf_float+0xb6>
 8009fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fca:	464b      	mov	r3, r9
 8009fcc:	4442      	add	r2, r8
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	47b8      	blx	r7
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	d1c3      	bne.n	8009f60 <_printf_float+0x344>
 8009fd8:	e67b      	b.n	8009cd2 <_printf_float+0xb6>
 8009fda:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8009fde:	f1ba 0f01 	cmp.w	sl, #1
 8009fe2:	dc01      	bgt.n	8009fe8 <_printf_float+0x3cc>
 8009fe4:	07db      	lsls	r3, r3, #31
 8009fe6:	d536      	bpl.n	800a056 <_printf_float+0x43a>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	4642      	mov	r2, r8
 8009fec:	4631      	mov	r1, r6
 8009fee:	4628      	mov	r0, r5
 8009ff0:	47b8      	blx	r7
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	f43f ae6d 	beq.w	8009cd2 <_printf_float+0xb6>
 8009ff8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	4628      	mov	r0, r5
 800a000:	47b8      	blx	r7
 800a002:	3001      	adds	r0, #1
 800a004:	f43f ae65 	beq.w	8009cd2 <_printf_float+0xb6>
 800a008:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a00c:	2200      	movs	r2, #0
 800a00e:	2300      	movs	r3, #0
 800a010:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a014:	f7f6 fe18 	bl	8000c48 <__aeabi_dcmpeq>
 800a018:	b9c0      	cbnz	r0, 800a04c <_printf_float+0x430>
 800a01a:	4653      	mov	r3, sl
 800a01c:	f108 0201 	add.w	r2, r8, #1
 800a020:	4631      	mov	r1, r6
 800a022:	4628      	mov	r0, r5
 800a024:	47b8      	blx	r7
 800a026:	3001      	adds	r0, #1
 800a028:	d10c      	bne.n	800a044 <_printf_float+0x428>
 800a02a:	e652      	b.n	8009cd2 <_printf_float+0xb6>
 800a02c:	2301      	movs	r3, #1
 800a02e:	465a      	mov	r2, fp
 800a030:	4631      	mov	r1, r6
 800a032:	4628      	mov	r0, r5
 800a034:	47b8      	blx	r7
 800a036:	3001      	adds	r0, #1
 800a038:	f43f ae4b 	beq.w	8009cd2 <_printf_float+0xb6>
 800a03c:	f108 0801 	add.w	r8, r8, #1
 800a040:	45d0      	cmp	r8, sl
 800a042:	dbf3      	blt.n	800a02c <_printf_float+0x410>
 800a044:	464b      	mov	r3, r9
 800a046:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a04a:	e6e0      	b.n	8009e0e <_printf_float+0x1f2>
 800a04c:	f04f 0800 	mov.w	r8, #0
 800a050:	f104 0b1a 	add.w	fp, r4, #26
 800a054:	e7f4      	b.n	800a040 <_printf_float+0x424>
 800a056:	2301      	movs	r3, #1
 800a058:	4642      	mov	r2, r8
 800a05a:	e7e1      	b.n	800a020 <_printf_float+0x404>
 800a05c:	2301      	movs	r3, #1
 800a05e:	464a      	mov	r2, r9
 800a060:	4631      	mov	r1, r6
 800a062:	4628      	mov	r0, r5
 800a064:	47b8      	blx	r7
 800a066:	3001      	adds	r0, #1
 800a068:	f43f ae33 	beq.w	8009cd2 <_printf_float+0xb6>
 800a06c:	f108 0801 	add.w	r8, r8, #1
 800a070:	68e3      	ldr	r3, [r4, #12]
 800a072:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a074:	1a5b      	subs	r3, r3, r1
 800a076:	4543      	cmp	r3, r8
 800a078:	dcf0      	bgt.n	800a05c <_printf_float+0x440>
 800a07a:	e6fd      	b.n	8009e78 <_printf_float+0x25c>
 800a07c:	f04f 0800 	mov.w	r8, #0
 800a080:	f104 0919 	add.w	r9, r4, #25
 800a084:	e7f4      	b.n	800a070 <_printf_float+0x454>
 800a086:	bf00      	nop

0800a088 <_printf_i>:
 800a088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a08c:	7e0f      	ldrb	r7, [r1, #24]
 800a08e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a090:	2f78      	cmp	r7, #120	; 0x78
 800a092:	4691      	mov	r9, r2
 800a094:	4680      	mov	r8, r0
 800a096:	460c      	mov	r4, r1
 800a098:	469a      	mov	sl, r3
 800a09a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a09e:	d807      	bhi.n	800a0b0 <_printf_i+0x28>
 800a0a0:	2f62      	cmp	r7, #98	; 0x62
 800a0a2:	d80a      	bhi.n	800a0ba <_printf_i+0x32>
 800a0a4:	2f00      	cmp	r7, #0
 800a0a6:	f000 80e0 	beq.w	800a26a <_printf_i+0x1e2>
 800a0aa:	2f58      	cmp	r7, #88	; 0x58
 800a0ac:	f000 80bb 	beq.w	800a226 <_printf_i+0x19e>
 800a0b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0b8:	e03a      	b.n	800a130 <_printf_i+0xa8>
 800a0ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0be:	2b15      	cmp	r3, #21
 800a0c0:	d8f6      	bhi.n	800a0b0 <_printf_i+0x28>
 800a0c2:	a101      	add	r1, pc, #4	; (adr r1, 800a0c8 <_printf_i+0x40>)
 800a0c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0c8:	0800a121 	.word	0x0800a121
 800a0cc:	0800a135 	.word	0x0800a135
 800a0d0:	0800a0b1 	.word	0x0800a0b1
 800a0d4:	0800a0b1 	.word	0x0800a0b1
 800a0d8:	0800a0b1 	.word	0x0800a0b1
 800a0dc:	0800a0b1 	.word	0x0800a0b1
 800a0e0:	0800a135 	.word	0x0800a135
 800a0e4:	0800a0b1 	.word	0x0800a0b1
 800a0e8:	0800a0b1 	.word	0x0800a0b1
 800a0ec:	0800a0b1 	.word	0x0800a0b1
 800a0f0:	0800a0b1 	.word	0x0800a0b1
 800a0f4:	0800a251 	.word	0x0800a251
 800a0f8:	0800a1c5 	.word	0x0800a1c5
 800a0fc:	0800a207 	.word	0x0800a207
 800a100:	0800a0b1 	.word	0x0800a0b1
 800a104:	0800a0b1 	.word	0x0800a0b1
 800a108:	0800a273 	.word	0x0800a273
 800a10c:	0800a0b1 	.word	0x0800a0b1
 800a110:	0800a1c5 	.word	0x0800a1c5
 800a114:	0800a0b1 	.word	0x0800a0b1
 800a118:	0800a0b1 	.word	0x0800a0b1
 800a11c:	0800a20f 	.word	0x0800a20f
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	1d1a      	adds	r2, r3, #4
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	602a      	str	r2, [r5, #0]
 800a128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a12c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a130:	2301      	movs	r3, #1
 800a132:	e0ab      	b.n	800a28c <_printf_i+0x204>
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	6829      	ldr	r1, [r5, #0]
 800a138:	061f      	lsls	r7, r3, #24
 800a13a:	f101 0004 	add.w	r0, r1, #4
 800a13e:	6028      	str	r0, [r5, #0]
 800a140:	d501      	bpl.n	800a146 <_printf_i+0xbe>
 800a142:	680d      	ldr	r5, [r1, #0]
 800a144:	e003      	b.n	800a14e <_printf_i+0xc6>
 800a146:	065e      	lsls	r6, r3, #25
 800a148:	d5fb      	bpl.n	800a142 <_printf_i+0xba>
 800a14a:	f9b1 5000 	ldrsh.w	r5, [r1]
 800a14e:	6861      	ldr	r1, [r4, #4]
 800a150:	2d00      	cmp	r5, #0
 800a152:	da7a      	bge.n	800a24a <_printf_i+0x1c2>
 800a154:	202d      	movs	r0, #45	; 0x2d
 800a156:	2900      	cmp	r1, #0
 800a158:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800a15c:	60a1      	str	r1, [r4, #8]
 800a15e:	da2d      	bge.n	800a1bc <_printf_i+0x134>
 800a160:	485e      	ldr	r0, [pc, #376]	; (800a2dc <_printf_i+0x254>)
 800a162:	426d      	negs	r5, r5
 800a164:	230a      	movs	r3, #10
 800a166:	4616      	mov	r6, r2
 800a168:	fbb5 f1f3 	udiv	r1, r5, r3
 800a16c:	fb03 5711 	mls	r7, r3, r1, r5
 800a170:	5dc7      	ldrb	r7, [r0, r7]
 800a172:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a176:	462f      	mov	r7, r5
 800a178:	42bb      	cmp	r3, r7
 800a17a:	460d      	mov	r5, r1
 800a17c:	d9f4      	bls.n	800a168 <_printf_i+0xe0>
 800a17e:	2b08      	cmp	r3, #8
 800a180:	d10b      	bne.n	800a19a <_printf_i+0x112>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	07df      	lsls	r7, r3, #31
 800a186:	d508      	bpl.n	800a19a <_printf_i+0x112>
 800a188:	6923      	ldr	r3, [r4, #16]
 800a18a:	6861      	ldr	r1, [r4, #4]
 800a18c:	4299      	cmp	r1, r3
 800a18e:	bfde      	ittt	le
 800a190:	2330      	movle	r3, #48	; 0x30
 800a192:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a196:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a19a:	1b92      	subs	r2, r2, r6
 800a19c:	6122      	str	r2, [r4, #16]
 800a19e:	f8cd a000 	str.w	sl, [sp]
 800a1a2:	464b      	mov	r3, r9
 800a1a4:	aa03      	add	r2, sp, #12
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4640      	mov	r0, r8
 800a1aa:	f002 f986 	bl	800c4ba <_printf_common>
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d171      	bne.n	800a296 <_printf_i+0x20e>
 800a1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b6:	b004      	add	sp, #16
 800a1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1bc:	f023 0304 	bic.w	r3, r3, #4
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	e7cd      	b.n	800a160 <_printf_i+0xd8>
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	6820      	ldr	r0, [r4, #0]
 800a1c8:	1d19      	adds	r1, r3, #4
 800a1ca:	6029      	str	r1, [r5, #0]
 800a1cc:	0605      	lsls	r5, r0, #24
 800a1ce:	d501      	bpl.n	800a1d4 <_printf_i+0x14c>
 800a1d0:	681d      	ldr	r5, [r3, #0]
 800a1d2:	e002      	b.n	800a1da <_printf_i+0x152>
 800a1d4:	0641      	lsls	r1, r0, #25
 800a1d6:	d5fb      	bpl.n	800a1d0 <_printf_i+0x148>
 800a1d8:	881d      	ldrh	r5, [r3, #0]
 800a1da:	4840      	ldr	r0, [pc, #256]	; (800a2dc <_printf_i+0x254>)
 800a1dc:	2f6f      	cmp	r7, #111	; 0x6f
 800a1de:	bf14      	ite	ne
 800a1e0:	230a      	movne	r3, #10
 800a1e2:	2308      	moveq	r3, #8
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1ea:	6866      	ldr	r6, [r4, #4]
 800a1ec:	60a6      	str	r6, [r4, #8]
 800a1ee:	2e00      	cmp	r6, #0
 800a1f0:	dbb9      	blt.n	800a166 <_printf_i+0xde>
 800a1f2:	6821      	ldr	r1, [r4, #0]
 800a1f4:	f021 0104 	bic.w	r1, r1, #4
 800a1f8:	6021      	str	r1, [r4, #0]
 800a1fa:	2d00      	cmp	r5, #0
 800a1fc:	d1b3      	bne.n	800a166 <_printf_i+0xde>
 800a1fe:	2e00      	cmp	r6, #0
 800a200:	d1b1      	bne.n	800a166 <_printf_i+0xde>
 800a202:	4616      	mov	r6, r2
 800a204:	e7bb      	b.n	800a17e <_printf_i+0xf6>
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	f043 0320 	orr.w	r3, r3, #32
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	4834      	ldr	r0, [pc, #208]	; (800a2e0 <_printf_i+0x258>)
 800a210:	2778      	movs	r7, #120	; 0x78
 800a212:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a216:	6829      	ldr	r1, [r5, #0]
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	1d0e      	adds	r6, r1, #4
 800a21c:	602e      	str	r6, [r5, #0]
 800a21e:	061e      	lsls	r6, r3, #24
 800a220:	d503      	bpl.n	800a22a <_printf_i+0x1a2>
 800a222:	680d      	ldr	r5, [r1, #0]
 800a224:	e004      	b.n	800a230 <_printf_i+0x1a8>
 800a226:	482d      	ldr	r0, [pc, #180]	; (800a2dc <_printf_i+0x254>)
 800a228:	e7f3      	b.n	800a212 <_printf_i+0x18a>
 800a22a:	065d      	lsls	r5, r3, #25
 800a22c:	d5f9      	bpl.n	800a222 <_printf_i+0x19a>
 800a22e:	880d      	ldrh	r5, [r1, #0]
 800a230:	07d9      	lsls	r1, r3, #31
 800a232:	bf44      	itt	mi
 800a234:	f043 0320 	orrmi.w	r3, r3, #32
 800a238:	6023      	strmi	r3, [r4, #0]
 800a23a:	b10d      	cbz	r5, 800a240 <_printf_i+0x1b8>
 800a23c:	2310      	movs	r3, #16
 800a23e:	e7d1      	b.n	800a1e4 <_printf_i+0x15c>
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	f023 0320 	bic.w	r3, r3, #32
 800a246:	6023      	str	r3, [r4, #0]
 800a248:	e7f8      	b.n	800a23c <_printf_i+0x1b4>
 800a24a:	4824      	ldr	r0, [pc, #144]	; (800a2dc <_printf_i+0x254>)
 800a24c:	230a      	movs	r3, #10
 800a24e:	e7cc      	b.n	800a1ea <_printf_i+0x162>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	6826      	ldr	r6, [r4, #0]
 800a254:	6961      	ldr	r1, [r4, #20]
 800a256:	1d18      	adds	r0, r3, #4
 800a258:	6028      	str	r0, [r5, #0]
 800a25a:	0635      	lsls	r5, r6, #24
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	d501      	bpl.n	800a264 <_printf_i+0x1dc>
 800a260:	6019      	str	r1, [r3, #0]
 800a262:	e002      	b.n	800a26a <_printf_i+0x1e2>
 800a264:	0670      	lsls	r0, r6, #25
 800a266:	d5fb      	bpl.n	800a260 <_printf_i+0x1d8>
 800a268:	8019      	strh	r1, [r3, #0]
 800a26a:	2300      	movs	r3, #0
 800a26c:	6123      	str	r3, [r4, #16]
 800a26e:	4616      	mov	r6, r2
 800a270:	e795      	b.n	800a19e <_printf_i+0x116>
 800a272:	682b      	ldr	r3, [r5, #0]
 800a274:	1d1a      	adds	r2, r3, #4
 800a276:	602a      	str	r2, [r5, #0]
 800a278:	681e      	ldr	r6, [r3, #0]
 800a27a:	6862      	ldr	r2, [r4, #4]
 800a27c:	2100      	movs	r1, #0
 800a27e:	4630      	mov	r0, r6
 800a280:	f7f5 ff8e 	bl	80001a0 <memchr>
 800a284:	b108      	cbz	r0, 800a28a <_printf_i+0x202>
 800a286:	1b80      	subs	r0, r0, r6
 800a288:	6060      	str	r0, [r4, #4]
 800a28a:	6863      	ldr	r3, [r4, #4]
 800a28c:	6123      	str	r3, [r4, #16]
 800a28e:	2300      	movs	r3, #0
 800a290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a294:	e783      	b.n	800a19e <_printf_i+0x116>
 800a296:	6923      	ldr	r3, [r4, #16]
 800a298:	4632      	mov	r2, r6
 800a29a:	4649      	mov	r1, r9
 800a29c:	4640      	mov	r0, r8
 800a29e:	47d0      	blx	sl
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	d086      	beq.n	800a1b2 <_printf_i+0x12a>
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	079b      	lsls	r3, r3, #30
 800a2a8:	d414      	bmi.n	800a2d4 <_printf_i+0x24c>
 800a2aa:	68e0      	ldr	r0, [r4, #12]
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	4298      	cmp	r0, r3
 800a2b0:	bfb8      	it	lt
 800a2b2:	4618      	movlt	r0, r3
 800a2b4:	e77f      	b.n	800a1b6 <_printf_i+0x12e>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	4632      	mov	r2, r6
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	4640      	mov	r0, r8
 800a2be:	47d0      	blx	sl
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	f43f af76 	beq.w	800a1b2 <_printf_i+0x12a>
 800a2c6:	3501      	adds	r5, #1
 800a2c8:	68e3      	ldr	r3, [r4, #12]
 800a2ca:	9903      	ldr	r1, [sp, #12]
 800a2cc:	1a5b      	subs	r3, r3, r1
 800a2ce:	42ab      	cmp	r3, r5
 800a2d0:	dcf1      	bgt.n	800a2b6 <_printf_i+0x22e>
 800a2d2:	e7ea      	b.n	800a2aa <_printf_i+0x222>
 800a2d4:	2500      	movs	r5, #0
 800a2d6:	f104 0619 	add.w	r6, r4, #25
 800a2da:	e7f5      	b.n	800a2c8 <_printf_i+0x240>
 800a2dc:	0801373c 	.word	0x0801373c
 800a2e0:	0801374d 	.word	0x0801374d

0800a2e4 <iprintf>:
 800a2e4:	b40f      	push	{r0, r1, r2, r3}
 800a2e6:	4b0a      	ldr	r3, [pc, #40]	; (800a310 <iprintf+0x2c>)
 800a2e8:	b513      	push	{r0, r1, r4, lr}
 800a2ea:	681c      	ldr	r4, [r3, #0]
 800a2ec:	b124      	cbz	r4, 800a2f8 <iprintf+0x14>
 800a2ee:	69a3      	ldr	r3, [r4, #24]
 800a2f0:	b913      	cbnz	r3, 800a2f8 <iprintf+0x14>
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f000 f988 	bl	800a608 <__sinit>
 800a2f8:	ab05      	add	r3, sp, #20
 800a2fa:	9a04      	ldr	r2, [sp, #16]
 800a2fc:	68a1      	ldr	r1, [r4, #8]
 800a2fe:	9301      	str	r3, [sp, #4]
 800a300:	4620      	mov	r0, r4
 800a302:	f7ff fb5f 	bl	80099c4 <_vfiprintf_r>
 800a306:	b002      	add	sp, #8
 800a308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a30c:	b004      	add	sp, #16
 800a30e:	4770      	bx	lr
 800a310:	20000110 	.word	0x20000110

0800a314 <_sbrk_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4d06      	ldr	r5, [pc, #24]	; (800a330 <_sbrk_r+0x1c>)
 800a318:	2300      	movs	r3, #0
 800a31a:	4604      	mov	r4, r0
 800a31c:	4608      	mov	r0, r1
 800a31e:	602b      	str	r3, [r5, #0]
 800a320:	f7fb f8c2 	bl	80054a8 <_sbrk>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_sbrk_r+0x1a>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_sbrk_r+0x1a>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	20000c30 	.word	0x20000c30

0800a334 <vsniprintf>:
 800a334:	b507      	push	{r0, r1, r2, lr}
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	4613      	mov	r3, r2
 800a33a:	460a      	mov	r2, r1
 800a33c:	4601      	mov	r1, r0
 800a33e:	4803      	ldr	r0, [pc, #12]	; (800a34c <vsniprintf+0x18>)
 800a340:	6800      	ldr	r0, [r0, #0]
 800a342:	f002 f960 	bl	800c606 <_vsniprintf_r>
 800a346:	b003      	add	sp, #12
 800a348:	f85d fb04 	ldr.w	pc, [sp], #4
 800a34c:	20000110 	.word	0x20000110

0800a350 <_vsiprintf_r>:
 800a350:	b500      	push	{lr}
 800a352:	b09b      	sub	sp, #108	; 0x6c
 800a354:	9100      	str	r1, [sp, #0]
 800a356:	9104      	str	r1, [sp, #16]
 800a358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a35c:	9105      	str	r1, [sp, #20]
 800a35e:	9102      	str	r1, [sp, #8]
 800a360:	4905      	ldr	r1, [pc, #20]	; (800a378 <_vsiprintf_r+0x28>)
 800a362:	9103      	str	r1, [sp, #12]
 800a364:	4669      	mov	r1, sp
 800a366:	f000 fd35 	bl	800add4 <_svfiprintf_r>
 800a36a:	9b00      	ldr	r3, [sp, #0]
 800a36c:	2200      	movs	r2, #0
 800a36e:	701a      	strb	r2, [r3, #0]
 800a370:	b01b      	add	sp, #108	; 0x6c
 800a372:	f85d fb04 	ldr.w	pc, [sp], #4
 800a376:	bf00      	nop
 800a378:	ffff0208 	.word	0xffff0208

0800a37c <vsiprintf>:
 800a37c:	4613      	mov	r3, r2
 800a37e:	460a      	mov	r2, r1
 800a380:	4601      	mov	r1, r0
 800a382:	4802      	ldr	r0, [pc, #8]	; (800a38c <vsiprintf+0x10>)
 800a384:	6800      	ldr	r0, [r0, #0]
 800a386:	f7ff bfe3 	b.w	800a350 <_vsiprintf_r>
 800a38a:	bf00      	nop
 800a38c:	20000110 	.word	0x20000110

0800a390 <__swbuf_r>:
 800a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a392:	460e      	mov	r6, r1
 800a394:	4614      	mov	r4, r2
 800a396:	4605      	mov	r5, r0
 800a398:	b118      	cbz	r0, 800a3a2 <__swbuf_r+0x12>
 800a39a:	6983      	ldr	r3, [r0, #24]
 800a39c:	b90b      	cbnz	r3, 800a3a2 <__swbuf_r+0x12>
 800a39e:	f000 f933 	bl	800a608 <__sinit>
 800a3a2:	4b21      	ldr	r3, [pc, #132]	; (800a428 <__swbuf_r+0x98>)
 800a3a4:	429c      	cmp	r4, r3
 800a3a6:	d110      	bne.n	800a3ca <__swbuf_r+0x3a>
 800a3a8:	686c      	ldr	r4, [r5, #4]
 800a3aa:	69a3      	ldr	r3, [r4, #24]
 800a3ac:	60a3      	str	r3, [r4, #8]
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	071a      	lsls	r2, r3, #28
 800a3b2:	d501      	bpl.n	800a3b8 <__swbuf_r+0x28>
 800a3b4:	6923      	ldr	r3, [r4, #16]
 800a3b6:	b993      	cbnz	r3, 800a3de <__swbuf_r+0x4e>
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	f000 f83a 	bl	800a434 <__swsetup_r>
 800a3c0:	b168      	cbz	r0, 800a3de <__swbuf_r+0x4e>
 800a3c2:	f04f 37ff 	mov.w	r7, #4294967295
 800a3c6:	4638      	mov	r0, r7
 800a3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3ca:	4b18      	ldr	r3, [pc, #96]	; (800a42c <__swbuf_r+0x9c>)
 800a3cc:	429c      	cmp	r4, r3
 800a3ce:	d101      	bne.n	800a3d4 <__swbuf_r+0x44>
 800a3d0:	68ac      	ldr	r4, [r5, #8]
 800a3d2:	e7ea      	b.n	800a3aa <__swbuf_r+0x1a>
 800a3d4:	4b16      	ldr	r3, [pc, #88]	; (800a430 <__swbuf_r+0xa0>)
 800a3d6:	429c      	cmp	r4, r3
 800a3d8:	bf08      	it	eq
 800a3da:	68ec      	ldreq	r4, [r5, #12]
 800a3dc:	e7e5      	b.n	800a3aa <__swbuf_r+0x1a>
 800a3de:	6923      	ldr	r3, [r4, #16]
 800a3e0:	6820      	ldr	r0, [r4, #0]
 800a3e2:	1ac0      	subs	r0, r0, r3
 800a3e4:	6963      	ldr	r3, [r4, #20]
 800a3e6:	b2f6      	uxtb	r6, r6
 800a3e8:	4283      	cmp	r3, r0
 800a3ea:	4637      	mov	r7, r6
 800a3ec:	dc05      	bgt.n	800a3fa <__swbuf_r+0x6a>
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	f000 f88b 	bl	800a50c <_fflush_r>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d1e3      	bne.n	800a3c2 <__swbuf_r+0x32>
 800a3fa:	68a3      	ldr	r3, [r4, #8]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	60a3      	str	r3, [r4, #8]
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	6022      	str	r2, [r4, #0]
 800a406:	701e      	strb	r6, [r3, #0]
 800a408:	6963      	ldr	r3, [r4, #20]
 800a40a:	3001      	adds	r0, #1
 800a40c:	4283      	cmp	r3, r0
 800a40e:	d004      	beq.n	800a41a <__swbuf_r+0x8a>
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	07db      	lsls	r3, r3, #31
 800a414:	d5d7      	bpl.n	800a3c6 <__swbuf_r+0x36>
 800a416:	2e0a      	cmp	r6, #10
 800a418:	d1d5      	bne.n	800a3c6 <__swbuf_r+0x36>
 800a41a:	4621      	mov	r1, r4
 800a41c:	4628      	mov	r0, r5
 800a41e:	f000 f875 	bl	800a50c <_fflush_r>
 800a422:	2800      	cmp	r0, #0
 800a424:	d0cf      	beq.n	800a3c6 <__swbuf_r+0x36>
 800a426:	e7cc      	b.n	800a3c2 <__swbuf_r+0x32>
 800a428:	0800d708 	.word	0x0800d708
 800a42c:	0800d6e8 	.word	0x0800d6e8
 800a430:	0800d6c8 	.word	0x0800d6c8

0800a434 <__swsetup_r>:
 800a434:	4b31      	ldr	r3, [pc, #196]	; (800a4fc <__swsetup_r+0xc8>)
 800a436:	b570      	push	{r4, r5, r6, lr}
 800a438:	681d      	ldr	r5, [r3, #0]
 800a43a:	4606      	mov	r6, r0
 800a43c:	460c      	mov	r4, r1
 800a43e:	b125      	cbz	r5, 800a44a <__swsetup_r+0x16>
 800a440:	69ab      	ldr	r3, [r5, #24]
 800a442:	b913      	cbnz	r3, 800a44a <__swsetup_r+0x16>
 800a444:	4628      	mov	r0, r5
 800a446:	f000 f8df 	bl	800a608 <__sinit>
 800a44a:	4b2d      	ldr	r3, [pc, #180]	; (800a500 <__swsetup_r+0xcc>)
 800a44c:	429c      	cmp	r4, r3
 800a44e:	d10e      	bne.n	800a46e <__swsetup_r+0x3a>
 800a450:	686c      	ldr	r4, [r5, #4]
 800a452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a456:	071a      	lsls	r2, r3, #28
 800a458:	d42c      	bmi.n	800a4b4 <__swsetup_r+0x80>
 800a45a:	06dd      	lsls	r5, r3, #27
 800a45c:	d411      	bmi.n	800a482 <__swsetup_r+0x4e>
 800a45e:	2209      	movs	r2, #9
 800a460:	6032      	str	r2, [r6, #0]
 800a462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a466:	81a3      	strh	r3, [r4, #12]
 800a468:	f04f 30ff 	mov.w	r0, #4294967295
 800a46c:	e03d      	b.n	800a4ea <__swsetup_r+0xb6>
 800a46e:	4b25      	ldr	r3, [pc, #148]	; (800a504 <__swsetup_r+0xd0>)
 800a470:	429c      	cmp	r4, r3
 800a472:	d101      	bne.n	800a478 <__swsetup_r+0x44>
 800a474:	68ac      	ldr	r4, [r5, #8]
 800a476:	e7ec      	b.n	800a452 <__swsetup_r+0x1e>
 800a478:	4b23      	ldr	r3, [pc, #140]	; (800a508 <__swsetup_r+0xd4>)
 800a47a:	429c      	cmp	r4, r3
 800a47c:	bf08      	it	eq
 800a47e:	68ec      	ldreq	r4, [r5, #12]
 800a480:	e7e7      	b.n	800a452 <__swsetup_r+0x1e>
 800a482:	0758      	lsls	r0, r3, #29
 800a484:	d512      	bpl.n	800a4ac <__swsetup_r+0x78>
 800a486:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a488:	b141      	cbz	r1, 800a49c <__swsetup_r+0x68>
 800a48a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a48e:	4299      	cmp	r1, r3
 800a490:	d002      	beq.n	800a498 <__swsetup_r+0x64>
 800a492:	4630      	mov	r0, r6
 800a494:	f7ff f9f2 	bl	800987c <_free_r>
 800a498:	2300      	movs	r3, #0
 800a49a:	6363      	str	r3, [r4, #52]	; 0x34
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4a2:	81a3      	strh	r3, [r4, #12]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	6063      	str	r3, [r4, #4]
 800a4a8:	6923      	ldr	r3, [r4, #16]
 800a4aa:	6023      	str	r3, [r4, #0]
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	f043 0308 	orr.w	r3, r3, #8
 800a4b2:	81a3      	strh	r3, [r4, #12]
 800a4b4:	6923      	ldr	r3, [r4, #16]
 800a4b6:	b94b      	cbnz	r3, 800a4cc <__swsetup_r+0x98>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4c2:	d003      	beq.n	800a4cc <__swsetup_r+0x98>
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f000 f920 	bl	800a70c <__smakebuf_r>
 800a4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4d0:	f013 0201 	ands.w	r2, r3, #1
 800a4d4:	d00a      	beq.n	800a4ec <__swsetup_r+0xb8>
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	60a2      	str	r2, [r4, #8]
 800a4da:	6962      	ldr	r2, [r4, #20]
 800a4dc:	4252      	negs	r2, r2
 800a4de:	61a2      	str	r2, [r4, #24]
 800a4e0:	6922      	ldr	r2, [r4, #16]
 800a4e2:	b942      	cbnz	r2, 800a4f6 <__swsetup_r+0xc2>
 800a4e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a4e8:	d1bb      	bne.n	800a462 <__swsetup_r+0x2e>
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}
 800a4ec:	0799      	lsls	r1, r3, #30
 800a4ee:	bf58      	it	pl
 800a4f0:	6962      	ldrpl	r2, [r4, #20]
 800a4f2:	60a2      	str	r2, [r4, #8]
 800a4f4:	e7f4      	b.n	800a4e0 <__swsetup_r+0xac>
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	e7f7      	b.n	800a4ea <__swsetup_r+0xb6>
 800a4fa:	bf00      	nop
 800a4fc:	20000110 	.word	0x20000110
 800a500:	0800d708 	.word	0x0800d708
 800a504:	0800d6e8 	.word	0x0800d6e8
 800a508:	0800d6c8 	.word	0x0800d6c8

0800a50c <_fflush_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	690b      	ldr	r3, [r1, #16]
 800a510:	4605      	mov	r5, r0
 800a512:	460c      	mov	r4, r1
 800a514:	b913      	cbnz	r3, 800a51c <_fflush_r+0x10>
 800a516:	2500      	movs	r5, #0
 800a518:	4628      	mov	r0, r5
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	b118      	cbz	r0, 800a526 <_fflush_r+0x1a>
 800a51e:	6983      	ldr	r3, [r0, #24]
 800a520:	b90b      	cbnz	r3, 800a526 <_fflush_r+0x1a>
 800a522:	f000 f871 	bl	800a608 <__sinit>
 800a526:	4b14      	ldr	r3, [pc, #80]	; (800a578 <_fflush_r+0x6c>)
 800a528:	429c      	cmp	r4, r3
 800a52a:	d11b      	bne.n	800a564 <_fflush_r+0x58>
 800a52c:	686c      	ldr	r4, [r5, #4]
 800a52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0ef      	beq.n	800a516 <_fflush_r+0xa>
 800a536:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a538:	07d0      	lsls	r0, r2, #31
 800a53a:	d404      	bmi.n	800a546 <_fflush_r+0x3a>
 800a53c:	0599      	lsls	r1, r3, #22
 800a53e:	d402      	bmi.n	800a546 <_fflush_r+0x3a>
 800a540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a542:	f7fa fff5 	bl	8005530 <__retarget_lock_acquire_recursive>
 800a546:	4628      	mov	r0, r5
 800a548:	4621      	mov	r1, r4
 800a54a:	f002 f90f 	bl	800c76c <__sflush_r>
 800a54e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a550:	07da      	lsls	r2, r3, #31
 800a552:	4605      	mov	r5, r0
 800a554:	d4e0      	bmi.n	800a518 <_fflush_r+0xc>
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	059b      	lsls	r3, r3, #22
 800a55a:	d4dd      	bmi.n	800a518 <_fflush_r+0xc>
 800a55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a55e:	f7fb f803 	bl	8005568 <__retarget_lock_release_recursive>
 800a562:	e7d9      	b.n	800a518 <_fflush_r+0xc>
 800a564:	4b05      	ldr	r3, [pc, #20]	; (800a57c <_fflush_r+0x70>)
 800a566:	429c      	cmp	r4, r3
 800a568:	d101      	bne.n	800a56e <_fflush_r+0x62>
 800a56a:	68ac      	ldr	r4, [r5, #8]
 800a56c:	e7df      	b.n	800a52e <_fflush_r+0x22>
 800a56e:	4b04      	ldr	r3, [pc, #16]	; (800a580 <_fflush_r+0x74>)
 800a570:	429c      	cmp	r4, r3
 800a572:	bf08      	it	eq
 800a574:	68ec      	ldreq	r4, [r5, #12]
 800a576:	e7da      	b.n	800a52e <_fflush_r+0x22>
 800a578:	0800d708 	.word	0x0800d708
 800a57c:	0800d6e8 	.word	0x0800d6e8
 800a580:	0800d6c8 	.word	0x0800d6c8

0800a584 <std>:
 800a584:	2300      	movs	r3, #0
 800a586:	b510      	push	{r4, lr}
 800a588:	4604      	mov	r4, r0
 800a58a:	e9c0 3300 	strd	r3, r3, [r0]
 800a58e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a592:	6083      	str	r3, [r0, #8]
 800a594:	8181      	strh	r1, [r0, #12]
 800a596:	6643      	str	r3, [r0, #100]	; 0x64
 800a598:	81c2      	strh	r2, [r0, #14]
 800a59a:	6183      	str	r3, [r0, #24]
 800a59c:	4619      	mov	r1, r3
 800a59e:	2208      	movs	r2, #8
 800a5a0:	305c      	adds	r0, #92	; 0x5c
 800a5a2:	f001 feba 	bl	800c31a <memset>
 800a5a6:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <std+0x38>)
 800a5a8:	6263      	str	r3, [r4, #36]	; 0x24
 800a5aa:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <std+0x3c>)
 800a5ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5ae:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <std+0x40>)
 800a5b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5b2:	4b05      	ldr	r3, [pc, #20]	; (800a5c8 <std+0x44>)
 800a5b4:	6224      	str	r4, [r4, #32]
 800a5b6:	6323      	str	r3, [r4, #48]	; 0x30
 800a5b8:	bd10      	pop	{r4, pc}
 800a5ba:	bf00      	nop
 800a5bc:	0800cb47 	.word	0x0800cb47
 800a5c0:	0800cb69 	.word	0x0800cb69
 800a5c4:	0800cba1 	.word	0x0800cba1
 800a5c8:	0800cbc5 	.word	0x0800cbc5

0800a5cc <_cleanup_r>:
 800a5cc:	4901      	ldr	r1, [pc, #4]	; (800a5d4 <_cleanup_r+0x8>)
 800a5ce:	f002 b963 	b.w	800c898 <_fwalk_reent>
 800a5d2:	bf00      	nop
 800a5d4:	0800a50d 	.word	0x0800a50d

0800a5d8 <__sfp_lock_acquire>:
 800a5d8:	4801      	ldr	r0, [pc, #4]	; (800a5e0 <__sfp_lock_acquire+0x8>)
 800a5da:	f7fa bfa9 	b.w	8005530 <__retarget_lock_acquire_recursive>
 800a5de:	bf00      	nop
 800a5e0:	20000374 	.word	0x20000374

0800a5e4 <__sfp_lock_release>:
 800a5e4:	4801      	ldr	r0, [pc, #4]	; (800a5ec <__sfp_lock_release+0x8>)
 800a5e6:	f7fa bfbf 	b.w	8005568 <__retarget_lock_release_recursive>
 800a5ea:	bf00      	nop
 800a5ec:	20000374 	.word	0x20000374

0800a5f0 <__sinit_lock_acquire>:
 800a5f0:	4801      	ldr	r0, [pc, #4]	; (800a5f8 <__sinit_lock_acquire+0x8>)
 800a5f2:	f7fa bf9d 	b.w	8005530 <__retarget_lock_acquire_recursive>
 800a5f6:	bf00      	nop
 800a5f8:	20000388 	.word	0x20000388

0800a5fc <__sinit_lock_release>:
 800a5fc:	4801      	ldr	r0, [pc, #4]	; (800a604 <__sinit_lock_release+0x8>)
 800a5fe:	f7fa bfb3 	b.w	8005568 <__retarget_lock_release_recursive>
 800a602:	bf00      	nop
 800a604:	20000388 	.word	0x20000388

0800a608 <__sinit>:
 800a608:	b510      	push	{r4, lr}
 800a60a:	4604      	mov	r4, r0
 800a60c:	f7ff fff0 	bl	800a5f0 <__sinit_lock_acquire>
 800a610:	69a3      	ldr	r3, [r4, #24]
 800a612:	b11b      	cbz	r3, 800a61c <__sinit+0x14>
 800a614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a618:	f7ff bff0 	b.w	800a5fc <__sinit_lock_release>
 800a61c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a620:	6523      	str	r3, [r4, #80]	; 0x50
 800a622:	4b13      	ldr	r3, [pc, #76]	; (800a670 <__sinit+0x68>)
 800a624:	4a13      	ldr	r2, [pc, #76]	; (800a674 <__sinit+0x6c>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	62a2      	str	r2, [r4, #40]	; 0x28
 800a62a:	42a3      	cmp	r3, r4
 800a62c:	bf04      	itt	eq
 800a62e:	2301      	moveq	r3, #1
 800a630:	61a3      	streq	r3, [r4, #24]
 800a632:	4620      	mov	r0, r4
 800a634:	f000 f820 	bl	800a678 <__sfp>
 800a638:	6060      	str	r0, [r4, #4]
 800a63a:	4620      	mov	r0, r4
 800a63c:	f000 f81c 	bl	800a678 <__sfp>
 800a640:	60a0      	str	r0, [r4, #8]
 800a642:	4620      	mov	r0, r4
 800a644:	f000 f818 	bl	800a678 <__sfp>
 800a648:	2200      	movs	r2, #0
 800a64a:	60e0      	str	r0, [r4, #12]
 800a64c:	2104      	movs	r1, #4
 800a64e:	6860      	ldr	r0, [r4, #4]
 800a650:	f7ff ff98 	bl	800a584 <std>
 800a654:	68a0      	ldr	r0, [r4, #8]
 800a656:	2201      	movs	r2, #1
 800a658:	2109      	movs	r1, #9
 800a65a:	f7ff ff93 	bl	800a584 <std>
 800a65e:	68e0      	ldr	r0, [r4, #12]
 800a660:	2202      	movs	r2, #2
 800a662:	2112      	movs	r1, #18
 800a664:	f7ff ff8e 	bl	800a584 <std>
 800a668:	2301      	movs	r3, #1
 800a66a:	61a3      	str	r3, [r4, #24]
 800a66c:	e7d2      	b.n	800a614 <__sinit+0xc>
 800a66e:	bf00      	nop
 800a670:	0800d6c4 	.word	0x0800d6c4
 800a674:	0800a5cd 	.word	0x0800a5cd

0800a678 <__sfp>:
 800a678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67a:	4607      	mov	r7, r0
 800a67c:	f7ff ffac 	bl	800a5d8 <__sfp_lock_acquire>
 800a680:	4b1e      	ldr	r3, [pc, #120]	; (800a6fc <__sfp+0x84>)
 800a682:	681e      	ldr	r6, [r3, #0]
 800a684:	69b3      	ldr	r3, [r6, #24]
 800a686:	b913      	cbnz	r3, 800a68e <__sfp+0x16>
 800a688:	4630      	mov	r0, r6
 800a68a:	f7ff ffbd 	bl	800a608 <__sinit>
 800a68e:	3648      	adds	r6, #72	; 0x48
 800a690:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a694:	3b01      	subs	r3, #1
 800a696:	d503      	bpl.n	800a6a0 <__sfp+0x28>
 800a698:	6833      	ldr	r3, [r6, #0]
 800a69a:	b30b      	cbz	r3, 800a6e0 <__sfp+0x68>
 800a69c:	6836      	ldr	r6, [r6, #0]
 800a69e:	e7f7      	b.n	800a690 <__sfp+0x18>
 800a6a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6a4:	b9d5      	cbnz	r5, 800a6dc <__sfp+0x64>
 800a6a6:	4b16      	ldr	r3, [pc, #88]	; (800a700 <__sfp+0x88>)
 800a6a8:	60e3      	str	r3, [r4, #12]
 800a6aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6ae:	6665      	str	r5, [r4, #100]	; 0x64
 800a6b0:	f7fa ff0e 	bl	80054d0 <__retarget_lock_init_recursive>
 800a6b4:	f7ff ff96 	bl	800a5e4 <__sfp_lock_release>
 800a6b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6c0:	6025      	str	r5, [r4, #0]
 800a6c2:	61a5      	str	r5, [r4, #24]
 800a6c4:	2208      	movs	r2, #8
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6cc:	f001 fe25 	bl	800c31a <memset>
 800a6d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6d8:	4620      	mov	r0, r4
 800a6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6dc:	3468      	adds	r4, #104	; 0x68
 800a6de:	e7d9      	b.n	800a694 <__sfp+0x1c>
 800a6e0:	2104      	movs	r1, #4
 800a6e2:	4638      	mov	r0, r7
 800a6e4:	f002 f8c2 	bl	800c86c <__sfmoreglue>
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	6030      	str	r0, [r6, #0]
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d1d5      	bne.n	800a69c <__sfp+0x24>
 800a6f0:	f7ff ff78 	bl	800a5e4 <__sfp_lock_release>
 800a6f4:	230c      	movs	r3, #12
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	e7ee      	b.n	800a6d8 <__sfp+0x60>
 800a6fa:	bf00      	nop
 800a6fc:	0800d6c4 	.word	0x0800d6c4
 800a700:	ffff0001 	.word	0xffff0001

0800a704 <_localeconv_r>:
 800a704:	4800      	ldr	r0, [pc, #0]	; (800a708 <_localeconv_r+0x4>)
 800a706:	4770      	bx	lr
 800a708:	20000264 	.word	0x20000264

0800a70c <__smakebuf_r>:
 800a70c:	898b      	ldrh	r3, [r1, #12]
 800a70e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a710:	079d      	lsls	r5, r3, #30
 800a712:	4606      	mov	r6, r0
 800a714:	460c      	mov	r4, r1
 800a716:	d507      	bpl.n	800a728 <__smakebuf_r+0x1c>
 800a718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	6123      	str	r3, [r4, #16]
 800a720:	2301      	movs	r3, #1
 800a722:	6163      	str	r3, [r4, #20]
 800a724:	b003      	add	sp, #12
 800a726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a728:	ab01      	add	r3, sp, #4
 800a72a:	466a      	mov	r2, sp
 800a72c:	f002 f8d3 	bl	800c8d6 <__swhatbuf_r>
 800a730:	9f00      	ldr	r7, [sp, #0]
 800a732:	4605      	mov	r5, r0
 800a734:	4639      	mov	r1, r7
 800a736:	4630      	mov	r0, r6
 800a738:	f7ff f8ea 	bl	8009910 <_malloc_r>
 800a73c:	b948      	cbnz	r0, 800a752 <__smakebuf_r+0x46>
 800a73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a742:	059a      	lsls	r2, r3, #22
 800a744:	d4ee      	bmi.n	800a724 <__smakebuf_r+0x18>
 800a746:	f023 0303 	bic.w	r3, r3, #3
 800a74a:	f043 0302 	orr.w	r3, r3, #2
 800a74e:	81a3      	strh	r3, [r4, #12]
 800a750:	e7e2      	b.n	800a718 <__smakebuf_r+0xc>
 800a752:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <__smakebuf_r+0x7c>)
 800a754:	62b3      	str	r3, [r6, #40]	; 0x28
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	6020      	str	r0, [r4, #0]
 800a75a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a75e:	81a3      	strh	r3, [r4, #12]
 800a760:	9b01      	ldr	r3, [sp, #4]
 800a762:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a766:	b15b      	cbz	r3, 800a780 <__smakebuf_r+0x74>
 800a768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a76c:	4630      	mov	r0, r6
 800a76e:	f000 fc7f 	bl	800b070 <_isatty_r>
 800a772:	b128      	cbz	r0, 800a780 <__smakebuf_r+0x74>
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	f023 0303 	bic.w	r3, r3, #3
 800a77a:	f043 0301 	orr.w	r3, r3, #1
 800a77e:	81a3      	strh	r3, [r4, #12]
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	431d      	orrs	r5, r3
 800a784:	81a5      	strh	r5, [r4, #12]
 800a786:	e7cd      	b.n	800a724 <__smakebuf_r+0x18>
 800a788:	0800a5cd 	.word	0x0800a5cd

0800a78c <__malloc_lock>:
 800a78c:	4801      	ldr	r0, [pc, #4]	; (800a794 <__malloc_lock+0x8>)
 800a78e:	f7fa becf 	b.w	8005530 <__retarget_lock_acquire_recursive>
 800a792:	bf00      	nop
 800a794:	20000360 	.word	0x20000360

0800a798 <__malloc_unlock>:
 800a798:	4801      	ldr	r0, [pc, #4]	; (800a7a0 <__malloc_unlock+0x8>)
 800a79a:	f7fa bee5 	b.w	8005568 <__retarget_lock_release_recursive>
 800a79e:	bf00      	nop
 800a7a0:	20000360 	.word	0x20000360

0800a7a4 <_Balloc>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	460d      	mov	r5, r1
 800a7ac:	b976      	cbnz	r6, 800a7cc <_Balloc+0x28>
 800a7ae:	2010      	movs	r0, #16
 800a7b0:	f7ff f85c 	bl	800986c <malloc>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	6260      	str	r0, [r4, #36]	; 0x24
 800a7b8:	b920      	cbnz	r0, 800a7c4 <_Balloc+0x20>
 800a7ba:	4b18      	ldr	r3, [pc, #96]	; (800a81c <_Balloc+0x78>)
 800a7bc:	4818      	ldr	r0, [pc, #96]	; (800a820 <_Balloc+0x7c>)
 800a7be:	2166      	movs	r1, #102	; 0x66
 800a7c0:	f000 fc16 	bl	800aff0 <__assert_func>
 800a7c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7c8:	6006      	str	r6, [r0, #0]
 800a7ca:	60c6      	str	r6, [r0, #12]
 800a7cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7ce:	68f3      	ldr	r3, [r6, #12]
 800a7d0:	b183      	cbz	r3, 800a7f4 <_Balloc+0x50>
 800a7d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7da:	b9b8      	cbnz	r0, 800a80c <_Balloc+0x68>
 800a7dc:	2101      	movs	r1, #1
 800a7de:	fa01 f605 	lsl.w	r6, r1, r5
 800a7e2:	1d72      	adds	r2, r6, #5
 800a7e4:	0092      	lsls	r2, r2, #2
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f002 f91f 	bl	800ca2a <_calloc_r>
 800a7ec:	b160      	cbz	r0, 800a808 <_Balloc+0x64>
 800a7ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7f2:	e00e      	b.n	800a812 <_Balloc+0x6e>
 800a7f4:	2221      	movs	r2, #33	; 0x21
 800a7f6:	2104      	movs	r1, #4
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f002 f916 	bl	800ca2a <_calloc_r>
 800a7fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a800:	60f0      	str	r0, [r6, #12]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1e4      	bne.n	800a7d2 <_Balloc+0x2e>
 800a808:	2000      	movs	r0, #0
 800a80a:	bd70      	pop	{r4, r5, r6, pc}
 800a80c:	6802      	ldr	r2, [r0, #0]
 800a80e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a812:	2300      	movs	r3, #0
 800a814:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a818:	e7f7      	b.n	800a80a <_Balloc+0x66>
 800a81a:	bf00      	nop
 800a81c:	0801376b 	.word	0x0801376b
 800a820:	08013807 	.word	0x08013807

0800a824 <_Bfree>:
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a828:	4605      	mov	r5, r0
 800a82a:	460c      	mov	r4, r1
 800a82c:	b976      	cbnz	r6, 800a84c <_Bfree+0x28>
 800a82e:	2010      	movs	r0, #16
 800a830:	f7ff f81c 	bl	800986c <malloc>
 800a834:	4602      	mov	r2, r0
 800a836:	6268      	str	r0, [r5, #36]	; 0x24
 800a838:	b920      	cbnz	r0, 800a844 <_Bfree+0x20>
 800a83a:	4b09      	ldr	r3, [pc, #36]	; (800a860 <_Bfree+0x3c>)
 800a83c:	4809      	ldr	r0, [pc, #36]	; (800a864 <_Bfree+0x40>)
 800a83e:	218a      	movs	r1, #138	; 0x8a
 800a840:	f000 fbd6 	bl	800aff0 <__assert_func>
 800a844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a848:	6006      	str	r6, [r0, #0]
 800a84a:	60c6      	str	r6, [r0, #12]
 800a84c:	b13c      	cbz	r4, 800a85e <_Bfree+0x3a>
 800a84e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a850:	6862      	ldr	r2, [r4, #4]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a858:	6021      	str	r1, [r4, #0]
 800a85a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	0801376b 	.word	0x0801376b
 800a864:	08013807 	.word	0x08013807

0800a868 <__multadd>:
 800a868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a86c:	690d      	ldr	r5, [r1, #16]
 800a86e:	4607      	mov	r7, r0
 800a870:	460c      	mov	r4, r1
 800a872:	461e      	mov	r6, r3
 800a874:	f101 0c14 	add.w	ip, r1, #20
 800a878:	2000      	movs	r0, #0
 800a87a:	f8dc 3000 	ldr.w	r3, [ip]
 800a87e:	b299      	uxth	r1, r3
 800a880:	fb02 6101 	mla	r1, r2, r1, r6
 800a884:	0c1e      	lsrs	r6, r3, #16
 800a886:	0c0b      	lsrs	r3, r1, #16
 800a888:	fb02 3306 	mla	r3, r2, r6, r3
 800a88c:	b289      	uxth	r1, r1
 800a88e:	3001      	adds	r0, #1
 800a890:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a894:	4285      	cmp	r5, r0
 800a896:	f84c 1b04 	str.w	r1, [ip], #4
 800a89a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a89e:	dcec      	bgt.n	800a87a <__multadd+0x12>
 800a8a0:	b30e      	cbz	r6, 800a8e6 <__multadd+0x7e>
 800a8a2:	68a3      	ldr	r3, [r4, #8]
 800a8a4:	42ab      	cmp	r3, r5
 800a8a6:	dc19      	bgt.n	800a8dc <__multadd+0x74>
 800a8a8:	6861      	ldr	r1, [r4, #4]
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	3101      	adds	r1, #1
 800a8ae:	f7ff ff79 	bl	800a7a4 <_Balloc>
 800a8b2:	4680      	mov	r8, r0
 800a8b4:	b928      	cbnz	r0, 800a8c2 <__multadd+0x5a>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	4b0c      	ldr	r3, [pc, #48]	; (800a8ec <__multadd+0x84>)
 800a8ba:	480d      	ldr	r0, [pc, #52]	; (800a8f0 <__multadd+0x88>)
 800a8bc:	21b5      	movs	r1, #181	; 0xb5
 800a8be:	f000 fb97 	bl	800aff0 <__assert_func>
 800a8c2:	6922      	ldr	r2, [r4, #16]
 800a8c4:	3202      	adds	r2, #2
 800a8c6:	f104 010c 	add.w	r1, r4, #12
 800a8ca:	0092      	lsls	r2, r2, #2
 800a8cc:	300c      	adds	r0, #12
 800a8ce:	f001 fd16 	bl	800c2fe <memcpy>
 800a8d2:	4621      	mov	r1, r4
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	f7ff ffa5 	bl	800a824 <_Bfree>
 800a8da:	4644      	mov	r4, r8
 800a8dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8e0:	3501      	adds	r5, #1
 800a8e2:	615e      	str	r6, [r3, #20]
 800a8e4:	6125      	str	r5, [r4, #16]
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ec:	080137f6 	.word	0x080137f6
 800a8f0:	08013807 	.word	0x08013807

0800a8f4 <__i2b>:
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	2101      	movs	r1, #1
 800a8fa:	f7ff ff53 	bl	800a7a4 <_Balloc>
 800a8fe:	4602      	mov	r2, r0
 800a900:	b928      	cbnz	r0, 800a90e <__i2b+0x1a>
 800a902:	4b05      	ldr	r3, [pc, #20]	; (800a918 <__i2b+0x24>)
 800a904:	4805      	ldr	r0, [pc, #20]	; (800a91c <__i2b+0x28>)
 800a906:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a90a:	f000 fb71 	bl	800aff0 <__assert_func>
 800a90e:	2301      	movs	r3, #1
 800a910:	6144      	str	r4, [r0, #20]
 800a912:	6103      	str	r3, [r0, #16]
 800a914:	bd10      	pop	{r4, pc}
 800a916:	bf00      	nop
 800a918:	080137f6 	.word	0x080137f6
 800a91c:	08013807 	.word	0x08013807

0800a920 <__multiply>:
 800a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a924:	4614      	mov	r4, r2
 800a926:	690a      	ldr	r2, [r1, #16]
 800a928:	6923      	ldr	r3, [r4, #16]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	bfa8      	it	ge
 800a92e:	4623      	movge	r3, r4
 800a930:	460f      	mov	r7, r1
 800a932:	bfa4      	itt	ge
 800a934:	460c      	movge	r4, r1
 800a936:	461f      	movge	r7, r3
 800a938:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a93c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a940:	68a3      	ldr	r3, [r4, #8]
 800a942:	6861      	ldr	r1, [r4, #4]
 800a944:	eb0a 0609 	add.w	r6, sl, r9
 800a948:	42b3      	cmp	r3, r6
 800a94a:	b085      	sub	sp, #20
 800a94c:	bfb8      	it	lt
 800a94e:	3101      	addlt	r1, #1
 800a950:	f7ff ff28 	bl	800a7a4 <_Balloc>
 800a954:	b930      	cbnz	r0, 800a964 <__multiply+0x44>
 800a956:	4602      	mov	r2, r0
 800a958:	4b44      	ldr	r3, [pc, #272]	; (800aa6c <__multiply+0x14c>)
 800a95a:	4845      	ldr	r0, [pc, #276]	; (800aa70 <__multiply+0x150>)
 800a95c:	f240 115d 	movw	r1, #349	; 0x15d
 800a960:	f000 fb46 	bl	800aff0 <__assert_func>
 800a964:	f100 0514 	add.w	r5, r0, #20
 800a968:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a96c:	462b      	mov	r3, r5
 800a96e:	2200      	movs	r2, #0
 800a970:	4543      	cmp	r3, r8
 800a972:	d321      	bcc.n	800a9b8 <__multiply+0x98>
 800a974:	f107 0114 	add.w	r1, r7, #20
 800a978:	f104 0214 	add.w	r2, r4, #20
 800a97c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a980:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a984:	9302      	str	r3, [sp, #8]
 800a986:	1b13      	subs	r3, r2, r4
 800a988:	3b15      	subs	r3, #21
 800a98a:	f023 0303 	bic.w	r3, r3, #3
 800a98e:	3304      	adds	r3, #4
 800a990:	f104 0715 	add.w	r7, r4, #21
 800a994:	42ba      	cmp	r2, r7
 800a996:	bf38      	it	cc
 800a998:	2304      	movcc	r3, #4
 800a99a:	9301      	str	r3, [sp, #4]
 800a99c:	9b02      	ldr	r3, [sp, #8]
 800a99e:	9103      	str	r1, [sp, #12]
 800a9a0:	428b      	cmp	r3, r1
 800a9a2:	d80c      	bhi.n	800a9be <__multiply+0x9e>
 800a9a4:	2e00      	cmp	r6, #0
 800a9a6:	dd03      	ble.n	800a9b0 <__multiply+0x90>
 800a9a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d05a      	beq.n	800aa66 <__multiply+0x146>
 800a9b0:	6106      	str	r6, [r0, #16]
 800a9b2:	b005      	add	sp, #20
 800a9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b8:	f843 2b04 	str.w	r2, [r3], #4
 800a9bc:	e7d8      	b.n	800a970 <__multiply+0x50>
 800a9be:	f8b1 a000 	ldrh.w	sl, [r1]
 800a9c2:	f1ba 0f00 	cmp.w	sl, #0
 800a9c6:	d023      	beq.n	800aa10 <__multiply+0xf0>
 800a9c8:	f104 0e14 	add.w	lr, r4, #20
 800a9cc:	46a9      	mov	r9, r5
 800a9ce:	f04f 0c00 	mov.w	ip, #0
 800a9d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9d6:	f8d9 3000 	ldr.w	r3, [r9]
 800a9da:	fa1f fb87 	uxth.w	fp, r7
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a9e4:	4463      	add	r3, ip
 800a9e6:	f8d9 c000 	ldr.w	ip, [r9]
 800a9ea:	0c3f      	lsrs	r7, r7, #16
 800a9ec:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a9f0:	fb0a c707 	mla	r7, sl, r7, ip
 800a9f4:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a9fe:	4572      	cmp	r2, lr
 800aa00:	f849 3b04 	str.w	r3, [r9], #4
 800aa04:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa08:	d8e3      	bhi.n	800a9d2 <__multiply+0xb2>
 800aa0a:	9b01      	ldr	r3, [sp, #4]
 800aa0c:	f845 c003 	str.w	ip, [r5, r3]
 800aa10:	9b03      	ldr	r3, [sp, #12]
 800aa12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa16:	3104      	adds	r1, #4
 800aa18:	f1b9 0f00 	cmp.w	r9, #0
 800aa1c:	d021      	beq.n	800aa62 <__multiply+0x142>
 800aa1e:	682b      	ldr	r3, [r5, #0]
 800aa20:	f104 0c14 	add.w	ip, r4, #20
 800aa24:	46ae      	mov	lr, r5
 800aa26:	f04f 0a00 	mov.w	sl, #0
 800aa2a:	f8bc b000 	ldrh.w	fp, [ip]
 800aa2e:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa32:	fb09 770b 	mla	r7, r9, fp, r7
 800aa36:	4457      	add	r7, sl
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa3e:	f84e 3b04 	str.w	r3, [lr], #4
 800aa42:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa4a:	f8be 3000 	ldrh.w	r3, [lr]
 800aa4e:	fb09 330a 	mla	r3, r9, sl, r3
 800aa52:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aa56:	4562      	cmp	r2, ip
 800aa58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa5c:	d8e5      	bhi.n	800aa2a <__multiply+0x10a>
 800aa5e:	9f01      	ldr	r7, [sp, #4]
 800aa60:	51eb      	str	r3, [r5, r7]
 800aa62:	3504      	adds	r5, #4
 800aa64:	e79a      	b.n	800a99c <__multiply+0x7c>
 800aa66:	3e01      	subs	r6, #1
 800aa68:	e79c      	b.n	800a9a4 <__multiply+0x84>
 800aa6a:	bf00      	nop
 800aa6c:	080137f6 	.word	0x080137f6
 800aa70:	08013807 	.word	0x08013807

0800aa74 <__pow5mult>:
 800aa74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa78:	4615      	mov	r5, r2
 800aa7a:	f012 0203 	ands.w	r2, r2, #3
 800aa7e:	4607      	mov	r7, r0
 800aa80:	460e      	mov	r6, r1
 800aa82:	d007      	beq.n	800aa94 <__pow5mult+0x20>
 800aa84:	4c25      	ldr	r4, [pc, #148]	; (800ab1c <__pow5mult+0xa8>)
 800aa86:	3a01      	subs	r2, #1
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa8e:	f7ff feeb 	bl	800a868 <__multadd>
 800aa92:	4606      	mov	r6, r0
 800aa94:	10ad      	asrs	r5, r5, #2
 800aa96:	d03d      	beq.n	800ab14 <__pow5mult+0xa0>
 800aa98:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800aa9a:	b97c      	cbnz	r4, 800aabc <__pow5mult+0x48>
 800aa9c:	2010      	movs	r0, #16
 800aa9e:	f7fe fee5 	bl	800986c <malloc>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	6278      	str	r0, [r7, #36]	; 0x24
 800aaa6:	b928      	cbnz	r0, 800aab4 <__pow5mult+0x40>
 800aaa8:	4b1d      	ldr	r3, [pc, #116]	; (800ab20 <__pow5mult+0xac>)
 800aaaa:	481e      	ldr	r0, [pc, #120]	; (800ab24 <__pow5mult+0xb0>)
 800aaac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aab0:	f000 fa9e 	bl	800aff0 <__assert_func>
 800aab4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aab8:	6004      	str	r4, [r0, #0]
 800aaba:	60c4      	str	r4, [r0, #12]
 800aabc:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
 800aac0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aac4:	b94c      	cbnz	r4, 800aada <__pow5mult+0x66>
 800aac6:	f240 2171 	movw	r1, #625	; 0x271
 800aaca:	4638      	mov	r0, r7
 800aacc:	f7ff ff12 	bl	800a8f4 <__i2b>
 800aad0:	2300      	movs	r3, #0
 800aad2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aad6:	4604      	mov	r4, r0
 800aad8:	6003      	str	r3, [r0, #0]
 800aada:	f04f 0900 	mov.w	r9, #0
 800aade:	07eb      	lsls	r3, r5, #31
 800aae0:	d50a      	bpl.n	800aaf8 <__pow5mult+0x84>
 800aae2:	4631      	mov	r1, r6
 800aae4:	4622      	mov	r2, r4
 800aae6:	4638      	mov	r0, r7
 800aae8:	f7ff ff1a 	bl	800a920 <__multiply>
 800aaec:	4631      	mov	r1, r6
 800aaee:	4680      	mov	r8, r0
 800aaf0:	4638      	mov	r0, r7
 800aaf2:	f7ff fe97 	bl	800a824 <_Bfree>
 800aaf6:	4646      	mov	r6, r8
 800aaf8:	106d      	asrs	r5, r5, #1
 800aafa:	d00b      	beq.n	800ab14 <__pow5mult+0xa0>
 800aafc:	6820      	ldr	r0, [r4, #0]
 800aafe:	b938      	cbnz	r0, 800ab10 <__pow5mult+0x9c>
 800ab00:	4622      	mov	r2, r4
 800ab02:	4621      	mov	r1, r4
 800ab04:	4638      	mov	r0, r7
 800ab06:	f7ff ff0b 	bl	800a920 <__multiply>
 800ab0a:	6020      	str	r0, [r4, #0]
 800ab0c:	f8c0 9000 	str.w	r9, [r0]
 800ab10:	4604      	mov	r4, r0
 800ab12:	e7e4      	b.n	800aade <__pow5mult+0x6a>
 800ab14:	4630      	mov	r0, r6
 800ab16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab1a:	bf00      	nop
 800ab1c:	0800d728 	.word	0x0800d728
 800ab20:	0801376b 	.word	0x0801376b
 800ab24:	08013807 	.word	0x08013807

0800ab28 <__lshift>:
 800ab28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab2c:	460c      	mov	r4, r1
 800ab2e:	6849      	ldr	r1, [r1, #4]
 800ab30:	6923      	ldr	r3, [r4, #16]
 800ab32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab36:	68a3      	ldr	r3, [r4, #8]
 800ab38:	4607      	mov	r7, r0
 800ab3a:	4691      	mov	r9, r2
 800ab3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab40:	f108 0601 	add.w	r6, r8, #1
 800ab44:	42b3      	cmp	r3, r6
 800ab46:	db0b      	blt.n	800ab60 <__lshift+0x38>
 800ab48:	4638      	mov	r0, r7
 800ab4a:	f7ff fe2b 	bl	800a7a4 <_Balloc>
 800ab4e:	4605      	mov	r5, r0
 800ab50:	b948      	cbnz	r0, 800ab66 <__lshift+0x3e>
 800ab52:	4602      	mov	r2, r0
 800ab54:	4b28      	ldr	r3, [pc, #160]	; (800abf8 <__lshift+0xd0>)
 800ab56:	4829      	ldr	r0, [pc, #164]	; (800abfc <__lshift+0xd4>)
 800ab58:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab5c:	f000 fa48 	bl	800aff0 <__assert_func>
 800ab60:	3101      	adds	r1, #1
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	e7ee      	b.n	800ab44 <__lshift+0x1c>
 800ab66:	2300      	movs	r3, #0
 800ab68:	f100 0114 	add.w	r1, r0, #20
 800ab6c:	f100 0210 	add.w	r2, r0, #16
 800ab70:	4618      	mov	r0, r3
 800ab72:	4553      	cmp	r3, sl
 800ab74:	db33      	blt.n	800abde <__lshift+0xb6>
 800ab76:	6920      	ldr	r0, [r4, #16]
 800ab78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab7c:	f104 0314 	add.w	r3, r4, #20
 800ab80:	f019 091f 	ands.w	r9, r9, #31
 800ab84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab8c:	d02b      	beq.n	800abe6 <__lshift+0xbe>
 800ab8e:	f1c9 0e20 	rsb	lr, r9, #32
 800ab92:	468a      	mov	sl, r1
 800ab94:	2200      	movs	r2, #0
 800ab96:	6818      	ldr	r0, [r3, #0]
 800ab98:	fa00 f009 	lsl.w	r0, r0, r9
 800ab9c:	4310      	orrs	r0, r2
 800ab9e:	f84a 0b04 	str.w	r0, [sl], #4
 800aba2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aba6:	459c      	cmp	ip, r3
 800aba8:	fa22 f20e 	lsr.w	r2, r2, lr
 800abac:	d8f3      	bhi.n	800ab96 <__lshift+0x6e>
 800abae:	ebac 0304 	sub.w	r3, ip, r4
 800abb2:	3b15      	subs	r3, #21
 800abb4:	f023 0303 	bic.w	r3, r3, #3
 800abb8:	3304      	adds	r3, #4
 800abba:	f104 0015 	add.w	r0, r4, #21
 800abbe:	4584      	cmp	ip, r0
 800abc0:	bf38      	it	cc
 800abc2:	2304      	movcc	r3, #4
 800abc4:	50ca      	str	r2, [r1, r3]
 800abc6:	b10a      	cbz	r2, 800abcc <__lshift+0xa4>
 800abc8:	f108 0602 	add.w	r6, r8, #2
 800abcc:	3e01      	subs	r6, #1
 800abce:	4638      	mov	r0, r7
 800abd0:	612e      	str	r6, [r5, #16]
 800abd2:	4621      	mov	r1, r4
 800abd4:	f7ff fe26 	bl	800a824 <_Bfree>
 800abd8:	4628      	mov	r0, r5
 800abda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abde:	f842 0f04 	str.w	r0, [r2, #4]!
 800abe2:	3301      	adds	r3, #1
 800abe4:	e7c5      	b.n	800ab72 <__lshift+0x4a>
 800abe6:	3904      	subs	r1, #4
 800abe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abec:	f841 2f04 	str.w	r2, [r1, #4]!
 800abf0:	459c      	cmp	ip, r3
 800abf2:	d8f9      	bhi.n	800abe8 <__lshift+0xc0>
 800abf4:	e7ea      	b.n	800abcc <__lshift+0xa4>
 800abf6:	bf00      	nop
 800abf8:	080137f6 	.word	0x080137f6
 800abfc:	08013807 	.word	0x08013807

0800ac00 <__mdiff>:
 800ac00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac04:	4689      	mov	r9, r1
 800ac06:	4606      	mov	r6, r0
 800ac08:	4611      	mov	r1, r2
 800ac0a:	4648      	mov	r0, r9
 800ac0c:	4614      	mov	r4, r2
 800ac0e:	f001 fef1 	bl	800c9f4 <__mcmp>
 800ac12:	1e05      	subs	r5, r0, #0
 800ac14:	d112      	bne.n	800ac3c <__mdiff+0x3c>
 800ac16:	4629      	mov	r1, r5
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f7ff fdc3 	bl	800a7a4 <_Balloc>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	b928      	cbnz	r0, 800ac2e <__mdiff+0x2e>
 800ac22:	4b3e      	ldr	r3, [pc, #248]	; (800ad1c <__mdiff+0x11c>)
 800ac24:	f240 2132 	movw	r1, #562	; 0x232
 800ac28:	483d      	ldr	r0, [pc, #244]	; (800ad20 <__mdiff+0x120>)
 800ac2a:	f000 f9e1 	bl	800aff0 <__assert_func>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac34:	4610      	mov	r0, r2
 800ac36:	b003      	add	sp, #12
 800ac38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3c:	bfbc      	itt	lt
 800ac3e:	464b      	movlt	r3, r9
 800ac40:	46a1      	movlt	r9, r4
 800ac42:	4630      	mov	r0, r6
 800ac44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac48:	bfba      	itte	lt
 800ac4a:	461c      	movlt	r4, r3
 800ac4c:	2501      	movlt	r5, #1
 800ac4e:	2500      	movge	r5, #0
 800ac50:	f7ff fda8 	bl	800a7a4 <_Balloc>
 800ac54:	4602      	mov	r2, r0
 800ac56:	b918      	cbnz	r0, 800ac60 <__mdiff+0x60>
 800ac58:	4b30      	ldr	r3, [pc, #192]	; (800ad1c <__mdiff+0x11c>)
 800ac5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ac5e:	e7e3      	b.n	800ac28 <__mdiff+0x28>
 800ac60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac64:	6926      	ldr	r6, [r4, #16]
 800ac66:	60c5      	str	r5, [r0, #12]
 800ac68:	f109 0310 	add.w	r3, r9, #16
 800ac6c:	f109 0514 	add.w	r5, r9, #20
 800ac70:	f104 0e14 	add.w	lr, r4, #20
 800ac74:	f100 0b14 	add.w	fp, r0, #20
 800ac78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ac7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ac80:	9301      	str	r3, [sp, #4]
 800ac82:	46d9      	mov	r9, fp
 800ac84:	f04f 0c00 	mov.w	ip, #0
 800ac88:	9b01      	ldr	r3, [sp, #4]
 800ac8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac92:	9301      	str	r3, [sp, #4]
 800ac94:	b281      	uxth	r1, r0
 800ac96:	fa1f f38a 	uxth.w	r3, sl
 800ac9a:	1a5b      	subs	r3, r3, r1
 800ac9c:	0c00      	lsrs	r0, r0, #16
 800ac9e:	4463      	add	r3, ip
 800aca0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aca4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800acae:	4576      	cmp	r6, lr
 800acb0:	f849 3b04 	str.w	r3, [r9], #4
 800acb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800acb8:	d8e6      	bhi.n	800ac88 <__mdiff+0x88>
 800acba:	1b33      	subs	r3, r6, r4
 800acbc:	3b15      	subs	r3, #21
 800acbe:	f023 0303 	bic.w	r3, r3, #3
 800acc2:	3415      	adds	r4, #21
 800acc4:	3304      	adds	r3, #4
 800acc6:	42a6      	cmp	r6, r4
 800acc8:	bf38      	it	cc
 800acca:	2304      	movcc	r3, #4
 800accc:	441d      	add	r5, r3
 800acce:	445b      	add	r3, fp
 800acd0:	461e      	mov	r6, r3
 800acd2:	462c      	mov	r4, r5
 800acd4:	4544      	cmp	r4, r8
 800acd6:	d30e      	bcc.n	800acf6 <__mdiff+0xf6>
 800acd8:	f108 0103 	add.w	r1, r8, #3
 800acdc:	1b49      	subs	r1, r1, r5
 800acde:	f021 0103 	bic.w	r1, r1, #3
 800ace2:	3d03      	subs	r5, #3
 800ace4:	45a8      	cmp	r8, r5
 800ace6:	bf38      	it	cc
 800ace8:	2100      	movcc	r1, #0
 800acea:	440b      	add	r3, r1
 800acec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acf0:	b191      	cbz	r1, 800ad18 <__mdiff+0x118>
 800acf2:	6117      	str	r7, [r2, #16]
 800acf4:	e79e      	b.n	800ac34 <__mdiff+0x34>
 800acf6:	f854 1b04 	ldr.w	r1, [r4], #4
 800acfa:	46e6      	mov	lr, ip
 800acfc:	0c08      	lsrs	r0, r1, #16
 800acfe:	fa1c fc81 	uxtah	ip, ip, r1
 800ad02:	4471      	add	r1, lr
 800ad04:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad08:	b289      	uxth	r1, r1
 800ad0a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad0e:	f846 1b04 	str.w	r1, [r6], #4
 800ad12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad16:	e7dd      	b.n	800acd4 <__mdiff+0xd4>
 800ad18:	3f01      	subs	r7, #1
 800ad1a:	e7e7      	b.n	800acec <__mdiff+0xec>
 800ad1c:	080137f6 	.word	0x080137f6
 800ad20:	08013807 	.word	0x08013807

0800ad24 <__d2b>:
 800ad24:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ad28:	2101      	movs	r1, #1
 800ad2a:	9e08      	ldr	r6, [sp, #32]
 800ad2c:	4690      	mov	r8, r2
 800ad2e:	4699      	mov	r9, r3
 800ad30:	f7ff fd38 	bl	800a7a4 <_Balloc>
 800ad34:	4604      	mov	r4, r0
 800ad36:	b930      	cbnz	r0, 800ad46 <__d2b+0x22>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	4b24      	ldr	r3, [pc, #144]	; (800adcc <__d2b+0xa8>)
 800ad3c:	4824      	ldr	r0, [pc, #144]	; (800add0 <__d2b+0xac>)
 800ad3e:	f240 310a 	movw	r1, #778	; 0x30a
 800ad42:	f000 f955 	bl	800aff0 <__assert_func>
 800ad46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad4e:	b10d      	cbz	r5, 800ad54 <__d2b+0x30>
 800ad50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	f1b8 0300 	subs.w	r3, r8, #0
 800ad5a:	d024      	beq.n	800ada6 <__d2b+0x82>
 800ad5c:	4668      	mov	r0, sp
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	f001 fe1b 	bl	800c99a <__lo0bits>
 800ad64:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad68:	b1d8      	cbz	r0, 800ada2 <__d2b+0x7e>
 800ad6a:	f1c0 0320 	rsb	r3, r0, #32
 800ad6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad72:	430b      	orrs	r3, r1
 800ad74:	40c2      	lsrs	r2, r0
 800ad76:	6163      	str	r3, [r4, #20]
 800ad78:	9201      	str	r2, [sp, #4]
 800ad7a:	9b01      	ldr	r3, [sp, #4]
 800ad7c:	61a3      	str	r3, [r4, #24]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	bf0c      	ite	eq
 800ad82:	2201      	moveq	r2, #1
 800ad84:	2202      	movne	r2, #2
 800ad86:	6122      	str	r2, [r4, #16]
 800ad88:	b1ad      	cbz	r5, 800adb6 <__d2b+0x92>
 800ad8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad8e:	4405      	add	r5, r0
 800ad90:	6035      	str	r5, [r6, #0]
 800ad92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad98:	6018      	str	r0, [r3, #0]
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	b002      	add	sp, #8
 800ad9e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ada2:	6161      	str	r1, [r4, #20]
 800ada4:	e7e9      	b.n	800ad7a <__d2b+0x56>
 800ada6:	a801      	add	r0, sp, #4
 800ada8:	f001 fdf7 	bl	800c99a <__lo0bits>
 800adac:	9b01      	ldr	r3, [sp, #4]
 800adae:	6163      	str	r3, [r4, #20]
 800adb0:	3020      	adds	r0, #32
 800adb2:	2201      	movs	r2, #1
 800adb4:	e7e7      	b.n	800ad86 <__d2b+0x62>
 800adb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800adba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adbe:	6030      	str	r0, [r6, #0]
 800adc0:	6918      	ldr	r0, [r3, #16]
 800adc2:	f001 fdc8 	bl	800c956 <__hi0bits>
 800adc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800adca:	e7e4      	b.n	800ad96 <__d2b+0x72>
 800adcc:	080137f6 	.word	0x080137f6
 800add0:	08013807 	.word	0x08013807

0800add4 <_svfiprintf_r>:
 800add4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add8:	4698      	mov	r8, r3
 800adda:	898b      	ldrh	r3, [r1, #12]
 800addc:	061b      	lsls	r3, r3, #24
 800adde:	b09d      	sub	sp, #116	; 0x74
 800ade0:	4607      	mov	r7, r0
 800ade2:	460d      	mov	r5, r1
 800ade4:	4614      	mov	r4, r2
 800ade6:	d510      	bpl.n	800ae0a <_svfiprintf_r+0x36>
 800ade8:	690b      	ldr	r3, [r1, #16]
 800adea:	b973      	cbnz	r3, 800ae0a <_svfiprintf_r+0x36>
 800adec:	2140      	movs	r1, #64	; 0x40
 800adee:	f7fe fd8f 	bl	8009910 <_malloc_r>
 800adf2:	6028      	str	r0, [r5, #0]
 800adf4:	6128      	str	r0, [r5, #16]
 800adf6:	b930      	cbnz	r0, 800ae06 <_svfiprintf_r+0x32>
 800adf8:	230c      	movs	r3, #12
 800adfa:	603b      	str	r3, [r7, #0]
 800adfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ae00:	b01d      	add	sp, #116	; 0x74
 800ae02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae06:	2340      	movs	r3, #64	; 0x40
 800ae08:	616b      	str	r3, [r5, #20]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae0e:	2320      	movs	r3, #32
 800ae10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae18:	2330      	movs	r3, #48	; 0x30
 800ae1a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800afb8 <_svfiprintf_r+0x1e4>
 800ae1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae22:	f04f 0901 	mov.w	r9, #1
 800ae26:	4623      	mov	r3, r4
 800ae28:	469a      	mov	sl, r3
 800ae2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae2e:	b10a      	cbz	r2, 800ae34 <_svfiprintf_r+0x60>
 800ae30:	2a25      	cmp	r2, #37	; 0x25
 800ae32:	d1f9      	bne.n	800ae28 <_svfiprintf_r+0x54>
 800ae34:	ebba 0b04 	subs.w	fp, sl, r4
 800ae38:	d00b      	beq.n	800ae52 <_svfiprintf_r+0x7e>
 800ae3a:	465b      	mov	r3, fp
 800ae3c:	4622      	mov	r2, r4
 800ae3e:	4629      	mov	r1, r5
 800ae40:	4638      	mov	r0, r7
 800ae42:	f001 fe25 	bl	800ca90 <__ssputs_r>
 800ae46:	3001      	adds	r0, #1
 800ae48:	f000 80a7 	beq.w	800af9a <_svfiprintf_r+0x1c6>
 800ae4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae4e:	445a      	add	r2, fp
 800ae50:	9209      	str	r2, [sp, #36]	; 0x24
 800ae52:	f89a 3000 	ldrb.w	r3, [sl]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f000 809f 	beq.w	800af9a <_svfiprintf_r+0x1c6>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae66:	f10a 0a01 	add.w	sl, sl, #1
 800ae6a:	9304      	str	r3, [sp, #16]
 800ae6c:	9307      	str	r3, [sp, #28]
 800ae6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae72:	931a      	str	r3, [sp, #104]	; 0x68
 800ae74:	4654      	mov	r4, sl
 800ae76:	2205      	movs	r2, #5
 800ae78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae7c:	484e      	ldr	r0, [pc, #312]	; (800afb8 <_svfiprintf_r+0x1e4>)
 800ae7e:	f7f5 f98f 	bl	80001a0 <memchr>
 800ae82:	9a04      	ldr	r2, [sp, #16]
 800ae84:	b9d8      	cbnz	r0, 800aebe <_svfiprintf_r+0xea>
 800ae86:	06d0      	lsls	r0, r2, #27
 800ae88:	bf44      	itt	mi
 800ae8a:	2320      	movmi	r3, #32
 800ae8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae90:	0711      	lsls	r1, r2, #28
 800ae92:	bf44      	itt	mi
 800ae94:	232b      	movmi	r3, #43	; 0x2b
 800ae96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae9e:	2b2a      	cmp	r3, #42	; 0x2a
 800aea0:	d015      	beq.n	800aece <_svfiprintf_r+0xfa>
 800aea2:	9a07      	ldr	r2, [sp, #28]
 800aea4:	4654      	mov	r4, sl
 800aea6:	2000      	movs	r0, #0
 800aea8:	f04f 0c0a 	mov.w	ip, #10
 800aeac:	4621      	mov	r1, r4
 800aeae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeb2:	3b30      	subs	r3, #48	; 0x30
 800aeb4:	2b09      	cmp	r3, #9
 800aeb6:	d94b      	bls.n	800af50 <_svfiprintf_r+0x17c>
 800aeb8:	b1b0      	cbz	r0, 800aee8 <_svfiprintf_r+0x114>
 800aeba:	9207      	str	r2, [sp, #28]
 800aebc:	e014      	b.n	800aee8 <_svfiprintf_r+0x114>
 800aebe:	eba0 0308 	sub.w	r3, r0, r8
 800aec2:	fa09 f303 	lsl.w	r3, r9, r3
 800aec6:	4313      	orrs	r3, r2
 800aec8:	9304      	str	r3, [sp, #16]
 800aeca:	46a2      	mov	sl, r4
 800aecc:	e7d2      	b.n	800ae74 <_svfiprintf_r+0xa0>
 800aece:	9b03      	ldr	r3, [sp, #12]
 800aed0:	1d19      	adds	r1, r3, #4
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	9103      	str	r1, [sp, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	bfbb      	ittet	lt
 800aeda:	425b      	neglt	r3, r3
 800aedc:	f042 0202 	orrlt.w	r2, r2, #2
 800aee0:	9307      	strge	r3, [sp, #28]
 800aee2:	9307      	strlt	r3, [sp, #28]
 800aee4:	bfb8      	it	lt
 800aee6:	9204      	strlt	r2, [sp, #16]
 800aee8:	7823      	ldrb	r3, [r4, #0]
 800aeea:	2b2e      	cmp	r3, #46	; 0x2e
 800aeec:	d10a      	bne.n	800af04 <_svfiprintf_r+0x130>
 800aeee:	7863      	ldrb	r3, [r4, #1]
 800aef0:	2b2a      	cmp	r3, #42	; 0x2a
 800aef2:	d132      	bne.n	800af5a <_svfiprintf_r+0x186>
 800aef4:	9b03      	ldr	r3, [sp, #12]
 800aef6:	1d1a      	adds	r2, r3, #4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	9203      	str	r2, [sp, #12]
 800aefc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af00:	3402      	adds	r4, #2
 800af02:	9305      	str	r3, [sp, #20]
 800af04:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 800afbc <_svfiprintf_r+0x1e8>
 800af08:	7821      	ldrb	r1, [r4, #0]
 800af0a:	2203      	movs	r2, #3
 800af0c:	4650      	mov	r0, sl
 800af0e:	f7f5 f947 	bl	80001a0 <memchr>
 800af12:	b138      	cbz	r0, 800af24 <_svfiprintf_r+0x150>
 800af14:	9b04      	ldr	r3, [sp, #16]
 800af16:	eba0 000a 	sub.w	r0, r0, sl
 800af1a:	2240      	movs	r2, #64	; 0x40
 800af1c:	4082      	lsls	r2, r0
 800af1e:	4313      	orrs	r3, r2
 800af20:	3401      	adds	r4, #1
 800af22:	9304      	str	r3, [sp, #16]
 800af24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af28:	4825      	ldr	r0, [pc, #148]	; (800afc0 <_svfiprintf_r+0x1ec>)
 800af2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af2e:	2206      	movs	r2, #6
 800af30:	f7f5 f936 	bl	80001a0 <memchr>
 800af34:	2800      	cmp	r0, #0
 800af36:	d036      	beq.n	800afa6 <_svfiprintf_r+0x1d2>
 800af38:	4b22      	ldr	r3, [pc, #136]	; (800afc4 <_svfiprintf_r+0x1f0>)
 800af3a:	bb1b      	cbnz	r3, 800af84 <_svfiprintf_r+0x1b0>
 800af3c:	9b03      	ldr	r3, [sp, #12]
 800af3e:	3307      	adds	r3, #7
 800af40:	f023 0307 	bic.w	r3, r3, #7
 800af44:	3308      	adds	r3, #8
 800af46:	9303      	str	r3, [sp, #12]
 800af48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af4a:	4433      	add	r3, r6
 800af4c:	9309      	str	r3, [sp, #36]	; 0x24
 800af4e:	e76a      	b.n	800ae26 <_svfiprintf_r+0x52>
 800af50:	fb0c 3202 	mla	r2, ip, r2, r3
 800af54:	460c      	mov	r4, r1
 800af56:	2001      	movs	r0, #1
 800af58:	e7a8      	b.n	800aeac <_svfiprintf_r+0xd8>
 800af5a:	2300      	movs	r3, #0
 800af5c:	3401      	adds	r4, #1
 800af5e:	9305      	str	r3, [sp, #20]
 800af60:	4619      	mov	r1, r3
 800af62:	f04f 0c0a 	mov.w	ip, #10
 800af66:	4620      	mov	r0, r4
 800af68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af6c:	3a30      	subs	r2, #48	; 0x30
 800af6e:	2a09      	cmp	r2, #9
 800af70:	d903      	bls.n	800af7a <_svfiprintf_r+0x1a6>
 800af72:	2b00      	cmp	r3, #0
 800af74:	d0c6      	beq.n	800af04 <_svfiprintf_r+0x130>
 800af76:	9105      	str	r1, [sp, #20]
 800af78:	e7c4      	b.n	800af04 <_svfiprintf_r+0x130>
 800af7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af7e:	4604      	mov	r4, r0
 800af80:	2301      	movs	r3, #1
 800af82:	e7f0      	b.n	800af66 <_svfiprintf_r+0x192>
 800af84:	ab03      	add	r3, sp, #12
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	462a      	mov	r2, r5
 800af8a:	4b0f      	ldr	r3, [pc, #60]	; (800afc8 <_svfiprintf_r+0x1f4>)
 800af8c:	a904      	add	r1, sp, #16
 800af8e:	4638      	mov	r0, r7
 800af90:	f7fe fe44 	bl	8009c1c <_printf_float>
 800af94:	1c42      	adds	r2, r0, #1
 800af96:	4606      	mov	r6, r0
 800af98:	d1d6      	bne.n	800af48 <_svfiprintf_r+0x174>
 800af9a:	89ab      	ldrh	r3, [r5, #12]
 800af9c:	065b      	lsls	r3, r3, #25
 800af9e:	f53f af2d 	bmi.w	800adfc <_svfiprintf_r+0x28>
 800afa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afa4:	e72c      	b.n	800ae00 <_svfiprintf_r+0x2c>
 800afa6:	ab03      	add	r3, sp, #12
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	462a      	mov	r2, r5
 800afac:	4b06      	ldr	r3, [pc, #24]	; (800afc8 <_svfiprintf_r+0x1f4>)
 800afae:	a904      	add	r1, sp, #16
 800afb0:	4638      	mov	r0, r7
 800afb2:	f7ff f869 	bl	800a088 <_printf_i>
 800afb6:	e7ed      	b.n	800af94 <_svfiprintf_r+0x1c0>
 800afb8:	0801371f 	.word	0x0801371f
 800afbc:	08013725 	.word	0x08013725
 800afc0:	08013729 	.word	0x08013729
 800afc4:	08009c1d 	.word	0x08009c1d
 800afc8:	0800ca91 	.word	0x0800ca91

0800afcc <_write_r>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	4d07      	ldr	r5, [pc, #28]	; (800afec <_write_r+0x20>)
 800afd0:	4604      	mov	r4, r0
 800afd2:	4608      	mov	r0, r1
 800afd4:	4611      	mov	r1, r2
 800afd6:	2200      	movs	r2, #0
 800afd8:	602a      	str	r2, [r5, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	f000 fb7a 	bl	800b6d4 <_write>
 800afe0:	1c43      	adds	r3, r0, #1
 800afe2:	d102      	bne.n	800afea <_write_r+0x1e>
 800afe4:	682b      	ldr	r3, [r5, #0]
 800afe6:	b103      	cbz	r3, 800afea <_write_r+0x1e>
 800afe8:	6023      	str	r3, [r4, #0]
 800afea:	bd38      	pop	{r3, r4, r5, pc}
 800afec:	20000c30 	.word	0x20000c30

0800aff0 <__assert_func>:
 800aff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aff2:	4614      	mov	r4, r2
 800aff4:	461a      	mov	r2, r3
 800aff6:	4b09      	ldr	r3, [pc, #36]	; (800b01c <__assert_func+0x2c>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4605      	mov	r5, r0
 800affc:	68d8      	ldr	r0, [r3, #12]
 800affe:	b954      	cbnz	r4, 800b016 <__assert_func+0x26>
 800b000:	4b07      	ldr	r3, [pc, #28]	; (800b020 <__assert_func+0x30>)
 800b002:	461c      	mov	r4, r3
 800b004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b008:	9100      	str	r1, [sp, #0]
 800b00a:	462b      	mov	r3, r5
 800b00c:	4905      	ldr	r1, [pc, #20]	; (800b024 <__assert_func+0x34>)
 800b00e:	f7fe fc1b 	bl	8009848 <fiprintf>
 800b012:	f001 fe02 	bl	800cc1a <abort>
 800b016:	4b04      	ldr	r3, [pc, #16]	; (800b028 <__assert_func+0x38>)
 800b018:	e7f4      	b.n	800b004 <__assert_func+0x14>
 800b01a:	bf00      	nop
 800b01c:	20000110 	.word	0x20000110
 800b020:	080132a1 	.word	0x080132a1
 800b024:	08013889 	.word	0x08013889
 800b028:	0801387c 	.word	0x0801387c

0800b02c <_close_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	4d06      	ldr	r5, [pc, #24]	; (800b048 <_close_r+0x1c>)
 800b030:	2300      	movs	r3, #0
 800b032:	4604      	mov	r4, r0
 800b034:	4608      	mov	r0, r1
 800b036:	602b      	str	r3, [r5, #0]
 800b038:	f000 fb50 	bl	800b6dc <_close>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	d102      	bne.n	800b046 <_close_r+0x1a>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	b103      	cbz	r3, 800b046 <_close_r+0x1a>
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	bd38      	pop	{r3, r4, r5, pc}
 800b048:	20000c30 	.word	0x20000c30

0800b04c <_fstat_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4d07      	ldr	r5, [pc, #28]	; (800b06c <_fstat_r+0x20>)
 800b050:	2300      	movs	r3, #0
 800b052:	4604      	mov	r4, r0
 800b054:	4608      	mov	r0, r1
 800b056:	4611      	mov	r1, r2
 800b058:	602b      	str	r3, [r5, #0]
 800b05a:	f000 fb4d 	bl	800b6f8 <_fstat>
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	d102      	bne.n	800b068 <_fstat_r+0x1c>
 800b062:	682b      	ldr	r3, [r5, #0]
 800b064:	b103      	cbz	r3, 800b068 <_fstat_r+0x1c>
 800b066:	6023      	str	r3, [r4, #0]
 800b068:	bd38      	pop	{r3, r4, r5, pc}
 800b06a:	bf00      	nop
 800b06c:	20000c30 	.word	0x20000c30

0800b070 <_isatty_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4d06      	ldr	r5, [pc, #24]	; (800b08c <_isatty_r+0x1c>)
 800b074:	2300      	movs	r3, #0
 800b076:	4604      	mov	r4, r0
 800b078:	4608      	mov	r0, r1
 800b07a:	602b      	str	r3, [r5, #0]
 800b07c:	f000 fb33 	bl	800b6e6 <_isatty>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d102      	bne.n	800b08a <_isatty_r+0x1a>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	b103      	cbz	r3, 800b08a <_isatty_r+0x1a>
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	20000c30 	.word	0x20000c30

0800b090 <_lseek_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	4d07      	ldr	r5, [pc, #28]	; (800b0b0 <_lseek_r+0x20>)
 800b094:	4604      	mov	r4, r0
 800b096:	4608      	mov	r0, r1
 800b098:	4611      	mov	r1, r2
 800b09a:	2200      	movs	r2, #0
 800b09c:	602a      	str	r2, [r5, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	f000 fb1f 	bl	800b6e2 <_lseek>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d102      	bne.n	800b0ae <_lseek_r+0x1e>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	b103      	cbz	r3, 800b0ae <_lseek_r+0x1e>
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	20000c30 	.word	0x20000c30

0800b0b4 <_read_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4d07      	ldr	r5, [pc, #28]	; (800b0d4 <_read_r+0x20>)
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	4608      	mov	r0, r1
 800b0bc:	4611      	mov	r1, r2
 800b0be:	2200      	movs	r2, #0
 800b0c0:	602a      	str	r2, [r5, #0]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	f000 fb02 	bl	800b6cc <_read>
 800b0c8:	1c43      	adds	r3, r0, #1
 800b0ca:	d102      	bne.n	800b0d2 <_read_r+0x1e>
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	b103      	cbz	r3, 800b0d2 <_read_r+0x1e>
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
 800b0d4:	20000c30 	.word	0x20000c30

0800b0d8 <raise>:
 800b0d8:	4b02      	ldr	r3, [pc, #8]	; (800b0e4 <raise+0xc>)
 800b0da:	4601      	mov	r1, r0
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	f001 bda3 	b.w	800cc28 <_raise_r>
 800b0e2:	bf00      	nop
 800b0e4:	20000110 	.word	0x20000110

0800b0e8 <_kill_r>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4d07      	ldr	r5, [pc, #28]	; (800b108 <_kill_r+0x20>)
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	4611      	mov	r1, r2
 800b0f4:	602b      	str	r3, [r5, #0]
 800b0f6:	f000 fafb 	bl	800b6f0 <_kill>
 800b0fa:	1c43      	adds	r3, r0, #1
 800b0fc:	d102      	bne.n	800b104 <_kill_r+0x1c>
 800b0fe:	682b      	ldr	r3, [r5, #0]
 800b100:	b103      	cbz	r3, 800b104 <_kill_r+0x1c>
 800b102:	6023      	str	r3, [r4, #0]
 800b104:	bd38      	pop	{r3, r4, r5, pc}
 800b106:	bf00      	nop
 800b108:	20000c30 	.word	0x20000c30

0800b10c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800b10c:	4770      	bx	lr

0800b10e <st_alarms_run>:
	}
 800b10e:	4770      	bx	lr

0800b110 <display_blanking_off.isra.0>:
	return api->blanking_off(dev);
 800b110:	6883      	ldr	r3, [r0, #8]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	4718      	bx	r3

0800b116 <k_msleep.isra.0>:
	return k_sleep(Z_TIMEOUT_MS(ms));
 800b116:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
			return t * ((uint64_t)to_hz / from_hz);
 800b11a:	210a      	movs	r1, #10
 800b11c:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 800b120:	f7fd bd8e 	b.w	8008c40 <z_impl_k_sleep>

0800b124 <st_idle_run>:
static void st_idle_run(void *o){
 800b124:	4770      	bx	lr

0800b126 <cbpprintf_external>:
{
 800b126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b12a:	4607      	mov	r7, r0
 800b12c:	460e      	mov	r6, r1
 800b12e:	4690      	mov	r8, r2
	if (buf == NULL) {
 800b130:	461d      	mov	r5, r3
 800b132:	b30b      	cbz	r3, 800b178 <cbpprintf_external+0x52>
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
 800b134:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
 800b136:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = hdr->hdr.desc.str_cnt;
 800b138:	f893 a001 	ldrb.w	sl, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	4414      	add	r4, r2
 800b140:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b144:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
 800b146:	f04f 0900 	mov.w	r9, #0
 800b14a:	45d1      	cmp	r9, sl
 800b14c:	d308      	bcc.n	800b160 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
 800b14e:	686a      	ldr	r2, [r5, #4]
 800b150:	f105 0308 	add.w	r3, r5, #8
 800b154:	4641      	mov	r1, r8
 800b156:	4638      	mov	r0, r7
 800b158:	46b4      	mov	ip, r6
}
 800b15a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
 800b15e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
 800b160:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
 800b164:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
 800b168:	4620      	mov	r0, r4
 800b16a:	f7f5 ff2d 	bl	8000fc8 <strlen>
 800b16e:	3001      	adds	r0, #1
 800b170:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 800b172:	f109 0901 	add.w	r9, r9, #1
 800b176:	e7e8      	b.n	800b14a <cbpprintf_external+0x24>
}
 800b178:	f06f 0015 	mvn.w	r0, #21
 800b17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b180 <arch_printk_char_out>:
}
 800b180:	2000      	movs	r0, #0
 800b182:	4770      	bx	lr

0800b184 <str_out>:
{
 800b184:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800b186:	688a      	ldr	r2, [r1, #8]
 800b188:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 800b18a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800b18c:	b114      	cbz	r4, 800b194 <str_out+0x10>
 800b18e:	684b      	ldr	r3, [r1, #4]
 800b190:	4293      	cmp	r3, r2
 800b192:	dc01      	bgt.n	800b198 <str_out+0x14>
		ctx->count++;
 800b194:	608d      	str	r5, [r1, #8]
}
 800b196:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 800b198:	3b01      	subs	r3, #1
 800b19a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 800b19c:	bf08      	it	eq
 800b19e:	2200      	moveq	r2, #0
 800b1a0:	608d      	str	r5, [r1, #8]
 800b1a2:	bf0c      	ite	eq
 800b1a4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 800b1a6:	54a0      	strbne	r0, [r4, r2]
 800b1a8:	e7f5      	b.n	800b196 <str_out+0x12>

0800b1aa <printk>:
{
 800b1aa:	b40f      	push	{r0, r1, r2, r3}
 800b1ac:	b507      	push	{r0, r1, r2, lr}
 800b1ae:	a904      	add	r1, sp, #16
 800b1b0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800b1b4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 800b1b6:	f7f7 f911 	bl	80023dc <vprintk>
}
 800b1ba:	b003      	add	sp, #12
 800b1bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1c0:	b004      	add	sp, #16
 800b1c2:	4770      	bx	lr

0800b1c4 <snprintk>:
{
 800b1c4:	b40c      	push	{r2, r3}
 800b1c6:	b507      	push	{r0, r1, r2, lr}
 800b1c8:	ab04      	add	r3, sp, #16
 800b1ca:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800b1ce:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800b1d0:	f7f7 f912 	bl	80023f8 <vsnprintk>
}
 800b1d4:	b003      	add	sp, #12
 800b1d6:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1da:	b002      	add	sp, #8
 800b1dc:	4770      	bx	lr

0800b1de <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800b1de:	4604      	mov	r4, r0
 800b1e0:	b508      	push	{r3, lr}
 800b1e2:	4608      	mov	r0, r1
 800b1e4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	47a0      	blx	r4
	return z_impl_z_current_get();
 800b1ea:	f7fd fd5b 	bl	8008ca4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800b1ee:	f7f9 ff9b 	bl	8005128 <z_impl_k_thread_abort>

0800b1f2 <chunk_size>:
		return ((uint16_t *)cmem)[f];
 800b1f2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b1f6:	8840      	ldrh	r0, [r0, #2]
}
 800b1f8:	0840      	lsrs	r0, r0, #1
 800b1fa:	4770      	bx	lr

0800b1fc <free_list_add>:
{
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
 800b200:	f7ff fff7 	bl	800b1f2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
 800b204:	fab0 f080 	clz	r0, r0
 800b208:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
 800b20c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
 800b210:	00ca      	lsls	r2, r1, #3
 800b212:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
 800b216:	1d17      	adds	r7, r2, #4
{
 800b218:	460c      	mov	r4, r1
 800b21a:	3206      	adds	r2, #6
 800b21c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
 800b21e:	b956      	cbnz	r6, 800b236 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
 800b220:	2101      	movs	r1, #1
 800b222:	fa01 f000 	lsl.w	r0, r1, r0
 800b226:	68d9      	ldr	r1, [r3, #12]
 800b228:	4301      	orrs	r1, r0
 800b22a:	60d9      	str	r1, [r3, #12]
		b->next = c;
 800b22c:	f8cc 4010 	str.w	r4, [ip, #16]
 800b230:	53dd      	strh	r5, [r3, r7]
 800b232:	529d      	strh	r5, [r3, r2]
}
 800b234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
 800b236:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
 800b238:	3104      	adds	r1, #4
 800b23a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
 800b23c:	53d8      	strh	r0, [r3, r7]
 800b23e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b242:	529e      	strh	r6, [r3, r2]
 800b244:	80c5      	strh	r5, [r0, #6]
 800b246:	525d      	strh	r5, [r3, r1]
 800b248:	e7f4      	b.n	800b234 <free_list_add+0x38>

0800b24a <free_list_remove_bidx>:
{
 800b24a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
 800b24c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800b250:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
 800b252:	4299      	cmp	r1, r3
 800b254:	f102 0104 	add.w	r1, r2, #4
 800b258:	d10a      	bne.n	800b270 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
 800b25a:	2301      	movs	r3, #1
 800b25c:	fa03 f202 	lsl.w	r2, r3, r2
 800b260:	68c3      	ldr	r3, [r0, #12]
 800b262:	ea23 0302 	bic.w	r3, r3, r2
 800b266:	60c3      	str	r3, [r0, #12]
		b->next = 0;
 800b268:	2300      	movs	r3, #0
 800b26a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 800b26e:	bd10      	pop	{r4, pc}
 800b270:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
 800b272:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
 800b276:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800b27a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800b27e:	80cb      	strh	r3, [r1, #6]
 800b280:	8082      	strh	r2, [r0, #4]
}
 800b282:	e7f4      	b.n	800b26e <free_list_remove_bidx+0x24>

0800b284 <alloc_chunk>:
{
 800b284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return 31 - __builtin_clz(usable_sz);
 800b288:	fab1 f581 	clz	r5, r1
 800b28c:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
 800b290:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
 800b294:	4603      	mov	r3, r0
	if (b->next) {
 800b296:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
 800b29a:	460e      	mov	r6, r1
	if (b->next) {
 800b29c:	b1c2      	cbz	r2, 800b2d0 <alloc_chunk+0x4c>
 800b29e:	2703      	movs	r7, #3
			chunkid_t c = b->next;
 800b2a0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	4621      	mov	r1, r4
 800b2a8:	f7ff ffa3 	bl	800b1f2 <chunk_size>
 800b2ac:	42b0      	cmp	r0, r6
 800b2ae:	d306      	bcc.n	800b2be <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
 800b2b0:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff ffc9 	bl	800b24a <free_list_remove_bidx>
}
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
 800b2be:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
 800b2c2:	3f01      	subs	r7, #1
 800b2c4:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
 800b2c6:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
 800b2ca:	d001      	beq.n	800b2d0 <alloc_chunk+0x4c>
 800b2cc:	4282      	cmp	r2, r0
 800b2ce:	d1e7      	bne.n	800b2a0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
 800b2d0:	f1c5 0220 	rsb	r2, r5, #32
 800b2d4:	f04f 34ff 	mov.w	r4, #4294967295
 800b2d8:	4094      	lsls	r4, r2
 800b2da:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
 800b2dc:	4014      	ands	r4, r2
 800b2de:	d0eb      	beq.n	800b2b8 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
 800b2e0:	fa94 f2a4 	rbit	r2, r4
 800b2e4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 800b2e8:	1d11      	adds	r1, r2, #4
 800b2ea:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	e7df      	b.n	800b2b2 <alloc_chunk+0x2e>

0800b2f2 <split_chunks>:
{
 800b2f2:	b538      	push	{r3, r4, r5, lr}
 800b2f4:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
 800b2f6:	f7ff ff7c 	bl	800b1f2 <chunk_size>
{
 800b2fa:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
 800b2fc:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
 800b2fe:	1a51      	subs	r1, r2, r1
		((uint16_t *)cmem)[f] = val;
 800b300:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
 800b304:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800b306:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
 800b308:	8060      	strh	r0, [r4, #2]
 800b30a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800b30e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
 800b310:	8044      	strh	r4, [r0, #2]
 800b312:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
 800b316:	4618      	mov	r0, r3
 800b318:	4611      	mov	r1, r2
 800b31a:	f7ff ff6a 	bl	800b1f2 <chunk_size>
	void *cmem = &buf[c];
 800b31e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
 800b320:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
 800b324:	bd38      	pop	{r3, r4, r5, pc}

0800b326 <sys_heap_alloc>:
{
 800b326:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 800b328:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
 800b32a:	b909      	cbnz	r1, 800b330 <sys_heap_alloc+0xa>
		return NULL;
 800b32c:	2000      	movs	r0, #0
}
 800b32e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
 800b330:	68ab      	ldr	r3, [r5, #8]
 800b332:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800b336:	d9f9      	bls.n	800b32c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800b338:	310b      	adds	r1, #11
 800b33a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
 800b33c:	4621      	mov	r1, r4
 800b33e:	4628      	mov	r0, r5
 800b340:	f7ff ffa0 	bl	800b284 <alloc_chunk>
	if (c == 0U) {
 800b344:	4606      	mov	r6, r0
 800b346:	2800      	cmp	r0, #0
 800b348:	d0f0      	beq.n	800b32c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
 800b34a:	4601      	mov	r1, r0
 800b34c:	4628      	mov	r0, r5
 800b34e:	f7ff ff50 	bl	800b1f2 <chunk_size>
 800b352:	42a0      	cmp	r0, r4
 800b354:	d907      	bls.n	800b366 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
 800b356:	1932      	adds	r2, r6, r4
 800b358:	4628      	mov	r0, r5
 800b35a:	f7ff ffca 	bl	800b2f2 <split_chunks>
		free_list_add(h, c + chunk_sz);
 800b35e:	4611      	mov	r1, r2
 800b360:	4628      	mov	r0, r5
 800b362:	f7ff ff4b 	bl	800b1fc <free_list_add>
	void *cmem = &buf[c];
 800b366:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 800b36a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b36c:	8853      	ldrh	r3, [r2, #2]
 800b36e:	f043 0301 	orr.w	r3, r3, #1
 800b372:	8053      	strh	r3, [r2, #2]
 800b374:	3004      	adds	r0, #4
	return mem;
 800b376:	e7da      	b.n	800b32e <sys_heap_alloc+0x8>

0800b378 <_ldiv5>:
	uint32_t v_lo = *v;
 800b378:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 800b37c:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 800b37e:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 800b382:	fba2 2403 	umull	r2, r4, r2, r3
 800b386:	18d5      	adds	r5, r2, r3
 800b388:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 800b38c:	fba1 1303 	umull	r1, r3, r1, r3
 800b390:	1852      	adds	r2, r2, r1
 800b392:	eb44 0403 	adc.w	r4, r4, r3
 800b396:	1952      	adds	r2, r2, r5
 800b398:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 800b39c:	1889      	adds	r1, r1, r2
 800b39e:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 800b3a2:	e9c0 1300 	strd	r1, r3, [r0]
}
 800b3a6:	bd30      	pop	{r4, r5, pc}

0800b3a8 <_get_digit>:
{
 800b3a8:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
 800b3aa:	680a      	ldr	r2, [r1, #0]
 800b3ac:	2a00      	cmp	r2, #0
{
 800b3ae:	4603      	mov	r3, r0
	if (*digit_count > 0) {
 800b3b0:	dd0f      	ble.n	800b3d2 <_get_digit+0x2a>
		--*digit_count;
 800b3b2:	3a01      	subs	r2, #1
 800b3b4:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	6844      	ldr	r4, [r0, #4]
 800b3ba:	200a      	movs	r0, #10
 800b3bc:	fba2 1200 	umull	r1, r2, r2, r0
 800b3c0:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 800b3c4:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
 800b3c6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b3ca:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
 800b3ce:	3030      	adds	r0, #48	; 0x30
}
 800b3d0:	bd10      	pop	{r4, pc}
		rval = '0';
 800b3d2:	2030      	movs	r0, #48	; 0x30
 800b3d4:	e7fc      	b.n	800b3d0 <_get_digit+0x28>

0800b3d6 <outs>:
{
 800b3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3da:	4607      	mov	r7, r0
 800b3dc:	4688      	mov	r8, r1
 800b3de:	4615      	mov	r5, r2
 800b3e0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800b3e2:	4614      	mov	r4, r2
 800b3e4:	42b4      	cmp	r4, r6
 800b3e6:	d305      	bcc.n	800b3f4 <outs+0x1e>
 800b3e8:	b10e      	cbz	r6, 800b3ee <outs+0x18>
	return (int)count;
 800b3ea:	1b60      	subs	r0, r4, r5
 800b3ec:	e008      	b.n	800b400 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800b3ee:	7823      	ldrb	r3, [r4, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d0fa      	beq.n	800b3ea <outs+0x14>
		int rc = out((int)*sp++, ctx);
 800b3f4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b3f8:	4641      	mov	r1, r8
 800b3fa:	47b8      	blx	r7
		if (rc < 0) {
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	daf1      	bge.n	800b3e4 <outs+0xe>
}
 800b400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b404 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
 800b404:	4040      	eors	r0, r0
 800b406:	f380 8811 	msr	BASEPRI, r0
 800b40a:	f04f 0004 	mov.w	r0, #4
 800b40e:	df02      	svc	2
}
 800b410:	4770      	bx	lr

0800b412 <assert_print>:

void assert_print(const char *fmt, ...)
{
 800b412:	b40f      	push	{r0, r1, r2, r3}
 800b414:	b507      	push	{r0, r1, r2, lr}
 800b416:	a904      	add	r1, sp, #16
 800b418:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 800b41c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 800b41e:	f7f6 ffdd 	bl	80023dc <vprintk>

	va_end(ap);
}
 800b422:	b003      	add	sp, #12
 800b424:	f85d eb04 	ldr.w	lr, [sp], #4
 800b428:	b004      	add	sp, #16
 800b42a:	4770      	bx	lr

0800b42c <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 800b42c:	68c3      	ldr	r3, [r0, #12]
 800b42e:	6802      	ldr	r2, [r0, #0]
 800b430:	4293      	cmp	r3, r2
 800b432:	d904      	bls.n	800b43e <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 800b434:	3b01      	subs	r3, #1
 800b436:	1a9a      	subs	r2, r3, r2
		return false;
 800b438:	2000      	movs	r0, #0
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 800b43a:	600a      	str	r2, [r1, #0]
}
 800b43c:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 800b43e:	6a40      	ldr	r0, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
 800b440:	b913      	cbnz	r3, 800b448 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 800b442:	3801      	subs	r0, #1
 800b444:	1a82      	subs	r2, r0, r2
		return false;
 800b446:	e7f7      	b.n	800b438 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
 800b448:	1a82      	subs	r2, r0, r2
	return true;
 800b44a:	2001      	movs	r0, #1
 800b44c:	e7f5      	b.n	800b43a <free_space+0xe>

0800b44e <get_usage>:
{
 800b44e:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
 800b450:	a901      	add	r1, sp, #4
{
 800b452:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
 800b454:	f7ff ffea 	bl	800b42c <free_space>
 800b458:	b120      	cbz	r0, 800b464 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
 800b45a:	9b01      	ldr	r3, [sp, #4]
 800b45c:	68e2      	ldr	r2, [r4, #12]
 800b45e:	3b01      	subs	r3, #1
 800b460:	4413      	add	r3, r2
 800b462:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
 800b464:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b466:	9b01      	ldr	r3, [sp, #4]
 800b468:	1ac0      	subs	r0, r0, r3
}
 800b46a:	3801      	subs	r0, #1
 800b46c:	b002      	add	sp, #8
 800b46e:	bd10      	pop	{r4, pc}

0800b470 <idx_inc>:
{
 800b470:	b510      	push	{r4, lr}
 800b472:	4604      	mov	r4, r0
	uint32_t i = idx + val;
 800b474:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800b476:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
 800b478:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800b47a:	07d2      	lsls	r2, r2, #31
 800b47c:	d502      	bpl.n	800b484 <idx_inc+0x14>
		return i & (buffer->size - 1);
 800b47e:	3b01      	subs	r3, #1
 800b480:	4018      	ands	r0, r3
}
 800b482:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
 800b484:	4298      	cmp	r0, r3
 800b486:	bf28      	it	cs
 800b488:	1ac0      	subcs	r0, r0, r3
 800b48a:	e7fa      	b.n	800b482 <idx_inc+0x12>

0800b48c <add_skip_item>:
{
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 800b490:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
 800b492:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 800b494:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
 800b496:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 800b49a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800b49e:	462a      	mov	r2, r5
 800b4a0:	6801      	ldr	r1, [r0, #0]
{
 800b4a2:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800b4a4:	f7ff ffe4 	bl	800b470 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800b4a8:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800b4aa:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800b4ac:	462a      	mov	r2, r5
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7ff ffde 	bl	800b470 <idx_inc>
 800b4b4:	6060      	str	r0, [r4, #4]
}
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}

0800b4b8 <max_utilization_update>:
{
 800b4b8:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 800b4ba:	6903      	ldr	r3, [r0, #16]
 800b4bc:	075b      	lsls	r3, r3, #29
{
 800b4be:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 800b4c0:	d506      	bpl.n	800b4d0 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 800b4c2:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800b4c4:	f7ff ffc3 	bl	800b44e <get_usage>
 800b4c8:	4285      	cmp	r5, r0
 800b4ca:	bf2c      	ite	cs
 800b4cc:	62a5      	strcs	r5, [r4, #40]	; 0x28
 800b4ce:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
 800b4d0:	bd38      	pop	{r3, r4, r5, pc}

0800b4d2 <drop_item_locked>:
{
 800b4d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d6:	461f      	mov	r7, r3
	*user_packet = false;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 800b4dc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b4e0:	f8d0 9020 	ldr.w	r9, [r0, #32]
	if (item->hdr.busy && !item->hdr.valid) {
 800b4e4:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 800b4e8:	f003 0303 	and.w	r3, r3, #3
 800b4ec:	2b02      	cmp	r3, #2
{
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	468b      	mov	fp, r1
 800b4f2:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 800b4f4:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800b4f8:	d103      	bne.n	800b502 <drop_item_locked+0x30>
		return item->skip.len;
 800b4fa:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 800b4fe:	08ad      	lsrs	r5, r5, #2
 800b500:	d12e      	bne.n	800b560 <drop_item_locked+0x8e>
 800b502:	69e3      	ldr	r3, [r4, #28]
 800b504:	4630      	mov	r0, r6
 800b506:	4798      	blx	r3
 800b508:	4605      	mov	r5, r0
	} else if (allow_drop) {
 800b50a:	f1b8 0f00 	cmp.w	r8, #0
 800b50e:	d038      	beq.n	800b582 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
 800b510:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 800b514:	079b      	lsls	r3, r3, #30
 800b516:	d531      	bpl.n	800b57c <drop_item_locked+0xaa>
			add_skip_item(buffer, free_wlen + 1);
 800b518:	f10b 0101 	add.w	r1, fp, #1
 800b51c:	4620      	mov	r0, r4
 800b51e:	f7ff ffb5 	bl	800b48c <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800b522:	6861      	ldr	r1, [r4, #4]
 800b524:	462a      	mov	r2, r5
 800b526:	4620      	mov	r0, r4
 800b528:	f7ff ffa2 	bl	800b470 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800b52c:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800b52e:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800b530:	462a      	mov	r2, r5
 800b532:	4620      	mov	r0, r4
 800b534:	f7ff ff9c 	bl	800b470 <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800b538:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800b53a:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800b53c:	68e1      	ldr	r1, [r4, #12]
 800b53e:	4620      	mov	r0, r4
 800b540:	f7ff ff96 	bl	800b470 <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 800b544:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
 800b546:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
 800b54a:	f002 0203 	and.w	r2, r2, #3
 800b54e:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 800b550:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800b554:	d10e      	bne.n	800b574 <drop_item_locked+0xa2>
		return item->skip.len;
 800b556:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
 800b55a:	089b      	lsrs	r3, r3, #2
 800b55c:	d00a      	beq.n	800b574 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
 800b55e:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800b560:	68e1      	ldr	r1, [r4, #12]
 800b562:	462a      	mov	r2, r5
 800b564:	4620      	mov	r0, r4
 800b566:	f7ff ff83 	bl	800b470 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 800b56a:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
 800b56e:	4630      	mov	r0, r6
 800b570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
 800b574:	69e3      	ldr	r3, [r4, #28]
 800b576:	4630      	mov	r0, r6
 800b578:	4798      	blx	r3
 800b57a:	4405      	add	r5, r0
			*user_packet = true;
 800b57c:	2301      	movs	r3, #1
 800b57e:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
 800b580:	e7ee      	b.n	800b560 <drop_item_locked+0x8e>
		item = NULL;
 800b582:	4646      	mov	r6, r8
	return item;
 800b584:	e7f3      	b.n	800b56e <drop_item_locked+0x9c>

0800b586 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 800b586:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 800b58a:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
 800b58c:	bf88      	it	hi
 800b58e:	6a42      	ldrhi	r2, [r0, #36]	; 0x24
 800b590:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 800b592:	1e18      	subs	r0, r3, #0
 800b594:	bf18      	it	ne
 800b596:	2001      	movne	r0, #1
 800b598:	4770      	bx	lr

0800b59a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800b59a:	4770      	bx	lr

0800b59c <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800b59c:	2000      	movs	r0, #0
 800b59e:	4770      	bx	lr

0800b5a0 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 800b5a0:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 800b5a2:	075b      	lsls	r3, r3, #29
 800b5a4:	d40b      	bmi.n	800b5be <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800b5a6:	6803      	ldr	r3, [r0, #0]
 800b5a8:	8842      	ldrh	r2, [r0, #2]
 800b5aa:	f3c3 2349 	ubfx	r3, r3, #9, #10
 800b5ae:	f3c2 02cb 	ubfx	r2, r2, #3, #12
 800b5b2:	1898      	adds	r0, r3, r2
 800b5b4:	3017      	adds	r0, #23
 800b5b6:	f020 0007 	bic.w	r0, r0, #7
 800b5ba:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
 800b5bc:	4770      	bx	lr
	return 0;
 800b5be:	2000      	movs	r0, #0
}
 800b5c0:	4770      	bx	lr

0800b5c2 <dummy_timestamp>:
}
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	4770      	bx	lr

0800b5c6 <default_lf_get_timestamp>:
{
 800b5c6:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800b5c8:	f000 fe40 	bl	800c24c <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800b5cc:	220a      	movs	r2, #10
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f7f5 faca 	bl	8000b68 <__aeabi_uldivmod>
}
 800b5d4:	bd08      	pop	{r3, pc}

0800b5d6 <notify_drop>:
	z_log_dropped(true);
 800b5d6:	2001      	movs	r0, #1
 800b5d8:	f7f8 ba2e 	b.w	8003a38 <z_log_dropped>

0800b5dc <z_log_get_tag>:
}
 800b5dc:	2000      	movs	r0, #0
 800b5de:	4770      	bx	lr

0800b5e0 <z_cbprintf_cpy>:
{
 800b5e0:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
 800b5e2:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
 800b5e6:	1b9b      	subs	r3, r3, r6
 800b5e8:	428b      	cmp	r3, r1
{
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
 800b5ee:	d30a      	bcc.n	800b606 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
 800b5f0:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800b5f2:	460a      	mov	r2, r1
 800b5f4:	4601      	mov	r1, r0
 800b5f6:	1998      	adds	r0, r3, r6
 800b5f8:	f000 fe81 	bl	800c2fe <memcpy>
	desc->off += len;
 800b5fc:	68ab      	ldr	r3, [r5, #8]
 800b5fe:	4423      	add	r3, r4
 800b600:	60ab      	str	r3, [r5, #8]
	return len;
 800b602:	4620      	mov	r0, r4
}
 800b604:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
 800b606:	f06f 001b 	mvn.w	r0, #27
 800b60a:	e7fb      	b.n	800b604 <z_cbprintf_cpy+0x24>

0800b60c <z_log_msg_finalize>:
{
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	460e      	mov	r6, r1
 800b610:	4615      	mov	r5, r2
 800b612:	4619      	mov	r1, r3
 800b614:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
 800b618:	4604      	mov	r4, r0
 800b61a:	b918      	cbnz	r0, 800b624 <z_log_msg_finalize+0x18>
}
 800b61c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
 800b620:	f7f8 ba0a 	b.w	8003a38 <z_log_dropped>
	if (data) {
 800b624:	b12b      	cbz	r3, 800b632 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
 800b626:	3010      	adds	r0, #16
 800b628:	f3c5 2349 	ubfx	r3, r5, #9, #10
 800b62c:	4418      	add	r0, r3
 800b62e:	f000 fe66 	bl	800c2fe <memcpy>
	msg->hdr.source = source;
 800b632:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
 800b636:	4620      	mov	r0, r4
}
 800b638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
 800b63c:	f7f8 bb4e 	b.w	8003cdc <z_log_msg_commit>

0800b640 <buffer_write>:
{
 800b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b642:	4606      	mov	r6, r0
 800b644:	460d      	mov	r5, r1
 800b646:	4614      	mov	r4, r2
 800b648:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 800b64a:	4621      	mov	r1, r4
 800b64c:	4628      	mov	r0, r5
 800b64e:	463a      	mov	r2, r7
 800b650:	47b0      	blx	r6
	} while (len != 0);
 800b652:	1a24      	subs	r4, r4, r0
		buf += processed;
 800b654:	4405      	add	r5, r0
	} while (len != 0);
 800b656:	d1f8      	bne.n	800b64a <buffer_write+0xa>
}
 800b658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b65a <cbvprintf>:
{
 800b65a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 800b65c:	2400      	movs	r4, #0
 800b65e:	9400      	str	r4, [sp, #0]
 800b660:	f7f7 f850 	bl	8002704 <z_cbvprintf_impl>
}
 800b664:	b002      	add	sp, #8
 800b666:	bd10      	pop	{r4, pc}

0800b668 <log_output_flush>:
{
 800b668:	b510      	push	{r4, lr}
		     output->control_block->offset,
 800b66a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800b66c:	6881      	ldr	r1, [r0, #8]
{
 800b66e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 800b670:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b674:	6800      	ldr	r0, [r0, #0]
 800b676:	f7ff ffe3 	bl	800b640 <buffer_write>
	output->control_block->offset = 0;
 800b67a:	6863      	ldr	r3, [r4, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	601a      	str	r2, [r3, #0]
}
 800b680:	bd10      	pop	{r4, pc}

0800b682 <cr_out_func>:
	if (c == '\n') {
 800b682:	280a      	cmp	r0, #10
{
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4604      	mov	r4, r0
 800b688:	460d      	mov	r5, r1
	if (c == '\n') {
 800b68a:	d102      	bne.n	800b692 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
 800b68c:	200d      	movs	r0, #13
 800b68e:	f7f8 fc63 	bl	8003f58 <out_func>
	out_func(c, ctx);
 800b692:	4629      	mov	r1, r5
 800b694:	4620      	mov	r0, r4
 800b696:	f7f8 fc5f 	bl	8003f58 <out_func>
}
 800b69a:	2000      	movs	r0, #0
 800b69c:	bd38      	pop	{r3, r4, r5, pc}

0800b69e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 800b69e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800b6a0:	6800      	ldr	r0, [r0, #0]
 800b6a2:	f7f9 b84d 	b.w	8004740 <z_arm_fatal_error>

0800b6a6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	2001      	movs	r0, #1
 800b6aa:	f7f9 b849 	b.w	8004740 <z_arm_fatal_error>

0800b6ae <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 800b6ae:	b508      	push	{r3, lr}
	handler();
 800b6b0:	f7f9 f8ee 	bl	8004890 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 800b6b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800b6b8:	f7f9 b9c2 	b.w	8004a40 <z_arm_exc_exit>

0800b6bc <z_log_msg_static_create.constprop.0>:
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f7f8 bbc5 	b.w	8003e4c <z_impl_z_log_msg_static_create>

0800b6c2 <_stdout_hook_default>:
}
 800b6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c6:	4770      	bx	lr

0800b6c8 <_stdin_hook_default>:
}
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	4770      	bx	lr

0800b6cc <_read>:
{
 800b6cc:	4608      	mov	r0, r1
 800b6ce:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800b6d0:	f7f9 beb6 	b.w	8005440 <z_impl_zephyr_read_stdin>

0800b6d4 <_write>:
{
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800b6d8:	f7f9 bec6 	b.w	8005468 <z_impl_zephyr_write_stdout>

0800b6dc <_close>:
int _close(int file)
 800b6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e0:	4770      	bx	lr

0800b6e2 <_lseek>:
}
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	4770      	bx	lr

0800b6e6 <_isatty>:
}
 800b6e6:	2802      	cmp	r0, #2
 800b6e8:	bfcc      	ite	gt
 800b6ea:	2000      	movgt	r0, #0
 800b6ec:	2001      	movle	r0, #1
 800b6ee:	4770      	bx	lr

0800b6f0 <_kill>:
}
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	4770      	bx	lr

0800b6f4 <_getpid>:
}
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	4770      	bx	lr

0800b6f8 <_fstat>:
	st->st_mode = S_IFCHR;
 800b6f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6fc:	604b      	str	r3, [r1, #4]
}
 800b6fe:	2000      	movs	r0, #0
 800b700:	4770      	bx	lr

0800b702 <smf_set_initial>:
	ctx->previous = NULL;
 800b702:	2200      	movs	r2, #0
	ctx->terminate_val = 0;
 800b704:	e9c0 2201 	strd	r2, r2, [r0, #4]
	internal->terminate = false;
 800b708:	7b02      	ldrb	r2, [r0, #12]
	ctx->current = init_state;
 800b70a:	6001      	str	r1, [r0, #0]
	internal->terminate = false;
 800b70c:	f022 0206 	bic.w	r2, r2, #6
 800b710:	7302      	strb	r2, [r0, #12]
	if (init_state->entry) {
 800b712:	680b      	ldr	r3, [r1, #0]
 800b714:	b103      	cbz	r3, 800b718 <smf_set_initial+0x16>
		init_state->entry(ctx);
 800b716:	4718      	bx	r3
}
 800b718:	4770      	bx	lr

0800b71a <smf_run_state>:
	internal->terminate = true;
	ctx->terminate_val = val;
}

int32_t smf_run_state(struct smf_ctx *const ctx)
{
 800b71a:	b508      	push	{r3, lr}
	struct internal_ctx * const internal = (void *) &ctx->internal;

	/* No need to continue if terminate was set */
	if (internal->terminate) {
 800b71c:	7b02      	ldrb	r2, [r0, #12]
 800b71e:	0792      	lsls	r2, r2, #30
 800b720:	d501      	bpl.n	800b726 <smf_run_state+0xc>
		return ctx->terminate_val;
 800b722:	6880      	ldr	r0, [r0, #8]
			return ctx->terminate_val;
		}
	}

	return 0;
}
 800b724:	bd08      	pop	{r3, pc}
	if (ctx->current->run) {
 800b726:	6803      	ldr	r3, [r0, #0]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	b103      	cbz	r3, 800b72e <smf_run_state+0x14>
		ctx->current->run(ctx);
 800b72c:	4798      	blx	r3
	return 0;
 800b72e:	2000      	movs	r0, #0
 800b730:	e7f8      	b.n	800b724 <smf_run_state+0xa>

0800b732 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800b732:	2200      	movs	r2, #0
{
 800b734:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 800b736:	4611      	mov	r1, r2
 800b738:	2006      	movs	r0, #6
 800b73a:	f7f9 f875 	bl	8004828 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800b73e:	2200      	movs	r2, #0
 800b740:	4611      	mov	r1, r2
 800b742:	2007      	movs	r0, #7
 800b744:	f7f9 f870 	bl	8004828 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI1_IRQ_PRI,
		__stm32_exti_isr_1, DEVICE_DT_GET(EXTI_NODE),
		0);
#ifdef CONFIG_SOC_SERIES_STM32F3X
	IRQ_CONNECT(EXTI2_TSC_IRQn,
 800b748:	2200      	movs	r2, #0
 800b74a:	4611      	mov	r1, r2
 800b74c:	2008      	movs	r0, #8
 800b74e:	f7f9 f86b 	bl	8004828 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800b752:	2200      	movs	r2, #0
 800b754:	4611      	mov	r1, r2
 800b756:	2009      	movs	r0, #9
 800b758:	f7f9 f866 	bl	8004828 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800b75c:	2200      	movs	r2, #0
 800b75e:	4611      	mov	r1, r2
 800b760:	200a      	movs	r0, #10
 800b762:	f7f9 f861 	bl	8004828 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800b766:	2200      	movs	r2, #0
 800b768:	4611      	mov	r1, r2
 800b76a:	2017      	movs	r0, #23
 800b76c:	f7f9 f85c 	bl	8004828 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800b770:	2200      	movs	r2, #0
 800b772:	4611      	mov	r1, r2
 800b774:	2028      	movs	r0, #40	; 0x28
 800b776:	f7f9 f857 	bl	8004828 <z_arm_irq_priority_set>
}
 800b77a:	2000      	movs	r0, #0
 800b77c:	bd08      	pop	{r3, pc}

0800b77e <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 800b77e:	6902      	ldr	r2, [r0, #16]
 800b780:	2110      	movs	r1, #16
 800b782:	200a      	movs	r0, #10
 800b784:	f7f9 bf52 	b.w	800562c <__stm32_exti_isr.isra.0>

0800b788 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 800b788:	6902      	ldr	r2, [r0, #16]
 800b78a:	210a      	movs	r1, #10
 800b78c:	2005      	movs	r0, #5
 800b78e:	f7f9 bf4d 	b.w	800562c <__stm32_exti_isr.isra.0>

0800b792 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 800b792:	6902      	ldr	r2, [r0, #16]
 800b794:	2105      	movs	r1, #5
 800b796:	2004      	movs	r0, #4
 800b798:	f7f9 bf48 	b.w	800562c <__stm32_exti_isr.isra.0>

0800b79c <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 800b79c:	6902      	ldr	r2, [r0, #16]
 800b79e:	2104      	movs	r1, #4
 800b7a0:	2003      	movs	r0, #3
 800b7a2:	f7f9 bf43 	b.w	800562c <__stm32_exti_isr.isra.0>

0800b7a6 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 800b7a6:	6902      	ldr	r2, [r0, #16]
 800b7a8:	2103      	movs	r1, #3
 800b7aa:	2002      	movs	r0, #2
 800b7ac:	f7f9 bf3e 	b.w	800562c <__stm32_exti_isr.isra.0>

0800b7b0 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 800b7b0:	6902      	ldr	r2, [r0, #16]
 800b7b2:	2102      	movs	r1, #2
 800b7b4:	2001      	movs	r0, #1
 800b7b6:	f7f9 bf39 	b.w	800562c <__stm32_exti_isr.isra.0>

0800b7ba <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 800b7ba:	6902      	ldr	r2, [r0, #16]
 800b7bc:	2101      	movs	r1, #1
 800b7be:	2000      	movs	r0, #0
 800b7c0:	f7f9 bf34 	b.w	800562c <__stm32_exti_isr.isra.0>

0800b7c4 <adc_stm32_enable>:
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800b7c4:	6883      	ldr	r3, [r0, #8]
	if (LL_ADC_IsEnabled(adc) == 1UL) {
 800b7c6:	07db      	lsls	r3, r3, #31
 800b7c8:	d407      	bmi.n	800b7da <adc_stm32_enable+0x16>
  MODIFY_REG(ADCx->CR,
 800b7ca:	6883      	ldr	r3, [r0, #8]
 800b7cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b7d4:	f043 0301 	orr.w	r3, r3, #1
 800b7d8:	6083      	str	r3, [r0, #8]
}
 800b7da:	2000      	movs	r0, #0
 800b7dc:	4770      	bx	lr

0800b7de <adc_stm32_cfg_func_0>:
		    &adc_stm32_init, NULL,				\
		    &adc_stm32_data_##index, &adc_stm32_cfg_##index,	\
		    POST_KERNEL, CONFIG_ADC_INIT_PRIORITY,		\
		    &api_stm32_driver_api);

DT_INST_FOREACH_STATUS_OKAY(STM32_ADC_INIT)
 800b7de:	b508      	push	{r3, lr}
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2012      	movs	r0, #18
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	f7f9 f81f 	bl	8004828 <z_arm_irq_priority_set>
 800b7ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b7ee:	2012      	movs	r0, #18
 800b7f0:	f7f9 b80c 	b.w	800480c <arch_irq_enable>

0800b7f4 <adc_stm32_disable>:
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800b7f4:	6883      	ldr	r3, [r0, #8]
	if (LL_ADC_IsEnabled(adc) != 1UL) {
 800b7f6:	07da      	lsls	r2, r3, #31
 800b7f8:	d50a      	bpl.n	800b810 <adc_stm32_disable+0x1c>
  MODIFY_REG(ADCx->CR,
 800b7fa:	6883      	ldr	r3, [r0, #8]
 800b7fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b804:	f043 0302 	orr.w	r3, r3, #2
 800b808:	6083      	str	r3, [r0, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800b80a:	6883      	ldr	r3, [r0, #8]
	while (LL_ADC_IsEnabled(adc) == 1UL) {
 800b80c:	07db      	lsls	r3, r3, #31
 800b80e:	d4fc      	bmi.n	800b80a <adc_stm32_disable+0x16>
}
 800b810:	4770      	bx	lr

0800b812 <z_log_msg_static_create.constprop.0>:
 800b812:	2300      	movs	r3, #0
 800b814:	f7f8 bb1a 	b.w	8003e4c <z_impl_z_log_msg_static_create>

0800b818 <adc_stm32_calib.isra.0>:
	ADC_TypeDef *adc = config->base;
 800b818:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(ADCx->CR,
 800b81a:	6893      	ldr	r3, [r2, #8]
 800b81c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800b820:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b824:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b828:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800b82a:	6893      	ldr	r3, [r2, #8]
	while (LL_ADC_IsCalibrationOnGoing(adc)) {
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	dbfc      	blt.n	800b82a <adc_stm32_calib.isra.0+0x12>
}
 800b830:	4770      	bx	lr

0800b832 <adc_context_start_sampling>:
	data->repeat_buffer = data->buffer;
 800b832:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800b836:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 800b83a:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800b842:	6893      	ldr	r3, [r2, #8]
 800b844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b848:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b84c:	f043 0304 	orr.w	r3, r3, #4
 800b850:	6093      	str	r3, [r2, #8]
}
 800b852:	4770      	bx	lr

0800b854 <adc_context_on_timer_expired>:
{
 800b854:	b410      	push	{r4}
 800b856:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800b858:	3808      	subs	r0, #8
 800b85a:	f3bf 8f5b 	dmb	ish
 800b85e:	e850 2f00 	ldrex	r2, [r0]
 800b862:	1c51      	adds	r1, r2, #1
 800b864:	e840 1400 	strex	r4, r1, [r0]
 800b868:	2c00      	cmp	r4, #0
 800b86a:	d1f8      	bne.n	800b85e <adc_context_on_timer_expired+0xa>
 800b86c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
 800b870:	b912      	cbnz	r2, 800b878 <adc_context_on_timer_expired+0x24>
}
 800b872:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
 800b874:	f7ff bfdd 	b.w	800b832 <adc_context_start_sampling>
		ctx->status = -EBUSY;
 800b878:	f06f 020f 	mvn.w	r2, #15
}
 800b87c:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
 800b87e:	659a      	str	r2, [r3, #88]	; 0x58
}
 800b880:	4770      	bx	lr

0800b882 <adc_stm32_isr>:
{
 800b882:	b510      	push	{r4, lr}
	ADC_TypeDef *adc = config->base;
 800b884:	6843      	ldr	r3, [r0, #4]
	struct adc_stm32_data *data = dev->data;
 800b886:	6904      	ldr	r4, [r0, #16]
	ADC_TypeDef *adc = config->base;
 800b888:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800b88a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	*data->buffer++ = LL_ADC_REG_ReadConversionData32(adc);
 800b88c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b890:	1c99      	adds	r1, r3, #2
 800b892:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
 800b896:	801a      	strh	r2, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
 800b898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b89a:	b39b      	cbz	r3, 800b904 <adc_stm32_isr+0x82>
		adc_sequence_callback callback = ctx->options.callback;
 800b89c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
 800b89e:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
		if (callback) {
 800b8a2:	b133      	cbz	r3, 800b8b2 <adc_stm32_isr+0x30>
			action = callback(dev,
 800b8a4:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800b8a8:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
 800b8aa:	2801      	cmp	r0, #1
 800b8ac:	d00b      	beq.n	800b8c6 <adc_stm32_isr+0x44>
 800b8ae:	2802      	cmp	r0, #2
 800b8b0:	d022      	beq.n	800b8f8 <adc_stm32_isr+0x76>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
 800b8b2:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 800b8b6:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d91c      	bls.n	800b8f8 <adc_stm32_isr+0x76>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
 800b8be:	3301      	adds	r3, #1
 800b8c0:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
			} else {
				finish = true;
			}
		}

		if (!finish) {
 800b8c4:	e003      	b.n	800b8ce <adc_stm32_isr+0x4c>
		data->buffer = data->repeat_buffer;
 800b8c6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b8ca:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
 800b8ce:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b8d0:	b923      	cbnz	r3, 800b8dc <adc_stm32_isr+0x5a>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
 800b8d2:	4620      	mov	r0, r4
}
 800b8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8d8:	f7ff bfab 	b.w	800b832 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800b8dc:	f3bf 8f5b 	dmb	ish
 800b8e0:	e854 3f00 	ldrex	r3, [r4]
 800b8e4:	1e5a      	subs	r2, r3, #1
 800b8e6:	e844 2100 	strex	r1, r2, [r4]
 800b8ea:	2900      	cmp	r1, #0
 800b8ec:	d1f8      	bne.n	800b8e0 <adc_stm32_isr+0x5e>
 800b8ee:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	dced      	bgt.n	800b8d2 <adc_stm32_isr+0x50>
 800b8f6:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
 800b8f8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b8fa:	b11b      	cbz	r3, 800b904 <adc_stm32_isr+0x82>
	z_impl_k_timer_stop(timer);
 800b8fc:	f104 0008 	add.w	r0, r4, #8
 800b900:	f000 fcd4 	bl	800c2ac <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 800b904:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b90c:	f7fc b8d0 	b.w	8007ab0 <z_impl_k_sem_give>

0800b910 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 800b910:	680b      	ldr	r3, [r1, #0]
 800b912:	f1a3 0214 	sub.w	r2, r3, #20
 800b916:	2a08      	cmp	r2, #8
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 800b918:	bf9f      	itttt	ls
 800b91a:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 800b91e:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	reg_val |= pclken->enr;
 800b922:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 800b924:	681a      	ldrls	r2, [r3, #0]
	reg_val |= pclken->enr;
 800b926:	bf9d      	ittte	ls
 800b928:	430a      	orrls	r2, r1
	return 0;
 800b92a:	2000      	movls	r0, #0
	*reg = reg_val;
 800b92c:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 800b92e:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 800b932:	4770      	bx	lr

0800b934 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 800b934:	680b      	ldr	r3, [r1, #0]
 800b936:	f1a3 0214 	sub.w	r2, r3, #20
 800b93a:	2a08      	cmp	r2, #8
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 800b93c:	bf9f      	itttt	ls
 800b93e:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 800b942:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	reg_val &= ~pclken->enr;
 800b946:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 800b948:	681a      	ldrls	r2, [r3, #0]
	reg_val &= ~pclken->enr;
 800b94a:	bf9d      	ittte	ls
 800b94c:	438a      	bicls	r2, r1
	return 0;
 800b94e:	2000      	movls	r0, #0
	*reg = reg_val;
 800b950:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 800b952:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 800b956:	4770      	bx	lr

0800b958 <stm32_clock_control_configure>:
	switch (src_clk) {
 800b958:	680b      	ldr	r3, [r1, #0]
 800b95a:	3b04      	subs	r3, #4
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d80f      	bhi.n	800b980 <stm32_clock_control_configure+0x28>
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 800b960:	6849      	ldr	r1, [r1, #4]
					STM32_CLOCK_REG_GET(pclken->enr));
 800b962:	b2cb      	uxtb	r3, r1
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) +
 800b964:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b968:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 800b96c:	f3c1 4202 	ubfx	r2, r1, #16, #3
	reg_val = *reg;
 800b970:	6818      	ldr	r0, [r3, #0]
					STM32_CLOCK_SHIFT_GET(pclken->enr);
 800b972:	f3c1 2104 	ubfx	r1, r1, #8, #5
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 800b976:	408a      	lsls	r2, r1
	reg_val |= dt_val;
 800b978:	4302      	orrs	r2, r0
	*reg = reg_val;
 800b97a:	601a      	str	r2, [r3, #0]
	return 0;
 800b97c:	2000      	movs	r0, #0
 800b97e:	4770      	bx	lr
		return -ENOTSUP;
 800b980:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800b984:	4770      	bx	lr

0800b986 <config_enable_default_clocks>:
	/* SYSCFG is required to remap IRQ to avoid conflicts with CAN */
	/* cf §14.1.3, RM0316 */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
#endif
#endif /* !CONFIG_SOC_SERIES_STM32F3X */
}
 800b986:	4770      	bx	lr

0800b988 <z_log_msg_static_create.constprop.0>:
 800b988:	2300      	movs	r3, #0
 800b98a:	f7f8 ba5f 	b.w	8003e4c <z_impl_z_log_msg_static_create>

0800b98e <ssd1306_set_pixel_format>:
	if (pf == PIXEL_FORMAT_MONO10) {
 800b98e:	2904      	cmp	r1, #4
 800b990:	d001      	beq.n	800b996 <ssd1306_set_pixel_format+0x8>
 800b992:	f7fa bb15 	b.w	8005fc0 <ssd1306_set_pixel_format.part.0>
}
 800b996:	2000      	movs	r0, #0
 800b998:	4770      	bx	lr

0800b99a <ssd1306_write_bus.isra.0>:
static inline int ssd1306_write_bus(const struct device *dev,
 800b99a:	b530      	push	{r4, r5, lr}
 800b99c:	461c      	mov	r4, r3
 800b99e:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write_dt(&config->bus,
 800b9a0:	f084 0401 	eor.w	r4, r4, #1
 800b9a4:	01a4      	lsls	r4, r4, #6
 800b9a6:	f88d 4007 	strb.w	r4, [sp, #7]
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
 800b9aa:	f10d 0407 	add.w	r4, sp, #7
static inline int ssd1306_write_bus(const struct device *dev,
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	9402      	str	r4, [sp, #8]
	msg[0].len = 1U;
 800b9b2:	2401      	movs	r4, #1
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)buf;
	msg[1].len = num_bytes;
 800b9b4:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].len = 1U;
 800b9b8:	9403      	str	r4, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800b9ba:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
 800b9bc:	2400      	movs	r4, #0
static inline int i2c_burst_write_dt(const struct i2c_dt_spec *spec,
				     uint8_t start_addr,
				     const uint8_t *buf,
				     uint32_t num_bytes)
{
	return i2c_burst_write(spec->bus, spec->addr,
 800b9be:	6800      	ldr	r0, [r0, #0]
 800b9c0:	88ab      	ldrh	r3, [r5, #4]
	msg[0].flags = I2C_MSG_WRITE;
 800b9c2:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 800b9c6:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 800b9ca:	6881      	ldr	r1, [r0, #8]
 800b9cc:	688c      	ldr	r4, [r1, #8]
 800b9ce:	a902      	add	r1, sp, #8
 800b9d0:	47a0      	blx	r4
}
 800b9d2:	b009      	add	sp, #36	; 0x24
 800b9d4:	bd30      	pop	{r4, r5, pc}

0800b9d6 <ssd1306_set_contrast>:
{
 800b9d6:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
 800b9d8:	2381      	movs	r3, #129	; 0x81
 800b9da:	f88d 3004 	strb.w	r3, [sp, #4]
 800b9de:	f88d 1005 	strb.w	r1, [sp, #5]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	2202      	movs	r2, #2
 800b9e6:	a901      	add	r1, sp, #4
 800b9e8:	6840      	ldr	r0, [r0, #4]
 800b9ea:	f7ff ffd6 	bl	800b99a <ssd1306_write_bus.isra.0>
}
 800b9ee:	b003      	add	sp, #12
 800b9f0:	f85d fb04 	ldr.w	pc, [sp], #4

0800b9f4 <ssd1306_suspend>:
{
 800b9f4:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
 800b9f6:	23ae      	movs	r3, #174	; 0xae
 800b9f8:	f88d 3004 	strb.w	r3, [sp, #4]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	461a      	mov	r2, r3
 800ba00:	a901      	add	r1, sp, #4
 800ba02:	6840      	ldr	r0, [r0, #4]
 800ba04:	f7ff ffc9 	bl	800b99a <ssd1306_write_bus.isra.0>
}
 800ba08:	b003      	add	sp, #12
 800ba0a:	f85d fb04 	ldr.w	pc, [sp], #4

0800ba0e <ssd1306_resume>:
{
 800ba0e:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
 800ba10:	23af      	movs	r3, #175	; 0xaf
 800ba12:	f88d 3004 	strb.w	r3, [sp, #4]
	return ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true);
 800ba16:	2301      	movs	r3, #1
 800ba18:	461a      	mov	r2, r3
 800ba1a:	a901      	add	r1, sp, #4
 800ba1c:	6840      	ldr	r0, [r0, #4]
 800ba1e:	f7ff ffbc 	bl	800b99a <ssd1306_write_bus.isra.0>
}
 800ba22:	b003      	add	sp, #12
 800ba24:	f85d fb04 	ldr.w	pc, [sp], #4

0800ba28 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ba28:	6843      	ldr	r3, [r0, #4]
 800ba2a:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800ba2c:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800ba2e:	600b      	str	r3, [r1, #0]
}
 800ba30:	2000      	movs	r0, #0
 800ba32:	4770      	bx	lr

0800ba34 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ba34:	6843      	ldr	r3, [r0, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800ba38:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800ba3a:	4042      	eors	r2, r0
 800ba3c:	400a      	ands	r2, r1
 800ba3e:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800ba40:	615a      	str	r2, [r3, #20]
}
 800ba42:	2000      	movs	r0, #0
 800ba44:	4770      	bx	lr

0800ba46 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ba46:	6843      	ldr	r3, [r0, #4]
 800ba48:	685b      	ldr	r3, [r3, #4]
}
 800ba4a:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 800ba4c:	6199      	str	r1, [r3, #24]
}
 800ba4e:	4770      	bx	lr

0800ba50 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ba50:	6843      	ldr	r3, [r0, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
}
 800ba54:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800ba56:	6299      	str	r1, [r3, #40]	; 0x28
 800ba58:	4770      	bx	lr

0800ba5a <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ba5a:	6843      	ldr	r3, [r0, #4]
 800ba5c:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800ba5e:	6953      	ldr	r3, [r2, #20]
 800ba60:	404b      	eors	r3, r1
 800ba62:	6153      	str	r3, [r2, #20]
}
 800ba64:	2000      	movs	r0, #0
 800ba66:	4770      	bx	lr

0800ba68 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800ba68:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ba6a:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800ba6c:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ba6e:	6867      	ldr	r7, [r4, #4]
 800ba70:	4088      	lsls	r0, r1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800ba72:	461e      	mov	r6, r3
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800ba74:	f3c2 1380 	ubfx	r3, r2, #6, #1
 800ba78:	ea27 0700 	bic.w	r7, r7, r0
 800ba7c:	408b      	lsls	r3, r1
 800ba7e:	433b      	orrs	r3, r7
 800ba80:	6063      	str	r3, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba82:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 800ba86:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800ba8a:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800ba8e:	f04f 0e03 	mov.w	lr, #3
 800ba92:	007f      	lsls	r7, r7, #1
 800ba94:	fa0e f707 	lsl.w	r7, lr, r7
 800ba98:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba9c:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 800baa0:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800baa4:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 800baa8:	007f      	lsls	r7, r7, #1
 800baaa:	40bb      	lsls	r3, r7
 800baac:	ea43 030c 	orr.w	r3, r3, ip
 800bab0:	60a3      	str	r3, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bab2:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800bab6:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800baba:	68e7      	ldr	r7, [r4, #12]
 800babc:	005b      	lsls	r3, r3, #1
 800babe:	fa0e f303 	lsl.w	r3, lr, r3
 800bac2:	ea27 0703 	bic.w	r7, r7, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bac6:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800baca:	fab3 f383 	clz	r3, r3
 800bace:	f002 0530 	and.w	r5, r2, #48	; 0x30
 800bad2:	005b      	lsls	r3, r3, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800bad4:	f3c2 2241 	ubfx	r2, r2, #9, #2
 800bad8:	409a      	lsls	r2, r3
 800bada:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 800badc:	2d20      	cmp	r5, #32
 800bade:	60e2      	str	r2, [r4, #12]
 800bae0:	d116      	bne.n	800bb10 <gpio_stm32_configure_raw.isra.0+0xa8>
		if (pin < 8) {
 800bae2:	2907      	cmp	r1, #7
 800bae4:	dc2b      	bgt.n	800bb3e <gpio_stm32_configure_raw.isra.0+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bae6:	fa90 f3a0 	rbit	r3, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800baea:	6a22      	ldr	r2, [r4, #32]
  if (value == 0U)
 800baec:	b32b      	cbz	r3, 800bb3a <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 800baee:	fab3 f383 	clz	r3, r3
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	210f      	movs	r1, #15
 800baf6:	fa01 f303 	lsl.w	r3, r1, r3
 800bafa:	ea22 0203 	bic.w	r2, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bafe:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800bb02:	fab3 f383 	clz	r3, r3
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	fa06 f303 	lsl.w	r3, r6, r3
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb10:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800bb14:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800bb18:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb1a:	fa90 f0a0 	rbit	r0, r0
 800bb1e:	005b      	lsls	r3, r3, #1
 800bb20:	2103      	movs	r1, #3
  return __builtin_clz(value);
 800bb22:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800bb26:	092d      	lsrs	r5, r5, #4
 800bb28:	fa01 f303 	lsl.w	r3, r1, r3
 800bb2c:	0040      	lsls	r0, r0, #1
 800bb2e:	ea22 0303 	bic.w	r3, r2, r3
 800bb32:	4085      	lsls	r5, r0
 800bb34:	431d      	orrs	r5, r3
 800bb36:	6025      	str	r5, [r4, #0]
}
 800bb38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800bb3a:	462b      	mov	r3, r5
 800bb3c:	e7d9      	b.n	800baf2 <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800bb3e:	0a03      	lsrs	r3, r0, #8
 800bb40:	6a61      	ldr	r1, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb42:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800bb46:	b182      	cbz	r2, 800bb6a <gpio_stm32_configure_raw.isra.0+0x102>
  return __builtin_clz(value);
 800bb48:	fab2 f282 	clz	r2, r2
 800bb4c:	0092      	lsls	r2, r2, #2
 800bb4e:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb50:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800bb54:	fab3 f383 	clz	r3, r3
 800bb58:	fa07 f202 	lsl.w	r2, r7, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	ea21 0202 	bic.w	r2, r1, r2
 800bb62:	409e      	lsls	r6, r3
 800bb64:	4316      	orrs	r6, r2
 800bb66:	6266      	str	r6, [r4, #36]	; 0x24
}
 800bb68:	e7d2      	b.n	800bb10 <gpio_stm32_configure_raw.isra.0+0xa8>
    return 32U;
 800bb6a:	462a      	mov	r2, r5
 800bb6c:	e7ee      	b.n	800bb4c <gpio_stm32_configure_raw.isra.0+0xe4>

0800bb6e <gpio_stm32_config>:
{
 800bb6e:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 800bb70:	039a      	lsls	r2, r3, #14
{
 800bb72:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 800bb74:	d518      	bpl.n	800bba8 <gpio_stm32_config+0x3a>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800bb76:	079c      	lsls	r4, r3, #30
 800bb78:	d50f      	bpl.n	800bb9a <gpio_stm32_config+0x2c>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800bb7a:	075a      	lsls	r2, r3, #29
 800bb7c:	d52d      	bpl.n	800bbda <gpio_stm32_config+0x6c>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800bb7e:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 800bb80:	06dc      	lsls	r4, r3, #27
 800bb82:	d50c      	bpl.n	800bb9e <gpio_stm32_config+0x30>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800bb84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800bb88:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 800bb8c:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800bb8e:	d018      	beq.n	800bbc2 <gpio_stm32_config+0x54>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800bb90:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800bb92:	2301      	movs	r3, #1
 800bb94:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 800bb96:	61a3      	str	r3, [r4, #24]
	return 0;
 800bb98:	e00d      	b.n	800bbb6 <gpio_stm32_config+0x48>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800bb9a:	2210      	movs	r2, #16
 800bb9c:	e7f0      	b.n	800bb80 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800bb9e:	069c      	lsls	r4, r3, #26
 800bba0:	d5f2      	bpl.n	800bb88 <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800bba2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 800bba6:	e7ef      	b.n	800bb88 <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 800bba8:	03dc      	lsls	r4, r3, #15
 800bbaa:	d511      	bpl.n	800bbd0 <gpio_stm32_config+0x62>
		if ((flags & GPIO_PULL_UP) != 0) {
 800bbac:	06da      	lsls	r2, r3, #27
 800bbae:	d411      	bmi.n	800bbd4 <gpio_stm32_config+0x66>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800bbb0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bbb4:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 800bbb6:	6840      	ldr	r0, [r0, #4]
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f7ff ff55 	bl	800ba68 <gpio_stm32_configure_raw.isra.0>
	return 0;
 800bbbe:	2000      	movs	r0, #0
}
 800bbc0:	bd10      	pop	{r4, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800bbc2:	035b      	lsls	r3, r3, #13
 800bbc4:	d5f7      	bpl.n	800bbb6 <gpio_stm32_config+0x48>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800bbc6:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800bbc8:	2301      	movs	r3, #1
 800bbca:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 800bbcc:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 800bbce:	e7f2      	b.n	800bbb6 <gpio_stm32_config+0x48>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800bbd0:	2230      	movs	r2, #48	; 0x30
 800bbd2:	e7f0      	b.n	800bbb6 <gpio_stm32_config+0x48>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800bbd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbd8:	e7ed      	b.n	800bbb6 <gpio_stm32_config+0x48>
				return -ENOTSUP;
 800bbda:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800bbde:	e7ef      	b.n	800bbc0 <gpio_stm32_config+0x52>

0800bbe0 <gpio_stm32_configure>:
{
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	461f      	mov	r7, r3
 800bbe4:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800bbe6:	6840      	ldr	r0, [r0, #4]
{
 800bbe8:	460e      	mov	r6, r1
 800bbea:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800bbec:	f7ff ff3c 	bl	800ba68 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 800bbf0:	2f11      	cmp	r7, #17
 800bbf2:	d108      	bne.n	800bc06 <gpio_stm32_configure+0x26>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	fa03 f606 	lsl.w	r6, r3, r6
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800bbfa:	6863      	ldr	r3, [r4, #4]
 800bbfc:	685b      	ldr	r3, [r3, #4]
		if (gpio_out == STM32_ODR_1) {
 800bbfe:	052a      	lsls	r2, r5, #20
	WRITE_REG(gpio->BSRR, pins);
 800bc00:	bf4c      	ite	mi
 800bc02:	619e      	strmi	r6, [r3, #24]
 800bc04:	629e      	strpl	r6, [r3, #40]	; 0x28
}
 800bc06:	2000      	movs	r0, #0
 800bc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc0a <stm32_i2c_enable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 800bc0a:	68c3      	ldr	r3, [r0, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	f042 0220 	orr.w	r2, r2, #32
 800bc12:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	f042 0210 	orr.w	r2, r2, #16
 800bc1a:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc22:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc2a:	601a      	str	r2, [r3, #0]
}
 800bc2c:	4770      	bx	lr

0800bc2e <stm32_i2c_disable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 800bc2e:	68c3      	ldr	r3, [r0, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	f022 0202 	bic.w	r2, r2, #2
 800bc36:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	f022 0204 	bic.w	r2, r2, #4
 800bc3e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	f022 0220 	bic.w	r2, r2, #32
 800bc46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	f022 0210 	bic.w	r2, r2, #16
 800bc4e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc56:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc5e:	601a      	str	r2, [r3, #0]
}
 800bc60:	4770      	bx	lr

0800bc62 <stm32_i2c_master_mode_end>:
{
 800bc62:	b510      	push	{r4, lr}
 800bc64:	4603      	mov	r3, r0
	const struct i2c_stm32_config *cfg = dev->config;
 800bc66:	6840      	ldr	r0, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800bc68:	691c      	ldr	r4, [r3, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800bc6a:	68c1      	ldr	r1, [r0, #12]
	stm32_i2c_disable_transfer_interrupts(dev);
 800bc6c:	f7ff ffdf 	bl	800bc2e <stm32_i2c_disable_transfer_interrupts.isra.0>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800bc70:	680b      	ldr	r3, [r1, #0]
 800bc72:	f023 0301 	bic.w	r3, r3, #1
 800bc76:	600b      	str	r3, [r1, #0]
 800bc78:	4620      	mov	r0, r4
}
 800bc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc7e:	f7fb bf17 	b.w	8007ab0 <z_impl_k_sem_give>

0800bc82 <stm32_i2c_event_isr>:
{
 800bc82:	b510      	push	{r4, lr}
	struct i2c_stm32_data *data = dev->data;
 800bc84:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800bc86:	6843      	ldr	r3, [r0, #4]
	if (data->current.len) {
 800bc88:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	I2C_TypeDef *i2c = cfg->i2c;
 800bc8a:	68db      	ldr	r3, [r3, #12]
	if (data->current.len) {
 800bc8c:	b18a      	cbz	r2, 800bcb2 <stm32_i2c_event_isr+0x30>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800bc8e:	699a      	ldr	r2, [r3, #24]
 800bc90:	0792      	lsls	r2, r2, #30
			LL_I2C_TransmitData8(i2c, *data->current.buf);
 800bc92:	bf42      	ittt	mi
 800bc94:	6bca      	ldrmi	r2, [r1, #60]	; 0x3c
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 800bc96:	7812      	ldrbmi	r2, [r2, #0]
 800bc98:	629a      	strmi	r2, [r3, #40]	; 0x28
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800bc9a:	699a      	ldr	r2, [r3, #24]
 800bc9c:	0754      	lsls	r4, r2, #29
			*data->current.buf = LL_I2C_ReceiveData8(i2c);
 800bc9e:	bf42      	ittt	mi
 800bca0:	6bca      	ldrmi	r2, [r1, #60]	; 0x3c
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800bca2:	6a5c      	ldrmi	r4, [r3, #36]	; 0x24
 800bca4:	7014      	strbmi	r4, [r2, #0]
		data->current.buf++;
 800bca6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800bca8:	3201      	adds	r2, #1
 800bcaa:	63ca      	str	r2, [r1, #60]	; 0x3c
		data->current.len--;
 800bcac:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800bcae:	3a01      	subs	r2, #1
 800bcb0:	638a      	str	r2, [r1, #56]	; 0x38
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 800bcb2:	699a      	ldr	r2, [r3, #24]
 800bcb4:	06d2      	lsls	r2, r2, #27
 800bcb6:	d414      	bmi.n	800bce2 <stm32_i2c_event_isr+0x60>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800bcb8:	699a      	ldr	r2, [r3, #24]
 800bcba:	0694      	lsls	r4, r2, #26
 800bcbc:	d41c      	bmi.n	800bcf8 <stm32_i2c_event_isr+0x76>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 800bcbe:	699a      	ldr	r2, [r3, #24]
 800bcc0:	0652      	lsls	r2, r2, #25
 800bcc2:	d402      	bmi.n	800bcca <stm32_i2c_event_isr+0x48>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
 800bcc4:	699a      	ldr	r2, [r3, #24]
 800bcc6:	0614      	lsls	r4, r2, #24
 800bcc8:	d515      	bpl.n	800bcf6 <stm32_i2c_event_isr+0x74>
		if (data->current.msg->flags & I2C_MSG_STOP) {
 800bcca:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800bccc:	7a12      	ldrb	r2, [r2, #8]
 800bcce:	0792      	lsls	r2, r2, #30
 800bcd0:	d40d      	bmi.n	800bcee <stm32_i2c_event_isr+0x6c>
			stm32_i2c_disable_transfer_interrupts(dev);
 800bcd2:	6840      	ldr	r0, [r0, #4]
 800bcd4:	f7ff ffab 	bl	800bc2e <stm32_i2c_disable_transfer_interrupts.isra.0>
}
 800bcd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcdc:	4608      	mov	r0, r1
 800bcde:	f7fb bee7 	b.w	8007ab0 <z_impl_k_sem_give>
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 800bce2:	69da      	ldr	r2, [r3, #28]
 800bce4:	f042 0210 	orr.w	r2, r2, #16
 800bce8:	61da      	str	r2, [r3, #28]
		data->current.is_nack = 1U;
 800bcea:	2201      	movs	r2, #1
 800bcec:	62ca      	str	r2, [r1, #44]	; 0x2c
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 800bcee:	685a      	ldr	r2, [r3, #4]
 800bcf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcf4:	605a      	str	r2, [r3, #4]
}
 800bcf6:	bd10      	pop	{r4, pc}
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800bcf8:	69da      	ldr	r2, [r3, #28]
 800bcfa:	f042 0220 	orr.w	r2, r2, #32
 800bcfe:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800bd06:	605a      	str	r2, [r3, #4]
 800bd08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stm32_i2c_master_mode_end(dev);
 800bd0c:	f7ff bfa9 	b.w	800bc62 <stm32_i2c_master_mode_end>

0800bd10 <stm32_i2c_error_isr>:
	I2C_TypeDef *i2c = cfg->i2c;
 800bd10:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800bd12:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800bd14:	68db      	ldr	r3, [r3, #12]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ARLO) == (I2C_ISR_ARLO)) ? 1UL : 0UL);
 800bd16:	699a      	ldr	r2, [r3, #24]
 800bd18:	0592      	lsls	r2, r2, #22
 800bd1a:	d507      	bpl.n	800bd2c <stm32_i2c_error_isr+0x1c>
  SET_BIT(I2Cx->ICR, I2C_ICR_ARLOCF);
 800bd1c:	69da      	ldr	r2, [r3, #28]
 800bd1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd22:	61da      	str	r2, [r3, #28]
		data->current.is_arlo = 1U;
 800bd24:	2301      	movs	r3, #1
 800bd26:	628b      	str	r3, [r1, #40]	; 0x28
	stm32_i2c_master_mode_end(dev);
 800bd28:	f7ff bf9b 	b.w	800bc62 <stm32_i2c_master_mode_end>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BERR) == (I2C_ISR_BERR)) ? 1UL : 0UL);
 800bd2c:	699a      	ldr	r2, [r3, #24]
 800bd2e:	05d2      	lsls	r2, r2, #23
 800bd30:	d506      	bpl.n	800bd40 <stm32_i2c_error_isr+0x30>
  SET_BIT(I2Cx->ICR, I2C_ICR_BERRCF);
 800bd32:	69da      	ldr	r2, [r3, #28]
 800bd34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd38:	61da      	str	r2, [r3, #28]
		data->current.is_err = 1U;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	630b      	str	r3, [r1, #48]	; 0x30
		goto end;
 800bd3e:	e7f3      	b.n	800bd28 <stm32_i2c_error_isr+0x18>
}
 800bd40:	4770      	bx	lr

0800bd42 <stm32_i2c_msg_write>:
{
 800bd42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 800bd46:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800bd48:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800bd4a:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 800bd4e:	684f      	ldr	r7, [r1, #4]
 800bd50:	63a7      	str	r7, [r4, #56]	; 0x38
	data->current.buf = msg->buf;
 800bd52:	680f      	ldr	r7, [r1, #0]
 800bd54:	63e7      	str	r7, [r4, #60]	; 0x3c
	data->current.is_nack = 0U;
 800bd56:	f04f 0c00 	mov.w	ip, #0
{
 800bd5a:	4605      	mov	r5, r0
	data->current.is_write = 1U;
 800bd5c:	2701      	movs	r7, #1
	data->current.is_err = 0U;
 800bd5e:	e9c4 cc0b 	strd	ip, ip, [r4, #44]	; 0x2c
	data->current.is_write = 1U;
 800bd62:	6267      	str	r7, [r4, #36]	; 0x24
	data->current.msg = msg;
 800bd64:	6361      	str	r1, [r4, #52]	; 0x34
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_WRITE);
 800bd66:	f8cd c000 	str.w	ip, [sp]
 800bd6a:	f7fa fc13 	bl	8006594 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 800bd6e:	6868      	ldr	r0, [r5, #4]
 800bd70:	f7ff ff4b 	bl	800bc0a <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 800bd74:	f8d8 3000 	ldr.w	r3, [r8]
 800bd78:	f043 0302 	orr.w	r3, r3, #2
 800bd7c:	f8c8 3000 	str.w	r3, [r8]
	return z_impl_k_sem_take(sem, timeout);
 800bd80:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd84:	2300      	movs	r3, #0
 800bd86:	4620      	mov	r0, r4
 800bd88:	f7fb fed0 	bl	8007b2c <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 800bd8c:	b150      	cbz	r0, 800bda4 <stm32_i2c_msg_write+0x62>
		stm32_i2c_master_mode_end(dev);
 800bd8e:	4628      	mov	r0, r5
 800bd90:	f7ff ff67 	bl	800bc62 <stm32_i2c_master_mode_end>
 800bd94:	f04f 32ff 	mov.w	r2, #4294967295
 800bd98:	f04f 33ff 	mov.w	r3, #4294967295
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f7fb fec5 	bl	8007b2c <z_impl_k_sem_take>
		is_timeout = true;
 800bda2:	4638      	mov	r0, r7
	if (data->current.is_nack || data->current.is_err ||
 800bda4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800bda8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bdaa:	b129      	cbz	r1, 800bdb8 <stm32_i2c_msg_write+0x76>
	if (data->current.is_arlo) {
 800bdac:	2100      	movs	r1, #0
 800bdae:	b102      	cbz	r2, 800bdb2 <stm32_i2c_msg_write+0x70>
		data->current.is_arlo = 0U;
 800bdb0:	62a1      	str	r1, [r4, #40]	; 0x28
		data->current.is_nack = 0U;
 800bdb2:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (data->current.is_err) {
 800bdb4:	b963      	cbnz	r3, 800bdd0 <stm32_i2c_msg_write+0x8e>
 800bdb6:	e002      	b.n	800bdbe <stm32_i2c_msg_write+0x7c>
	if (data->current.is_nack || data->current.is_err ||
 800bdb8:	b943      	cbnz	r3, 800bdcc <stm32_i2c_msg_write+0x8a>
 800bdba:	b92a      	cbnz	r2, 800bdc8 <stm32_i2c_msg_write+0x86>
	    data->current.is_arlo || is_timeout) {
 800bdbc:	b108      	cbz	r0, 800bdc2 <stm32_i2c_msg_write+0x80>
	return -EIO;
 800bdbe:	f06f 0004 	mvn.w	r0, #4
}
 800bdc2:	b002      	add	sp, #8
 800bdc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->current.is_arlo = 0U;
 800bdc8:	62a3      	str	r3, [r4, #40]	; 0x28
	if (data->current.is_err) {
 800bdca:	e7f8      	b.n	800bdbe <stm32_i2c_msg_write+0x7c>
	if (data->current.is_arlo) {
 800bdcc:	b102      	cbz	r2, 800bdd0 <stm32_i2c_msg_write+0x8e>
		data->current.is_arlo = 0U;
 800bdce:	62a1      	str	r1, [r4, #40]	; 0x28
		data->current.is_err = 0U;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	6323      	str	r3, [r4, #48]	; 0x30
 800bdd4:	e7f3      	b.n	800bdbe <stm32_i2c_msg_write+0x7c>

0800bdd6 <stm32_i2c_msg_read>:
{
 800bdd6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 800bdda:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800bddc:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800bdde:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 800bde2:	684f      	ldr	r7, [r1, #4]
 800bde4:	63a7      	str	r7, [r4, #56]	; 0x38
	data->current.buf = msg->buf;
 800bde6:	680f      	ldr	r7, [r1, #0]
 800bde8:	63e7      	str	r7, [r4, #60]	; 0x3c
{
 800bdea:	4605      	mov	r5, r0
	data->current.is_write = 0U;
 800bdec:	2700      	movs	r7, #0
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 800bdee:	f44f 6680 	mov.w	r6, #1024	; 0x400
	data->current.is_arlo = 0U;
 800bdf2:	e9c4 7709 	strd	r7, r7, [r4, #36]	; 0x24
	data->current.is_nack = 0U;
 800bdf6:	e9c4 770b 	strd	r7, r7, [r4, #44]	; 0x2c
	data->current.msg = msg;
 800bdfa:	6361      	str	r1, [r4, #52]	; 0x34
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 800bdfc:	9600      	str	r6, [sp, #0]
 800bdfe:	f7fa fbc9 	bl	8006594 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 800be02:	6868      	ldr	r0, [r5, #4]
 800be04:	f7ff ff01 	bl	800bc0a <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800be08:	f8d8 3000 	ldr.w	r3, [r8]
 800be0c:	f043 0304 	orr.w	r3, r3, #4
 800be10:	f8c8 3000 	str.w	r3, [r8]
 800be14:	f241 3288 	movw	r2, #5000	; 0x1388
 800be18:	2300      	movs	r3, #0
 800be1a:	4620      	mov	r0, r4
 800be1c:	f7fb fe86 	bl	8007b2c <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 800be20:	b150      	cbz	r0, 800be38 <stm32_i2c_msg_read+0x62>
		stm32_i2c_master_mode_end(dev);
 800be22:	4628      	mov	r0, r5
 800be24:	f7ff ff1d 	bl	800bc62 <stm32_i2c_master_mode_end>
 800be28:	f04f 32ff 	mov.w	r2, #4294967295
 800be2c:	f04f 33ff 	mov.w	r3, #4294967295
 800be30:	4620      	mov	r0, r4
 800be32:	f7fb fe7b 	bl	8007b2c <z_impl_k_sem_take>
		is_timeout = true;
 800be36:	2001      	movs	r0, #1
	if (data->current.is_nack || data->current.is_err ||
 800be38:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800be3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800be3e:	b129      	cbz	r1, 800be4c <stm32_i2c_msg_read+0x76>
	if (data->current.is_arlo) {
 800be40:	2100      	movs	r1, #0
 800be42:	b102      	cbz	r2, 800be46 <stm32_i2c_msg_read+0x70>
		data->current.is_arlo = 0U;
 800be44:	62a1      	str	r1, [r4, #40]	; 0x28
		data->current.is_nack = 0U;
 800be46:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (data->current.is_err) {
 800be48:	b963      	cbnz	r3, 800be64 <stm32_i2c_msg_read+0x8e>
 800be4a:	e002      	b.n	800be52 <stm32_i2c_msg_read+0x7c>
	if (data->current.is_nack || data->current.is_err ||
 800be4c:	b943      	cbnz	r3, 800be60 <stm32_i2c_msg_read+0x8a>
 800be4e:	b92a      	cbnz	r2, 800be5c <stm32_i2c_msg_read+0x86>
	    data->current.is_arlo || is_timeout) {
 800be50:	b108      	cbz	r0, 800be56 <stm32_i2c_msg_read+0x80>
	return -EIO;
 800be52:	f06f 0004 	mvn.w	r0, #4
}
 800be56:	b002      	add	sp, #8
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->current.is_arlo = 0U;
 800be5c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (data->current.is_err) {
 800be5e:	e7f8      	b.n	800be52 <stm32_i2c_msg_read+0x7c>
	if (data->current.is_arlo) {
 800be60:	b102      	cbz	r2, 800be64 <stm32_i2c_msg_read+0x8e>
		data->current.is_arlo = 0U;
 800be62:	62a1      	str	r1, [r4, #40]	; 0x28
		data->current.is_err = 0U;
 800be64:	2300      	movs	r3, #0
 800be66:	6323      	str	r3, [r4, #48]	; 0x30
 800be68:	e7f3      	b.n	800be52 <stm32_i2c_msg_read+0x7c>

0800be6a <i2c_stm32_irq_config_func_i2c1>:
STM32_I2C_IRQ_HANDLER(name)

/* I2C instances declaration */

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c1), okay)
STM32_I2C_INIT(i2c1);
 800be6a:	b508      	push	{r3, lr}
 800be6c:	2200      	movs	r2, #0
 800be6e:	4611      	mov	r1, r2
 800be70:	201f      	movs	r0, #31
 800be72:	f7f8 fcd9 	bl	8004828 <z_arm_irq_priority_set>
 800be76:	201f      	movs	r0, #31
 800be78:	f7f8 fcc8 	bl	800480c <arch_irq_enable>
 800be7c:	2200      	movs	r2, #0
 800be7e:	2020      	movs	r0, #32
 800be80:	4611      	mov	r1, r2
 800be82:	f7f8 fcd1 	bl	8004828 <z_arm_irq_priority_set>
 800be86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800be8a:	2020      	movs	r0, #32
 800be8c:	f7f8 bcbe 	b.w	800480c <arch_irq_enable>

0800be90 <i2c_stm32_transfer>:
{
 800be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	4699      	mov	r9, r3
	current->flags |= I2C_MSG_RESTART;
 800be96:	7a0b      	ldrb	r3, [r1, #8]
	struct i2c_stm32_data *data = dev->data;
 800be98:	6906      	ldr	r6, [r0, #16]
	current->flags |= I2C_MSG_RESTART;
 800be9a:	f043 0304 	orr.w	r3, r3, #4
{
 800be9e:	4615      	mov	r5, r2
	current->flags |= I2C_MSG_RESTART;
 800bea0:	720b      	strb	r3, [r1, #8]
{
 800bea2:	b087      	sub	sp, #28
 800bea4:	4607      	mov	r7, r0
 800bea6:	460c      	mov	r4, r1
	for (uint8_t i = 1; i <= num_msgs; i++) {
 800bea8:	460a      	mov	r2, r1
 800beaa:	2301      	movs	r3, #1
 800beac:	42ab      	cmp	r3, r5
 800beae:	d90c      	bls.n	800beca <i2c_stm32_transfer+0x3a>
	k_sem_take(&data->bus_mutex, K_FOREVER);
 800beb0:	f106 0810 	add.w	r8, r6, #16
 800beb4:	f04f 33ff 	mov.w	r3, #4294967295
 800beb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bebc:	4640      	mov	r0, r8
 800bebe:	f7fb fe35 	bl	8007b2c <z_impl_k_sem_take>
	while (num_msgs > 0) {
 800bec2:	3414      	adds	r4, #20
 800bec4:	2300      	movs	r3, #0
 800bec6:	ae03      	add	r6, sp, #12
 800bec8:	e050      	b.n	800bf6c <i2c_stm32_transfer+0xdc>
			if (OPERATION(current) != OPERATION(next)) {
 800beca:	7a11      	ldrb	r1, [r2, #8]
		if (i < num_msgs) {
 800becc:	d20c      	bcs.n	800bee8 <i2c_stm32_transfer+0x58>
			if (OPERATION(current) != OPERATION(next)) {
 800bece:	7d10      	ldrb	r0, [r2, #20]
 800bed0:	ea80 0c01 	eor.w	ip, r0, r1
 800bed4:	f01c 0f01 	tst.w	ip, #1
 800bed8:	d001      	beq.n	800bede <i2c_stm32_transfer+0x4e>
				if (!(next->flags & I2C_MSG_RESTART)) {
 800beda:	0740      	lsls	r0, r0, #29
 800bedc:	d501      	bpl.n	800bee2 <i2c_stm32_transfer+0x52>
			if (current->flags & I2C_MSG_STOP) {
 800bede:	0789      	lsls	r1, r1, #30
 800bee0:	d505      	bpl.n	800beee <i2c_stm32_transfer+0x5e>
		return ret;
 800bee2:	f06f 0315 	mvn.w	r3, #21
 800bee6:	e048      	b.n	800bf7a <i2c_stm32_transfer+0xea>
			current->flags |= I2C_MSG_STOP;
 800bee8:	f041 0102 	orr.w	r1, r1, #2
 800beec:	7211      	strb	r1, [r2, #8]
	for (uint8_t i = 1; i <= num_msgs; i++) {
 800beee:	3301      	adds	r3, #1
		current++;
 800bef0:	320c      	adds	r2, #12
	for (uint8_t i = 1; i <= num_msgs; i++) {
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	e7da      	b.n	800beac <i2c_stm32_transfer+0x1c>
		if (num_msgs > 1) {
 800bef6:	2d01      	cmp	r5, #1
 800bef8:	bf14      	ite	ne
 800befa:	4623      	movne	r3, r4
 800befc:	2300      	moveq	r3, #0
 800befe:	9301      	str	r3, [sp, #4]
		ret = i2c_stm32_transaction(dev, *current, next_msg_flags, slave);
 800bf00:	f1a4 0314 	sub.w	r3, r4, #20
 800bf04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf08:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	const uint8_t saved_flags = msg.flags;
 800bf0c:	f89d b014 	ldrb.w	fp, [sp, #20]
	uint32_t rest = msg.len;
 800bf10:	f8dd a010 	ldr.w	sl, [sp, #16]
		saved_flags & ~(I2C_MSG_STOP | I2C_MSG_RESTART);
 800bf14:	f02b 0306 	bic.w	r3, fp, #6
	uint8_t combine_flags =
 800bf18:	f88d 300b 	strb.w	r3, [sp, #11]
		if (msg.len > i2c_stm32_maxchunk) {
 800bf1c:	9b04      	ldr	r3, [sp, #16]
 800bf1e:	2bff      	cmp	r3, #255	; 0xff
			msg.len = i2c_stm32_maxchunk;
 800bf20:	bf83      	ittte	hi
 800bf22:	23ff      	movhi	r3, #255	; 0xff
 800bf24:	9304      	strhi	r3, [sp, #16]
			msg.flags &= ~I2C_MSG_STOP;
 800bf26:	f89d 3014 	ldrbhi.w	r3, [sp, #20]
			flagsp = next_msg_flags;
 800bf2a:	9a01      	ldrls	r2, [sp, #4]
			msg.flags &= ~I2C_MSG_STOP;
 800bf2c:	bf8a      	itet	hi
 800bf2e:	f003 03fd 	andhi.w	r3, r3, #253	; 0xfd
			flagsp = &combine_flags;
 800bf32:	465b      	movls	r3, fp
 800bf34:	f10d 020b 	addhi.w	r2, sp, #11
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 800bf38:	f013 0f01 	tst.w	r3, #1
			msg.flags &= ~I2C_MSG_STOP;
 800bf3c:	f88d 3014 	strb.w	r3, [sp, #20]
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 800bf40:	4631      	mov	r1, r6
 800bf42:	464b      	mov	r3, r9
 800bf44:	4638      	mov	r0, r7
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 800bf46:	d11c      	bne.n	800bf82 <i2c_stm32_transfer+0xf2>
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 800bf48:	f7ff fefb 	bl	800bd42 <stm32_i2c_msg_write>
		if (ret < 0) {
 800bf4c:	2800      	cmp	r0, #0
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 800bf4e:	4603      	mov	r3, r0
		if (ret < 0) {
 800bf50:	db0e      	blt.n	800bf70 <i2c_stm32_transfer+0xe0>
		rest -= msg.len;
 800bf52:	9904      	ldr	r1, [sp, #16]
		msg.buf += msg.len;
 800bf54:	9a03      	ldr	r2, [sp, #12]
		rest -= msg.len;
 800bf56:	ebaa 0a01 	sub.w	sl, sl, r1
		msg.buf += msg.len;
 800bf5a:	440a      	add	r2, r1
		msg.len = rest;
 800bf5c:	e9cd 2a03 	strd	r2, sl, [sp, #12]
	} while (rest > 0U);
 800bf60:	f1ba 0f00 	cmp.w	sl, #0
 800bf64:	d1da      	bne.n	800bf1c <i2c_stm32_transfer+0x8c>
		num_msgs--;
 800bf66:	3d01      	subs	r5, #1
 800bf68:	b2ed      	uxtb	r5, r5
 800bf6a:	340c      	adds	r4, #12
	while (num_msgs > 0) {
 800bf6c:	2d00      	cmp	r5, #0
 800bf6e:	d1c2      	bne.n	800bef6 <i2c_stm32_transfer+0x66>
 800bf70:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
 800bf72:	4640      	mov	r0, r8
 800bf74:	f7fb fd9c 	bl	8007ab0 <z_impl_k_sem_give>
}
 800bf78:	9b01      	ldr	r3, [sp, #4]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	b007      	add	sp, #28
 800bf7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 800bf82:	f7ff ff28 	bl	800bdd6 <stm32_i2c_msg_read>
 800bf86:	e7e1      	b.n	800bf4c <i2c_stm32_transfer+0xbc>

0800bf88 <i2c_stm32_runtime_configure>:
{
 800bf88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct i2c_stm32_data *data = dev->data;
 800bf8c:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800bf8e:	6843      	ldr	r3, [r0, #4]
{
 800bf90:	460f      	mov	r7, r1
 800bf92:	4605      	mov	r5, r0
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800bf94:	4668      	mov	r0, sp
	I2C_TypeDef *i2c = cfg->i2c;
 800bf96:	68de      	ldr	r6, [r3, #12]
	k_sem_take(&data->bus_mutex, K_FOREVER);
 800bf98:	3410      	adds	r4, #16
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800bf9a:	f000 f8dd 	bl	800c158 <LL_RCC_GetSystemClocksFreq>
	data->dev_config = config;
 800bf9e:	6127      	str	r7, [r4, #16]
	clock = rcc_clocks.SYSCLK_Frequency;
 800bfa0:	f8dd 8000 	ldr.w	r8, [sp]
	return z_impl_k_sem_take(sem, timeout);
 800bfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfac:	4620      	mov	r0, r4
 800bfae:	f7fb fdbd 	bl	8007b2c <z_impl_k_sem_take>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800bfb2:	6833      	ldr	r3, [r6, #0]
 800bfb4:	f023 0301 	bic.w	r3, r3, #1
 800bfb8:	6033      	str	r3, [r6, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800bfba:	6833      	ldr	r3, [r6, #0]
 800bfbc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800bfc0:	6033      	str	r3, [r6, #0]
	ret = stm32_i2c_configure_timing(dev, clock);
 800bfc2:	4641      	mov	r1, r8
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	f7fa fb33 	bl	8006630 <stm32_i2c_configure_timing>
 800bfca:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f7fb fd6f 	bl	8007ab0 <z_impl_k_sem_give>
}
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	b004      	add	sp, #16
 800bfd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bfda <uart_stm32_err_check>:
	const struct uart_stm32_config *config = dev->config;
 800bfda:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800bfdc:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800bfde:	69d0      	ldr	r0, [r2, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800bfe0:	69d1      	ldr	r1, [r2, #28]
 800bfe2:	07c9      	lsls	r1, r1, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800bfe4:	69d1      	ldr	r1, [r2, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800bfe6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 800bfea:	bf48      	it	mi
 800bfec:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800bff0:	0789      	lsls	r1, r1, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 800bff2:	69d1      	ldr	r1, [r2, #28]
		err |= UART_ERROR_FRAMING;
 800bff4:	bf48      	it	mi
 800bff6:	f040 0004 	orrmi.w	r0, r0, #4
 800bffa:	05c9      	lsls	r1, r1, #23
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 800bffc:	bf42      	ittt	mi
 800bffe:	f44f 7180 	movmi.w	r1, #256	; 0x100
		err |= UART_BREAK;
 800c002:	f040 0008 	orrmi.w	r0, r0, #8
 800c006:	6211      	strmi	r1, [r2, #32]
	if (err & UART_ERROR_OVERRUN) {
 800c008:	07c2      	lsls	r2, r0, #31
		LL_USART_ClearFlag_ORE(config->usart);
 800c00a:	bf42      	ittt	mi
 800c00c:	681a      	ldrmi	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800c00e:	2108      	movmi	r1, #8
 800c010:	6211      	strmi	r1, [r2, #32]
	if (err & UART_ERROR_PARITY) {
 800c012:	0781      	lsls	r1, r0, #30
		LL_USART_ClearFlag_PE(config->usart);
 800c014:	bf42      	ittt	mi
 800c016:	681a      	ldrmi	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800c018:	2101      	movmi	r1, #1
 800c01a:	6211      	strmi	r1, [r2, #32]
	if (err & UART_ERROR_FRAMING) {
 800c01c:	0742      	lsls	r2, r0, #29
		LL_USART_ClearFlag_FE(config->usart);
 800c01e:	bf42      	ittt	mi
 800c020:	681a      	ldrmi	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800c022:	2102      	movmi	r1, #2
 800c024:	6211      	strmi	r1, [r2, #32]
	LL_USART_ClearFlag_NE(config->usart);
 800c026:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 800c028:	2204      	movs	r2, #4
 800c02a:	621a      	str	r2, [r3, #32]
}
 800c02c:	4770      	bx	lr

0800c02e <uart_stm32_poll_out>:
{
 800c02e:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 800c030:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 800c032:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800c034:	69d3      	ldr	r3, [r2, #28]
 800c036:	061b      	lsls	r3, r3, #24
 800c038:	d5fc      	bpl.n	800c034 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 800c03a:	f04f 0210 	mov.w	r2, #16
 800c03e:	f3ef 8311 	mrs	r3, BASEPRI
 800c042:	f382 8812 	msr	BASEPRI_MAX, r2
 800c046:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 800c04a:	6802      	ldr	r2, [r0, #0]
 800c04c:	69d4      	ldr	r4, [r2, #28]
 800c04e:	0624      	lsls	r4, r4, #24
 800c050:	d404      	bmi.n	800c05c <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 800c05a:	e7ea      	b.n	800c032 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800c05c:	8511      	strh	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
}
 800c066:	bd10      	pop	{r4, pc}

0800c068 <uart_stm32_poll_in>:
	const struct uart_stm32_config *config = dev->config;
 800c068:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800c06a:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800c06c:	69d0      	ldr	r0, [r2, #28]
 800c06e:	0700      	lsls	r0, r0, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800c070:	bf44      	itt	mi
 800c072:	2008      	movmi	r0, #8
 800c074:	6210      	strmi	r0, [r2, #32]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 800c076:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800c078:	69da      	ldr	r2, [r3, #28]
 800c07a:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800c07c:	bf43      	ittte	mi
 800c07e:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 800c080:	700b      	strbmi	r3, [r1, #0]
	return 0;
 800c082:	2000      	movmi	r0, #0
		return -1;
 800c084:	f04f 30ff 	movpl.w	r0, #4294967295
}
 800c088:	4770      	bx	lr

0800c08a <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 800c08a:	6903      	ldr	r3, [r0, #16]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 800c090:	6843      	ldr	r3, [r0, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800c09a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c09e:	d035      	beq.n	800c10c <uart_stm32_config_get+0x82>
 800c0a0:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 800c0a4:	f1dc 0300 	rsbs	r3, ip, #0
 800c0a8:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800c0ac:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 800c0ae:	6843      	ldr	r3, [r0, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800c0b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0bc:	d028      	beq.n	800c110 <uart_stm32_config_get+0x86>
 800c0be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0c2:	d027      	beq.n	800c114 <uart_stm32_config_get+0x8a>
		return UART_CFG_STOP_BITS_2;
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	bf0c      	ite	eq
 800c0c8:	2301      	moveq	r3, #1
 800c0ca:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800c0cc:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 800c0ce:	6843      	ldr	r3, [r0, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800c0d2:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800c0d4:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800c0d6:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	switch (db) {
 800c0da:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800c0de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c0e2:	d019      	beq.n	800c118 <uart_stm32_config_get+0x8e>
 800c0e4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800c0e8:	d11b      	bne.n	800c122 <uart_stm32_config_get+0x98>
			return UART_CFG_DATA_BITS_7;
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	bf14      	ite	ne
 800c0ee:	2301      	movne	r3, #1
 800c0f0:	2302      	moveq	r3, #2
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800c0f2:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 800c0f4:	6843      	ldr	r3, [r0, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800c0fe:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800c102:	4253      	negs	r3, r2
 800c104:	4153      	adcs	r3, r2
 800c106:	71cb      	strb	r3, [r1, #7]
}
 800c108:	2000      	movs	r0, #0
 800c10a:	4770      	bx	lr
	switch (parity) {
 800c10c:	2302      	movs	r3, #2
 800c10e:	e7cd      	b.n	800c0ac <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 800c110:	2300      	movs	r3, #0
 800c112:	e7db      	b.n	800c0cc <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 800c114:	2302      	movs	r3, #2
 800c116:	e7d9      	b.n	800c0cc <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_9;
 800c118:	2b00      	cmp	r3, #0
 800c11a:	bf14      	ite	ne
 800c11c:	2303      	movne	r3, #3
 800c11e:	2304      	moveq	r3, #4
 800c120:	e7e7      	b.n	800c0f2 <uart_stm32_config_get+0x68>
			return UART_CFG_DATA_BITS_8;
 800c122:	2b00      	cmp	r3, #0
 800c124:	bf14      	ite	ne
 800c126:	2302      	movne	r3, #2
 800c128:	2303      	moveq	r3, #3
 800c12a:	e7e2      	b.n	800c0f2 <uart_stm32_config_get+0x68>

0800c12c <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 800c12c:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
 800c12e:	6803      	ldr	r3, [r0, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800c130:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
 800c134:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800c136:	7905      	ldrb	r5, [r0, #4]
 800c138:	6804      	ldr	r4, [r0, #0]
 800c13a:	4435      	add	r5, r6
 800c13c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c140:	42a3      	cmp	r3, r4
 800c142:	d902      	bls.n	800c14a <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
 800c144:	f06f 0001 	mvn.w	r0, #1
}
 800c148:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
 800c14a:	795c      	ldrb	r4, [r3, #5]
 800c14c:	428c      	cmp	r4, r1
 800c14e:	d001      	beq.n	800c154 <pinctrl_lookup_state+0x28>
		(*state)++;
 800c150:	3308      	adds	r3, #8
 800c152:	e7ef      	b.n	800c134 <pinctrl_lookup_state+0x8>
			return 0;
 800c154:	2000      	movs	r0, #0
 800c156:	e7f7      	b.n	800c148 <pinctrl_lookup_state+0x1c>

0800c158 <LL_RCC_GetSystemClocksFreq>:
{
 800c158:	b510      	push	{r4, lr}
 800c15a:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c15c:	f7fb f824 	bl	80071a8 <RCC_GetSystemClockFreq>
 800c160:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c162:	f7fa ffe3 	bl	800712c <RCC_GetHCLKClockFreq>
 800c166:	6048      	str	r0, [r1, #4]
 800c168:	4604      	mov	r4, r0
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c16a:	f7fa ffeb 	bl	8007144 <RCC_GetPCLK1ClockFreq>
 800c16e:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c170:	4620      	mov	r0, r4
 800c172:	f7fa fff3 	bl	800715c <RCC_GetPCLK2ClockFreq>
 800c176:	60c8      	str	r0, [r1, #12]
}
 800c178:	bd10      	pop	{r4, pc}

0800c17a <z_device_state_init>:
}
 800c17a:	4770      	bx	lr

0800c17c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800c17c:	b138      	cbz	r0, 800c18e <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800c17e:	68c3      	ldr	r3, [r0, #12]
 800c180:	8818      	ldrh	r0, [r3, #0]
 800c182:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800c186:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800c18a:	4258      	negs	r0, r3
 800c18c:	4158      	adcs	r0, r3
}
 800c18e:	4770      	bx	lr

0800c190 <arch_system_halt>:
	__asm__ volatile(
 800c190:	f04f 0210 	mov.w	r2, #16
 800c194:	f3ef 8311 	mrs	r3, BASEPRI
 800c198:	f382 8812 	msr	BASEPRI_MAX, r2
 800c19c:	f3bf 8f6f 	isb	sy
	for (;;) {
 800c1a0:	e7fe      	b.n	800c1a0 <arch_system_halt+0x10>

0800c1a2 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
 800c1a2:	f000 b8ba 	b.w	800c31a <memset>

0800c1a6 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800c1a6:	f000 b8aa 	b.w	800c2fe <memcpy>

0800c1aa <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1aa:	f3ef 8005 	mrs	r0, IPSR
}
 800c1ae:	3800      	subs	r0, #0
 800c1b0:	bf18      	it	ne
 800c1b2:	2001      	movne	r0, #1
 800c1b4:	4770      	bx	lr

0800c1b6 <z_impl_k_thread_name_set>:
}
 800c1b6:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800c1ba:	4770      	bx	lr

0800c1bc <k_thread_name_get>:
}
 800c1bc:	2000      	movs	r0, #0
 800c1be:	4770      	bx	lr

0800c1c0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 800c1c0:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800c1c4:	428b      	cmp	r3, r1
 800c1c6:	d001      	beq.n	800c1cc <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 800c1c8:	f7fc b9e6 	b.w	8008598 <z_set_prio>
}
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	4770      	bx	lr

0800c1d0 <z_impl_k_mutex_init>:
{
 800c1d0:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800c1d2:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
 800c1d4:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
 800c1d8:	e9c3 3300 	strd	r3, r3, [r3]
}
 800c1dc:	4770      	bx	lr

0800c1de <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800c1de:	b13a      	cbz	r2, 800c1f0 <z_impl_k_sem_init+0x12>
 800c1e0:	428a      	cmp	r2, r1
 800c1e2:	d305      	bcc.n	800c1f0 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 800c1e4:	e9c0 1202 	strd	r1, r2, [r0, #8]
 800c1e8:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	4770      	bx	lr
		return -EINVAL;
 800c1f0:	f06f 0015 	mvn.w	r0, #21
}
 800c1f4:	4770      	bx	lr

0800c1f6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	b920      	cbnz	r0, 800c204 <z_reschedule_irqlock+0xe>
 800c1fa:	f3ef 8205 	mrs	r2, IPSR
 800c1fe:	b90a      	cbnz	r2, 800c204 <z_reschedule_irqlock+0xe>
 800c200:	f7f8 bb6e 	b.w	80048e0 <arch_swap>
	__asm__ volatile(
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
}
 800c20c:	4770      	bx	lr

0800c20e <z_reschedule_unlocked>:
	__asm__ volatile(
 800c20e:	f04f 0310 	mov.w	r3, #16
 800c212:	f3ef 8011 	mrs	r0, BASEPRI
 800c216:	f383 8812 	msr	BASEPRI_MAX, r3
 800c21a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800c21e:	f7ff bfea 	b.w	800c1f6 <z_reschedule_irqlock>

0800c222 <z_impl_k_usleep>:
	ticks = k_us_to_ticks_ceil64(us);
 800c222:	17c1      	asrs	r1, r0, #31
		t += off;
 800c224:	3063      	adds	r0, #99	; 0x63
{
 800c226:	b508      	push	{r3, lr}
			return t / ((uint64_t)from_hz / to_hz);
 800c228:	f04f 0264 	mov.w	r2, #100	; 0x64
 800c22c:	f04f 0300 	mov.w	r3, #0
 800c230:	f141 0100 	adc.w	r1, r1, #0
 800c234:	f7f4 fc98 	bl	8000b68 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 800c238:	17c1      	asrs	r1, r0, #31
 800c23a:	f7fc fc5f 	bl	8008afc <z_tick_sleep>
}
 800c23e:	2364      	movs	r3, #100	; 0x64
 800c240:	4358      	muls	r0, r3
 800c242:	bd08      	pop	{r3, pc}

0800c244 <sys_clock_tick_get_32>:
{
 800c244:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800c246:	f7fd f865 	bl	8009314 <sys_clock_tick_get>
}
 800c24a:	bd08      	pop	{r3, pc}

0800c24c <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 800c24c:	f7fd b862 	b.w	8009314 <sys_clock_tick_get>

0800c250 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800c250:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c254:	bf08      	it	eq
 800c256:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 800c25a:	b538      	push	{r3, r4, r5, lr}
 800c25c:	460c      	mov	r4, r1
 800c25e:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800c260:	d014      	beq.n	800c28c <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800c262:	4308      	orrs	r0, r1
 800c264:	d103      	bne.n	800c26e <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 800c266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
 800c26a:	f7fd b853 	b.w	8009314 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 800c26e:	f06f 0001 	mvn.w	r0, #1
 800c272:	1b40      	subs	r0, r0, r5
 800c274:	f04f 33ff 	mov.w	r3, #4294967295
 800c278:	eb63 0101 	sbc.w	r1, r3, r1
 800c27c:	2900      	cmp	r1, #0
 800c27e:	da04      	bge.n	800c28a <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
 800c280:	f7fd f848 	bl	8009314 <sys_clock_tick_get>
 800c284:	1940      	adds	r0, r0, r5
 800c286:	eb41 0104 	adc.w	r1, r1, r4
}
 800c28a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
 800c28c:	f04f 30ff 	mov.w	r0, #4294967295
 800c290:	4601      	mov	r1, r0
 800c292:	e7fa      	b.n	800c28a <sys_clock_timeout_end_calc+0x3a>

0800c294 <k_timer_init>:
	timer->status = 0U;
 800c294:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 800c296:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 800c29a:	f100 0218 	add.w	r2, r0, #24
 800c29e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 800c2a2:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 800c2a6:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 800c2a8:	6343      	str	r3, [r0, #52]	; 0x34
}
 800c2aa:	4770      	bx	lr

0800c2ac <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800c2ac:	b510      	push	{r4, lr}
 800c2ae:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
 800c2b0:	f7fc fef4 	bl	800909c <z_abort_timeout>

	if (inactive) {
 800c2b4:	b9b0      	cbnz	r0, 800c2e4 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 800c2b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2b8:	b10b      	cbz	r3, 800c2be <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800c2be:	f104 0018 	add.w	r0, r4, #24
 800c2c2:	f7fc fadb 	bl	800887c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800c2c6:	b168      	cbz	r0, 800c2e4 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 800c2c8:	f7fb fd98 	bl	8007dfc <z_ready_thread>
 800c2cc:	f04f 0310 	mov.w	r3, #16
 800c2d0:	f3ef 8011 	mrs	r0, BASEPRI
 800c2d4:	f383 8812 	msr	BASEPRI_MAX, r3
 800c2d8:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 800c2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2e0:	f7ff bf89 	b.w	800c1f6 <z_reschedule_irqlock>
 800c2e4:	bd10      	pop	{r4, pc}

0800c2e6 <k_malloc>:
{
 800c2e6:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
 800c2e8:	2004      	movs	r0, #4
 800c2ea:	f7fd b9a7 	b.w	800963c <k_aligned_alloc>

0800c2ee <k_heap_init>:
{
 800c2ee:	b410      	push	{r4}
 800c2f0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 800c2f4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 800c2f8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 800c2fa:	f7f6 b915 	b.w	8002528 <sys_heap_init>

0800c2fe <memcpy>:
 800c2fe:	440a      	add	r2, r1
 800c300:	4291      	cmp	r1, r2
 800c302:	f100 33ff 	add.w	r3, r0, #4294967295
 800c306:	d100      	bne.n	800c30a <memcpy+0xc>
 800c308:	4770      	bx	lr
 800c30a:	b510      	push	{r4, lr}
 800c30c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c310:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c314:	4291      	cmp	r1, r2
 800c316:	d1f9      	bne.n	800c30c <memcpy+0xe>
 800c318:	bd10      	pop	{r4, pc}

0800c31a <memset>:
 800c31a:	4402      	add	r2, r0
 800c31c:	4603      	mov	r3, r0
 800c31e:	4293      	cmp	r3, r2
 800c320:	d100      	bne.n	800c324 <memset+0xa>
 800c322:	4770      	bx	lr
 800c324:	f803 1b01 	strb.w	r1, [r3], #1
 800c328:	e7f9      	b.n	800c31e <memset+0x4>

0800c32a <__sfputc_r>:
 800c32a:	6893      	ldr	r3, [r2, #8]
 800c32c:	3b01      	subs	r3, #1
 800c32e:	2b00      	cmp	r3, #0
 800c330:	b410      	push	{r4}
 800c332:	6093      	str	r3, [r2, #8]
 800c334:	da07      	bge.n	800c346 <__sfputc_r+0x1c>
 800c336:	6994      	ldr	r4, [r2, #24]
 800c338:	42a3      	cmp	r3, r4
 800c33a:	db01      	blt.n	800c340 <__sfputc_r+0x16>
 800c33c:	290a      	cmp	r1, #10
 800c33e:	d102      	bne.n	800c346 <__sfputc_r+0x1c>
 800c340:	bc10      	pop	{r4}
 800c342:	f7fe b825 	b.w	800a390 <__swbuf_r>
 800c346:	6813      	ldr	r3, [r2, #0]
 800c348:	1c58      	adds	r0, r3, #1
 800c34a:	6010      	str	r0, [r2, #0]
 800c34c:	7019      	strb	r1, [r3, #0]
 800c34e:	4608      	mov	r0, r1
 800c350:	bc10      	pop	{r4}
 800c352:	4770      	bx	lr

0800c354 <__sfputs_r>:
 800c354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c356:	4606      	mov	r6, r0
 800c358:	460f      	mov	r7, r1
 800c35a:	4614      	mov	r4, r2
 800c35c:	18d5      	adds	r5, r2, r3
 800c35e:	42ac      	cmp	r4, r5
 800c360:	d101      	bne.n	800c366 <__sfputs_r+0x12>
 800c362:	2000      	movs	r0, #0
 800c364:	e007      	b.n	800c376 <__sfputs_r+0x22>
 800c366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c36a:	463a      	mov	r2, r7
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7ff ffdc 	bl	800c32a <__sfputc_r>
 800c372:	1c43      	adds	r3, r0, #1
 800c374:	d1f3      	bne.n	800c35e <__sfputs_r+0xa>
 800c376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c378 <__cvt>:
 800c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	b089      	sub	sp, #36	; 0x24
 800c37e:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
 800c382:	2b00      	cmp	r3, #0
 800c384:	461d      	mov	r5, r3
 800c386:	4614      	mov	r4, r2
 800c388:	bfbc      	itt	lt
 800c38a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800c38e:	4614      	movlt	r4, r2
 800c390:	f028 0a20 	bic.w	sl, r8, #32
 800c394:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c396:	bfb6      	itet	lt
 800c398:	461d      	movlt	r5, r3
 800c39a:	2300      	movge	r3, #0
 800c39c:	232d      	movlt	r3, #45	; 0x2d
 800c39e:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
 800c3a2:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
 800c3a6:	7013      	strb	r3, [r2, #0]
 800c3a8:	d005      	beq.n	800c3b6 <__cvt+0x3e>
 800c3aa:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 800c3ae:	d100      	bne.n	800c3b2 <__cvt+0x3a>
 800c3b0:	3601      	adds	r6, #1
 800c3b2:	2302      	movs	r3, #2
 800c3b4:	e000      	b.n	800c3b8 <__cvt+0x40>
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	aa07      	add	r2, sp, #28
 800c3ba:	9204      	str	r2, [sp, #16]
 800c3bc:	aa06      	add	r2, sp, #24
 800c3be:	e9cd 9202 	strd	r9, r2, [sp, #8]
 800c3c2:	e9cd 3600 	strd	r3, r6, [sp]
 800c3c6:	4622      	mov	r2, r4
 800c3c8:	462b      	mov	r3, r5
 800c3ca:	f7f4 fec1 	bl	8001150 <_dtoa_r>
 800c3ce:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800c3d2:	4607      	mov	r7, r0
 800c3d4:	d119      	bne.n	800c40a <__cvt+0x92>
 800c3d6:	f01b 0f01 	tst.w	fp, #1
 800c3da:	d00e      	beq.n	800c3fa <__cvt+0x82>
 800c3dc:	eb07 0806 	add.w	r8, r7, r6
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	f7f4 fc2e 	bl	8000c48 <__aeabi_dcmpeq>
 800c3ec:	b108      	cbz	r0, 800c3f2 <__cvt+0x7a>
 800c3ee:	f8cd 801c 	str.w	r8, [sp, #28]
 800c3f2:	2230      	movs	r2, #48	; 0x30
 800c3f4:	9b07      	ldr	r3, [sp, #28]
 800c3f6:	4543      	cmp	r3, r8
 800c3f8:	d321      	bcc.n	800c43e <__cvt+0xc6>
 800c3fa:	9b07      	ldr	r3, [sp, #28]
 800c3fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c3fe:	1bdb      	subs	r3, r3, r7
 800c400:	4638      	mov	r0, r7
 800c402:	6013      	str	r3, [r2, #0]
 800c404:	b009      	add	sp, #36	; 0x24
 800c406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c40e:	d0e2      	beq.n	800c3d6 <__cvt+0x5e>
 800c410:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
 800c414:	eb00 0806 	add.w	r8, r0, r6
 800c418:	d1e2      	bne.n	800c3e0 <__cvt+0x68>
 800c41a:	7803      	ldrb	r3, [r0, #0]
 800c41c:	2b30      	cmp	r3, #48	; 0x30
 800c41e:	d10a      	bne.n	800c436 <__cvt+0xbe>
 800c420:	2200      	movs	r2, #0
 800c422:	2300      	movs	r3, #0
 800c424:	4620      	mov	r0, r4
 800c426:	4629      	mov	r1, r5
 800c428:	f7f4 fc0e 	bl	8000c48 <__aeabi_dcmpeq>
 800c42c:	b918      	cbnz	r0, 800c436 <__cvt+0xbe>
 800c42e:	f1c6 0601 	rsb	r6, r6, #1
 800c432:	f8c9 6000 	str.w	r6, [r9]
 800c436:	f8d9 3000 	ldr.w	r3, [r9]
 800c43a:	4498      	add	r8, r3
 800c43c:	e7d0      	b.n	800c3e0 <__cvt+0x68>
 800c43e:	1c59      	adds	r1, r3, #1
 800c440:	9107      	str	r1, [sp, #28]
 800c442:	701a      	strb	r2, [r3, #0]
 800c444:	e7d6      	b.n	800c3f4 <__cvt+0x7c>

0800c446 <__exponent>:
 800c446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c448:	2900      	cmp	r1, #0
 800c44a:	bfba      	itte	lt
 800c44c:	4249      	neglt	r1, r1
 800c44e:	232d      	movlt	r3, #45	; 0x2d
 800c450:	232b      	movge	r3, #43	; 0x2b
 800c452:	2909      	cmp	r1, #9
 800c454:	7002      	strb	r2, [r0, #0]
 800c456:	7043      	strb	r3, [r0, #1]
 800c458:	dd29      	ble.n	800c4ae <__exponent+0x68>
 800c45a:	f10d 0307 	add.w	r3, sp, #7
 800c45e:	461d      	mov	r5, r3
 800c460:	270a      	movs	r7, #10
 800c462:	461a      	mov	r2, r3
 800c464:	fbb1 f6f7 	udiv	r6, r1, r7
 800c468:	fb07 1416 	mls	r4, r7, r6, r1
 800c46c:	3430      	adds	r4, #48	; 0x30
 800c46e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c472:	460c      	mov	r4, r1
 800c474:	2c63      	cmp	r4, #99	; 0x63
 800c476:	f103 33ff 	add.w	r3, r3, #4294967295
 800c47a:	4631      	mov	r1, r6
 800c47c:	dcf1      	bgt.n	800c462 <__exponent+0x1c>
 800c47e:	3130      	adds	r1, #48	; 0x30
 800c480:	1e94      	subs	r4, r2, #2
 800c482:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c486:	1c41      	adds	r1, r0, #1
 800c488:	4623      	mov	r3, r4
 800c48a:	42ab      	cmp	r3, r5
 800c48c:	d30a      	bcc.n	800c4a4 <__exponent+0x5e>
 800c48e:	f10d 0309 	add.w	r3, sp, #9
 800c492:	1a9b      	subs	r3, r3, r2
 800c494:	42ac      	cmp	r4, r5
 800c496:	bf88      	it	hi
 800c498:	2300      	movhi	r3, #0
 800c49a:	3302      	adds	r3, #2
 800c49c:	4403      	add	r3, r0
 800c49e:	1a18      	subs	r0, r3, r0
 800c4a0:	b003      	add	sp, #12
 800c4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c4a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c4ac:	e7ed      	b.n	800c48a <__exponent+0x44>
 800c4ae:	2330      	movs	r3, #48	; 0x30
 800c4b0:	3130      	adds	r1, #48	; 0x30
 800c4b2:	7083      	strb	r3, [r0, #2]
 800c4b4:	70c1      	strb	r1, [r0, #3]
 800c4b6:	1d03      	adds	r3, r0, #4
 800c4b8:	e7f1      	b.n	800c49e <__exponent+0x58>

0800c4ba <_printf_common>:
 800c4ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4be:	4616      	mov	r6, r2
 800c4c0:	4698      	mov	r8, r3
 800c4c2:	688a      	ldr	r2, [r1, #8]
 800c4c4:	690b      	ldr	r3, [r1, #16]
 800c4c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	bfb8      	it	lt
 800c4ce:	4613      	movlt	r3, r2
 800c4d0:	6033      	str	r3, [r6, #0]
 800c4d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4d6:	4607      	mov	r7, r0
 800c4d8:	460c      	mov	r4, r1
 800c4da:	b10a      	cbz	r2, 800c4e0 <_printf_common+0x26>
 800c4dc:	3301      	adds	r3, #1
 800c4de:	6033      	str	r3, [r6, #0]
 800c4e0:	6823      	ldr	r3, [r4, #0]
 800c4e2:	0699      	lsls	r1, r3, #26
 800c4e4:	bf42      	ittt	mi
 800c4e6:	6833      	ldrmi	r3, [r6, #0]
 800c4e8:	3302      	addmi	r3, #2
 800c4ea:	6033      	strmi	r3, [r6, #0]
 800c4ec:	6825      	ldr	r5, [r4, #0]
 800c4ee:	f015 0506 	ands.w	r5, r5, #6
 800c4f2:	d106      	bne.n	800c502 <_printf_common+0x48>
 800c4f4:	f104 0a19 	add.w	sl, r4, #25
 800c4f8:	68e3      	ldr	r3, [r4, #12]
 800c4fa:	6832      	ldr	r2, [r6, #0]
 800c4fc:	1a9b      	subs	r3, r3, r2
 800c4fe:	42ab      	cmp	r3, r5
 800c500:	dc26      	bgt.n	800c550 <_printf_common+0x96>
 800c502:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c506:	6822      	ldr	r2, [r4, #0]
 800c508:	3b00      	subs	r3, #0
 800c50a:	bf18      	it	ne
 800c50c:	2301      	movne	r3, #1
 800c50e:	0692      	lsls	r2, r2, #26
 800c510:	d42b      	bmi.n	800c56a <_printf_common+0xb0>
 800c512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c516:	4641      	mov	r1, r8
 800c518:	4638      	mov	r0, r7
 800c51a:	47c8      	blx	r9
 800c51c:	3001      	adds	r0, #1
 800c51e:	d01e      	beq.n	800c55e <_printf_common+0xa4>
 800c520:	6823      	ldr	r3, [r4, #0]
 800c522:	6922      	ldr	r2, [r4, #16]
 800c524:	f003 0306 	and.w	r3, r3, #6
 800c528:	2b04      	cmp	r3, #4
 800c52a:	bf02      	ittt	eq
 800c52c:	68e5      	ldreq	r5, [r4, #12]
 800c52e:	6833      	ldreq	r3, [r6, #0]
 800c530:	1aed      	subeq	r5, r5, r3
 800c532:	68a3      	ldr	r3, [r4, #8]
 800c534:	bf0c      	ite	eq
 800c536:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c53a:	2500      	movne	r5, #0
 800c53c:	4293      	cmp	r3, r2
 800c53e:	bfc4      	itt	gt
 800c540:	1a9b      	subgt	r3, r3, r2
 800c542:	18ed      	addgt	r5, r5, r3
 800c544:	2600      	movs	r6, #0
 800c546:	341a      	adds	r4, #26
 800c548:	42b5      	cmp	r5, r6
 800c54a:	d11a      	bne.n	800c582 <_printf_common+0xc8>
 800c54c:	2000      	movs	r0, #0
 800c54e:	e008      	b.n	800c562 <_printf_common+0xa8>
 800c550:	2301      	movs	r3, #1
 800c552:	4652      	mov	r2, sl
 800c554:	4641      	mov	r1, r8
 800c556:	4638      	mov	r0, r7
 800c558:	47c8      	blx	r9
 800c55a:	3001      	adds	r0, #1
 800c55c:	d103      	bne.n	800c566 <_printf_common+0xac>
 800c55e:	f04f 30ff 	mov.w	r0, #4294967295
 800c562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c566:	3501      	adds	r5, #1
 800c568:	e7c6      	b.n	800c4f8 <_printf_common+0x3e>
 800c56a:	18e1      	adds	r1, r4, r3
 800c56c:	1c5a      	adds	r2, r3, #1
 800c56e:	2030      	movs	r0, #48	; 0x30
 800c570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c574:	4422      	add	r2, r4
 800c576:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c57a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c57e:	3302      	adds	r3, #2
 800c580:	e7c7      	b.n	800c512 <_printf_common+0x58>
 800c582:	2301      	movs	r3, #1
 800c584:	4622      	mov	r2, r4
 800c586:	4641      	mov	r1, r8
 800c588:	4638      	mov	r0, r7
 800c58a:	47c8      	blx	r9
 800c58c:	3001      	adds	r0, #1
 800c58e:	d0e6      	beq.n	800c55e <_printf_common+0xa4>
 800c590:	3601      	adds	r6, #1
 800c592:	e7d9      	b.n	800c548 <_printf_common+0x8e>

0800c594 <__sprintf_chk>:
 800c594:	b408      	push	{r3}
 800c596:	b517      	push	{r0, r1, r2, r4, lr}
 800c598:	ab05      	add	r3, sp, #20
 800c59a:	1e14      	subs	r4, r2, #0
 800c59c:	f853 1b04 	ldr.w	r1, [r3], #4
 800c5a0:	9301      	str	r3, [sp, #4]
 800c5a2:	da07      	bge.n	800c5b4 <__sprintf_chk+0x20>
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	f7fd fee9 	bl	800a37c <vsiprintf>
 800c5aa:	b003      	add	sp, #12
 800c5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5b0:	b001      	add	sp, #4
 800c5b2:	4770      	bx	lr
 800c5b4:	460a      	mov	r2, r1
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	f7fd febc 	bl	800a334 <vsniprintf>
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	dbf4      	blt.n	800c5aa <__sprintf_chk+0x16>
 800c5c0:	42a0      	cmp	r0, r4
 800c5c2:	d3f2      	bcc.n	800c5aa <__sprintf_chk+0x16>
 800c5c4:	f7f8 ffe8 	bl	8005598 <__chk_fail>

0800c5c8 <strncpy>:
 800c5c8:	b510      	push	{r4, lr}
 800c5ca:	3901      	subs	r1, #1
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	b132      	cbz	r2, 800c5de <strncpy+0x16>
 800c5d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c5d4:	f803 4b01 	strb.w	r4, [r3], #1
 800c5d8:	3a01      	subs	r2, #1
 800c5da:	2c00      	cmp	r4, #0
 800c5dc:	d1f7      	bne.n	800c5ce <strncpy+0x6>
 800c5de:	441a      	add	r2, r3
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d100      	bne.n	800c5e8 <strncpy+0x20>
 800c5e6:	bd10      	pop	{r4, pc}
 800c5e8:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ec:	e7f9      	b.n	800c5e2 <strncpy+0x1a>

0800c5ee <strnlen>:
 800c5ee:	b510      	push	{r4, lr}
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	4401      	add	r1, r0
 800c5f4:	428a      	cmp	r2, r1
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	d003      	beq.n	800c602 <strnlen+0x14>
 800c5fa:	781c      	ldrb	r4, [r3, #0]
 800c5fc:	3201      	adds	r2, #1
 800c5fe:	2c00      	cmp	r4, #0
 800c600:	d1f8      	bne.n	800c5f4 <strnlen+0x6>
 800c602:	1a18      	subs	r0, r3, r0
 800c604:	bd10      	pop	{r4, pc}

0800c606 <_vsniprintf_r>:
 800c606:	b530      	push	{r4, r5, lr}
 800c608:	4614      	mov	r4, r2
 800c60a:	2c00      	cmp	r4, #0
 800c60c:	b09b      	sub	sp, #108	; 0x6c
 800c60e:	4605      	mov	r5, r0
 800c610:	461a      	mov	r2, r3
 800c612:	da05      	bge.n	800c620 <_vsniprintf_r+0x1a>
 800c614:	238b      	movs	r3, #139	; 0x8b
 800c616:	6003      	str	r3, [r0, #0]
 800c618:	f04f 30ff 	mov.w	r0, #4294967295
 800c61c:	b01b      	add	sp, #108	; 0x6c
 800c61e:	bd30      	pop	{r4, r5, pc}
 800c620:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c624:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c628:	bf14      	ite	ne
 800c62a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c62e:	4623      	moveq	r3, r4
 800c630:	9302      	str	r3, [sp, #8]
 800c632:	9305      	str	r3, [sp, #20]
 800c634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c638:	9100      	str	r1, [sp, #0]
 800c63a:	9104      	str	r1, [sp, #16]
 800c63c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c640:	4669      	mov	r1, sp
 800c642:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c644:	f7fe fbc6 	bl	800add4 <_svfiprintf_r>
 800c648:	1c43      	adds	r3, r0, #1
 800c64a:	bfbc      	itt	lt
 800c64c:	238b      	movlt	r3, #139	; 0x8b
 800c64e:	602b      	strlt	r3, [r5, #0]
 800c650:	2c00      	cmp	r4, #0
 800c652:	d0e3      	beq.n	800c61c <_vsniprintf_r+0x16>
 800c654:	9b00      	ldr	r3, [sp, #0]
 800c656:	2200      	movs	r2, #0
 800c658:	701a      	strb	r2, [r3, #0]
 800c65a:	e7df      	b.n	800c61c <_vsniprintf_r+0x16>

0800c65c <quorem>:
 800c65c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c660:	6903      	ldr	r3, [r0, #16]
 800c662:	690c      	ldr	r4, [r1, #16]
 800c664:	42a3      	cmp	r3, r4
 800c666:	4607      	mov	r7, r0
 800c668:	db7e      	blt.n	800c768 <quorem+0x10c>
 800c66a:	3c01      	subs	r4, #1
 800c66c:	f101 0814 	add.w	r8, r1, #20
 800c670:	00a3      	lsls	r3, r4, #2
 800c672:	f100 0514 	add.w	r5, r0, #20
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c682:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c686:	3301      	adds	r3, #1
 800c688:	429a      	cmp	r2, r3
 800c68a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c68e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c692:	d32e      	bcc.n	800c6f2 <quorem+0x96>
 800c694:	f04f 0a00 	mov.w	sl, #0
 800c698:	46c4      	mov	ip, r8
 800c69a:	46ae      	mov	lr, r5
 800c69c:	46d3      	mov	fp, sl
 800c69e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c6a2:	b298      	uxth	r0, r3
 800c6a4:	fb06 a000 	mla	r0, r6, r0, sl
 800c6a8:	0c02      	lsrs	r2, r0, #16
 800c6aa:	0c1b      	lsrs	r3, r3, #16
 800c6ac:	fb06 2303 	mla	r3, r6, r3, r2
 800c6b0:	f8de 2000 	ldr.w	r2, [lr]
 800c6b4:	b280      	uxth	r0, r0
 800c6b6:	b292      	uxth	r2, r2
 800c6b8:	1a12      	subs	r2, r2, r0
 800c6ba:	445a      	add	r2, fp
 800c6bc:	f8de 0000 	ldr.w	r0, [lr]
 800c6c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c6ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c6ce:	b292      	uxth	r2, r2
 800c6d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c6d4:	45e1      	cmp	r9, ip
 800c6d6:	f84e 2b04 	str.w	r2, [lr], #4
 800c6da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c6de:	d2de      	bcs.n	800c69e <quorem+0x42>
 800c6e0:	9b00      	ldr	r3, [sp, #0]
 800c6e2:	58eb      	ldr	r3, [r5, r3]
 800c6e4:	b92b      	cbnz	r3, 800c6f2 <quorem+0x96>
 800c6e6:	9b01      	ldr	r3, [sp, #4]
 800c6e8:	3b04      	subs	r3, #4
 800c6ea:	429d      	cmp	r5, r3
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	d32f      	bcc.n	800c750 <quorem+0xf4>
 800c6f0:	613c      	str	r4, [r7, #16]
 800c6f2:	4638      	mov	r0, r7
 800c6f4:	f000 f97e 	bl	800c9f4 <__mcmp>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	db25      	blt.n	800c748 <quorem+0xec>
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	2000      	movs	r0, #0
 800c700:	f858 2b04 	ldr.w	r2, [r8], #4
 800c704:	f8d1 c000 	ldr.w	ip, [r1]
 800c708:	fa1f fe82 	uxth.w	lr, r2
 800c70c:	fa1f f38c 	uxth.w	r3, ip
 800c710:	eba3 030e 	sub.w	r3, r3, lr
 800c714:	4403      	add	r3, r0
 800c716:	0c12      	lsrs	r2, r2, #16
 800c718:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c71c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c720:	b29b      	uxth	r3, r3
 800c722:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c726:	45c1      	cmp	r9, r8
 800c728:	f841 3b04 	str.w	r3, [r1], #4
 800c72c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c730:	d2e6      	bcs.n	800c700 <quorem+0xa4>
 800c732:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c736:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c73a:	b922      	cbnz	r2, 800c746 <quorem+0xea>
 800c73c:	3b04      	subs	r3, #4
 800c73e:	429d      	cmp	r5, r3
 800c740:	461a      	mov	r2, r3
 800c742:	d30b      	bcc.n	800c75c <quorem+0x100>
 800c744:	613c      	str	r4, [r7, #16]
 800c746:	3601      	adds	r6, #1
 800c748:	4630      	mov	r0, r6
 800c74a:	b003      	add	sp, #12
 800c74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c750:	6812      	ldr	r2, [r2, #0]
 800c752:	3b04      	subs	r3, #4
 800c754:	2a00      	cmp	r2, #0
 800c756:	d1cb      	bne.n	800c6f0 <quorem+0x94>
 800c758:	3c01      	subs	r4, #1
 800c75a:	e7c6      	b.n	800c6ea <quorem+0x8e>
 800c75c:	6812      	ldr	r2, [r2, #0]
 800c75e:	3b04      	subs	r3, #4
 800c760:	2a00      	cmp	r2, #0
 800c762:	d1ef      	bne.n	800c744 <quorem+0xe8>
 800c764:	3c01      	subs	r4, #1
 800c766:	e7ea      	b.n	800c73e <quorem+0xe2>
 800c768:	2000      	movs	r0, #0
 800c76a:	e7ee      	b.n	800c74a <quorem+0xee>

0800c76c <__sflush_r>:
 800c76c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c772:	0717      	lsls	r7, r2, #28
 800c774:	4605      	mov	r5, r0
 800c776:	460c      	mov	r4, r1
 800c778:	d456      	bmi.n	800c828 <__sflush_r+0xbc>
 800c77a:	684b      	ldr	r3, [r1, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	dc02      	bgt.n	800c786 <__sflush_r+0x1a>
 800c780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c782:	2b00      	cmp	r3, #0
 800c784:	dd3d      	ble.n	800c802 <__sflush_r+0x96>
 800c786:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c788:	2e00      	cmp	r6, #0
 800c78a:	d03a      	beq.n	800c802 <__sflush_r+0x96>
 800c78c:	2300      	movs	r3, #0
 800c78e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c792:	682f      	ldr	r7, [r5, #0]
 800c794:	6a21      	ldr	r1, [r4, #32]
 800c796:	602b      	str	r3, [r5, #0]
 800c798:	d025      	beq.n	800c7e6 <__sflush_r+0x7a>
 800c79a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c79c:	89a3      	ldrh	r3, [r4, #12]
 800c79e:	0758      	lsls	r0, r3, #29
 800c7a0:	d505      	bpl.n	800c7ae <__sflush_r+0x42>
 800c7a2:	6863      	ldr	r3, [r4, #4]
 800c7a4:	1ad2      	subs	r2, r2, r3
 800c7a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7a8:	b10b      	cbz	r3, 800c7ae <__sflush_r+0x42>
 800c7aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7ac:	1ad2      	subs	r2, r2, r3
 800c7ae:	6a21      	ldr	r1, [r4, #32]
 800c7b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	47b0      	blx	r6
 800c7b8:	1c41      	adds	r1, r0, #1
 800c7ba:	d024      	beq.n	800c806 <__sflush_r+0x9a>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	6063      	str	r3, [r4, #4]
 800c7c0:	6923      	ldr	r3, [r4, #16]
 800c7c2:	6023      	str	r3, [r4, #0]
 800c7c4:	89a3      	ldrh	r3, [r4, #12]
 800c7c6:	04da      	lsls	r2, r3, #19
 800c7c8:	d500      	bpl.n	800c7cc <__sflush_r+0x60>
 800c7ca:	6560      	str	r0, [r4, #84]	; 0x54
 800c7cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7ce:	602f      	str	r7, [r5, #0]
 800c7d0:	b1b9      	cbz	r1, 800c802 <__sflush_r+0x96>
 800c7d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7d6:	4299      	cmp	r1, r3
 800c7d8:	d002      	beq.n	800c7e0 <__sflush_r+0x74>
 800c7da:	4628      	mov	r0, r5
 800c7dc:	f7fd f84e 	bl	800987c <_free_r>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	6363      	str	r3, [r4, #52]	; 0x34
 800c7e4:	e00d      	b.n	800c802 <__sflush_r+0x96>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	47b0      	blx	r6
 800c7ec:	1c46      	adds	r6, r0, #1
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	d1d4      	bne.n	800c79c <__sflush_r+0x30>
 800c7f2:	682b      	ldr	r3, [r5, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d0d1      	beq.n	800c79c <__sflush_r+0x30>
 800c7f8:	2b1d      	cmp	r3, #29
 800c7fa:	d001      	beq.n	800c800 <__sflush_r+0x94>
 800c7fc:	2b16      	cmp	r3, #22
 800c7fe:	d12a      	bne.n	800c856 <__sflush_r+0xea>
 800c800:	602f      	str	r7, [r5, #0]
 800c802:	2000      	movs	r0, #0
 800c804:	e02e      	b.n	800c864 <__sflush_r+0xf8>
 800c806:	682a      	ldr	r2, [r5, #0]
 800c808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80c:	b142      	cbz	r2, 800c820 <__sflush_r+0xb4>
 800c80e:	2a1d      	cmp	r2, #29
 800c810:	d001      	beq.n	800c816 <__sflush_r+0xaa>
 800c812:	2a16      	cmp	r2, #22
 800c814:	d121      	bne.n	800c85a <__sflush_r+0xee>
 800c816:	2300      	movs	r3, #0
 800c818:	6063      	str	r3, [r4, #4]
 800c81a:	6923      	ldr	r3, [r4, #16]
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	e7d5      	b.n	800c7cc <__sflush_r+0x60>
 800c820:	6062      	str	r2, [r4, #4]
 800c822:	6922      	ldr	r2, [r4, #16]
 800c824:	6022      	str	r2, [r4, #0]
 800c826:	e7ce      	b.n	800c7c6 <__sflush_r+0x5a>
 800c828:	690f      	ldr	r7, [r1, #16]
 800c82a:	2f00      	cmp	r7, #0
 800c82c:	d0e9      	beq.n	800c802 <__sflush_r+0x96>
 800c82e:	0793      	lsls	r3, r2, #30
 800c830:	680e      	ldr	r6, [r1, #0]
 800c832:	bf08      	it	eq
 800c834:	694b      	ldreq	r3, [r1, #20]
 800c836:	600f      	str	r7, [r1, #0]
 800c838:	bf18      	it	ne
 800c83a:	2300      	movne	r3, #0
 800c83c:	1bf6      	subs	r6, r6, r7
 800c83e:	608b      	str	r3, [r1, #8]
 800c840:	2e00      	cmp	r6, #0
 800c842:	ddde      	ble.n	800c802 <__sflush_r+0x96>
 800c844:	6a21      	ldr	r1, [r4, #32]
 800c846:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c84a:	4633      	mov	r3, r6
 800c84c:	463a      	mov	r2, r7
 800c84e:	4628      	mov	r0, r5
 800c850:	47e0      	blx	ip
 800c852:	2800      	cmp	r0, #0
 800c854:	dc07      	bgt.n	800c866 <__sflush_r+0xfa>
 800c856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c85e:	81a3      	strh	r3, [r4, #12]
 800c860:	f04f 30ff 	mov.w	r0, #4294967295
 800c864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c866:	4407      	add	r7, r0
 800c868:	1a36      	subs	r6, r6, r0
 800c86a:	e7e9      	b.n	800c840 <__sflush_r+0xd4>

0800c86c <__sfmoreglue>:
 800c86c:	b570      	push	{r4, r5, r6, lr}
 800c86e:	2368      	movs	r3, #104	; 0x68
 800c870:	1e4d      	subs	r5, r1, #1
 800c872:	435d      	muls	r5, r3
 800c874:	460e      	mov	r6, r1
 800c876:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c87a:	f7fd f849 	bl	8009910 <_malloc_r>
 800c87e:	4604      	mov	r4, r0
 800c880:	b140      	cbz	r0, 800c894 <__sfmoreglue+0x28>
 800c882:	2100      	movs	r1, #0
 800c884:	e9c0 1600 	strd	r1, r6, [r0]
 800c888:	300c      	adds	r0, #12
 800c88a:	60a0      	str	r0, [r4, #8]
 800c88c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c890:	f7ff fd43 	bl	800c31a <memset>
 800c894:	4620      	mov	r0, r4
 800c896:	bd70      	pop	{r4, r5, r6, pc}

0800c898 <_fwalk_reent>:
 800c898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c89c:	4606      	mov	r6, r0
 800c89e:	4688      	mov	r8, r1
 800c8a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c8a4:	2700      	movs	r7, #0
 800c8a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8aa:	f1b9 0901 	subs.w	r9, r9, #1
 800c8ae:	d505      	bpl.n	800c8bc <_fwalk_reent+0x24>
 800c8b0:	6824      	ldr	r4, [r4, #0]
 800c8b2:	2c00      	cmp	r4, #0
 800c8b4:	d1f7      	bne.n	800c8a6 <_fwalk_reent+0xe>
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8bc:	89ab      	ldrh	r3, [r5, #12]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d907      	bls.n	800c8d2 <_fwalk_reent+0x3a>
 800c8c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	d003      	beq.n	800c8d2 <_fwalk_reent+0x3a>
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	47c0      	blx	r8
 800c8d0:	4307      	orrs	r7, r0
 800c8d2:	3568      	adds	r5, #104	; 0x68
 800c8d4:	e7e9      	b.n	800c8aa <_fwalk_reent+0x12>

0800c8d6 <__swhatbuf_r>:
 800c8d6:	b570      	push	{r4, r5, r6, lr}
 800c8d8:	460c      	mov	r4, r1
 800c8da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	b096      	sub	sp, #88	; 0x58
 800c8e2:	4615      	mov	r5, r2
 800c8e4:	461e      	mov	r6, r3
 800c8e6:	da0d      	bge.n	800c904 <__swhatbuf_r+0x2e>
 800c8e8:	89a3      	ldrh	r3, [r4, #12]
 800c8ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c8ee:	f04f 0100 	mov.w	r1, #0
 800c8f2:	bf14      	ite	ne
 800c8f4:	2340      	movne	r3, #64	; 0x40
 800c8f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	6031      	str	r1, [r6, #0]
 800c8fe:	602b      	str	r3, [r5, #0]
 800c900:	b016      	add	sp, #88	; 0x58
 800c902:	bd70      	pop	{r4, r5, r6, pc}
 800c904:	466a      	mov	r2, sp
 800c906:	f7fe fba1 	bl	800b04c <_fstat_r>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	dbec      	blt.n	800c8e8 <__swhatbuf_r+0x12>
 800c90e:	9901      	ldr	r1, [sp, #4]
 800c910:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c914:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c918:	4259      	negs	r1, r3
 800c91a:	4159      	adcs	r1, r3
 800c91c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c920:	e7eb      	b.n	800c8fa <__swhatbuf_r+0x24>

0800c922 <memmove>:
 800c922:	4288      	cmp	r0, r1
 800c924:	b510      	push	{r4, lr}
 800c926:	eb01 0402 	add.w	r4, r1, r2
 800c92a:	d902      	bls.n	800c932 <memmove+0x10>
 800c92c:	4284      	cmp	r4, r0
 800c92e:	4623      	mov	r3, r4
 800c930:	d807      	bhi.n	800c942 <memmove+0x20>
 800c932:	1e43      	subs	r3, r0, #1
 800c934:	42a1      	cmp	r1, r4
 800c936:	d008      	beq.n	800c94a <memmove+0x28>
 800c938:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c93c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c940:	e7f8      	b.n	800c934 <memmove+0x12>
 800c942:	4402      	add	r2, r0
 800c944:	4601      	mov	r1, r0
 800c946:	428a      	cmp	r2, r1
 800c948:	d100      	bne.n	800c94c <memmove+0x2a>
 800c94a:	bd10      	pop	{r4, pc}
 800c94c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c950:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c954:	e7f7      	b.n	800c946 <memmove+0x24>

0800c956 <__hi0bits>:
 800c956:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800c95a:	4603      	mov	r3, r0
 800c95c:	bf36      	itet	cc
 800c95e:	0403      	lslcc	r3, r0, #16
 800c960:	2000      	movcs	r0, #0
 800c962:	2010      	movcc	r0, #16
 800c964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c968:	bf3c      	itt	cc
 800c96a:	021b      	lslcc	r3, r3, #8
 800c96c:	3008      	addcc	r0, #8
 800c96e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c972:	bf3c      	itt	cc
 800c974:	011b      	lslcc	r3, r3, #4
 800c976:	3004      	addcc	r0, #4
 800c978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c97c:	d303      	bcc.n	800c986 <__hi0bits+0x30>
 800c97e:	2b00      	cmp	r3, #0
 800c980:	db0a      	blt.n	800c998 <__hi0bits+0x42>
 800c982:	3001      	adds	r0, #1
 800c984:	4770      	bx	lr
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	d501      	bpl.n	800c98e <__hi0bits+0x38>
 800c98a:	3002      	adds	r0, #2
 800c98c:	4770      	bx	lr
 800c98e:	005b      	lsls	r3, r3, #1
 800c990:	d501      	bpl.n	800c996 <__hi0bits+0x40>
 800c992:	3003      	adds	r0, #3
 800c994:	4770      	bx	lr
 800c996:	2020      	movs	r0, #32
 800c998:	4770      	bx	lr

0800c99a <__lo0bits>:
 800c99a:	6803      	ldr	r3, [r0, #0]
 800c99c:	4602      	mov	r2, r0
 800c99e:	f013 0007 	ands.w	r0, r3, #7
 800c9a2:	d00b      	beq.n	800c9bc <__lo0bits+0x22>
 800c9a4:	07d9      	lsls	r1, r3, #31
 800c9a6:	d421      	bmi.n	800c9ec <__lo0bits+0x52>
 800c9a8:	0798      	lsls	r0, r3, #30
 800c9aa:	bf49      	itett	mi
 800c9ac:	085b      	lsrmi	r3, r3, #1
 800c9ae:	089b      	lsrpl	r3, r3, #2
 800c9b0:	2001      	movmi	r0, #1
 800c9b2:	6013      	strmi	r3, [r2, #0]
 800c9b4:	bf5c      	itt	pl
 800c9b6:	6013      	strpl	r3, [r2, #0]
 800c9b8:	2002      	movpl	r0, #2
 800c9ba:	4770      	bx	lr
 800c9bc:	b299      	uxth	r1, r3
 800c9be:	b909      	cbnz	r1, 800c9c4 <__lo0bits+0x2a>
 800c9c0:	0c1b      	lsrs	r3, r3, #16
 800c9c2:	2010      	movs	r0, #16
 800c9c4:	b2d9      	uxtb	r1, r3
 800c9c6:	b909      	cbnz	r1, 800c9cc <__lo0bits+0x32>
 800c9c8:	3008      	adds	r0, #8
 800c9ca:	0a1b      	lsrs	r3, r3, #8
 800c9cc:	0719      	lsls	r1, r3, #28
 800c9ce:	bf04      	itt	eq
 800c9d0:	091b      	lsreq	r3, r3, #4
 800c9d2:	3004      	addeq	r0, #4
 800c9d4:	0799      	lsls	r1, r3, #30
 800c9d6:	bf04      	itt	eq
 800c9d8:	089b      	lsreq	r3, r3, #2
 800c9da:	3002      	addeq	r0, #2
 800c9dc:	07d9      	lsls	r1, r3, #31
 800c9de:	d403      	bmi.n	800c9e8 <__lo0bits+0x4e>
 800c9e0:	085b      	lsrs	r3, r3, #1
 800c9e2:	f100 0001 	add.w	r0, r0, #1
 800c9e6:	d003      	beq.n	800c9f0 <__lo0bits+0x56>
 800c9e8:	6013      	str	r3, [r2, #0]
 800c9ea:	4770      	bx	lr
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	4770      	bx	lr
 800c9f0:	2020      	movs	r0, #32
 800c9f2:	4770      	bx	lr

0800c9f4 <__mcmp>:
 800c9f4:	690a      	ldr	r2, [r1, #16]
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	6900      	ldr	r0, [r0, #16]
 800c9fa:	1a80      	subs	r0, r0, r2
 800c9fc:	b530      	push	{r4, r5, lr}
 800c9fe:	d10e      	bne.n	800ca1e <__mcmp+0x2a>
 800ca00:	3314      	adds	r3, #20
 800ca02:	3114      	adds	r1, #20
 800ca04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca14:	4295      	cmp	r5, r2
 800ca16:	d003      	beq.n	800ca20 <__mcmp+0x2c>
 800ca18:	d205      	bcs.n	800ca26 <__mcmp+0x32>
 800ca1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca1e:	bd30      	pop	{r4, r5, pc}
 800ca20:	42a3      	cmp	r3, r4
 800ca22:	d3f3      	bcc.n	800ca0c <__mcmp+0x18>
 800ca24:	e7fb      	b.n	800ca1e <__mcmp+0x2a>
 800ca26:	2001      	movs	r0, #1
 800ca28:	e7f9      	b.n	800ca1e <__mcmp+0x2a>

0800ca2a <_calloc_r>:
 800ca2a:	b538      	push	{r3, r4, r5, lr}
 800ca2c:	fb02 f501 	mul.w	r5, r2, r1
 800ca30:	4629      	mov	r1, r5
 800ca32:	f7fc ff6d 	bl	8009910 <_malloc_r>
 800ca36:	4604      	mov	r4, r0
 800ca38:	b118      	cbz	r0, 800ca42 <_calloc_r+0x18>
 800ca3a:	462a      	mov	r2, r5
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	f7ff fc6c 	bl	800c31a <memset>
 800ca42:	4620      	mov	r0, r4
 800ca44:	bd38      	pop	{r3, r4, r5, pc}

0800ca46 <_realloc_r>:
 800ca46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca48:	4607      	mov	r7, r0
 800ca4a:	4615      	mov	r5, r2
 800ca4c:	460c      	mov	r4, r1
 800ca4e:	b921      	cbnz	r1, 800ca5a <_realloc_r+0x14>
 800ca50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ca54:	4611      	mov	r1, r2
 800ca56:	f7fc bf5b 	b.w	8009910 <_malloc_r>
 800ca5a:	b922      	cbnz	r2, 800ca66 <_realloc_r+0x20>
 800ca5c:	f7fc ff0e 	bl	800987c <_free_r>
 800ca60:	2400      	movs	r4, #0
 800ca62:	4620      	mov	r0, r4
 800ca64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca66:	f000 f8c3 	bl	800cbf0 <_malloc_usable_size_r>
 800ca6a:	42a8      	cmp	r0, r5
 800ca6c:	d2f9      	bcs.n	800ca62 <_realloc_r+0x1c>
 800ca6e:	4629      	mov	r1, r5
 800ca70:	4638      	mov	r0, r7
 800ca72:	f7fc ff4d 	bl	8009910 <_malloc_r>
 800ca76:	4606      	mov	r6, r0
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d0f1      	beq.n	800ca60 <_realloc_r+0x1a>
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	462a      	mov	r2, r5
 800ca80:	f7ff fc3d 	bl	800c2fe <memcpy>
 800ca84:	4621      	mov	r1, r4
 800ca86:	4638      	mov	r0, r7
 800ca88:	f7fc fef8 	bl	800987c <_free_r>
 800ca8c:	4634      	mov	r4, r6
 800ca8e:	e7e8      	b.n	800ca62 <_realloc_r+0x1c>

0800ca90 <__ssputs_r>:
 800ca90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca94:	688e      	ldr	r6, [r1, #8]
 800ca96:	461f      	mov	r7, r3
 800ca98:	42be      	cmp	r6, r7
 800ca9a:	680b      	ldr	r3, [r1, #0]
 800ca9c:	4682      	mov	sl, r0
 800ca9e:	460c      	mov	r4, r1
 800caa0:	4690      	mov	r8, r2
 800caa2:	d82d      	bhi.n	800cb00 <__ssputs_r+0x70>
 800caa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800caa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800caac:	d026      	beq.n	800cafc <__ssputs_r+0x6c>
 800caae:	6965      	ldr	r5, [r4, #20]
 800cab0:	6909      	ldr	r1, [r1, #16]
 800cab2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cab6:	eba3 0901 	sub.w	r9, r3, r1
 800caba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cabe:	1c7b      	adds	r3, r7, #1
 800cac0:	444b      	add	r3, r9
 800cac2:	106d      	asrs	r5, r5, #1
 800cac4:	429d      	cmp	r5, r3
 800cac6:	bf38      	it	cc
 800cac8:	461d      	movcc	r5, r3
 800caca:	0553      	lsls	r3, r2, #21
 800cacc:	d527      	bpl.n	800cb1e <__ssputs_r+0x8e>
 800cace:	4629      	mov	r1, r5
 800cad0:	f7fc ff1e 	bl	8009910 <_malloc_r>
 800cad4:	4606      	mov	r6, r0
 800cad6:	b360      	cbz	r0, 800cb32 <__ssputs_r+0xa2>
 800cad8:	6921      	ldr	r1, [r4, #16]
 800cada:	464a      	mov	r2, r9
 800cadc:	f7ff fc0f 	bl	800c2fe <memcpy>
 800cae0:	89a3      	ldrh	r3, [r4, #12]
 800cae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caea:	81a3      	strh	r3, [r4, #12]
 800caec:	6126      	str	r6, [r4, #16]
 800caee:	6165      	str	r5, [r4, #20]
 800caf0:	444e      	add	r6, r9
 800caf2:	eba5 0509 	sub.w	r5, r5, r9
 800caf6:	6026      	str	r6, [r4, #0]
 800caf8:	60a5      	str	r5, [r4, #8]
 800cafa:	463e      	mov	r6, r7
 800cafc:	42be      	cmp	r6, r7
 800cafe:	d900      	bls.n	800cb02 <__ssputs_r+0x72>
 800cb00:	463e      	mov	r6, r7
 800cb02:	6820      	ldr	r0, [r4, #0]
 800cb04:	4632      	mov	r2, r6
 800cb06:	4641      	mov	r1, r8
 800cb08:	f7ff ff0b 	bl	800c922 <memmove>
 800cb0c:	68a3      	ldr	r3, [r4, #8]
 800cb0e:	1b9b      	subs	r3, r3, r6
 800cb10:	60a3      	str	r3, [r4, #8]
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	4433      	add	r3, r6
 800cb16:	6023      	str	r3, [r4, #0]
 800cb18:	2000      	movs	r0, #0
 800cb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb1e:	462a      	mov	r2, r5
 800cb20:	f7ff ff91 	bl	800ca46 <_realloc_r>
 800cb24:	4606      	mov	r6, r0
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d1e0      	bne.n	800caec <__ssputs_r+0x5c>
 800cb2a:	6921      	ldr	r1, [r4, #16]
 800cb2c:	4650      	mov	r0, sl
 800cb2e:	f7fc fea5 	bl	800987c <_free_r>
 800cb32:	230c      	movs	r3, #12
 800cb34:	f8ca 3000 	str.w	r3, [sl]
 800cb38:	89a3      	ldrh	r3, [r4, #12]
 800cb3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb3e:	81a3      	strh	r3, [r4, #12]
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295
 800cb44:	e7e9      	b.n	800cb1a <__ssputs_r+0x8a>

0800cb46 <__sread>:
 800cb46:	b510      	push	{r4, lr}
 800cb48:	460c      	mov	r4, r1
 800cb4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb4e:	f7fe fab1 	bl	800b0b4 <_read_r>
 800cb52:	2800      	cmp	r0, #0
 800cb54:	bfab      	itete	ge
 800cb56:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb58:	89a3      	ldrhlt	r3, [r4, #12]
 800cb5a:	181b      	addge	r3, r3, r0
 800cb5c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb60:	bfac      	ite	ge
 800cb62:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb64:	81a3      	strhlt	r3, [r4, #12]
 800cb66:	bd10      	pop	{r4, pc}

0800cb68 <__swrite>:
 800cb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6c:	461f      	mov	r7, r3
 800cb6e:	898b      	ldrh	r3, [r1, #12]
 800cb70:	05db      	lsls	r3, r3, #23
 800cb72:	4605      	mov	r5, r0
 800cb74:	460c      	mov	r4, r1
 800cb76:	4616      	mov	r6, r2
 800cb78:	d505      	bpl.n	800cb86 <__swrite+0x1e>
 800cb7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb7e:	2302      	movs	r3, #2
 800cb80:	2200      	movs	r2, #0
 800cb82:	f7fe fa85 	bl	800b090 <_lseek_r>
 800cb86:	89a3      	ldrh	r3, [r4, #12]
 800cb88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb90:	81a3      	strh	r3, [r4, #12]
 800cb92:	4632      	mov	r2, r6
 800cb94:	463b      	mov	r3, r7
 800cb96:	4628      	mov	r0, r5
 800cb98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9c:	f7fe ba16 	b.w	800afcc <_write_r>

0800cba0 <__sseek>:
 800cba0:	b510      	push	{r4, lr}
 800cba2:	460c      	mov	r4, r1
 800cba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cba8:	f7fe fa72 	bl	800b090 <_lseek_r>
 800cbac:	1c43      	adds	r3, r0, #1
 800cbae:	89a3      	ldrh	r3, [r4, #12]
 800cbb0:	bf15      	itete	ne
 800cbb2:	6560      	strne	r0, [r4, #84]	; 0x54
 800cbb4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cbb8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cbbc:	81a3      	strheq	r3, [r4, #12]
 800cbbe:	bf18      	it	ne
 800cbc0:	81a3      	strhne	r3, [r4, #12]
 800cbc2:	bd10      	pop	{r4, pc}

0800cbc4 <__sclose>:
 800cbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc8:	f7fe ba30 	b.w	800b02c <_close_r>

0800cbcc <__ascii_mbtowc>:
 800cbcc:	b082      	sub	sp, #8
 800cbce:	b901      	cbnz	r1, 800cbd2 <__ascii_mbtowc+0x6>
 800cbd0:	a901      	add	r1, sp, #4
 800cbd2:	b142      	cbz	r2, 800cbe6 <__ascii_mbtowc+0x1a>
 800cbd4:	b14b      	cbz	r3, 800cbea <__ascii_mbtowc+0x1e>
 800cbd6:	7813      	ldrb	r3, [r2, #0]
 800cbd8:	600b      	str	r3, [r1, #0]
 800cbda:	7812      	ldrb	r2, [r2, #0]
 800cbdc:	1e10      	subs	r0, r2, #0
 800cbde:	bf18      	it	ne
 800cbe0:	2001      	movne	r0, #1
 800cbe2:	b002      	add	sp, #8
 800cbe4:	4770      	bx	lr
 800cbe6:	4610      	mov	r0, r2
 800cbe8:	e7fb      	b.n	800cbe2 <__ascii_mbtowc+0x16>
 800cbea:	f06f 0001 	mvn.w	r0, #1
 800cbee:	e7f8      	b.n	800cbe2 <__ascii_mbtowc+0x16>

0800cbf0 <_malloc_usable_size_r>:
 800cbf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbf4:	1f18      	subs	r0, r3, #4
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	bfbc      	itt	lt
 800cbfa:	580b      	ldrlt	r3, [r1, r0]
 800cbfc:	18c0      	addlt	r0, r0, r3
 800cbfe:	4770      	bx	lr

0800cc00 <__ascii_wctomb>:
 800cc00:	4603      	mov	r3, r0
 800cc02:	4608      	mov	r0, r1
 800cc04:	b141      	cbz	r1, 800cc18 <__ascii_wctomb+0x18>
 800cc06:	2aff      	cmp	r2, #255	; 0xff
 800cc08:	d904      	bls.n	800cc14 <__ascii_wctomb+0x14>
 800cc0a:	228a      	movs	r2, #138	; 0x8a
 800cc0c:	601a      	str	r2, [r3, #0]
 800cc0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc12:	4770      	bx	lr
 800cc14:	700a      	strb	r2, [r1, #0]
 800cc16:	2001      	movs	r0, #1
 800cc18:	4770      	bx	lr

0800cc1a <abort>:
 800cc1a:	b508      	push	{r3, lr}
 800cc1c:	2006      	movs	r0, #6
 800cc1e:	f7fe fa5b 	bl	800b0d8 <raise>
 800cc22:	2001      	movs	r0, #1
 800cc24:	f7f8 fc38 	bl	8005498 <_exit>

0800cc28 <_raise_r>:
 800cc28:	291f      	cmp	r1, #31
 800cc2a:	b538      	push	{r3, r4, r5, lr}
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	460c      	mov	r4, r1
 800cc30:	d904      	bls.n	800cc3c <_raise_r+0x14>
 800cc32:	2316      	movs	r3, #22
 800cc34:	6003      	str	r3, [r0, #0]
 800cc36:	f04f 30ff 	mov.w	r0, #4294967295
 800cc3a:	bd38      	pop	{r3, r4, r5, pc}
 800cc3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc3e:	b112      	cbz	r2, 800cc46 <_raise_r+0x1e>
 800cc40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc44:	b94b      	cbnz	r3, 800cc5a <_raise_r+0x32>
 800cc46:	4628      	mov	r0, r5
 800cc48:	f000 f816 	bl	800cc78 <_getpid_r>
 800cc4c:	4622      	mov	r2, r4
 800cc4e:	4601      	mov	r1, r0
 800cc50:	4628      	mov	r0, r5
 800cc52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc56:	f7fe ba47 	b.w	800b0e8 <_kill_r>
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d00a      	beq.n	800cc74 <_raise_r+0x4c>
 800cc5e:	1c59      	adds	r1, r3, #1
 800cc60:	d103      	bne.n	800cc6a <_raise_r+0x42>
 800cc62:	2316      	movs	r3, #22
 800cc64:	6003      	str	r3, [r0, #0]
 800cc66:	2001      	movs	r0, #1
 800cc68:	e7e7      	b.n	800cc3a <_raise_r+0x12>
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc70:	4620      	mov	r0, r4
 800cc72:	4798      	blx	r3
 800cc74:	2000      	movs	r0, #0
 800cc76:	e7e0      	b.n	800cc3a <_raise_r+0x12>

0800cc78 <_getpid_r>:
 800cc78:	f7fe bd3c 	b.w	800b6f4 <_getpid>
